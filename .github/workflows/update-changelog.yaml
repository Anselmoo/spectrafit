name: CI - Update Changelog

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  Changelog-Update:
    if: ${{ contains(github.event.release.prerelease, false) }}
    name: Update Changelog
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # updated CHANGELOG back to the repository.
      # https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ github.event.release.body }}
          latest-version: ${{ github.event.release.name }}
      - name: Commit updated CHANGELOG
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: release/${{ github.event.release.tag_name }}
          commit_message: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
          file_pattern: CHANGELOG.md
          create_branch: true
  # Changelog-Pull-Request:
  #   if: ${{ contains(github.event.release.prerelease, false) }}
  #   name: Open Pull Request for updated CHANGELOG
  #   needs: Changelog-Update
  #   runs-on: ubuntu-latest
  #   permissions:
  #     # Give the default GITHUB_TOKEN write permission to commit and push the
  #     # updated CHANGELOG back to the repository.
  #     # https://github.blog/changelog/2023-02-02-github-actions-updating-the-default-github_token-permissions-to-read-only/
  #     contents: write
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Open Pull Request for updated CHANGELOG
  #       uses: peter-evans/create-pull-request@v5
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         commit-message: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
  #         title: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
  #         body: "This Pull Request was automatically created to update the CHANGELOG for release/${{ github.event.release.tag_name }}."
  #         draft: false
  #         base: release/${{ github.event.release.tag_name }}
  #         branch: main
  Release-Documentation:
    if: ${{ contains(github.event.release.prerelease, false) }}
    name: Build Documentation from new release branch 'release/${{ github.event.release.tag_name }}'
    needs: Changelog-Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release/${{ github.event.release.tag_name }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry and dependencies with doc-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .venv
          poetry install --no-interaction --with docs --all-extras
      - name: Install library
        run: poetry install --no-interaction --with docs --all-extras
      - name: Set git config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Fetch tags
        run: git fetch --tags --prune
      - name: Get previous tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git rev-list --tags --skip=1 --max-count=1)"
      - name: Get latest tag
        id: latest_tag
        run: echo "::set-output name=latest_tag::$(git rev-list --tags --max-count=1)"
      - name: Determine previous release
        id: previous_release
        run: echo "::set-output name=previous_tag::$(git describe --tags --abbrev=0)"
      - name: Determine current release
        id: current_release
        run: echo "::set-output name=current_tag::${GITHUB_REF#refs/tags/}"
      - name: Check if minor release
        id: is_minor_release
        run: |
          if [[ "${{ steps.current_release.outputs.current_tag }}" =~ $(echo "${{ steps.previous_release.outputs.previous_tag }}" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+)$/'"v\1.\2"'/') ]] || [[ "${{ steps.current_release.outputs.current_tag }}" =~ $(echo "${{ steps.previous_release.outputs.previous_tag }}" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([12]|[1-9][0-9]*)$/'"v\1.\2.\3"'/') ]]; then
          poetry run mike delete --version ${{ steps.previous_release.outputs.previous_tag }}
          fi
      - name: Deploy documentation develops
        run: |
          poetry run mike deploy --push --rebase --update-aliases ${{ github.event.release.tag_name }} latest --message "Release ${{ github.event.release.tag_name }}"
          poetry run mike set-default --push --rebase lates
