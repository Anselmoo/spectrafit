name: "Update Changelog"

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  Changelog-Update:
    if: ${{ contains(github.event.release.prerelease, false) }}
    name: Update Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update Changelog
        uses: stefanzweifel/changelog-updater-action@v1
        with:
          release-notes: ${{ github.event.release.body }}
          latest-version: ${{ github.event.release.name }}
      - name: Commit updated CHANGELOG
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: release/${{ github.event.release.tag_name }}
          commit_message: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
          file_pattern: CHANGELOG.md
          create_branch: true
      - name: Open Pull Request for updated CHANGELOG
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
          title: "docs: :card_index_dividers: Update CHANGELOG for release/${{ github.event.release.tag_name }}"
          body: "This Pull Request was automatically created to update the CHANGELOG for release/${{ github.event.release.tag_name }}."
          draft: false
          branch: main
          base: release/${{ github.event.release.tag_name }}
  Release-Documentation:
    if: ${{ contains(github.event.release.prerelease, false) }}
    name: Build Documentation from new release branch 'release/${{ github.event.release.tag_name }}'
    needs: Changelog-Update
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: release/${{ github.event.release.tag_name }}
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install Poetry and dependencies with doc-dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config virtualenvs.path .venv
          poetry install --no-interaction --with docs --all-extras
      - name: Install library
        run: poetry install --no-interaction --with docs --all-extras
      - name: Set git config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Fetch tags
        run: git fetch --tags --prune
      - name: Get previous tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git rev-list --tags --skip=1 --max-count=1)"
      - name: Get latest tag
        id: latest_tag
        run: echo "::set-output name=latest_tag::$(git rev-list --tags --max-count=1)"
      - name: Check if release is minor
        id: is_minor
        run: |
          current_tag=${{ github.event.release.tag_name }}
          prev_tag=${{ steps.prev_tag.outputs.prev_tag }}
          latest_tag=$(git describe --tags --abbrev=0 ${{ steps.latest_tag.outputs.latest_tag }})
          if [[ $current_tag =~ ^${latest_tag%.*}\.[0-9]+$ && $prev_tag =~ ^${latest_tag%.*}\.[0-9]+\.[0-9]+$ ]]; then
            echo "::set-output name=is_minor::true"
          else
            echo "::set-output name=is_minor::false"
          fi
      - name: Delete previous documentation
        if: steps.is_minor.outputs.is_minor == 'true'
        run: poetry run mike delete --version ${{ steps.prev_tag.outputs.prev_tag }}
      - name: Deploy documentation develops
        run: |
          poetry run mike deploy --push --rebase --update-aliases ${{ github.event.release.tag_name }} latest --message "Release ${{ github.event.release.tag_name }}"
          poetry run mike set-default --push --rebase latest
