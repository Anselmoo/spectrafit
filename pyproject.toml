[tool.poetry]
name = "SpectraFit"
version = "0.12.3"
description = "Fast fitting of 2D-Spectra with established routines"
readme = "README.md"
authors = ["Anselm Hahn <anselm.hahn@gmail.com>"]
maintainers = ["Anselm Hahn <anselm.hahn@gmail.com>"]
license = "BSD-3-Clause"
repository = "https://github.com/Anselmoo/spectrafit"
documentation = "https://anselmoo.github.io/spectrafit/"
homepage = "https://pypi.org/project/spectrafit/"
keywords = [
  "2D-Spectra",
  "3D-Spectra",
  "fitting",
  "curve-fitting",
  "peak-fitting",
  "spectrum",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Environment :: Console",
  "Framework :: Matplotlib",
  "Framework :: Jupyter :: JupyterLab",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Information Analysis",
]
include = [
  { path = "spectrafit/test/", format = "sdist" },
  { path = "examples/", format = "sdist" },
]
exclude = ["docs/", "tools/"]

  [tool.poetry.dependencies]
  python = ">=3.7.2,<3.11"
  lmfit = "^1.0.3"
  pandas = [
    { version = "1.3.5", python = "<3.8" },
    { version = "^1.5.0", python = ">=3.8" },
  ]
  numpy = [
    { version = "1.21.6", python = "<3.8" },
    { version = "^1.23.4", python = ">=3.8" },
  ]
  emcee = "^3.1.2"
  tabulate = ">=0.8.10,<0.10.0"
  PyYAML = "^6.0"
  openpyxl = "^3.0.9"
  seaborn = ">=0.11.2,<0.13.0"
  numdifftools = "^0.9.39"
  tqdm = "^4.64.0"
  scikit-learn = "^1.0.2"
  art = "^5.7"
  pydantic = "^1.10.1"
  jupyterlab = { version = "^3.4.5", optional = true }
  plotly = { version = "^5.11.0", optional = true }
  itables = { version = "^1.3.0", optional = true }
  kaleido = { version = "0.2.1", optional = true }
  dtale = { version = "^2.8.1", optional = true }
  tomli = "^2.0.1"
  tomli-w = "^1.0.0"

  [tool.poetry.group.dev.dependencies]
  pylama = "^8.4.1"
  pylint = "^2.15.0"
  mypy = "^0.971"
  black = { extras = ["jupyter"], version = "^22.8.0" }
  blacken-docs = "^1.12.1"
  isort = "^5.10.1"
  pre-commit = "^2.20.0"
  pytest = "^7.1.3"
  pytest-clarity = "^1.0.1"
  pytest-cov = "^3.0.0"
  pytest-console-scripts = "^1.3.1"
  pytest-xdist = "^2.5.0"
  pytest-plt = "^1.1.0"
  types-toml = "^0.10.8"
  types-PyYAML = "^6.0.11"
  types-tabulate = "^0.8.11"
  types-mock = "^4.0.15"
  pytest-mock = "^3.10.0"

  [tool.poetry.group.docs.dependencies]
  mkdocs-jupyter = "^0.21.0"
  mkdocstrings = { extras = ["python"], version = "^0.19.0" }
  mkdocs-material = "^8.4.2"
  mkdocs-minify-plugin = "^0.5.0"
  mathjax = "^0.1.2"
  mkdocs-literate-nav = "^0.4.1"
  mkdocs-section-index = "^0.3.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
spectrafit = "spectrafit.spectrafit:command_line_runner"
spectrafit-converter = "spectrafit.plugins.converter:command_line_runner"
spectrafit-jupyter = "spectrafit.app.app:jupyter"

[tool.poetry.extras]
jupyter = ["jupyterlab", "plotly", "itables", "kaleido", "dtale", "dash"]

[tool.isort]
profile = "black"
force_single_line = true
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
src_paths = ["poetry", "tests"]
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = "poetry"

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | test
  | tests/.*/setup.py
)/
'''

[tool.flake8]
max-doc-length = 100
max-line-length = 88
ignore = ["E203", "W503", "W605"]

[tool.pytest]
script_launch_mode = "subprocess"
  [tool.pytest.ini_options]
  minversion = "7.0"
  addopts = "--cov=spectrafit/ --cov-report=xml -ra -q"
  testpaths = ["spectrafit"]

[tool.pydocstyle]
match = '.*\.py'
convention = "google"


[tool.mypy]
plugins = ["pydantic.mypy", "numpy.typing.mypy_plugin"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
pretty = true
show_error_context = true
show_error_codes = true
exclude = "**/test/test_*.py"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
