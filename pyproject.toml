[tool.poetry]
name = "SpectraFit"
version = "1.1.0"
description = "Fast fitting of 2D- and 3D-Spectra with established routines"
readme = "README.md"
authors = ["Anselm Hahn <anselm.hahn@gmail.com>"]
maintainers = ["Anselm Hahn <anselm.hahn@gmail.com>"]
license = "BSD-3-Clause"
repository = "https://github.com/Anselmoo/spectrafit"
documentation = "https://anselmoo.github.io/spectrafit/"
homepage = "https://pypi.org/project/spectrafit/"
keywords = [
  "2D-Spectra",
  "3D-Spectra",
  "fitting",
  "curve-fitting",
  "peak-fitting",
  "spectrum",
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Environment :: Console",
  "Framework :: Matplotlib",
  "Framework :: Jupyter :: JupyterLab",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  # "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Information Analysis",
]
include = [
  # { path = "spectrafit/test/", format = "sdist" },
  { path = "examples/", format = "sdist" },
  { path = "spectrafit/plugins/img/SpectraFit.png", format = "sdist" },
]
exclude = ["docs/", "tools/", "spectrafit/test/", "spectrafit/**/test/"]


[tool.poetry.dependencies]
python = ">=3.8,<3.13"
lmfit = "^1.2.2"
pandas = [
  { version = "<2.2.1", markers = "python_version < '3.9'" },
  { version = "^2.2.2", markers = "python_version >= '3.9'" },
]
numpy = [
  { version = "<1.26.4", markers = "python_version < '3.9'" },
  { version = "^1.26.4", markers = "python_version >= '3.9'" },
]
emcee = "^3.1.2"
tabulate = "^0.9.0"
PyYAML = "^6.0"
openpyxl = "^3.0.9"
seaborn = "^0.13.0"
numdifftools = "^0.9.41"
tqdm = "^4.64.0"
scikit-learn = [
  { version = "<1.5.0", markers = "python_version < '3.9'" },
  { version = "^1.5.0", markers = "python_version >= '3.9'" },
]
art = ">=5.8,<7.0"
tomli = "^2.0.1"
tomli-w = "^1.0.0"
pydantic = "^2.7.0"
scipy = [
  { version = "^1.10.1", markers = "python_version < '3.9'" },
  { version = "^1.13.0", markers = "python_version >= '3.9'" },
]
jupyterlab = { version = ">=3.5.2,<5.0.0", optional = true }
plotly = { version = "^5.21.0", optional = true }
itables = { version = "^2.1.1", optional = true }
kaleido = [
  { version = "^0.2.1", markers = "python_version < '3.9'" },
  { version = "^0.4.1", markers = "python_version >= '3.9'" },
]
dtale = { version = "^3.9.0", optional = true }
networkx = { extras = ["all"], version = "^3.0", optional = true }
pydot = { version = "^3.0.0", optional = true }
jupyter-dash = { version = "^0.4.2", optional = true }
ipywidgets = { version = "^8.0.4", optional = true }
dash-bootstrap-components = { version = "^1.3.0", optional = true }
dash-bootstrap-templates = [
  { version = "<=1.1.2", markers = "python_version < '3.10'" },
  { version = "^1.2.0", markers = "python_version >= '3.10'" },
]
python-pptx = { version = ">=0.6.22,<1.1.0", optional = true }

[tool.poetry.group.dev.dependencies]
mypy = "^1.9.0"
black = { extras = ["jupyter"], version = "^24.0" }
pre-commit = [
  { version = "<=3.7.1", markers = "python_version < '3.9'" },
  { version = "^3.7.1", markers = "python_version >= '3.9'" },
]
pytest = ">=7.1.3,<9.0.0"
pytest-clarity = "^1.0.1"
pytest-cov = ">=3,<7"
pytest-console-scripts = "^1.3.1"
pytest-xdist = ">=2.5,<4.0"
pytest-plt = "^1.1.0"
pytest-mock = "^3.10.0"
types-toml = "^0.10.8"
types-PyYAML = "^6.0.11"
types-tabulate = ">=0.8.11,<0.10.0"
types-mock = ">=4.0.15,<6.0.0"
dash = { extras = ["testing"], version = "^2.7.1" }
bandit = "^1.7.5"
bump-pydantic = "^0.8.0"
types-setuptools = ">=75.5.0.20241116,<75.6.0.0"
ruff = "^0.8.0"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.5.0"
mkdocstrings = { extras = ["python"], version = ">=0.26.0,<0.28.0" }
mkdocs-literate-nav = ">=0.4.1,<0.7.0"
mkdocs-section-index = "^0.3.4"
mkdocs-autorefs = "^1.0.1"
mkdocs-minify-plugin = "^0.8.0"
mkdocs-jupyter = [
  { version = "<=0.25.0", markers = "python_version < '3.9'" },
  { version = "^0.25.0", markers = "python_version >= '3.9'" },
]
mkdocs-table-reader-plugin = "^3.0.0"
mike = "^2.0.0"
jupytext = "^1.14.5"
mathjax = "^0.1.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
spectrafit = "spectrafit.spectrafit:command_line_runner"
spectrafit-file-converter = "spectrafit.plugins.file_converter:command_line_runner"
spectrafit-data-converter = "spectrafit.plugins.data_converter:command_line_runner"
spectrafit-pkl-visualizer = "spectrafit.plugins.pkl_visualizer:command_line_runner"
spectrafit-pkl-converter = "spectrafit.plugins.pkl_converter:command_line_runner"
spectrafit-rixs-converter = "spectrafit.plugins.rixs_converter:command_line_runner"
spectrafit-rixs-visualizer = "spectrafit.plugins.rixs_visualizer:command_line_runner"
spectrafit-jupyter = "spectrafit.app.app:jupyter"
spectrafit-pptx-converter = "spectrafit.plugins.pptx_converter:command_line_runner"


[tool.poetry.extras]
jupyter = ["jupyterlab", "plotly", "itables", "kaleido", "dtale", "python-pptx"]
jupyter-dash = [
  "jupyter-dash",
  "ipywidgets",
  "dash-bootstrap-components",
  "dash-bootstrap-templates",
]
graph = ["networkx", "pydot"]
all = [
  "jupyterlab",
  "plotly",
  "itables",
  "kaleido",
  "dtale",
  "networkx",
  "pydot",
  "jupyter-dash",
  "ipywidgets",
  "dash-bootstrap-components",
  "dash-bootstrap-templates",
  "python-pptx",
]

[tool.ruff.lint]
fixable = ["ALL"]
extend-ignore = ["E721", "E731"]


[tool.pytest]
script_launch_mode = "subprocess"
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "--cov=./spectrafit/ --cov-report=xml:coverage.xml --diff-symbols --plots -vv"
testpaths = ["spectrafit"]


[tool.mypy]
plugins = ["pydantic.mypy", "numpy.typing.mypy_plugin"]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
pretty = true
show_error_context = true
show_error_codes = true
exclude = "**/test/test_*.py"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
