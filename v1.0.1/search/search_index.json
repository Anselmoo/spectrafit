{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#spectrafit","title":"SpectraFit","text":"<p><code>SpectraFit</code> is a Python tool for quick data fitting based on the regular expression of distribution and linear functions via the command line (CMD) or Jupyter Notebook It is designed to be easy to use and supports all common ASCII data formats. SpectraFit runs on Linux, Windows, and MacOS.</p>"},{"location":"#scope","title":"Scope","text":"<ul> <li>Fitting of 2D data, also with multiple columns as global fitting</li> <li>Using established and advanced solver methods</li> <li>Extensibility of the fitting function</li> <li>Guarantee traceability of the fitting results</li> <li>Saving all results in a SQL-like-format (<code>CSV</code>) for publications</li> <li>Saving all results in a NoSQL-like-format (<code>JSON</code>) for project management</li> <li>Having an API interface for Graph-databases</li> </ul> <p><code>SpectraFit</code> is a tool designed for researchers and scientists who require immediate data fitting to a model. It proves to be especially beneficial for individuals working with vast datasets or who need to conduct numerous fits within a limited time frame. <code>SpectraFit's</code> adaptability to various platforms and data formats makes it a versatile tool that caters to a broad spectrum of scientific applications.</p>"},{"location":"#installation","title":"Installation","text":"<p>via pip:</p> Bash<pre><code>pip install spectrafit\n\n# with support for Jupyter Notebook\n\npip install spectrafit[jupyter]\n\n# with support for the dashboard in the Jupyter Notebook\n\npip install spectrafit[jupyter-dash]\n\n# with support to visualize pkl-files as graph\n\npip install spectrafit[graph]\n\n# with all upcomming features\n\npip install spectrafit[all]\n\n# Upgrade\n\npip install spectrafit --upgrade\n</code></pre> <p>via conda, see also conda-forge:</p> Bash<pre><code>conda install -c conda-forge spectrafit\n\n# with support for Jupyter Notebook\n\nconda install -c conda-forge spectrafit-jupyter\n\n# with all upcomming features\n\nconda install -c conda-forge spectrafit-all\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p><code>SpectraFit</code> needs as command line tool only two things:</p> <ol> <li>The reference data, which should be fitted.</li> <li>The input file, which contains the initial model.</li> </ol> <p>As model files json, toml, and yaml are supported. By making use of the python <code>**kwargs</code> feature, the input file can call most of the following functions of LMFIT. LMFIT is the workhorse for the fit optimization, which is macro wrapper based on:</p> <ol> <li>NumPy</li> <li>SciPy</li> <li>uncertainties</li> </ol> <p>In case of <code>SpectraFit</code>, we have further extend the package by:</p> <ol> <li>Pandas</li> <li>statsmodels</li> <li>numdifftools</li> <li>Matplotlib in combination with    Seaborn</li> </ol> Bash<pre><code>spectrafit data_file.txt -i input_file.json\n</code></pre> Bash<pre><code>usage: spectrafit [-h] [-o OUTFILE] [-i INPUT] [-ov] [-e0 ENERGY_START]\n                  [-e1 ENERGY_STOP] [-s SMOOTH] [-sh SHIFT] [-c COLUMN COLUMN]\n                  [-sep {       ,,,;,:,|, ,s+}] [-dec {.,,}] [-hd HEADER]\n                  [-g {0,1,2}] [-auto] [-np] [-v] [-vb {0,1,2}]\n                  infile\n\nFast Fitting Program for ascii txt files.\n\npositional arguments:\n  infile                Filename of the spectra data\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -o OUTFILE, --outfile OUTFILE\n                        Filename for the export, default to set to\n                        'spectrafit_results'.\n  -i INPUT, --input INPUT\n                        Filename for the input parameter, default to set to\n                        'fitting_input.toml'.Supported fileformats are:\n                        '*.json', '*.yml', '*.yaml', and '*.toml'\n  -ov, --oversampling   Oversampling the spectra by using factor of 5;\n                        default to False.\n  -e0 ENERGY_START, --energy_start ENERGY_START\n                        Starting energy in eV; default to start of energy.\n  -e1 ENERGY_STOP, --energy_stop ENERGY_STOP\n                        Ending energy in eV; default to end of energy.\n  -s SMOOTH, --smooth SMOOTH\n                        Number of smooth points for lmfit; default to 0.\n  -sh SHIFT, --shift SHIFT\n                        Constant applied energy shift; default to 0.0.\n  -c COLUMN COLUMN, --column COLUMN COLUMN\n                        Selected columns for the energy- and intensity-values;\n                        default to '0' for energy (x-axis) and '1' for intensity\n                        (y-axis). In case of working with header, the column\n                        should be set to the column names as 'str'; default\n                        to 0 and 1.\n  -sep { ,,,;,:,|, ,s+}, --separator { ,,,;,:,|, ,s+}\n                        Redefine the type of separator; default to ' '.\n  -dec {.,,}, --decimal {.,,}\n                        Type of decimal separator; default to '.'.\n  -hd HEADER, --header HEADER\n                        Selected the header for the dataframe; default to None.\n  -cm COMMENT, --comment COMMENT\n                        Lines with comment characters like '#' should not be\n                        parsed; default to None.\n  -g {0,1,2}, --global_ {0,1,2}\n                        Perform a global fit over the complete dataframe. The\n                        options are '0' for classic fit (default). The\n                        option '1' for global fitting with auto-definition\n                        of the peaks depending on the column size and '2'\n                        for self-defined global fitting routines.\n  -auto, --autopeak     Auto detection of peaks in the spectra based on `SciPy`.\n                        The position, height, and width are used as estimation\n                        for the `Gaussian` models.The default option is 'False'\n                        for  manual peak definition.\n  -np, --noplot         No plotting the spectra and the fit of `SpectraFit`.\n  -v, --version         Display the current version of `SpectraFit`.\n  -vb {0,1,2}, --verbose {0,1,2}\n                        Display the initial configuration parameters and fit\n                        results, as a table '1', as a dictionary '2', or not in\n                        the terminal '0'. The default option is set to 1 for\n                        table `printout`.\n</code></pre>"},{"location":"#jupyter-notebook","title":"Jupyter Notebook","text":"<p>Open the <code>Jupyter Notebook</code> and run the following code:</p> Bash<pre><code>spectrafit-jupyter\n</code></pre> <p>or via Docker Image for <code>&lt;cpu&gt;</code> with <code>amd64</code> and <code>arm64</code>:</p> Bash<pre><code>docker pull ghcr.io/anselmoo/spectrafit-&lt;cpu&gt;:latest\ndocker run -it -p 8888:8888 spectrafit-&lt;cpu&gt;:latest\n</code></pre> <p>or just:</p> Bash<pre><code>docker run -p 8888:8888 ghcr.io/anselmoo/spectrafit-&lt;cpu&gt;:latest\n</code></pre> <p>Next define your initial model and the reference data:</p> Python<pre><code>from spectrafit.plugins.notebook import SpectraFitNotebook\nimport pandas as pd\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\"\n)\n\ninitial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n            \"fwhml\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 1},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n            \"fwhml\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 1},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n            \"fwhml\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n]\nspf = SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\")\nspf.solver_model(initial_model)\n</code></pre> <p>Which results in the following output:</p> <p></p>"},{"location":"#documentation","title":"Documentation","text":"<p>Please see the extended documentation for the full usage of <code>SpectraFit</code>.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#v101-2024-05-24","title":"v1.0.1 \ud83c\udf08 - 2024-05-24","text":""},{"location":"changelog/#whats-changed","title":"What's Changed","text":"<ul> <li>chore:  Updating to current year (#1227) @Anselmoo</li> </ul>"},{"location":"changelog/#new","title":"New","text":"<ul> <li>feat:  Configure Renovate (#1263) @renovate</li> <li>feat:  Update citation information and add DOI badge (#1328) @Anselmoo</li> <li>feat:  Add the <code>cff</code> file for 'doi.org/10.1021/acsomega.3c09262' (#1323) @Anselmoo</li> </ul>"},{"location":"changelog/#codesspaces","title":"Codesspaces","text":"<ul> <li>chore:  Update devcontainer.json to use dev-3.10 Python image (#1296) @Anselmoo</li> <li>chore(deps):  update mcr.microsoft.com/devcontainers/python docker tag to v1 (#1293) @renovate</li> <li>revert: \u2796 Removed poetry shell (#1238) @Anselmoo</li> <li>chore:  Update devcontainer.json with new features (#1237) @Anselmoo</li> </ul>"},{"location":"changelog/#maintenance","title":"Maintenance","text":"<ul> <li>build:  Bump SpectraFit version to <code>1.0.1</code> (#1329) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#1319) @pre-commit-ci</li> <li>chore(deps): update dependency mike to v2 (#1276) @renovate</li> <li>fix(deps): update dependency seaborn to ^0.13.0 (#1273) @renovate</li> <li>chore(deps): update dependency bump-pydantic to ^0.8.0 (#1271) @renovate</li> <li>[pre-commit.ci] pre-commit autoupdate (#1261) @pre-commit-ci</li> <li>Update mkdocstrings dependency and pre-commit hooks (#1262) @Anselmoo</li> <li>build:  Update dependencies in pyproject.toml (#1255) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#1251) @pre-commit-ci</li> <li>[pre-commit.ci] pre-commit autoupdate (#1243) @pre-commit-ci</li> <li>build:  Bump pytest-cov from 4.1.0 to 5.0.0 (#1231) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1232) @pre-commit-ci</li> <li>fix:  Remove no-commit-to-branch hook from pre-commit-config.yaml (#1230) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#1222) @pre-commit-ci</li> <li>build:  Bump itables from 1.7.1 to 2.0.0 (#1229) @dependabot</li> <li>ci:  Update Dependabot (#1228) @Anselmoo</li> <li>ci:  pre-commit autoupdate (#1207) @pre-commit-ci</li> <li>build(deps-dev):  Bump mkdocs-autorefs from 0.5.0 to 1.0.1 (#1206) @dependabot</li> <li>build:  Update dependencies in pyproject.toml (#1201) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#1186) @pre-commit-ci</li> </ul>"},{"location":"changelog/#python","title":"Python","text":"<ul> <li>build:  Bump SpectraFit version to <code>1.0.1</code> (#1329) @Anselmoo</li> <li>build:  Bump werkzeug from 3.0.2 to 3.0.3 (#1291) @dependabot</li> <li>build:  Bump mkdocstrings from 0.24.1 to 0.24.3 (#1240) @dependabot</li> <li>build:  Bump idna from 3.6 to 3.7 (#1244) @dependabot</li> <li>build:  Bump lmfit from 1.2.2 to 1.3.0 (#1241) @dependabot</li> <li>build:  Bump mkdocs-material from 9.5.15 to 9.5.16 (#1234) @dependabot</li> <li>build:  Bump pytest-cov from 4.1.0 to 5.0.0 (#1231) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1222) @pre-commit-ci</li> <li>build:   Bump itables from 1.7.1 to 2.0.0 (#1229) @dependabot</li> <li>build:  Bump types-toml from 0.10.8.7 to 0.10.8.20240310 (#1219) @dependabot</li> <li>build:  Bump jupyterlab from 4.1.2 to 4.1.4 (#1213) @dependabot</li> <li>build:   Bump dtale from 3.10.0 to 3.11.0 (#1214) @dependabot</li> <li>build:  Bump itables from 1.7.0 to 1.7.1 (#1210) @dependabot</li> <li>build:  Bump mkdocs-material from 9.5.12 to 9.5.13 (#1212) @dependabot</li> <li>build(deps-dev):  Bump mkdocs-autorefs from 0.5.0 to 1.0.1 (#1206) @dependabot</li> </ul>"},{"location":"changelog/#octocat-github-actions","title":":octocat: Github Actions","text":"<ul> <li>build:   Bump pypa/gh-action-pypi-publish from 3fbcf7c to 699cd61 (#1312) @dependabot</li> <li>build:  Bump docker/build-push-action from df19a79 to 2a53c6c (#1313) @dependabot</li> <li>build:  Bump docker/metadata-action from 2ee3d30 to f7b4ed1 (#1314) @dependabot</li> <li>build:  Bump docker/setup-buildx-action from be3701b to 5138f76 (#1315) @dependabot</li> <li>chore(deps):  update codecov/codecov-action action to v4.4.0 (#1302) @renovate</li> <li>chore(deps):  update docker/build-push-action digest to df19a79 (#1301) @renovate</li> <li>chore(deps):  update docker/build-push-action digest to 6003d32 (#1297) @renovate</li> <li>chore(deps):  update docker/setup-buildx-action digest to be3701b (#1267) @renovate</li> <li>chore(deps):  update docker/metadata-action digest to 2ee3d30 (#1292) @renovate</li> <li>chore(deps):  update docker/build-push-action digest to 729f7f4 (#1264) @renovate</li> <li>chore:  Update pymdownx.emoji extension and mike deploy command (#1282) @Anselmoo</li> <li>chore(deps):  update docker/metadata-action digest to 1294d94 (#1265) @renovate</li> <li>chore(deps):  update github/codeql-action action to v3 (#1278) @renovate</li> <li>chore:   Update dependencies and actions (#1275) @Anselmoo</li> <li>chore(deps):  update pypa/gh-action-pypi-publish digest to 3fbcf7c (#1268) @renovate</li> <li>build:  Bump sigstore/cosign-installer from 3.4.0 to 3.5.0 (#1245) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.2.0 to 4.3.0 (#1246) @dependabot</li> <li>build:  Bump docker/setup-buildx-action from 3.2.0 to 3.3.0 (#1247) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.1.1 to 4.2.0 (#1242) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.1.0 to 4.1.1 (#1233) @dependabot</li> <li>ci:  Update Dependabot (#1228) @Anselmoo</li> <li>build:  Bump docker/build-push-action from 5.1.0 to 5.2.0 (#1215) @dependabot</li> <li>build:  Bump pypa/gh-action-pypi-publish from 1.8.12 to 1.8.14 (#1216) @dependabot</li> <li>Update Codecov action configuration and change from dot to regular file (#1209) @Anselmoo</li> <li>build:  Update to latest actions (#1202) @dependabot</li> <li>build:  Update dependencies in pyproject.toml (#1201) @Anselmoo</li> <li>build(deps):  Bump dorny/paths-filter from 3.0.0 to 3.0.1 (#1185) @dependabot</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>fix:  Update citation information and add DOI badge (#1326) @Anselmoo</li> <li>chore:  Update pymdownx.emoji extension and mike deploy command (#1282) @Anselmoo</li> </ul>"},{"location":"changelog/#dependency-updates","title":"Dependency Updates","text":"<ul> <li>build: \u2b06\ufe0f Bump pypa/gh-action-pypi-publish from 3fbcf7c to 699cd61 (#1312) @dependabot</li> <li>build:  Bump SpectraFit version to <code>1.0.1</code> (#1329) @Anselmoo</li> <li>build:  Bump docker/build-push-action from df19a79 to 2a53c6c (#1313) @dependabot</li> <li>build:  Bump docker/metadata-action from 2ee3d30 to f7b4ed1 (#1314) @dependabot</li> <li>build:  Bump docker/setup-buildx-action from be3701b to 5138f76 (#1315) @dependabot</li> <li>chore(deps):  update dependency types-setuptools to v69.5.0.20240513 (#1300) @renovate</li> <li>chore(deps):  update dependency mkdocs-material to v9.5.22 (#1299) @renovate</li> <li>chore:   Update dependencies (#1294) @Anselmoo</li> <li>build:  Bump werkzeug from 3.0.2 to 3.0.3 (#1291) @dependabot</li> <li>chore:   Update pymdownx.emoji extension and mike deploy command (#1282) @Anselmoo</li> <li>chore(deps):  update dependency mike to v2 (#1276) @renovate</li> <li>fix(deps):  update dependency seaborn to ^0.13.0 (#1273) @renovate</li> <li>chore(deps):  update dependency bump-pydantic to ^0.8.0 (#1271) @renovate</li> <li>Update mkdocstrings dependency and pre-commit hooks (#1262) @Anselmoo</li> <li>build:  Update dependencies in pyproject.toml (#1255) @Anselmoo</li> <li>build:  Bump sigstore/cosign-installer from 3.4.0 to 3.5.0 (#1245) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.2.0 to 4.3.0 (#1246) @dependabot</li> <li>build:  Bump docker/setup-buildx-action from 3.2.0 to 3.3.0 (#1247) @dependabot</li> <li>build:  Bump mkdocstrings from 0.24.1 to 0.24.3 (#1240) @dependabot</li> <li>build:  Bump idna from 3.6 to 3.7 (#1244) @dependabot</li> <li>build:  Bump lmfit from 1.2.2 to 1.3.0 (#1241) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.1.1 to 4.2.0 (#1242) @dependabot</li> <li>build:  Bump mkdocs-material from 9.5.15 to 9.5.16 (#1234) @dependabot</li> <li>build:  Bump codecov/codecov-action from 4.1.0 to 4.1.1 (#1233) @dependabot</li> <li>build:  Bump pytest-cov from 4.1.0 to 5.0.0 (#1231) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1222) @pre-commit-ci</li> <li>build:   Bump itables from 1.7.1 to 2.0.0 (#1229) @dependabot</li> <li>ci:  Update Dependabot (#1228) @Anselmoo</li> <li>build:  Bump docker/build-push-action from 5.1.0 to 5.2.0 (#1215) @dependabot</li> <li>build:  Bump pypa/gh-action-pypi-publish from 1.8.12 to 1.8.14 (#1216) @dependabot</li> <li>build:  Bump types-toml from 0.10.8.7 to 0.10.8.20240310 (#1219) @dependabot</li> <li>build:  Bump jupyterlab from 4.1.2 to 4.1.4 (#1213) @dependabot</li> <li>build:    Bump dtale from 3.10.0 to 3.11.0 (#1214) @dependabot</li> <li>build:  Bump itables from 1.7.0 to 1.7.1 (#1210) @dependabot</li> <li>build:  Bump mkdocs-material from 9.5.12 to 9.5.13 (#1212) @dependabot</li> <li>build:  Update to latest actions (#1202) @dependabot</li> <li>build(deps-dev):  Bump mkdocs-autorefs from 0.5.0 to 1.0.1 (#1206) @dependabot</li> <li>build:  Update dependencies in pyproject.toml (#1201) @Anselmoo</li> <li>build(deps):  Bump dorny/paths-filter from 3.0.0 to 3.0.1 (#1185) @dependabot</li> </ul>"},{"location":"changelog/#changelog_1","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v1.0.0.post1 (#1188) @Anselmoo</li> </ul>"},{"location":"changelog/#full-changelog","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v1.0.0.post1...v1.1.0</p>"},{"location":"changelog/#who-contributes","title":"Who Contributes","text":"<p>@Anselmoo, @renovate and @renovate[bot]</p>"},{"location":"changelog/#v100post1-2024-02-19","title":"v1.0.0.post1 \ud83c\udf08 - 2024-02-19","text":""},{"location":"changelog/#whats-changed_1","title":"What's Changed","text":""},{"location":"changelog/#maintenance_1","title":"Maintenance","text":"<ul> <li>fix:  add missing <code>100%x</code> in FitReport class (#1187) @Anselmoo</li> </ul>"},{"location":"changelog/#python_1","title":"Python","text":"<ul> <li>fix:  add missing <code>100%x</code> in FitReport class (#1187) @Anselmoo</li> </ul>"},{"location":"changelog/#dependency-updates_1","title":"Dependency Updates","text":"<ul> <li>fix:  add missing <code>100%x</code> in FitReport class (#1187) @Anselmoo</li> </ul>"},{"location":"changelog/#changelog_2","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v1.0.0.post0 (#1184)   @Anselmoo</li> </ul>"},{"location":"changelog/#full-changelog_1","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v1.0.0.post0...v1.0.1</p>"},{"location":"changelog/#who-contributes_1","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelog/#v100post0-2024-02-18","title":"v1.0.0.post0 \ud83c\udf08 - 2024-02-18","text":""},{"location":"changelog/#whats-changed_2","title":"What's Changed","text":""},{"location":"changelog/#new_1","title":"New","text":"<ul> <li>feat:  add CIReport class (#1181) @Anselmoo</li> <li>feat:  Add test cases for FitReport class (#1179) @Anselmoo</li> <li>feat: \u2728 Update reports module (#1136) @Anselmoo</li> </ul>"},{"location":"changelog/#maintenance_2","title":"Maintenance","text":"<ul> <li>feat:  Add test cases for FitReport class (#1179) @Anselmoo</li> <li>chore:  Update dependencies and version number (#1175) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-minify-plugin from 0.7.2 to 0.8.0 (#1156)   @dependabot</li> <li>build(deps-dev): Bump pytest from 7.4.4 to 8.0.0 (#1152) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>ci: Update dependabot.yml (#1150) @Anselmoo</li> <li>build(deps-dev): Bump types-setuptools from 68.2.0.2 to 69.0.0.20240115   (#1139) @dependabot</li> <li>build: Update devs and ci (#1135) @Anselmoo</li> </ul>"},{"location":"changelog/#python_2","title":"Python","text":"<ul> <li>refactor:  Cleanup code into seperate functions (#1183) @Anselmoo</li> <li>fix:  Reorganize report generation in report.py (#1180) @Anselmoo</li> <li>feat:  Add test cases for FitReport class (#1179) @Anselmoo</li> <li>chore:  Update dependencies and version number (#1175) @Anselmoo</li> <li>build(deps): Bump dtale from 3.9.0 to 3.10.0 (#1158) @dependabot</li> <li>build(deps-dev): Bump dash from 2.14.2 to 2.15.0 (#1159) @dependabot</li> <li>build(deps-dev): Bump mkdocs-minify-plugin from 0.7.2 to 0.8.0 (#1156)   @dependabot</li> <li>build(deps-dev): Bump pytest from 7.4.4 to 8.0.0 (#1152) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>Feature/security-fix (#1151) @Anselmoo</li> <li>feat: \u2728 Introduce <code>min_rel</code> for confidence integrals (#1142) @Anselmoo</li> <li>build(deps-dev): Bump types-setuptools from 68.2.0.2 to 69.0.0.20240115   (#1139) @dependabot</li> <li>refactor: \ud83d\udca1 Add sonartypes recommendations (#1138) @Anselmoo</li> <li>perf:  Rebuild fond by <code>findfont</code>-method (#1098) @Anselmoo</li> <li>build: Update devs and ci (#1135) @Anselmoo</li> </ul>"},{"location":"changelog/#octocat-github-actions_1","title":":octocat: Github Actions","text":"<ul> <li>build(deps): Bump codecov/codecov-action from 3.1.5 to 4.0.1 (#1162)   @dependabot</li> <li>build(deps): Bump release-drafter/release-drafter from 5 to 6 (#1163)   @dependabot</li> <li>build(deps): Bump docker/metadata-action from 5.5.0 to 5.5.1 (#1164)   @dependabot</li> <li>build(deps): Bump sigstore/cosign-installer from 3.2.0 to 3.4.0 (#1161)   @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>build(deps): Bump dorny/paths-filter from 2.12.0 to 3.0.0 (#1147) @dependabot</li> <li>build(deps): Bump codecov/codecov-action from 3.1.4 to 3.1.5 (#1146)   @dependabot</li> <li>build(deps): Bump dorny/paths-filter from 2.11.1 to 2.12.0 (#1144) @dependabot</li> <li>build: \u2b06\ufe0f Bump actions/first-interaction from 1.2.0 to 1.3.0 (#1140)   @dependabot</li> <li>feat: \u2728 Update reports module (#1136) @Anselmoo</li> <li>build(deps): Bump docker/metadata-action from 5.0.0 to 5.5.0 (#1120)   @dependabot</li> <li>build(deps): Bump actions/dependency-review-action from 3 to 4 (#1133)   @dependabot</li> <li>perf:  Rebuild fond by <code>findfont</code>-method (#1098) @Anselmoo</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>docs:  Reorganize the changelogs (old/new) (#1137) @Anselmoo</li> </ul>"},{"location":"changelog/#dependency-updates_2","title":"Dependency Updates","text":"<ul> <li>feat:  Add test cases for FitReport class (#1179) @Anselmoo</li> <li>build(deps): Bump codecov/codecov-action from 3.1.5 to 4.0.1 (#1162)   @dependabot</li> <li>build(deps): Bump release-drafter/release-drafter from 5 to 6 (#1163)   @dependabot</li> <li>build(deps): Bump docker/metadata-action from 5.5.0 to 5.5.1 (#1164)   @dependabot</li> <li>build(deps): Bump sigstore/cosign-installer from 3.2.0 to 3.4.0 (#1161)   @dependabot</li> <li>build(deps): Bump dtale from 3.9.0 to 3.10.0 (#1158) @dependabot</li> <li>build(deps-dev): Bump dash from 2.14.2 to 2.15.0 (#1159) @dependabot</li> <li>build(deps-dev): Bump mkdocs-minify-plugin from 0.7.2 to 0.8.0 (#1156)   @dependabot</li> <li>build(deps-dev): Bump pytest from 7.4.4 to 8.0.0 (#1152) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>build(deps): Bump dorny/paths-filter from 2.12.0 to 3.0.0 (#1147) @dependabot</li> <li>build(deps): Bump codecov/codecov-action from 3.1.4 to 3.1.5 (#1146)   @dependabot</li> <li>build(deps): Bump dorny/paths-filter from 2.11.1 to 2.12.0 (#1144) @dependabot</li> <li>build(deps-dev): Bump types-setuptools from 68.2.0.2 to 69.0.0.20240115   (#1139) @dependabot</li> <li>build: \u2b06\ufe0f Bump actions/first-interaction from 1.2.0 to 1.3.0 (#1140)   @dependabot</li> <li>build: Update devs and ci (#1135) @Anselmoo</li> </ul>"},{"location":"changelog/#testing-coverage","title":"Testing &amp; Coverage","text":"<ul> <li>refactor:  Cleanup code into seperate functions (#1183) @Anselmoo</li> <li>feat:  Add test cases for FitReport class (#1179) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>Feature/security-fix (#1151) @Anselmoo</li> <li>feat: \u2728 Introduce <code>min_rel</code> for confidence integrals (#1142) @Anselmoo</li> <li>refactor: \ud83d\udca1 Add sonartypes recommendations (#1138) @Anselmoo</li> </ul>"},{"location":"changelog/#changelog_3","title":"Changelog","text":"<ul> <li>docs:  Reorganize the changelogs (old/new) (#1137) @Anselmoo</li> <li>docs:  Changlog update for v1.0.0 (#1050) @Anselmoo</li> </ul>"},{"location":"changelog/#docker","title":"Docker","text":"<ul> <li>feat: \u2728 Introduce <code>min_rel</code> for confidence integrals (#1142) @Anselmoo</li> </ul>"},{"location":"changelog/#vendor","title":"Vendor","text":"<ul> <li>[pre-commit.ci] pre-commit autoupdate (#1155) @pre-commit-ci</li> <li>Feature/security-fix (#1151) @Anselmoo</li> <li>feat: \u2728 Introduce <code>min_rel</code> for confidence integrals (#1142) @Anselmoo</li> </ul>"},{"location":"changelog/#full-changelog_2","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v1.0.0...v1.1.0</p>"},{"location":"changelog/#who-contributes_2","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelog/#v100-2023-10-07","title":"v1.0.0\ud83c\udf08 - 2023-10-07","text":""},{"location":"changelog/#whats-changed_3","title":"What's Changed","text":""},{"location":"changelog/#maintenance_3","title":"Maintenance","text":"<ul> <li>build:  Release of <code>v1.0.0</code> (#1043) @Anselmoo</li> </ul>"},{"location":"changelog/#python_3","title":"Python","text":"<ul> <li>build:  Release of <code>v1.0.0</code> (#1043) @Anselmoo</li> <li>refactor:  Apply <code>isclose</code> for refactoring (#1041) @Anselmoo</li> </ul>"},{"location":"changelog/#dependency-updates_3","title":"Dependency Updates","text":"<ul> <li>build:  Release of <code>v1.0.0</code> (#1043) @Anselmoo</li> </ul>"},{"location":"changelog/#testing-coverage_1","title":"Testing &amp; Coverage","text":"<ul> <li>refactor:  Apply <code>isclose</code> for refactoring (#1041) @Anselmoo</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>chore:  Update security policy (#1042) @Anselmoo</li> </ul>"},{"location":"changelog/#changelog_4","title":"Changelog","text":"<ul> <li>docs:  Changlog update for v0.22.9 (#1038) @Anselmoo</li> </ul>"},{"location":"changelog/#full-changelog_3","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.9...v0.22.10</p>"},{"location":"changelog/#who-contributes_3","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at Anselm.Hahn@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at www.contributor-covenant.org/faq. Translations are available at www.contributor-covenant.org/translations.</p>"},{"location":"contact/","title":"Contact","text":""},{"location":"contact/#contact-us-at","title":"Contact us at ...","text":"<ul> <li>Issue-Board</li> <li>Project-Board</li> <li>Discussion-Board might come later ...</li> </ul>"},{"location":"contributing/","title":"How to contribute","text":"<ul> <li>How to contribute</li> <li>Setup the development environment</li> <li>Milestones</li> <li>Testing</li> <li>Submitting changes</li> <li>Coding conventions</li> <li>Note</li> </ul> <p>We are really glad you're reading this, because we need volunteer developers to help this project <code>SpectraFit</code>.</p> <p>Here are some important resources:</p> <ul> <li>Issues for open BUG reports   or feature requests</li> <li>Pull requests for contributing   code</li> <li>Millestones, which are listed below.</li> </ul>"},{"location":"contributing/#setup-the-development-environment","title":"Setup the development environment","text":"<p><code>SpectraFit</code> is using poetry as python package management system and pre-commit for managing git hooks. For fixing bugs or developing new featuers, we recommend to use both tools. The python version should be <code>3.7.1</code> or higher and can be optional managed via pyenv.</p> Bash<pre><code>pyenv local 3.8.11\npoetry install\npre-commit install --install-hooks\n</code></pre> <p>Even if we have not git hook for code style <code>markdown</code>, <code>json</code>, and <code>yaml</code> files, we prefer the prettier style and its extension for <code>toml</code> files.</p>"},{"location":"contributing/#milestones","title":"Milestones","text":"<p>Milestones now also available for the <code>spectrafit</code> application. Furthermore, project status can be seen in the GitHub Project Panel.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using only GitHub-Actions for pre-commit testing, the CI/CD pipeline and the release.</p>"},{"location":"contributing/#submitting-changes","title":"Submitting changes","text":"<p>Please send a GitHub Pull Request to SpectraFit with a clear list of what you've done (read more about pull requests). We can always use more test coverage. Please follow our coding conventions (below) and make sure all of your commits are atomic (one feature per commit).</p> <p>Always write a clear log message for your commits. One-line messages are fine for small changes, but bigger changes should look like this:</p> Bash<pre><code>git commit -m \"A brief summary of the commit\"\n</code></pre> <p>A paragraph describing what changed and its impact.</p> <p>In terms of connecting issues with the corresponding PR, we prefer to use the the GitHub convention of using the issue number in the commit message. This also allows us to easily linking PRs with issues in our Project Board.</p>"},{"location":"contributing/#coding-conventions","title":"Coding conventions","text":"<p>Start reading our code and you'll get the hang of it. We optimize for readability:</p> <ul> <li>We use as formaters for Python:</li> <li></li> <li></li> <li></li> <li>Google convention for docstrings</li> <li>We use as formater for <code>Markdown</code>, <code>JSON</code> and <code>YAML</code> files:</li> <li></li> </ul>"},{"location":"contributing/#note","title":"Note","text":"<p>This template is adapted from opengovernment.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#spectrafit-license","title":"SpectraFit License","text":"<p>BSD 3-Clause License</p> <p>Copyright \u00a9 2024, Anselm Hahn</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li> <p>Redistributions of source code must retain the above copyright notice, this    list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,    this list of conditions and the following disclaimer in the documentation    and/or other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its    contributors may be used to endorse or promote products derived from    this software without specific prior written permission.</p> </li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"license/#third-party-licenses","title":"Third Party Licenses","text":"<p><code>SpectraFit</code> relies on two THIRD_PARTY_LICENSES, which are also MIT and BSD-3 licensed. The licenses for these libraries are below:</p>"},{"location":"license/#some-code-lines-from-the-lmfitlmfit-py-library-are-used-in-a-modified-version-for-reportpy-whose-license-is-below","title":"Some code lines from the lmfit/lmfit-py library are used in a modified version for <code>report.py</code> whose license is below.","text":"Markdown<pre><code>BSD-3\n\nCopyright 2022 Matthew Newville, The University of Chicago\n               Renee Otten, Brandeis University\n               Till Stensitzki, Freie Universitat Berlin\n               A. R. J. Nelson, Australian Nuclear Science and Technology Organisation\n               Antonino Ingargiola, University of California, Los Angeles\n               Daniel B. Allen, Johns Hopkins University\n               Michal Rawlik, Eidgenossische Technische Hochschule, Zurich\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n  1. Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n  3. Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from this\n  software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"license/#the-dockerfile-for-jupyter-is-an-adapted-version-of-the-jupyterdocker-stacks-whose-license-is-below","title":"The <code>Dockerfile</code> for Jupyter is an adapted version of the jupyter/docker-stacks whose license is below.","text":"Markdown<pre><code># Licensing terms\n\nThis project is licensed under the terms of the Modified BSD License\n(also known as New or Revised or 3-Clause BSD), as follows:\n\n- Copyright (c) 2001-2015, IPython Development Team\n- Copyright (c) 2015-, Jupyter Development Team\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\nRedistributions in binary form must reproduce the above copyright notice, this\nlist of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\nNeither the name of the Jupyter Development Team nor the names of its\ncontributors may be used to endorse or promote products derived from this\nsoftware without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n## About the Jupyter Development Team\n\nThe Jupyter Development Team is the set of all contributors to the Jupyter project.\nThis includes all of the Jupyter subprojects.\n\nThe core team that coordinates development on GitHub can be found here:\n&lt;https://github.com/jupyter/&gt;.\n\n## Our Copyright Policy\n\nJupyter uses a shared copyright model. Each contributor maintains copyright\nover their contributions to Jupyter. But, it is important to note that these\ncontributions are typically only changes to the repositories. Thus, the Jupyter\nsource code, in its entirety is not the copyright of any single person or\ninstitution. Instead, it is the collective copyright of the entire Jupyter\nDevelopment Team. If individual contributors want to maintain a record of what\nchanges/contributions they have specific copyright on, they should indicate\ntheir copyright in the commit message of the change, when they commit the\nchange to one of the Jupyter repositories.\n\nWith this in mind, the following banner should be used in any source code file\nto indicate the copyright and license terms:\n\n    # Copyright (c) Jupyter Development Team.\n    # Distributed under the terms of the Modified BSD License.\n</code></pre>"},{"location":"license/#the-customcss-from-the-facelessuserpymdown-extensions-are-partially-used-for-generating-the-icon-shortcuts-whose-license-is-below","title":"The <code>custom.css</code> from the facelessuser/pymdown-extensions are partially used for generating the icon-shortcuts whose license is below.","text":"Markdown<pre><code># License\n\n## PyMdown Extensions\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 - 2023 Isaac Muse\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"security/","title":"Security Policy","text":"<p>This document describes the security policy for SpectraFit.</p>"},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Our current policy is to support the latest version of SpectraFit and the last two minor releases.</p>"},{"location":"security/#security-checks","title":"Security Checks","text":"<p>Currently, the following security checks are implemented in the CI pipelines or as third-party services:</p> Tool Checks Implemented as GitHub's CodeQL Used to check for potential vulnerabilities in the code. Synk Used to check for known vulnerabilities in the dependencies. SonarCloud Used to find code quality issues and potential vulnerabilities. GitHub's Dependabot Used to check for outdated dependencies. Pre-commit Used to check for code quality and formatting issues. Codecov Used to check for coverage rate to ensure that the code is completely tested. <p>Additionally, branch protection rules are used to ensure that the code is reviewed before it is merged into the main branch.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>If you find a vulnerability, please report it by opening an issue here. Please use the <code>vulnerability</code> template and provide as much information as possible.</p> <p>Current Python vulnerabilities can be found at the GitHub's Advisory Database. See also: GitHub's Security Lab.</p>"},{"location":"api/converter_api/","title":"Converters and Visualizer","text":"<p>About the Converter API</p> <p>The Converter API is a new feature in the v0.12.x release of <code>SpectraFit</code> with major focus on:</p> <ol> <li>Data Validation</li> <li>Settings Management</li> </ol> <p>In general, input and data files are converted to the internal data format, which are dictionaries for the input data and pandas dataframes for the data files. The Converter API is realized by using the <code>ABC</code>-class and the <code>@abstractmethod</code> decorator, while the File API is using the pydantic library.</p>"},{"location":"api/converter_api/#meta-data-converter-class","title":"Meta Data Converter Class","text":"<p>Abstract base class for the converter plugins.</p>"},{"location":"api/converter_api/#spectrafit.plugins.converter.Converter","title":"<code>Converter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for the converter plugin.</p> <p>The abstract base class is used to define the interface for the converter plugins:</p> <ul> <li>get_args: Get the arguments from the command line.</li> <li>convert: Convert the input file to the output file.</li> <li>call: Call the converter plugin.</li> </ul> <p>Currently used for:</p> <ul> <li>Convertion of the input file.</li> <li>Convertion of the output file.</li> </ul> Source code in <code>spectrafit/plugins/converter.py</code> Python<pre><code>class Converter(ABC):\n    \"\"\"Abstract base class for the converter plugin.\n\n    The abstract base class is used to define the interface for the converter plugins:\n\n    - get_args: Get the arguments from the command line.\n    - convert: Convert the input file to the output file.\n    - __call__: Call the converter plugin.\n\n    Currently used for:\n\n    - Convertion of the input file.\n    - Convertion of the output file.\n    \"\"\"\n\n    @abstractmethod\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                 additional information beyond the command line arguments.\n\n        Raises:\n            ValueError: If the output file format is not supported.\n        \"\"\"\n\n    @staticmethod\n    @abstractmethod\n    def convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert the input file to the target file format.\n\n        It is an abstract method and must be implemented in the derived class.\n\n        Args:\n            infile (Path): Input file as a path object.\n            file_format (str): Target file format.\n\n        Returns:\n            MutableMapping[str, Any]: Converted file as a dictionary.\n        \"\"\"\n\n    @abstractmethod\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the data to the target file format.\n\n        Args:\n            data (Any): Data to save.\n            fname (Path): Filename of the target file.\n            export_format (str): Target file format.\n        \"\"\"\n\n    @abstractmethod\n    def __call__(self) -&gt; None:\n        \"\"\"Call the converter plugin.\"\"\"\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.converter.Converter.__call__","title":"<code>__call__()</code>  <code>abstractmethod</code>","text":"<p>Call the converter plugin.</p> Source code in <code>spectrafit/plugins/converter.py</code> Python<pre><code>@abstractmethod\ndef __call__(self) -&gt; None:\n    \"\"\"Call the converter plugin.\"\"\"\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.converter.Converter.convert","title":"<code>convert(infile, file_format)</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>Convert the input file to the target file format.</p> <p>It is an abstract method and must be implemented in the derived class.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>Input file as a path object.</p> required <code>file_format</code> <code>str</code> <p>Target file format.</p> required <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any]: Converted file as a dictionary.</p> Source code in <code>spectrafit/plugins/converter.py</code> Python<pre><code>@staticmethod\n@abstractmethod\ndef convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert the input file to the target file format.\n\n    It is an abstract method and must be implemented in the derived class.\n\n    Args:\n        infile (Path): Input file as a path object.\n        file_format (str): Target file format.\n\n    Returns:\n        MutableMapping[str, Any]: Converted file as a dictionary.\n    \"\"\"\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.converter.Converter.get_args","title":"<code>get_args()</code>  <code>abstractmethod</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without  additional information beyond the command line arguments.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the output file format is not supported.</p> Source code in <code>spectrafit/plugins/converter.py</code> Python<pre><code>@abstractmethod\ndef get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n             additional information beyond the command line arguments.\n\n    Raises:\n        ValueError: If the output file format is not supported.\n    \"\"\"\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.converter.Converter.save","title":"<code>save(data, fname, export_format)</code>  <code>abstractmethod</code>","text":"<p>Save the data to the target file format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>Data to save.</p> required <code>fname</code> <code>Path</code> <p>Filename of the target file.</p> required <code>export_format</code> <code>str</code> <p>Target file format.</p> required Source code in <code>spectrafit/plugins/converter.py</code> Python<pre><code>@abstractmethod\ndef save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the data to the target file format.\n\n    Args:\n        data (Any): Data to save.\n        fname (Path): Filename of the target file.\n        export_format (str): Target file format.\n    \"\"\"\n</code></pre>"},{"location":"api/converter_api/#input-and-output-file-converter-for-object-oriented-formats","title":"Input and Output File Converter for object-oriented formats","text":"<p>Convert the input and output files to the preferred file format.</p>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.FileConverter","title":"<code>FileConverter</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Convert the input and output file to the preferred file format.</p> <p>Supported file formats</p> <p>Currently supported file formats:</p> <p>-[x] JSON -[x] YAML (YML) -[x] TOML (LOCK for the lock file)</p> <p>Attributes:</p> Name Type Description <code>choices</code> <code>Set[str]</code> <p>The choices for the file format.</p> Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>class FileConverter(Converter):\n    \"\"\"Convert the input and output file to the preferred file format.\n\n    !!! info \"Supported file formats\"\n\n        Currently supported file formats:\n\n        -[x] JSON\n        -[x] YAML (YML)\n        -[x] TOML (LOCK for the lock file)\n\n    Attributes:\n        choices (Set[str]): The choices for the file format.\n    \"\"\"\n\n    choices = {\"json\", \"yaml\", \"yml\", \"toml\", \"lock\"}\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' input and output files.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the 'SpectraFit' input or output file.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the conversion.\",\n            type=str,\n            choices=self.choices,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File format for the export.\",\n            type=str,\n            default=\"json\",\n            choices=self.choices,\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert the input file to the output file.\n\n        Args:\n            infile (Path): The input file as a path object.\n            file_format (str): The output file format.\n\n        Raises:\n            ValueError: If the input file format is not supported.\n\n        Returns:\n            MutableMapping[str, Any] : The converted file as a dictionary.\n        \"\"\"\n        if file_format not in FileConverter.choices:\n            raise ValueError(f\"The input file format '{file_format}' is not supported.\")\n\n        return read_input_file(infile)\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the converted file.\n\n        Raises:\n            ValueError: If the input file format is identical with the output format.\n            ValueError: If the output file format is not supported.\n\n        Args:\n            data (Any): The converted file as a dictionary.\n            fname (Path): The input file as a path object.\n            export_format (str): The output file format.\n        \"\"\"\n        if fname.suffix[1:] == export_format:\n            raise ValueError(\n                f\"The input file suffix '{fname.suffix[1:]}' is similar to the\"\n                f\" output file format '{export_format}'.\"\n                \"Please use a different output file suffix.\"\n            )\n\n        if export_format not in self.choices:\n            raise ValueError(\n                f\"The output file format '{export_format}' is not supported.\"\n            )\n\n        if export_format == \"json\":\n            with open(\n                fname.with_suffix(f\".{export_format}\"), \"w\", encoding=\"utf-8\"\n            ) as f:\n                json.dump(data, f, indent=4)\n        elif export_format in {\"yaml\", \"yml\"}:\n            with open(\n                fname.with_suffix(f\".{export_format}\"), \"w\", encoding=\"utf-8\"\n            ) as f:\n                yaml.dump(data, f, default_flow_style=False)\n        elif export_format in {\"toml\", \"lock\"}:\n            with open(\n                fname.with_suffix(f\".{export_format}\"),\n                \"wb+\",\n            ) as f:\n                tomli_w.dump(dict(**data), f)\n\n    def __call__(self) -&gt; None:\n        \"\"\"Run the converter via cmd commands.\"\"\"\n        args = self.get_args()\n        self.save(\n            data=self.convert(infile=args[\"infile\"], file_format=args[\"file_format\"]),\n            fname=args[\"infile\"],\n            export_format=args[\"export_format\"],\n        )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.FileConverter.__call__","title":"<code>__call__()</code>","text":"<p>Run the converter via cmd commands.</p> Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Run the converter via cmd commands.\"\"\"\n    args = self.get_args()\n    self.save(\n        data=self.convert(infile=args[\"infile\"], file_format=args[\"file_format\"]),\n        fname=args[\"infile\"],\n        export_format=args[\"export_format\"],\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.FileConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the input file to the output file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file as a path object.</p> required <code>file_format</code> <code>str</code> <p>The output file format.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input file format is not supported.</p> <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any] : The converted file as a dictionary.</p> Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert the input file to the output file.\n\n    Args:\n        infile (Path): The input file as a path object.\n        file_format (str): The output file format.\n\n    Raises:\n        ValueError: If the input file format is not supported.\n\n    Returns:\n        MutableMapping[str, Any] : The converted file as a dictionary.\n    \"\"\"\n    if file_format not in FileConverter.choices:\n        raise ValueError(f\"The input file format '{file_format}' is not supported.\")\n\n    return read_input_file(infile)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.FileConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' input and output files.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the 'SpectraFit' input or output file.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the conversion.\",\n        type=str,\n        choices=self.choices,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File format for the export.\",\n        type=str,\n        default=\"json\",\n        choices=self.choices,\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.FileConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the converted file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input file format is identical with the output format.</p> <code>ValueError</code> <p>If the output file format is not supported.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The converted file as a dictionary.</p> required <code>fname</code> <code>Path</code> <p>The input file as a path object.</p> required <code>export_format</code> <code>str</code> <p>The output file format.</p> required Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the converted file.\n\n    Raises:\n        ValueError: If the input file format is identical with the output format.\n        ValueError: If the output file format is not supported.\n\n    Args:\n        data (Any): The converted file as a dictionary.\n        fname (Path): The input file as a path object.\n        export_format (str): The output file format.\n    \"\"\"\n    if fname.suffix[1:] == export_format:\n        raise ValueError(\n            f\"The input file suffix '{fname.suffix[1:]}' is similar to the\"\n            f\" output file format '{export_format}'.\"\n            \"Please use a different output file suffix.\"\n        )\n\n    if export_format not in self.choices:\n        raise ValueError(\n            f\"The output file format '{export_format}' is not supported.\"\n        )\n\n    if export_format == \"json\":\n        with open(\n            fname.with_suffix(f\".{export_format}\"), \"w\", encoding=\"utf-8\"\n        ) as f:\n            json.dump(data, f, indent=4)\n    elif export_format in {\"yaml\", \"yml\"}:\n        with open(\n            fname.with_suffix(f\".{export_format}\"), \"w\", encoding=\"utf-8\"\n        ) as f:\n            yaml.dump(data, f, default_flow_style=False)\n    elif export_format in {\"toml\", \"lock\"}:\n        with open(\n            fname.with_suffix(f\".{export_format}\"),\n            \"wb+\",\n        ) as f:\n            tomli_w.dump(dict(**data), f)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.file_converter.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the converter from the command line.</p> Source code in <code>spectrafit/plugins/file_converter.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the converter from the command line.\"\"\"\n    FileConverter()()\n</code></pre>"},{"location":"api/converter_api/#data-converter-for-rational-data-formats-like-csv-excel-etc","title":"Data Converter for rational data formats like CSV, Excel, etc.","text":"<p>Transform the input data to a CSV file.</p>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataConverter","title":"<code>DataConverter</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Convert the data files to a CSV file.</p> <p>Supported file formats</p> <p>Currently supported file formats:</p> <p>-[x] ATHENA -[x] TXT -[ ] more to come</p> <p><code>DataConverter</code> class can be also used in the Jupyter notebook.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>class DataConverter(Converter):\n    \"\"\"Convert the data files to a CSV file.\n\n    !!! info \"Supported file formats\"\n\n        Currently supported file formats:\n\n        -[x] ATHENA\n        -[x] TXT\n        -[ ] more to come\n\n        `DataConverter` class can be also used in the Jupyter notebook.\n    \"\"\"\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from data files to CSV files.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the data file to convert.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the conversion.\",\n            type=str,\n            choices=choices,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File format for the export.\",\n            type=str,\n            default=\"csv\",\n            choices=choices_export,\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert the input file to the target file format.\n\n        Args:\n            infile (Path): Input file as a path object.\n            file_format (str): Target file format.\n\n        Raises:\n            ValueError: If the file format is not supported.\n\n        Returns:\n            MutableMapping[str, Any]: The converted data as a MutableMapping[str, Any],\n                which belongs to DataFrame.\n        \"\"\"\n        if file_format.upper() not in choices:\n            raise ValueError(f\"File format '{file_format}' is not supported.\")\n\n        if callable(DataFormats.__dict__[file_format].names):\n            names = DataFormats.__dict__[file_format].names(infile)\n        else:\n            names = DataFormats.__dict__[file_format].names\n        DataFormats.__dict__[file_format].names = names\n\n        return pd.read_csv(\n            infile, **DataFormats.__dict__[file_format].dict(exclude={\"file_suffixes\"})\n        )\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the converted data to a CSV file.\n\n        Raises:\n            ValueError: If the export format is not supported.\n\n        Args:\n            data (Any): The converted data, which is a pandas DataFrame.\n            fname (Path): The file name of the data file.\n            export_format (str): The file format of the exported file.\n        \"\"\"\n        if export_format.lower() not in choices_export:\n            raise ValueError(f\"Export format '{export_format}' is not supported.\")\n        data.to_csv(fname.with_suffix(f\".{export_format}\"), index=False)\n\n    def __call__(self) -&gt; None:\n        \"\"\"Run the converter.\"\"\"\n        args = self.get_args()\n        self.save(\n            data=self.convert(\n                args[\"infile\"],\n                args[\"file_format\"],\n            ),\n            fname=args[\"infile\"],\n            export_format=args[\"export_format\"],\n        )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataConverter.__call__","title":"<code>__call__()</code>","text":"<p>Run the converter.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Run the converter.\"\"\"\n    args = self.get_args()\n    self.save(\n        data=self.convert(\n            args[\"infile\"],\n            args[\"file_format\"],\n        ),\n        fname=args[\"infile\"],\n        export_format=args[\"export_format\"],\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the input file to the target file format.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>Input file as a path object.</p> required <code>file_format</code> <code>str</code> <p>Target file format.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the file format is not supported.</p> <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any]: The converted data as a MutableMapping[str, Any], which belongs to DataFrame.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert the input file to the target file format.\n\n    Args:\n        infile (Path): Input file as a path object.\n        file_format (str): Target file format.\n\n    Raises:\n        ValueError: If the file format is not supported.\n\n    Returns:\n        MutableMapping[str, Any]: The converted data as a MutableMapping[str, Any],\n            which belongs to DataFrame.\n    \"\"\"\n    if file_format.upper() not in choices:\n        raise ValueError(f\"File format '{file_format}' is not supported.\")\n\n    if callable(DataFormats.__dict__[file_format].names):\n        names = DataFormats.__dict__[file_format].names(infile)\n    else:\n        names = DataFormats.__dict__[file_format].names\n    DataFormats.__dict__[file_format].names = names\n\n    return pd.read_csv(\n        infile, **DataFormats.__dict__[file_format].dict(exclude={\"file_suffixes\"})\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from data files to CSV files.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the data file to convert.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the conversion.\",\n        type=str,\n        choices=choices,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File format for the export.\",\n        type=str,\n        default=\"csv\",\n        choices=choices_export,\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the converted data to a CSV file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the export format is not supported.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The converted data, which is a pandas DataFrame.</p> required <code>fname</code> <code>Path</code> <p>The file name of the data file.</p> required <code>export_format</code> <code>str</code> <p>The file format of the exported file.</p> required Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the converted data to a CSV file.\n\n    Raises:\n        ValueError: If the export format is not supported.\n\n    Args:\n        data (Any): The converted data, which is a pandas DataFrame.\n        fname (Path): The file name of the data file.\n        export_format (str): The file format of the exported file.\n    \"\"\"\n    if export_format.lower() not in choices_export:\n        raise ValueError(f\"Export format '{export_format}' is not supported.\")\n    data.to_csv(fname.with_suffix(f\".{export_format}\"), index=False)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.DataFormats","title":"<code>DataFormats</code>  <code>dataclass</code>","text":"<p>Data formats.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>@dataclass(frozen=True)\nclass DataFormats:\n    \"\"\"Data formats.\"\"\"\n\n    ATHENA = athena_format\n    TXT = txt_format\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the converter from the command line.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the converter from the command line.\"\"\"\n    DataConverter()()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.data_converter.get_athena_column","title":"<code>get_athena_column(fname, comment='#')</code>","text":"<p>Get the header of the file.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>Path</code> <p>The file name of the data file.</p> required <code>comment</code> <code>str</code> <p>The comment marker. Defaults to \"#\".</p> <code>'#'</code> <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>Optional[List[str]]: The column names of the data file as a list.</p> Source code in <code>spectrafit/plugins/data_converter.py</code> Python<pre><code>def get_athena_column(fname: Path, comment: str = \"#\") -&gt; Optional[List[str]]:\n    \"\"\"Get the header of the file.\n\n    Args:\n        fname (Path): The file name of the data file.\n        comment (str, optional): The comment marker. Defaults to \"#\".\n\n    Returns:\n        Optional[List[str]]: The column names of the data file as a list.\n\n    \"\"\"\n    with open(fname, encoding=\"utf-8\") as f:\n        data = f.read()\n        lines = data.splitlines()\n        return next(\n            (\n                lines[i - 1].split(comment)[-1].split()\n                for i, line in enumerate(lines)\n                if re.match(r\"^\\s*\\d\", line)\n            ),\n            None,\n        )\n</code></pre>"},{"location":"api/converter_api/#pkl-converter-for-pickle-files","title":"Pkl Converter for pickle files","text":"<p>Transform the raw pkl data into a CSV files.</p> <p>About pickle file and the PklVisualizer</p> <p>In addition to exploring the nested structure of the Python's pickle file, the <code>PklVisualizer</code> provides two methods to visualize the data:</p> <ol> <li>As graph via <code>networkx</code> and <code>matplotlib</code></li> <li>As json file with  used types</li> </ol> <p>Visualize the pkl file as a graph.</p>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData","title":"<code>ExportData</code>","text":"<p>Export the data to a file.</p> <p>General information</p> <p>The data is exported to a file. The file format is determined by the file extension of the output file. The supported file formats are:</p> <p>-[x] npy -[x] npz -[x] pkl -[x] pkl.gz</p> <p>Classical file formats like <code>CSV</code>, <code>JSON</code>, <code>TOML</code>, etc. are not supported. In case of <code>CSV</code>, the conversion from unstructured data to a structured format is not trivial. In case of <code>JSON</code> and <code>TOML</code>, the data is not the conversion from numpy arrays to lists is very costly. Therefore, the data is exported to a pickly file as the preferred format.</p> <p>About NumPy</p> <p>The data is exported to a NumPy file can cause some challenge for the loading of the data. The data is exported as a dictionary with numpy as numpy arrays. The data can be loaded with the following code:</p> Python<pre><code>import numpy as np\n\ndata = np.load(\"data.npy\", allow_pickle=True).item()\n</code></pre> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>class ExportData:\n    \"\"\"Export the data to a file.\n\n    !!! info \"General information\"\n\n        The data is exported to a file. The file format is determined by the file\n        extension of the output file. The supported file formats are:\n\n        -[x] npy\n        -[x] npz\n        -[x] pkl\n        -[x] pkl.gz\n\n        Classical file formats like `CSV`, `JSON`, `TOML`, etc. are not supported.\n        In case of `CSV`, the conversion from unstructured data to a structured\n        format is not trivial. In case of `JSON` and `TOML`, the data is not\n        the conversion from numpy arrays to lists is very costly. Therefore, the\n        data is exported to a pickly file as the preferred format.\n\n    !!! warning \"About NumPy\"\n\n        The data is exported to a NumPy file can cause some challenge for the\n        loading of the data. The data is exported as a dictionary with numpy\n        as numpy arrays. The data can be loaded with the following code:\n\n        ```python\n        import numpy as np\n\n        data = np.load(\"data.npy\", allow_pickle=True).item()\n        ```\n    \"\"\"\n\n    def __init__(self, data: Dict[str, Any], fname: Path, export_format: str) -&gt; None:\n        \"\"\"Export the data to a file.\n\n        Args:\n            data (Dict[str, Any]): The data to export.\n            fname (Path): The filename of the output file.\n            export_format (str): The file format of the output file.\n        \"\"\"\n        self.data = data\n        self.fname = fname.with_suffix(f\".{export_format}\")\n        self.export_format = export_format\n\n    def __call__(self) -&gt; None:\n        \"\"\"Export the data to a file.\"\"\"\n        if self.export_format in {\"npy\", \"npz\"}:\n            self.to_numpy()\n        elif self.export_format in {\"pkl\", pkl_gz}:\n            self.to_pickle()\n\n    def to_numpy(self) -&gt; None:\n        \"\"\"Export the data to a numpy file.\"\"\"\n        _data: Any = self.data\n        if self.export_format.lower() == \"npy\":\n            np.save(self.fname, _data)\n        elif self.export_format.lower() == \"npz\":\n            np.savez(self.fname, data=_data)\n\n    def to_pickle(self) -&gt; None:\n        \"\"\"Export the data to a pickle file.\"\"\"\n        if self.export_format.lower() == \"pkl\":\n            with open(self.fname, \"wb\") as f:\n                pickle.dump(self.data, f)\n        elif self.export_format.lower() == pkl_gz:\n            with gzip.open(self.fname, \"wb\") as f:\n                pickle.dump(self.data, f)\n\n    @staticmethod\n    def numpy2list(data: List[Dict[str, Any]]) -&gt; List[Dict[str, Any]]:\n        \"\"\"Convert the arrays of list dictionaries to a list of dictionaries with list.\n\n        Args:\n            data (List[Dict[str, Any]]): The data to convert.\n\n        Returns:\n            List[Dict[str, Any]]: The converted data.\n        \"\"\"\n        return [\n            {k: v.tolist() for k, v in d.items() if isinstance(v, np.ndarray)}\n            for d in data\n        ]\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData.__call__","title":"<code>__call__()</code>","text":"<p>Export the data to a file.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Export the data to a file.\"\"\"\n    if self.export_format in {\"npy\", \"npz\"}:\n        self.to_numpy()\n    elif self.export_format in {\"pkl\", pkl_gz}:\n        self.to_pickle()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData.__init__","title":"<code>__init__(data, fname, export_format)</code>","text":"<p>Export the data to a file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>The data to export.</p> required <code>fname</code> <code>Path</code> <p>The filename of the output file.</p> required <code>export_format</code> <code>str</code> <p>The file format of the output file.</p> required Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def __init__(self, data: Dict[str, Any], fname: Path, export_format: str) -&gt; None:\n    \"\"\"Export the data to a file.\n\n    Args:\n        data (Dict[str, Any]): The data to export.\n        fname (Path): The filename of the output file.\n        export_format (str): The file format of the output file.\n    \"\"\"\n    self.data = data\n    self.fname = fname.with_suffix(f\".{export_format}\")\n    self.export_format = export_format\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData.numpy2list","title":"<code>numpy2list(data)</code>  <code>staticmethod</code>","text":"<p>Convert the arrays of list dictionaries to a list of dictionaries with list.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict[str, Any]]</code> <p>The data to convert.</p> required <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List[Dict[str, Any]]: The converted data.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>@staticmethod\ndef numpy2list(data: List[Dict[str, Any]]) -&gt; List[Dict[str, Any]]:\n    \"\"\"Convert the arrays of list dictionaries to a list of dictionaries with list.\n\n    Args:\n        data (List[Dict[str, Any]]): The data to convert.\n\n    Returns:\n        List[Dict[str, Any]]: The converted data.\n    \"\"\"\n    return [\n        {k: v.tolist() for k, v in d.items() if isinstance(v, np.ndarray)}\n        for d in data\n    ]\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData.to_numpy","title":"<code>to_numpy()</code>","text":"<p>Export the data to a numpy file.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def to_numpy(self) -&gt; None:\n    \"\"\"Export the data to a numpy file.\"\"\"\n    _data: Any = self.data\n    if self.export_format.lower() == \"npy\":\n        np.save(self.fname, _data)\n    elif self.export_format.lower() == \"npz\":\n        np.savez(self.fname, data=_data)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.ExportData.to_pickle","title":"<code>to_pickle()</code>","text":"<p>Export the data to a pickle file.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def to_pickle(self) -&gt; None:\n    \"\"\"Export the data to a pickle file.\"\"\"\n    if self.export_format.lower() == \"pkl\":\n        with open(self.fname, \"wb\") as f:\n            pickle.dump(self.data, f)\n    elif self.export_format.lower() == pkl_gz:\n        with gzip.open(self.fname, \"wb\") as f:\n            pickle.dump(self.data, f)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.PklConverter","title":"<code>PklConverter</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Convert pkl data to a CSV files.</p> <p>General information</p> <p>The pkl data is converted to a CSV file. The CSV file is saved in the same directory as the input file. The name of the CSV file is the same as the input file with the suffix <code>.csv</code> and prefixed with the name of the 'major' keys in the pkl file. Furthermore, a graph of the data is optionally saved as a PDF file to have a visual representation of the data structure.</p> <p>Supported file formats</p> <p>Currently supported file formats:</p> <p>-[x] pkl -[x] pkl.gz -[x] ...</p> <p>Attributes:</p> Name Type Description <code>choices_fformat</code> <code>Set[str]</code> <p>The choices for the file format.</p> <code>choices_export</code> <code>Set[str]</code> <p>The choices for the export format.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>class PklConverter(Converter):\n    \"\"\"Convert pkl data to a CSV files.\n\n    !!! info \"General information\"\n\n        The pkl data is converted to a CSV file. The CSV file is saved in the same\n        directory as the input file. The name of the CSV file is the same as the\n        input file with the suffix `.csv` and prefixed with the name of the\n        'major' keys in the pkl file. Furthermore, a graph of the data is optionally\n        saved as a PDF file to have a visual representation of the data structure.\n\n    !!! info \"Supported file formats\"\n\n        Currently supported file formats:\n\n        -[x] pkl\n        -[x] pkl.gz\n        -[x] ...\n\n\n    Attributes:\n        choices_fformat (Set[str]): The choices for the file format.\n        choices_export (Set[str]): The choices for the export format.\n    \"\"\"\n\n    choices_fformat = {\"latin1\", \"utf-8\", \"utf-16\", \"utf-32\"}\n    choices_export = {\"npy\", \"npz\", \"pkl\", pkl_gz}\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from pkl files to CSV files.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the pkl file to convert.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the optional encoding of the pickle file.\"\n            \" Default is 'latin1'.\",\n            type=str,\n            default=\"latin1\",\n            choices=self.choices_fformat,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File format for export of the output file. Default is 'pkl'.\",\n            type=str,\n            default=\"pkl\",\n            choices=self.choices_export,\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n        \"\"\"Convert the input file to the output file.\n\n        Args:\n            infile (Path): The input file of the as a path object.\n            file_format (str): The output file format.\n\n        Returns:\n            Dict[str, Any]: The data as a dictionary, which can be a nested dictionary\n        \"\"\"\n\n        def _convert(\n            data_values: Dict[str, Any], _key: Optional[List[str]] = None\n        ) -&gt; List[Dict[str, Any]]:\n            \"\"\"Convert the data to a list of dictionaries.\n\n            The new key is the old key plus all the subkeys. The new value is the\n            value of the subkey if the value is an instance of an array.\n\n            For avoiding `pylint` errors, the `_key` argument is set to `None` by\n            default and is set to an empty list if it is `None`. This is done to\n            avoid the `pylint` error `dangerous-default-value`. The `_key` argument\n            is used to keep track of the keys of the nested dictionary. Furthermore,\n            the `_key` argument is used to create the new key for the new dictionary.\n\n            Finally, the new dictionary is appended to the list of dictionaries.\n\n            Args:\n                data_values (Dict[str, Any]): The data as a dictionary.\n\n            Returns:\n                List[Dict[str, Any]]: The data as a list of dictionaries.\n            \"\"\"\n            data_list = []\n            if _key is None:\n                _key = []\n            for key, value in data_values.items():\n                if isinstance(value, dict):\n                    _key.append(str(key))\n                    data_list.extend(_convert(value, _key))\n                    _key.pop()\n                elif isinstance(value, np.ndarray):\n                    data_list.append({\"_\".join(_key + [key]): value})\n            return data_list\n\n        data_dict = {}\n        for key, value in pkl2any(infile, file_format).items():\n            if isinstance(value, dict):\n                data_dict[key] = _convert(value)\n        return data_dict\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the converted pickle data to a file.\n\n        Args:\n            data (Any): The converted nested dictionary of the pkl data.\n            fname (Path): The filename of the output file.\n            export_format (str): The file format of the output file.\n\n        Raises:\n            ValueError: If the export format is not supported.\n        \"\"\"\n        if export_format.lower() not in self.choices_export:\n            raise ValueError(f\"Unsupported file format '{export_format}'.\")\n\n        fname = pure_fname(fname)\n\n        for key, value in data.items():\n            _fname = Path(f\"{fname}_{key}\").with_suffix(f\".{export_format}\")\n            ExportData(data=value, fname=_fname, export_format=export_format)()\n\n    def __call__(self) -&gt; None:\n        \"\"\"Run the converter.\"\"\"\n        args = self.get_args()\n        data = self.convert(args[\"infile\"], args[\"file_format\"])\n        self.save(data, args[\"infile\"], args[\"export_format\"])\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.PklConverter.__call__","title":"<code>__call__()</code>","text":"<p>Run the converter.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Run the converter.\"\"\"\n    args = self.get_args()\n    data = self.convert(args[\"infile\"], args[\"file_format\"])\n    self.save(data, args[\"infile\"], args[\"export_format\"])\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.PklConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the input file to the output file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file of the as a path object.</p> required <code>file_format</code> <code>str</code> <p>The output file format.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The data as a dictionary, which can be a nested dictionary</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n    \"\"\"Convert the input file to the output file.\n\n    Args:\n        infile (Path): The input file of the as a path object.\n        file_format (str): The output file format.\n\n    Returns:\n        Dict[str, Any]: The data as a dictionary, which can be a nested dictionary\n    \"\"\"\n\n    def _convert(\n        data_values: Dict[str, Any], _key: Optional[List[str]] = None\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Convert the data to a list of dictionaries.\n\n        The new key is the old key plus all the subkeys. The new value is the\n        value of the subkey if the value is an instance of an array.\n\n        For avoiding `pylint` errors, the `_key` argument is set to `None` by\n        default and is set to an empty list if it is `None`. This is done to\n        avoid the `pylint` error `dangerous-default-value`. The `_key` argument\n        is used to keep track of the keys of the nested dictionary. Furthermore,\n        the `_key` argument is used to create the new key for the new dictionary.\n\n        Finally, the new dictionary is appended to the list of dictionaries.\n\n        Args:\n            data_values (Dict[str, Any]): The data as a dictionary.\n\n        Returns:\n            List[Dict[str, Any]]: The data as a list of dictionaries.\n        \"\"\"\n        data_list = []\n        if _key is None:\n            _key = []\n        for key, value in data_values.items():\n            if isinstance(value, dict):\n                _key.append(str(key))\n                data_list.extend(_convert(value, _key))\n                _key.pop()\n            elif isinstance(value, np.ndarray):\n                data_list.append({\"_\".join(_key + [key]): value})\n        return data_list\n\n    data_dict = {}\n    for key, value in pkl2any(infile, file_format).items():\n        if isinstance(value, dict):\n            data_dict[key] = _convert(value)\n    return data_dict\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.PklConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from pkl files to CSV files.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the pkl file to convert.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the optional encoding of the pickle file.\"\n        \" Default is 'latin1'.\",\n        type=str,\n        default=\"latin1\",\n        choices=self.choices_fformat,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File format for export of the output file. Default is 'pkl'.\",\n        type=str,\n        default=\"pkl\",\n        choices=self.choices_export,\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.PklConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the converted pickle data to a file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The converted nested dictionary of the pkl data.</p> required <code>fname</code> <code>Path</code> <p>The filename of the output file.</p> required <code>export_format</code> <code>str</code> <p>The file format of the output file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the export format is not supported.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the converted pickle data to a file.\n\n    Args:\n        data (Any): The converted nested dictionary of the pkl data.\n        fname (Path): The filename of the output file.\n        export_format (str): The file format of the output file.\n\n    Raises:\n        ValueError: If the export format is not supported.\n    \"\"\"\n    if export_format.lower() not in self.choices_export:\n        raise ValueError(f\"Unsupported file format '{export_format}'.\")\n\n    fname = pure_fname(fname)\n\n    for key, value in data.items():\n        _fname = Path(f\"{fname}_{key}\").with_suffix(f\".{export_format}\")\n        ExportData(data=value, fname=_fname, export_format=export_format)()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_converter.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the command line script.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the command line script.\"\"\"\n    PklConverter()()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer","title":"<code>PklVisualizer</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Visualize the pkl data as a graph.</p> <p>Attributes:</p> Name Type Description <code>choices_fformat</code> <code>Set[str]</code> <p>The choices for the file format.</p> <code>choices_export</code> <code>Set[str]</code> <p>The choices for the export format.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>class PklVisualizer(Converter):\n    \"\"\"Visualize the pkl data as a graph.\n\n    Attributes:\n        choices_fformat (Set[str]): The choices for the file format.\n        choices_export (Set[str]): The choices for the export format.\n    \"\"\"\n\n    choices_fformat = {\"latin1\", \"utf-8\", \"utf-16\", \"utf-32\"}\n    choices_export = {\"png\", \"pdf\", \"jpg\", \"jpeg\"}\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from pkl files to a graph.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the pkl file to convert to graph.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the optional encoding of the pickle file.\"\n            \" Default is 'latin1'.\",\n            type=str,\n            default=\"latin1\",\n            choices=self.choices_fformat,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File extension for the graph export.\",\n            type=str,\n            default=\"pdf\",\n            choices=self.choices_export,\n        )\n\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n        \"\"\"Convert the input file to the output file.\n\n        Args:\n            infile (Path): The input file of the as a path object.\n            file_format (str): The encoding of the pickle file.\n\n        Raises:\n            ValueError: If the data is not a dictionary.\n\n        Returns:\n            Dict[str, Any]: The data as a dictionary, which can be a nested dictionary.\n        \"\"\"\n        data = PklVisualizer().get_type(pkl2any(infile, encoding=file_format))\n        if not isinstance(data, dict):\n            raise ValueError(f\"Data is not a dictionary: {data}\")\n        graph = PklVisualizer().create_graph(fname=infile, data_dict=data)\n\n        pos = nx.kamada_kawai_layout(graph, scale=2)\n        nx.draw_networkx_nodes(\n            graph, pos, node_size=100, node_color=\"lightblue\", alpha=0.8\n        )\n        nx.draw_networkx_edges(graph, pos, width=0.5, edge_color=\"grey\", alpha=0.5)\n        nx.draw_networkx_labels(graph, pos, font_size=10, font_family=\"sans-serif\")\n        plt.axis(\"off\")\n        return data\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the graph to a file and the data and their types to a json file.\n\n        Args:\n            data (Any): The data to save, which can be a nested dictionary.\n            fname (Path): The filename of the file to save.\n            export_format (str): The file format to save the graph to.\n\n        Raises:\n            ValueError: If the export format is not supported.\n        \"\"\"\n        if export_format.lower() not in self.choices_export:\n            raise ValueError(f\"Export format '{export_format}' is not supported.\")\n\n        plt.savefig(\n            pure_fname(fname).with_suffix(f\".{export_format}\"),\n            format=export_format,\n        )\n\n        with open(\n            pure_fname(fname).with_suffix(\".json\"), \"w+\", encoding=\"utf-8\"\n        ) as outfile:\n            json.dump(data, outfile, indent=4)\n\n    def get_type(self, value: Any) -&gt; Union[Dict[str, Any], str]:\n        \"\"\"Get the type of the value.\n\n        Args:\n            value (Any): The value to get the type from.\n\n        Returns:\n            Union[Dict[str, Any], str]: The type of the value.\n        \"\"\"\n        if isinstance(value, dict):\n            return {key: self.get_type(value) for key, value in value.items()}\n        if isinstance(value, np.ndarray):\n            return f\"{type(value)} of shape {value.shape}\"\n        return str(type(value))\n\n    def add_nodes(self, graph: nx.DiGraph, data_dict: Dict[str, Any]) -&gt; None:\n        \"\"\"Add nodes to the graph.\n\n        Args:\n            graph (nx.DiGraph): The graph to add nodes to.\n            data_dict (Dict[str, Any]): The data dictionary to get the nodes from.\n        \"\"\"\n        for key, value in data_dict.items():\n            graph.add_node(key)\n            if isinstance(value, dict):\n                for item in value:\n                    graph.add_edge(key, item)\n                    graph.add_node(item)\n                self.add_nodes(graph=graph, data_dict=value)\n            elif \"of shape\" in str(value):\n                value = value.split(\"of shape\")\n                graph.add_node(value[0])\n                graph.add_edge(key, value[0])\n\n                graph.add_node(value[-1])\n                graph.add_edge(value[0], value[-1])\n\n            else:\n                graph.add_node(value)\n                graph.add_edge(key, value)\n\n    def create_graph(self, fname: Path, data_dict: Dict[str, Any]) -&gt; nx.DiGraph:\n        \"\"\"Create the graph.\n\n        Args:\n            fname (Path): The filename of the file to create the graph from.\n            data_dict (Dict[str, Any]): The data dictionary to create the graph from.\n\n        Returns:\n            nx.DiGraph: The graph created from the data dictionary.\n        \"\"\"\n        graph = nx.DiGraph()\n        graph.add_node(str(fname.name))\n        for key in data_dict:\n            graph.add_edge(str(fname.name), key)\n\n        self.add_nodes(graph=graph, data_dict=data_dict)\n        return graph\n\n    def __call__(self) -&gt; None:\n        \"\"\"Create the graph and save it as a PDF file.\"\"\"\n        args = self.get_args()\n        self.save(\n            data=self.convert(args[\"infile\"], args[\"file_format\"]),\n            fname=args[\"infile\"],\n            export_format=args[\"export_format\"],\n        )\n        plt.show()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.__call__","title":"<code>__call__()</code>","text":"<p>Create the graph and save it as a PDF file.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Create the graph and save it as a PDF file.\"\"\"\n    args = self.get_args()\n    self.save(\n        data=self.convert(args[\"infile\"], args[\"file_format\"]),\n        fname=args[\"infile\"],\n        export_format=args[\"export_format\"],\n    )\n    plt.show()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.add_nodes","title":"<code>add_nodes(graph, data_dict)</code>","text":"<p>Add nodes to the graph.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>DiGraph</code> <p>The graph to add nodes to.</p> required <code>data_dict</code> <code>Dict[str, Any]</code> <p>The data dictionary to get the nodes from.</p> required Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def add_nodes(self, graph: nx.DiGraph, data_dict: Dict[str, Any]) -&gt; None:\n    \"\"\"Add nodes to the graph.\n\n    Args:\n        graph (nx.DiGraph): The graph to add nodes to.\n        data_dict (Dict[str, Any]): The data dictionary to get the nodes from.\n    \"\"\"\n    for key, value in data_dict.items():\n        graph.add_node(key)\n        if isinstance(value, dict):\n            for item in value:\n                graph.add_edge(key, item)\n                graph.add_node(item)\n            self.add_nodes(graph=graph, data_dict=value)\n        elif \"of shape\" in str(value):\n            value = value.split(\"of shape\")\n            graph.add_node(value[0])\n            graph.add_edge(key, value[0])\n\n            graph.add_node(value[-1])\n            graph.add_edge(value[0], value[-1])\n\n        else:\n            graph.add_node(value)\n            graph.add_edge(key, value)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the input file to the output file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file of the as a path object.</p> required <code>file_format</code> <code>str</code> <p>The encoding of the pickle file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the data is not a dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The data as a dictionary, which can be a nested dictionary.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n    \"\"\"Convert the input file to the output file.\n\n    Args:\n        infile (Path): The input file of the as a path object.\n        file_format (str): The encoding of the pickle file.\n\n    Raises:\n        ValueError: If the data is not a dictionary.\n\n    Returns:\n        Dict[str, Any]: The data as a dictionary, which can be a nested dictionary.\n    \"\"\"\n    data = PklVisualizer().get_type(pkl2any(infile, encoding=file_format))\n    if not isinstance(data, dict):\n        raise ValueError(f\"Data is not a dictionary: {data}\")\n    graph = PklVisualizer().create_graph(fname=infile, data_dict=data)\n\n    pos = nx.kamada_kawai_layout(graph, scale=2)\n    nx.draw_networkx_nodes(\n        graph, pos, node_size=100, node_color=\"lightblue\", alpha=0.8\n    )\n    nx.draw_networkx_edges(graph, pos, width=0.5, edge_color=\"grey\", alpha=0.5)\n    nx.draw_networkx_labels(graph, pos, font_size=10, font_family=\"sans-serif\")\n    plt.axis(\"off\")\n    return data\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.create_graph","title":"<code>create_graph(fname, data_dict)</code>","text":"<p>Create the graph.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>Path</code> <p>The filename of the file to create the graph from.</p> required <code>data_dict</code> <code>Dict[str, Any]</code> <p>The data dictionary to create the graph from.</p> required <p>Returns:</p> Type Description <code>DiGraph</code> <p>nx.DiGraph: The graph created from the data dictionary.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def create_graph(self, fname: Path, data_dict: Dict[str, Any]) -&gt; nx.DiGraph:\n    \"\"\"Create the graph.\n\n    Args:\n        fname (Path): The filename of the file to create the graph from.\n        data_dict (Dict[str, Any]): The data dictionary to create the graph from.\n\n    Returns:\n        nx.DiGraph: The graph created from the data dictionary.\n    \"\"\"\n    graph = nx.DiGraph()\n    graph.add_node(str(fname.name))\n    for key in data_dict:\n        graph.add_edge(str(fname.name), key)\n\n    self.add_nodes(graph=graph, data_dict=data_dict)\n    return graph\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from pkl files to a graph.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the pkl file to convert to graph.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the optional encoding of the pickle file.\"\n        \" Default is 'latin1'.\",\n        type=str,\n        default=\"latin1\",\n        choices=self.choices_fformat,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File extension for the graph export.\",\n        type=str,\n        default=\"pdf\",\n        choices=self.choices_export,\n    )\n\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.get_type","title":"<code>get_type(value)</code>","text":"<p>Get the type of the value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to get the type from.</p> required <p>Returns:</p> Type Description <code>Union[Dict[str, Any], str]</code> <p>Union[Dict[str, Any], str]: The type of the value.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def get_type(self, value: Any) -&gt; Union[Dict[str, Any], str]:\n    \"\"\"Get the type of the value.\n\n    Args:\n        value (Any): The value to get the type from.\n\n    Returns:\n        Union[Dict[str, Any], str]: The type of the value.\n    \"\"\"\n    if isinstance(value, dict):\n        return {key: self.get_type(value) for key, value in value.items()}\n    if isinstance(value, np.ndarray):\n        return f\"{type(value)} of shape {value.shape}\"\n    return str(type(value))\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.PklVisualizer.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the graph to a file and the data and their types to a json file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save, which can be a nested dictionary.</p> required <code>fname</code> <code>Path</code> <p>The filename of the file to save.</p> required <code>export_format</code> <code>str</code> <p>The file format to save the graph to.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the export format is not supported.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the graph to a file and the data and their types to a json file.\n\n    Args:\n        data (Any): The data to save, which can be a nested dictionary.\n        fname (Path): The filename of the file to save.\n        export_format (str): The file format to save the graph to.\n\n    Raises:\n        ValueError: If the export format is not supported.\n    \"\"\"\n    if export_format.lower() not in self.choices_export:\n        raise ValueError(f\"Export format '{export_format}' is not supported.\")\n\n    plt.savefig(\n        pure_fname(fname).with_suffix(f\".{export_format}\"),\n        format=export_format,\n    )\n\n    with open(\n        pure_fname(fname).with_suffix(\".json\"), \"w+\", encoding=\"utf-8\"\n    ) as outfile:\n        json.dump(data, outfile, indent=4)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pkl_visualizer.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the converter from the command line.</p> Source code in <code>spectrafit/plugins/pkl_visualizer.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the converter from the command line.\"\"\"\n    PklVisualizer()()\n</code></pre>"},{"location":"api/converter_api/#rixs-converter-for-rixs-data","title":"RIXS Converter for RIXS data","text":"<p>Transform the raw pkl data into a JSON, TOML, or numpy file for RIXS.</p> <p>On top of the <code>RIXSConverter</code> class, the <code>RIXSVisualizer</code> class is available to visualize the RIXS data and provide a method to take RIXS cuts.</p> <p>This module contains the RIXS visualizer class.</p>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter","title":"<code>RIXSConverter</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Transform the raw pkl data into a JSON, TOML, or numpy file for RIXS.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>class RIXSConverter(Converter):\n    \"\"\"Transform the raw pkl data into a JSON, TOML, or numpy file for RIXS.\"\"\"\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from pkl files to a JSON, TOML, \"\n            \"or numpy file for RIXS-Visualizer.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the pkl file to convert to JSON, TOML, or numpy.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the optional encoding of the pickle file.\"\n            \" Default is 'latin1'.\",\n            type=str,\n            default=\"latin1\",\n            choices=choices_fformat,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File extension for the export.\",\n            type=str,\n            default=\"json\",\n            choices=choices_export,\n        )\n        parser.add_argument(\n            \"-ie\",\n            \"--incident_energy\",\n            help=\"Name of the incident energy\",\n            type=str,\n        )\n        parser.add_argument(\n            \"-ee\",\n            \"--emission_energy\",\n            help=\"Name of the emitted energy\",\n            type=str,\n        )\n        parser.add_argument(\n            \"-rm\",\n            \"--rixs_map\",\n            help=\"Name of the RIXS map\",\n        )\n        parser.add_argument(\n            \"-m\",\n            \"--mode\",\n            help=\"Mode of the RIXS map post-processing, e.g. 'sum' or 'max'.\"\n            \"Default is 'sum'.\",\n            type=str,\n            default=\"sum\",\n            choices=choices_mode,\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert the pkl file to a dictionary.\n\n        Args:\n            infile (Path): The input file.\n            file_format (str): The file format for the optional encoding of the pickle\n                file.\n\n        Returns:\n            MutableMapping[str, Any]: The data dictionary from the pkl file.\n        \"\"\"\n        data_dict = {}\n        for _dict in pkl2any(infile, file_format):\n            data_dict.update(_dict)\n        return data_dict\n\n    def create_rixs(\n        self,\n        data: MutableMapping[str, Any],\n        incident_energy: str,\n        emission_energy: str,\n        rixs_map: str,\n        mode: str,\n    ) -&gt; RIXSModelAPI:\n        \"\"\"Create the RIXS map from the pkl file.\n\n        Args:\n            data (MutableMapping[str, Any]): The data dictionary from the pkl file.\n            incident_energy (str): The name of the incident energy.\n            emission_energy (str): The name of the emitted energy.\n            rixs_map (str): The name of the RIXS map.\n            mode (str): The mode of the RIXS map post-processing, e.g. 'sum' or 'max'.\n\n        Raises:\n            ValueError: If the mode is not in the choices.\n            KeyError: If the incident energy, emission energy, or RIXS map is not in\n                the data.\n\n        Returns:\n            RIXSModelAPI: The RIXS map as a RIXSModelAPI pydantic object.\n        \"\"\"\n        if mode not in choices_mode:\n            raise ValueError(f\"Mode '{mode}' not in {choices_mode}.\")\n        if incident_energy not in data:\n            self.raise_error(incident_energy, data)\n        if emission_energy not in data:\n            self.raise_error(incident_energy, data)\n        if rixs_map not in data:\n            self.raise_error(incident_energy, data)\n\n        if mode == \"sum\":\n            rixs_val = np.sum(data[rixs_map], axis=0)\n        elif mode == \"mean\":\n            rixs_val = np.mean(data[rixs_map], axis=0)\n        return RIXSModelAPI(\n            incident_energy=data[incident_energy],\n            emission_energy=data[emission_energy],\n            rixs_map=rixs_val,\n        )\n\n    @staticmethod\n    def raise_error(wrong_key: str, data: Any) -&gt; None:\n        \"\"\"Raise an error if the key is not in the data.\n\n        Args:\n            wrong_key (str): The key which is not in the data.\n            data (Any): The data dictionary from the pkl file.\n\n        Raises:\n            KeyError: If the key is not in the data.\n\n        \"\"\"\n        raise KeyError(\n            f\"Key '{wrong_key}' not in data. Aailable keys are: {list(data.keys())}.\"\n        )\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the data to a file.\n\n        Args:\n            data (Any): The data to save.\n            fname (Path): The filename.\n            export_format (str): The file extension for the export.\n\n        Raises:\n            ValueError: If the export format is not in the choices.\n        \"\"\"\n        if export_format not in choices_export:\n            raise ValueError(\n                f\"Export format '{export_format}' not in {choices_export}.\"\n            )\n\n        if export_format == \"json\":\n            with open(\n                pure_fname(fname).with_suffix(f\".{export_format}\"),\n                \"w\",\n                encoding=\"utf-8\",\n            ) as f:\n                json.dump(self.numpydict2listdict(data), f, indent=4)\n        elif export_format in {\"toml\", \"lock\"}:\n            with open(\n                pure_fname(fname).with_suffix(f\".{export_format}\"),\n                \"wb\",\n            ) as f:\n                tomli_w.dump(self.numpydict2listdict(data), f, multiline_strings=False)\n        elif export_format == \"npy\":\n            np.save(pure_fname(fname).with_suffix(f\".{export_format}\"), data)\n        elif export_format == \"npz\":\n            np.savez(pure_fname(fname).with_suffix(f\".{export_format}\"), **data)\n\n    @staticmethod\n    def numpydict2listdict(data: MutableMapping[str, Any]) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert a dictionary with numpy arrays to a dictionary with lists.\n\n        Args:\n            data (MutableMapping[str, Any]): The data dictionary.\n\n        Returns:\n            MutableMapping[str, Any]: The data dictionary with lists.\n        \"\"\"\n        return {k: v.tolist() for k, v in data.items()}\n\n    def __call__(self) -&gt; None:\n        \"\"\"Run the converter.\"\"\"\n        args = self.get_args()\n        self.save(\n            data=self.create_rixs(\n                data=self.convert(args[\"infile\"], args[\"file_format\"]),\n                incident_energy=args[\"incident_energy\"],\n                emission_energy=args[\"emission_energy\"],\n                rixs_map=args[\"rixs_map\"],\n                mode=args[\"mode\"],\n            ).model_dump(),\n            fname=args[\"infile\"],\n            export_format=args[\"export_format\"],\n        )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.__call__","title":"<code>__call__()</code>","text":"<p>Run the converter.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Run the converter.\"\"\"\n    args = self.get_args()\n    self.save(\n        data=self.create_rixs(\n            data=self.convert(args[\"infile\"], args[\"file_format\"]),\n            incident_energy=args[\"incident_energy\"],\n            emission_energy=args[\"emission_energy\"],\n            rixs_map=args[\"rixs_map\"],\n            mode=args[\"mode\"],\n        ).model_dump(),\n        fname=args[\"infile\"],\n        export_format=args[\"export_format\"],\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the pkl file to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file.</p> required <code>file_format</code> <code>str</code> <p>The file format for the optional encoding of the pickle file.</p> required <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any]: The data dictionary from the pkl file.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert the pkl file to a dictionary.\n\n    Args:\n        infile (Path): The input file.\n        file_format (str): The file format for the optional encoding of the pickle\n            file.\n\n    Returns:\n        MutableMapping[str, Any]: The data dictionary from the pkl file.\n    \"\"\"\n    data_dict = {}\n    for _dict in pkl2any(infile, file_format):\n        data_dict.update(_dict)\n    return data_dict\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.create_rixs","title":"<code>create_rixs(data, incident_energy, emission_energy, rixs_map, mode)</code>","text":"<p>Create the RIXS map from the pkl file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>MutableMapping[str, Any]</code> <p>The data dictionary from the pkl file.</p> required <code>incident_energy</code> <code>str</code> <p>The name of the incident energy.</p> required <code>emission_energy</code> <code>str</code> <p>The name of the emitted energy.</p> required <code>rixs_map</code> <code>str</code> <p>The name of the RIXS map.</p> required <code>mode</code> <code>str</code> <p>The mode of the RIXS map post-processing, e.g. 'sum' or 'max'.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the mode is not in the choices.</p> <code>KeyError</code> <p>If the incident energy, emission energy, or RIXS map is not in the data.</p> <p>Returns:</p> Name Type Description <code>RIXSModelAPI</code> <code>RIXSModelAPI</code> <p>The RIXS map as a RIXSModelAPI pydantic object.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>def create_rixs(\n    self,\n    data: MutableMapping[str, Any],\n    incident_energy: str,\n    emission_energy: str,\n    rixs_map: str,\n    mode: str,\n) -&gt; RIXSModelAPI:\n    \"\"\"Create the RIXS map from the pkl file.\n\n    Args:\n        data (MutableMapping[str, Any]): The data dictionary from the pkl file.\n        incident_energy (str): The name of the incident energy.\n        emission_energy (str): The name of the emitted energy.\n        rixs_map (str): The name of the RIXS map.\n        mode (str): The mode of the RIXS map post-processing, e.g. 'sum' or 'max'.\n\n    Raises:\n        ValueError: If the mode is not in the choices.\n        KeyError: If the incident energy, emission energy, or RIXS map is not in\n            the data.\n\n    Returns:\n        RIXSModelAPI: The RIXS map as a RIXSModelAPI pydantic object.\n    \"\"\"\n    if mode not in choices_mode:\n        raise ValueError(f\"Mode '{mode}' not in {choices_mode}.\")\n    if incident_energy not in data:\n        self.raise_error(incident_energy, data)\n    if emission_energy not in data:\n        self.raise_error(incident_energy, data)\n    if rixs_map not in data:\n        self.raise_error(incident_energy, data)\n\n    if mode == \"sum\":\n        rixs_val = np.sum(data[rixs_map], axis=0)\n    elif mode == \"mean\":\n        rixs_val = np.mean(data[rixs_map], axis=0)\n    return RIXSModelAPI(\n        incident_energy=data[incident_energy],\n        emission_energy=data[emission_energy],\n        rixs_map=rixs_val,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from pkl files to a JSON, TOML, \"\n        \"or numpy file for RIXS-Visualizer.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the pkl file to convert to JSON, TOML, or numpy.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the optional encoding of the pickle file.\"\n        \" Default is 'latin1'.\",\n        type=str,\n        default=\"latin1\",\n        choices=choices_fformat,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File extension for the export.\",\n        type=str,\n        default=\"json\",\n        choices=choices_export,\n    )\n    parser.add_argument(\n        \"-ie\",\n        \"--incident_energy\",\n        help=\"Name of the incident energy\",\n        type=str,\n    )\n    parser.add_argument(\n        \"-ee\",\n        \"--emission_energy\",\n        help=\"Name of the emitted energy\",\n        type=str,\n    )\n    parser.add_argument(\n        \"-rm\",\n        \"--rixs_map\",\n        help=\"Name of the RIXS map\",\n    )\n    parser.add_argument(\n        \"-m\",\n        \"--mode\",\n        help=\"Mode of the RIXS map post-processing, e.g. 'sum' or 'max'.\"\n        \"Default is 'sum'.\",\n        type=str,\n        default=\"sum\",\n        choices=choices_mode,\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.numpydict2listdict","title":"<code>numpydict2listdict(data)</code>  <code>staticmethod</code>","text":"<p>Convert a dictionary with numpy arrays to a dictionary with lists.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>MutableMapping[str, Any]</code> <p>The data dictionary.</p> required <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any]: The data dictionary with lists.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>@staticmethod\ndef numpydict2listdict(data: MutableMapping[str, Any]) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert a dictionary with numpy arrays to a dictionary with lists.\n\n    Args:\n        data (MutableMapping[str, Any]): The data dictionary.\n\n    Returns:\n        MutableMapping[str, Any]: The data dictionary with lists.\n    \"\"\"\n    return {k: v.tolist() for k, v in data.items()}\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.raise_error","title":"<code>raise_error(wrong_key, data)</code>  <code>staticmethod</code>","text":"<p>Raise an error if the key is not in the data.</p> <p>Parameters:</p> Name Type Description Default <code>wrong_key</code> <code>str</code> <p>The key which is not in the data.</p> required <code>data</code> <code>Any</code> <p>The data dictionary from the pkl file.</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key is not in the data.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>@staticmethod\ndef raise_error(wrong_key: str, data: Any) -&gt; None:\n    \"\"\"Raise an error if the key is not in the data.\n\n    Args:\n        wrong_key (str): The key which is not in the data.\n        data (Any): The data dictionary from the pkl file.\n\n    Raises:\n        KeyError: If the key is not in the data.\n\n    \"\"\"\n    raise KeyError(\n        f\"Key '{wrong_key}' not in data. Aailable keys are: {list(data.keys())}.\"\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.RIXSConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the data to a file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The data to save.</p> required <code>fname</code> <code>Path</code> <p>The filename.</p> required <code>export_format</code> <code>str</code> <p>The file extension for the export.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the export format is not in the choices.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the data to a file.\n\n    Args:\n        data (Any): The data to save.\n        fname (Path): The filename.\n        export_format (str): The file extension for the export.\n\n    Raises:\n        ValueError: If the export format is not in the choices.\n    \"\"\"\n    if export_format not in choices_export:\n        raise ValueError(\n            f\"Export format '{export_format}' not in {choices_export}.\"\n        )\n\n    if export_format == \"json\":\n        with open(\n            pure_fname(fname).with_suffix(f\".{export_format}\"),\n            \"w\",\n            encoding=\"utf-8\",\n        ) as f:\n            json.dump(self.numpydict2listdict(data), f, indent=4)\n    elif export_format in {\"toml\", \"lock\"}:\n        with open(\n            pure_fname(fname).with_suffix(f\".{export_format}\"),\n            \"wb\",\n        ) as f:\n            tomli_w.dump(self.numpydict2listdict(data), f, multiline_strings=False)\n    elif export_format == \"npy\":\n        np.save(pure_fname(fname).with_suffix(f\".{export_format}\"), data)\n    elif export_format == \"npz\":\n        np.savez(pure_fname(fname).with_suffix(f\".{export_format}\"), **data)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_converter.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the command line script.</p> Source code in <code>spectrafit/plugins/rixs_converter.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the command line script.\"\"\"\n    RIXSConverter()()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp","title":"<code>RIXSApp</code>","text":"<p>               Bases: <code>RIXSFigure</code></p> <p>Create the RIXS app.</p> <p>About the RIXS app</p> <p>The RIXS app is a web application that allows you to visualize the RIXS data. The app is based on the Dash framework. The app is composed of three figures: the RIXS figure, the XES figure and the XAS figure.</p> <p>The RIXS figure is a 3D surface plot. The XES figure is a line plot showing the XES spectrum. The XAS figure is a line plot showing the XAS spectrum.</p> <p>The RIXS figure is interactive. You can zoom in and out, rotate the figure, and change the color scale. The XES and XAS figures are not interactive.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>class RIXSApp(RIXSFigure):  # pragma: no cover\n    \"\"\"Create the RIXS app.\n\n    !!! info \"About the RIXS app\"\n\n        The RIXS app is a web application that allows you to visualize the RIXS\n        data. The app is based on the Dash framework. The app is composed of\n        three figures: the RIXS figure, the XES figure and the XAS figure.\n\n        The RIXS figure is a 3D surface plot. The XES figure is a line plot\n        showing the XES spectrum. The XAS figure is a line plot showing the XAS\n        spectrum.\n\n        The RIXS figure is interactive. You can zoom in and out, rotate the\n        figure, and change the color scale. The XES and XAS figures are not\n        interactive.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        incident_energy: NDArray[np.float64],\n        emission_energy: NDArray[np.float64],\n        rixs_map: NDArray[np.float64],\n        size: SizeRatioAPI = SizeRatioAPI(\n            size=(500, 500),\n            ratio_rixs=(2, 2),\n            ratio_xas=(3, 1),\n            ratio_xes=(3, 1),\n        ),\n        main_title: MainTitleAPI = MainTitleAPI(rixs=\"RIXS\", xes=\"XES\", xas=\"XAS\"),\n        fdir: Path = Path(\"./\"),\n        mode: str = \"server\",\n        jupyter_dash: bool = False,\n        port: int = 8050,\n        debug: bool = False,\n    ) -&gt; None:\n        \"\"\"Create the RIXS app.\n\n        Args:\n            incident_energy (NDArray[np.float64]): Incident energy.\n            emission_energy (NDArray[np.float64]): Emission energy.\n            rixs_map (NDArray[np.float64]): RIXS data as a 2D array.\n            size (SizeRatioAPI, optional): Size of the figures. Defaults to\n                 SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xas=(3, 1),\n                 ratio_xes=(3, 1)).\n            main_title (MainTitleAPI, optional): Main title of the figures.\n                 Defaults to MainTitleAPI(rixs=\"RIXS\", xes=\"XES\", xas=\"XAS\").\n            fdir (Path, optional): Directory to save the figures. Defaults to\n                 Path(\"./\").\n            mode (str, optional): Mode of the app. Defaults to \"server\".\n            port (int, optional): Port of the app. Defaults to 8050.\n            jupyter_dash (bool, optional): Jupyter Dash mode. Defaults to False.\n            debug (bool, optional): Debug mode. Defaults to False.\n\n        \"\"\"\n        super().__init__(\n            incident_energy=incident_energy,\n            emission_energy=emission_energy,\n            rixs_map=rixs_map,\n            size=size,\n        )\n        self.fdir = fdir\n        self.main_title = main_title\n        self.mode = mode\n        self.jupyter_dash = jupyter_dash\n        self.port = port\n        self.debug = debug\n        if not self.debug:\n            self.logging_flask()\n\n    def logging_flask(self) -&gt; None:\n        \"\"\"Set the logging level of the Flask server to ERROR.\"\"\"\n        log = logging.getLogger(\"werkzeug\")\n        log.setLevel(logging.ERROR)\n\n    def colorscale(self) -&gt; html.Div:\n        \"\"\"Create the color scale dropdown.\n\n        Returns:\n            html.Div: Color scale dropdown.\n        \"\"\"\n        return html.Div(\n            [\n                dbc.Label(\"Color Scale\"),\n                dcc.Dropdown(\n                    id=\"colorscale\",\n                    options=[\n                        {\"label\": \"Viridis\", \"value\": \"Viridis\"},\n                        {\"label\": \"Plasma\", \"value\": \"Plasma\"},\n                        {\"label\": \"Inferno\", \"value\": \"Inferno\"},\n                        {\"label\": \"Magma\", \"value\": \"Magma\"},\n                        {\"label\": \"Cividis\", \"value\": \"Cividis\"},\n                        {\"label\": \"Greys\", \"value\": \"Greys\"},\n                        {\"label\": \"Greens\", \"value\": \"Greens\"},\n                        {\"label\": \"YlOrRd\", \"value\": \"YlOrRd\"},\n                        {\"label\": \"Bluered\", \"value\": \"Bluered\"},\n                        {\"label\": \"RdBu\", \"value\": \"RdBu\"},\n                        {\"label\": \"Reds\", \"value\": \"Reds\"},\n                        {\"label\": \"Blues\", \"value\": \"Blues\"},\n                        {\"label\": \"Picnic\", \"value\": \"Picnic\"},\n                        {\"label\": \"Rainbow\", \"value\": \"Rainbow\"},\n                        {\"label\": \"Portland\", \"value\": \"Portland\"},\n                        {\"label\": \"Jet\", \"value\": \"Jet\"},\n                        {\"label\": \"Hot\", \"value\": \"Hot\"},\n                        {\"label\": \"Blackbody\", \"value\": \"Blackbody\"},\n                        {\"label\": \"Earth\", \"value\": \"Earth\"},\n                        {\"label\": \"Electric\", \"value\": \"Electric\"},\n                        {\"label\": \"Viridis\", \"value\": \"Viridis\"},\n                        {\"label\": \"Cividis\", \"value\": \"Cividis\"},\n                    ],\n                    value=\"Viridis\",\n                ),\n            ],\n            className=\"dbc\",\n        )\n\n    def opacity(self) -&gt; html.Div:\n        \"\"\"Create the opacity slider.\n\n        Returns:\n            html.Div: Opacity slider.\n        \"\"\"\n        return html.Div(\n            [\n                dbc.Label(\"Opacity\"),\n                dcc.Slider(\n                    id=\"opacity\",\n                    min=0,\n                    max=1,\n                    step=0.1,\n                    value=1,\n                    marks={i: str(i) for i in range(2)},\n                ),\n            ]\n        )\n\n    def header(self) -&gt; dbc.Card:\n        \"\"\"Create the header.\n\n        Returns:\n            dbc.Card: Header as a bootstrap card.\n        \"\"\"\n        return dbc.Card(\n            dbc.CardBody(\n                [\n                    html.H4(\n                        \"RIXS Visualizer App\",\n                        className=\"bg-primary text-white p-2 mb-2 text-center\",\n                    )\n                ]\n            )\n        )\n\n    def pre_body(self) -&gt; Tuple[html.Div, html.Div, html.Div]:\n        \"\"\"Create the body.\n\n        Returns:\n            Tuple[html.Div, html.Div, html.Div]: Body as a tuple of three plot parts.\n        \"\"\"\n        rixs = html.Div(\n            [\n                dbc.Label(self.main_title.rixs),\n                dcc.Graph(id=\"rixs-figure\"),\n            ]\n        )\n        xes = html.Div(\n            [\n                dbc.Label(self.main_title.xes),\n                dcc.Graph(id=\"xes-figure\"),\n            ]\n        )\n        xas = html.Div(\n            [\n                dbc.Label(self.main_title.xas),\n                dcc.Graph(id=\"xas-figure\"),\n            ]\n        )\n        return rixs, xes, xas\n\n    def body(self) -&gt; dbc.Card:\n        \"\"\"Create the body.\n\n        Returns:\n            dbc.Card: Body as a bootstrap card.\n        \"\"\"\n        colorscale = self.colorscale()\n        opacity = self.opacity()\n        rixs, xes, xas = self.pre_body()\n\n        return (\n            dbc.Card(\n                dbc.CardBody(\n                    [\n                        dbc.Row([ThemeChangerAIO(aio_id=\"theme\")]),\n                        dbc.Row(\n                            [\n                                dbc.Col(\n                                    html.H1(\"RIXS Viewer\", className=\"text-center\")\n                                ),\n                            ],\n                            justify=\"left\",\n                        ),\n                        html.Br(),\n                        dbc.Row(\n                            [\n                                dbc.Col(colorscale),\n                                dbc.Col(opacity),\n                            ],\n                        ),\n                        html.Br(),\n                        dbc.Row(\n                            [\n                                dbc.Col(rixs),\n                                dbc.Col([xes, xas]),\n                            ],\n                            justify=\"left\",\n                        ),\n                        html.Br(),\n                    ],\n                ),\n                class_name=\"mt-4\",\n            ),\n        )[0]\n\n    def footer(self) -&gt; dbc.Card:\n        \"\"\"Create the footer.\n\n        Returns:\n            dbc.Card: Footer as a bootstrap card.\n        \"\"\"\n        return (\n            dbc.Card(\n                dbc.CardBody(\n                    [\n                        dbc.Row(\n                            [\n                                dcc.Markdown(\n                                    \"\"\"\n                    ### RIXS Viewer\n                    This is a simple RIXS viewer. It is based on the\n                    [Dash](https://dash.plotly.com/)\n                    framework and uses the [Plotly](https://plotly.com/python/) library\n                    for plotting. The code is available on\n                    [GitHub](https://github.com/anselmoo/spectrafit).\n                    \"\"\"\n                                ),\n                            ],\n                            justify=\"left\",\n                        )\n                    ]\n                ),\n                class_name=\"mt-4\",\n            ),\n        )[0]\n\n    def app_run(self) -&gt; None:\n        \"\"\"Run the app.\"\"\"\n        dbc_css = (\n            \"https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates/dbc.min.css\"\n        )\n        external_stylesheets = [dbc.themes.COSMO, dbc_css]\n        if self.jupyter_dash:\n            app = JupyterDash(__name__, external_stylesheets=external_stylesheets)\n        else:\n            app = dash.Dash(\n                __name__,\n                external_stylesheets=external_stylesheets,\n                meta_tags=[\n                    {\n                        \"name\": \"viewport\",\n                        \"content\": \"width=device-width, initial-scale=1\",\n                    }\n                ],\n            )\n        app.layout = dbc.Container(\n            [\n                self.header(),\n                self.body(),\n                self.footer(),\n            ],\n            fluid=True,\n        )\n\n        @app.callback(\n            [\n                dash.dependencies.Output(\"xes-figure\", \"figure\"),\n                dash.dependencies.Output(\"xas-figure\", \"figure\"),\n                dash.dependencies.Output(\"rixs-figure\", \"figure\"),\n            ],\n            [\n                dash.dependencies.Input(\"rixs-figure\", \"hoverData\"),\n                dash.dependencies.Input(\"rixs-figure\", \"clickData\"),\n                dash.dependencies.Input(\"colorscale\", \"value\"),\n                dash.dependencies.Input(\"opacity\", \"value\"),\n                dash.dependencies.Input(ThemeChangerAIO.ids.radio(\"theme\"), \"value\"),\n            ],\n        )\n        def update_hover_data(\n            hoverData: Dict[str, List[Dict[str, float]]],\n            clickData: Dict[str, List[Dict[str, float]]],\n            colorscale: str,\n            opacity: float,\n            theme: str,\n        ) -&gt; Tuple[go.Figure, go.Figure, go.Figure]:\n            if hoverData is None:\n                return (\n                    self.create_xas(\n                        x=self.incident_energy,\n                        y=self.rixs_map[:, int(self.emission_energy.size / 2)],\n                        template=template_from_url(theme),\n                    ),\n                    self.create_xes(\n                        x=self.emission_energy,\n                        y=self.rixs_map[int(self.incident_energy.size / 2), :],\n                        template=template_from_url(theme),\n                    ),\n                    self.create_rixs(\n                        colorscale=colorscale,\n                        opacity=opacity,\n                        template=template_from_url(theme),\n                    ),\n                )\n            x = hoverData[\"points\"][0][\"x\"]\n            y = hoverData[\"points\"][0][\"y\"]\n            xes_fig = self.create_xas(\n                x=self.incident_energy,\n                y=self.rixs_map[:, int(x)],\n                template=template_from_url(theme),\n            )\n            xas_fig = self.create_xes(\n                x=self.emission_energy,\n                y=self.rixs_map[int(y), :],\n                template=template_from_url(theme),\n            )\n            rixs_fig = self.create_rixs(\n                colorscale=colorscale,\n                opacity=opacity,\n                template=template_from_url(theme),\n            )\n            if clickData is None:\n                return xes_fig, xas_fig, rixs_fig\n            cx = clickData[\"points\"][0][\"x\"]\n            cy = clickData[\"points\"][0][\"y\"]\n            pd.DataFrame(\n                {\"energy\": self.emission_energy, \"intensity\": self.rixs_map[int(cy), :]}\n            ).to_csv(\n                self.fdir / f\"xes_cut_{np.round(cx, 8)}.txt\",\n                index=False,\n            )\n            pd.DataFrame(\n                {\"energy\": self.incident_energy, \"intensity\": self.rixs_map[:, int(cx)]}\n            ).to_csv(\n                self.fdir / f\"xas_cut_{np.round(cy, 8)}.txt\",\n                index=False,\n            )\n            return xes_fig, xas_fig, rixs_fig\n\n        if self.jupyter_dash:\n            app.run_server(mode=self.mode, debug=self.debug, port=self.port)\n        else:\n            app.run_server(debug=self.debug, port=self.port)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.__init__","title":"<code>__init__(incident_energy, emission_energy, rixs_map, size=SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xas=(3, 1), ratio_xes=(3, 1)), main_title=MainTitleAPI(rixs='RIXS', xes='XES', xas='XAS'), fdir=Path('./'), mode='server', jupyter_dash=False, port=8050, debug=False)</code>","text":"<p>Create the RIXS app.</p> <p>Parameters:</p> Name Type Description Default <code>incident_energy</code> <code>NDArray[float64]</code> <p>Incident energy.</p> required <code>emission_energy</code> <code>NDArray[float64]</code> <p>Emission energy.</p> required <code>rixs_map</code> <code>NDArray[float64]</code> <p>RIXS data as a 2D array.</p> required <code>size</code> <code>SizeRatioAPI</code> <p>Size of the figures. Defaults to  SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xas=(3, 1),  ratio_xes=(3, 1)).</p> <code>SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xas=(3, 1), ratio_xes=(3, 1))</code> <code>main_title</code> <code>MainTitleAPI</code> <p>Main title of the figures.  Defaults to MainTitleAPI(rixs=\"RIXS\", xes=\"XES\", xas=\"XAS\").</p> <code>MainTitleAPI(rixs='RIXS', xes='XES', xas='XAS')</code> <code>fdir</code> <code>Path</code> <p>Directory to save the figures. Defaults to  Path(\"./\").</p> <code>Path('./')</code> <code>mode</code> <code>str</code> <p>Mode of the app. Defaults to \"server\".</p> <code>'server'</code> <code>port</code> <code>int</code> <p>Port of the app. Defaults to 8050.</p> <code>8050</code> <code>jupyter_dash</code> <code>bool</code> <p>Jupyter Dash mode. Defaults to False.</p> <code>False</code> <code>debug</code> <code>bool</code> <p>Debug mode. Defaults to False.</p> <code>False</code> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def __init__(\n    self,\n    incident_energy: NDArray[np.float64],\n    emission_energy: NDArray[np.float64],\n    rixs_map: NDArray[np.float64],\n    size: SizeRatioAPI = SizeRatioAPI(\n        size=(500, 500),\n        ratio_rixs=(2, 2),\n        ratio_xas=(3, 1),\n        ratio_xes=(3, 1),\n    ),\n    main_title: MainTitleAPI = MainTitleAPI(rixs=\"RIXS\", xes=\"XES\", xas=\"XAS\"),\n    fdir: Path = Path(\"./\"),\n    mode: str = \"server\",\n    jupyter_dash: bool = False,\n    port: int = 8050,\n    debug: bool = False,\n) -&gt; None:\n    \"\"\"Create the RIXS app.\n\n    Args:\n        incident_energy (NDArray[np.float64]): Incident energy.\n        emission_energy (NDArray[np.float64]): Emission energy.\n        rixs_map (NDArray[np.float64]): RIXS data as a 2D array.\n        size (SizeRatioAPI, optional): Size of the figures. Defaults to\n             SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xas=(3, 1),\n             ratio_xes=(3, 1)).\n        main_title (MainTitleAPI, optional): Main title of the figures.\n             Defaults to MainTitleAPI(rixs=\"RIXS\", xes=\"XES\", xas=\"XAS\").\n        fdir (Path, optional): Directory to save the figures. Defaults to\n             Path(\"./\").\n        mode (str, optional): Mode of the app. Defaults to \"server\".\n        port (int, optional): Port of the app. Defaults to 8050.\n        jupyter_dash (bool, optional): Jupyter Dash mode. Defaults to False.\n        debug (bool, optional): Debug mode. Defaults to False.\n\n    \"\"\"\n    super().__init__(\n        incident_energy=incident_energy,\n        emission_energy=emission_energy,\n        rixs_map=rixs_map,\n        size=size,\n    )\n    self.fdir = fdir\n    self.main_title = main_title\n    self.mode = mode\n    self.jupyter_dash = jupyter_dash\n    self.port = port\n    self.debug = debug\n    if not self.debug:\n        self.logging_flask()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.app_run","title":"<code>app_run()</code>","text":"<p>Run the app.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def app_run(self) -&gt; None:\n    \"\"\"Run the app.\"\"\"\n    dbc_css = (\n        \"https://cdn.jsdelivr.net/gh/AnnMarieW/dash-bootstrap-templates/dbc.min.css\"\n    )\n    external_stylesheets = [dbc.themes.COSMO, dbc_css]\n    if self.jupyter_dash:\n        app = JupyterDash(__name__, external_stylesheets=external_stylesheets)\n    else:\n        app = dash.Dash(\n            __name__,\n            external_stylesheets=external_stylesheets,\n            meta_tags=[\n                {\n                    \"name\": \"viewport\",\n                    \"content\": \"width=device-width, initial-scale=1\",\n                }\n            ],\n        )\n    app.layout = dbc.Container(\n        [\n            self.header(),\n            self.body(),\n            self.footer(),\n        ],\n        fluid=True,\n    )\n\n    @app.callback(\n        [\n            dash.dependencies.Output(\"xes-figure\", \"figure\"),\n            dash.dependencies.Output(\"xas-figure\", \"figure\"),\n            dash.dependencies.Output(\"rixs-figure\", \"figure\"),\n        ],\n        [\n            dash.dependencies.Input(\"rixs-figure\", \"hoverData\"),\n            dash.dependencies.Input(\"rixs-figure\", \"clickData\"),\n            dash.dependencies.Input(\"colorscale\", \"value\"),\n            dash.dependencies.Input(\"opacity\", \"value\"),\n            dash.dependencies.Input(ThemeChangerAIO.ids.radio(\"theme\"), \"value\"),\n        ],\n    )\n    def update_hover_data(\n        hoverData: Dict[str, List[Dict[str, float]]],\n        clickData: Dict[str, List[Dict[str, float]]],\n        colorscale: str,\n        opacity: float,\n        theme: str,\n    ) -&gt; Tuple[go.Figure, go.Figure, go.Figure]:\n        if hoverData is None:\n            return (\n                self.create_xas(\n                    x=self.incident_energy,\n                    y=self.rixs_map[:, int(self.emission_energy.size / 2)],\n                    template=template_from_url(theme),\n                ),\n                self.create_xes(\n                    x=self.emission_energy,\n                    y=self.rixs_map[int(self.incident_energy.size / 2), :],\n                    template=template_from_url(theme),\n                ),\n                self.create_rixs(\n                    colorscale=colorscale,\n                    opacity=opacity,\n                    template=template_from_url(theme),\n                ),\n            )\n        x = hoverData[\"points\"][0][\"x\"]\n        y = hoverData[\"points\"][0][\"y\"]\n        xes_fig = self.create_xas(\n            x=self.incident_energy,\n            y=self.rixs_map[:, int(x)],\n            template=template_from_url(theme),\n        )\n        xas_fig = self.create_xes(\n            x=self.emission_energy,\n            y=self.rixs_map[int(y), :],\n            template=template_from_url(theme),\n        )\n        rixs_fig = self.create_rixs(\n            colorscale=colorscale,\n            opacity=opacity,\n            template=template_from_url(theme),\n        )\n        if clickData is None:\n            return xes_fig, xas_fig, rixs_fig\n        cx = clickData[\"points\"][0][\"x\"]\n        cy = clickData[\"points\"][0][\"y\"]\n        pd.DataFrame(\n            {\"energy\": self.emission_energy, \"intensity\": self.rixs_map[int(cy), :]}\n        ).to_csv(\n            self.fdir / f\"xes_cut_{np.round(cx, 8)}.txt\",\n            index=False,\n        )\n        pd.DataFrame(\n            {\"energy\": self.incident_energy, \"intensity\": self.rixs_map[:, int(cx)]}\n        ).to_csv(\n            self.fdir / f\"xas_cut_{np.round(cy, 8)}.txt\",\n            index=False,\n        )\n        return xes_fig, xas_fig, rixs_fig\n\n    if self.jupyter_dash:\n        app.run_server(mode=self.mode, debug=self.debug, port=self.port)\n    else:\n        app.run_server(debug=self.debug, port=self.port)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.body","title":"<code>body()</code>","text":"<p>Create the body.</p> <p>Returns:</p> Type Description <code>Card</code> <p>dbc.Card: Body as a bootstrap card.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def body(self) -&gt; dbc.Card:\n    \"\"\"Create the body.\n\n    Returns:\n        dbc.Card: Body as a bootstrap card.\n    \"\"\"\n    colorscale = self.colorscale()\n    opacity = self.opacity()\n    rixs, xes, xas = self.pre_body()\n\n    return (\n        dbc.Card(\n            dbc.CardBody(\n                [\n                    dbc.Row([ThemeChangerAIO(aio_id=\"theme\")]),\n                    dbc.Row(\n                        [\n                            dbc.Col(\n                                html.H1(\"RIXS Viewer\", className=\"text-center\")\n                            ),\n                        ],\n                        justify=\"left\",\n                    ),\n                    html.Br(),\n                    dbc.Row(\n                        [\n                            dbc.Col(colorscale),\n                            dbc.Col(opacity),\n                        ],\n                    ),\n                    html.Br(),\n                    dbc.Row(\n                        [\n                            dbc.Col(rixs),\n                            dbc.Col([xes, xas]),\n                        ],\n                        justify=\"left\",\n                    ),\n                    html.Br(),\n                ],\n            ),\n            class_name=\"mt-4\",\n        ),\n    )[0]\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.colorscale","title":"<code>colorscale()</code>","text":"<p>Create the color scale dropdown.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Color scale dropdown.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def colorscale(self) -&gt; html.Div:\n    \"\"\"Create the color scale dropdown.\n\n    Returns:\n        html.Div: Color scale dropdown.\n    \"\"\"\n    return html.Div(\n        [\n            dbc.Label(\"Color Scale\"),\n            dcc.Dropdown(\n                id=\"colorscale\",\n                options=[\n                    {\"label\": \"Viridis\", \"value\": \"Viridis\"},\n                    {\"label\": \"Plasma\", \"value\": \"Plasma\"},\n                    {\"label\": \"Inferno\", \"value\": \"Inferno\"},\n                    {\"label\": \"Magma\", \"value\": \"Magma\"},\n                    {\"label\": \"Cividis\", \"value\": \"Cividis\"},\n                    {\"label\": \"Greys\", \"value\": \"Greys\"},\n                    {\"label\": \"Greens\", \"value\": \"Greens\"},\n                    {\"label\": \"YlOrRd\", \"value\": \"YlOrRd\"},\n                    {\"label\": \"Bluered\", \"value\": \"Bluered\"},\n                    {\"label\": \"RdBu\", \"value\": \"RdBu\"},\n                    {\"label\": \"Reds\", \"value\": \"Reds\"},\n                    {\"label\": \"Blues\", \"value\": \"Blues\"},\n                    {\"label\": \"Picnic\", \"value\": \"Picnic\"},\n                    {\"label\": \"Rainbow\", \"value\": \"Rainbow\"},\n                    {\"label\": \"Portland\", \"value\": \"Portland\"},\n                    {\"label\": \"Jet\", \"value\": \"Jet\"},\n                    {\"label\": \"Hot\", \"value\": \"Hot\"},\n                    {\"label\": \"Blackbody\", \"value\": \"Blackbody\"},\n                    {\"label\": \"Earth\", \"value\": \"Earth\"},\n                    {\"label\": \"Electric\", \"value\": \"Electric\"},\n                    {\"label\": \"Viridis\", \"value\": \"Viridis\"},\n                    {\"label\": \"Cividis\", \"value\": \"Cividis\"},\n                ],\n                value=\"Viridis\",\n            ),\n        ],\n        className=\"dbc\",\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.footer","title":"<code>footer()</code>","text":"<p>Create the footer.</p> <p>Returns:</p> Type Description <code>Card</code> <p>dbc.Card: Footer as a bootstrap card.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def footer(self) -&gt; dbc.Card:\n    \"\"\"Create the footer.\n\n    Returns:\n        dbc.Card: Footer as a bootstrap card.\n    \"\"\"\n    return (\n        dbc.Card(\n            dbc.CardBody(\n                [\n                    dbc.Row(\n                        [\n                            dcc.Markdown(\n                                \"\"\"\n                ### RIXS Viewer\n                This is a simple RIXS viewer. It is based on the\n                [Dash](https://dash.plotly.com/)\n                framework and uses the [Plotly](https://plotly.com/python/) library\n                for plotting. The code is available on\n                [GitHub](https://github.com/anselmoo/spectrafit).\n                \"\"\"\n                            ),\n                        ],\n                        justify=\"left\",\n                    )\n                ]\n            ),\n            class_name=\"mt-4\",\n        ),\n    )[0]\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.header","title":"<code>header()</code>","text":"<p>Create the header.</p> <p>Returns:</p> Type Description <code>Card</code> <p>dbc.Card: Header as a bootstrap card.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def header(self) -&gt; dbc.Card:\n    \"\"\"Create the header.\n\n    Returns:\n        dbc.Card: Header as a bootstrap card.\n    \"\"\"\n    return dbc.Card(\n        dbc.CardBody(\n            [\n                html.H4(\n                    \"RIXS Visualizer App\",\n                    className=\"bg-primary text-white p-2 mb-2 text-center\",\n                )\n            ]\n        )\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.logging_flask","title":"<code>logging_flask()</code>","text":"<p>Set the logging level of the Flask server to ERROR.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def logging_flask(self) -&gt; None:\n    \"\"\"Set the logging level of the Flask server to ERROR.\"\"\"\n    log = logging.getLogger(\"werkzeug\")\n    log.setLevel(logging.ERROR)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.opacity","title":"<code>opacity()</code>","text":"<p>Create the opacity slider.</p> <p>Returns:</p> Type Description <code>Div</code> <p>html.Div: Opacity slider.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def opacity(self) -&gt; html.Div:\n    \"\"\"Create the opacity slider.\n\n    Returns:\n        html.Div: Opacity slider.\n    \"\"\"\n    return html.Div(\n        [\n            dbc.Label(\"Opacity\"),\n            dcc.Slider(\n                id=\"opacity\",\n                min=0,\n                max=1,\n                step=0.1,\n                value=1,\n                marks={i: str(i) for i in range(2)},\n            ),\n        ]\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSApp.pre_body","title":"<code>pre_body()</code>","text":"<p>Create the body.</p> <p>Returns:</p> Type Description <code>Tuple[Div, Div, Div]</code> <p>Tuple[html.Div, html.Div, html.Div]: Body as a tuple of three plot parts.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def pre_body(self) -&gt; Tuple[html.Div, html.Div, html.Div]:\n    \"\"\"Create the body.\n\n    Returns:\n        Tuple[html.Div, html.Div, html.Div]: Body as a tuple of three plot parts.\n    \"\"\"\n    rixs = html.Div(\n        [\n            dbc.Label(self.main_title.rixs),\n            dcc.Graph(id=\"rixs-figure\"),\n        ]\n    )\n    xes = html.Div(\n        [\n            dbc.Label(self.main_title.xes),\n            dcc.Graph(id=\"xes-figure\"),\n        ]\n    )\n    xas = html.Div(\n        [\n            dbc.Label(self.main_title.xas),\n            dcc.Graph(id=\"xas-figure\"),\n        ]\n    )\n    return rixs, xes, xas\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure","title":"<code>RIXSFigure</code>","text":"<p>Class to create the RIXS figure.</p> <p>About the RIXS figure</p> <p>The RIXS figure is composed of three subplots:</p> <ul> <li>RIXS -&gt; 3D plot</li> <li>XES -&gt; 2D plot</li> <li>XAS -&gt; 2D plot</li> </ul> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>class RIXSFigure:\n    \"\"\"Class to create the RIXS figure.\n\n    !!! info \"About the RIXS figure\"\n\n        The RIXS figure is composed of three subplots:\n\n        - RIXS -&gt; 3D plot\n        - XES -&gt; 2D plot\n        - XAS -&gt; 2D plot\n\n    \"\"\"\n\n    def __init__(\n        self,\n        incident_energy: NDArray[np.float64],\n        emission_energy: NDArray[np.float64],\n        rixs_map: NDArray[np.float64],\n        size: SizeRatioAPI = SizeRatioAPI(\n            size=(500, 500),\n            ratio_rixs=(2, 2),\n            ratio_xes=(3, 1),\n            ratio_xas=(3, 1),\n        ),\n        x_axis: XAxisAPI = XAxisAPI(name=\"Incident Energy\", unit=\"eV\"),\n        y_axis: YAxisAPI = YAxisAPI(name=\"Emission Energy\", unit=\"eV\"),\n        z_axis: ZAxisAPI = ZAxisAPI(name=\"Intensity\", unit=\"a.u.\"),\n    ):\n        \"\"\"Initialize the RIXS figure.\n\n        Args:\n            incident_energy (NDArray[np.float64]): Incident energy.\n            emission_energy (NDArray[np.float64]): Emission energy.\n            rixs_map (NDArray[np.float64]): RIXS data as a 2D array.\n            size (SizeRatioAPI, optional): Size of the figure.\n                 Defaults to SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2),\n                 ratio_xes=(3, 1), ratio_xas=(3, 1)).\n            x_axis (XAxisAPI, optional): X-Axis of the figure.\n                 Defaults to XAxisAPI(name=\"Incident Energy\", unit=\"eV\").\n            y_axis (YAxisAPI, optional): Y-Axis of the figure.\n                 Defaults to YAxisAPI(name=\"Emission Energy\", unit=\"eV\").\n            z_axis (ZAxisAPI, optional): Z-Axis of the figure.\n                 Defaults to ZAxisAPI(name=\"Intensity\", unit=\"a.u.\").\n        \"\"\"\n        self.incident_energy = incident_energy\n        self.emission_energy = emission_energy\n        self.rixs_map = rixs_map\n\n        self.x_axis = x_axis\n        self.y_axis = y_axis\n        self.z_axis = z_axis\n        self.initialize_figure_size(size)\n\n    def initialize_figure_size(self, size: SizeRatioAPI) -&gt; None:\n        \"\"\"Initialize the size of the figure.\n\n        Args:\n            size (SizeRatioAPI): Size of the figure.\n        \"\"\"\n        self.rixs_width = int(size.size[0] * size.ratio_rixs[0])\n        self.rixs_height = int(size.size[1] * size.ratio_rixs[1])\n        self.xas_width = int(size.size[0] * size.ratio_xas[0])\n        self.xas_height = int(size.size[1] * size.ratio_xas[1])\n        self.xes_width = int(size.size[0] * size.ratio_xes[0])\n        self.xes_height = int(size.size[1] * size.ratio_xes[1])\n\n    def create_rixs(\n        self,\n        colorscale: str = \"Viridis\",\n        opacity: float = 0.9,\n        template: Optional[str] = None,\n    ) -&gt; go.Figure:\n        \"\"\"Create the RIXS figure.\n\n        Args:\n            colorscale (str, optional): Color scale. Defaults to \"Viridis\".\n            opacity (float, optional): Opacity of the surface. Defaults to 0.9.\n            template (str, optional): Template of the figure. Defaults to None.\n\n        Returns:\n            go.Figure: RIXS figure.\n        \"\"\"\n        fig = go.Figure(\n            data=[\n                go.Surface(\n                    x=self.incident_energy,\n                    y=self.emission_energy,\n                    z=self.rixs_map,\n                    colorscale=colorscale,\n                    opacity=opacity,\n                    contours_z=dict(\n                        show=True,\n                        usecolormap=True,\n                        highlightcolor=\"limegreen\",\n                        project_z=True,\n                    ),\n                )\n            ],\n        )\n\n        fig.update_layout(\n            autosize=True,\n            width=self.rixs_width,\n            height=self.rixs_height,\n            scene=dict(\n                xaxis_title=DataFramePlot.title_text(\n                    name=self.x_axis.name, unit=self.x_axis.unit\n                ),\n                yaxis_title=DataFramePlot.title_text(\n                    name=self.y_axis.name, unit=self.y_axis.unit\n                ),\n                zaxis_title=DataFramePlot.title_text(\n                    name=self.z_axis.name, unit=self.z_axis.unit\n                ),\n                aspectmode=\"cube\",\n            ),\n            template=template,\n        )\n        fig.update_traces(\n            contours_z=dict(\n                show=True, usecolormap=True, highlightcolor=\"limegreen\", project_z=True\n            )\n        )\n        return fig\n\n    def create_xes(\n        self,\n        x: NDArray[np.float64],\n        y: NDArray[np.float64],\n        template: Optional[str] = None,\n    ) -&gt; go.Figure:\n        \"\"\"Create the XES figure.\n\n        Args:\n            x (NDArray[np.float64]): X-axis of the figure.\n            y (NDArray[np.float64]): Y-axis of the figure.\n            template (str, optional): Template of the figure. Defaults to None.\n\n        Returns:\n            go.Figure: XES figure.\n        \"\"\"\n        fig = px.line(x=x, y=y, template=template)\n        fig.update_layout(\n            autosize=True,\n            width=self.xes_width,\n            height=self.xes_height,\n        )\n        # Udate the xaxis title\n        fig.update_xaxes(\n            title_text=DataFramePlot.title_text(\n                name=self.y_axis.name, unit=self.y_axis.unit\n            )\n        )\n        # Update the yaxis title\n        fig.update_yaxes(\n            title_text=DataFramePlot.title_text(\n                name=self.z_axis.name, unit=self.z_axis.unit\n            )\n        )\n        return fig\n\n    def create_xas(\n        self,\n        x: NDArray[np.float64],\n        y: NDArray[np.float64],\n        template: Optional[str] = None,\n    ) -&gt; go.Figure:\n        \"\"\"Create the XAS figure.\n\n        Args:\n            x (NDArray[np.float64]): X-axis of the figure.\n            y (NDArray[np.float64]): Y-axis of the figure.\n            template (str, optional): Template of the figure. Defaults to None.\n\n        Returns:\n            go.Figure: XAS figure.\n        \"\"\"\n        fig = px.line(x=x, y=y, template=template)\n        fig.update_layout(\n            autosize=True,\n            width=self.xas_width,\n            height=self.xas_height,\n        )\n        fig.update_xaxes(\n            title_text=DataFramePlot.title_text(\n                name=self.x_axis.name, unit=self.x_axis.unit\n            )\n        )\n        fig.update_yaxes(\n            title_text=DataFramePlot.title_text(\n                name=self.z_axis.name, unit=self.z_axis.unit\n            )\n        )\n        return fig\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure.__init__","title":"<code>__init__(incident_energy, emission_energy, rixs_map, size=SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xes=(3, 1), ratio_xas=(3, 1)), x_axis=XAxisAPI(name='Incident Energy', unit='eV'), y_axis=YAxisAPI(name='Emission Energy', unit='eV'), z_axis=ZAxisAPI(name='Intensity', unit='a.u.'))</code>","text":"<p>Initialize the RIXS figure.</p> <p>Parameters:</p> Name Type Description Default <code>incident_energy</code> <code>NDArray[float64]</code> <p>Incident energy.</p> required <code>emission_energy</code> <code>NDArray[float64]</code> <p>Emission energy.</p> required <code>rixs_map</code> <code>NDArray[float64]</code> <p>RIXS data as a 2D array.</p> required <code>size</code> <code>SizeRatioAPI</code> <p>Size of the figure.  Defaults to SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2),  ratio_xes=(3, 1), ratio_xas=(3, 1)).</p> <code>SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2), ratio_xes=(3, 1), ratio_xas=(3, 1))</code> <code>x_axis</code> <code>XAxisAPI</code> <p>X-Axis of the figure.  Defaults to XAxisAPI(name=\"Incident Energy\", unit=\"eV\").</p> <code>XAxisAPI(name='Incident Energy', unit='eV')</code> <code>y_axis</code> <code>YAxisAPI</code> <p>Y-Axis of the figure.  Defaults to YAxisAPI(name=\"Emission Energy\", unit=\"eV\").</p> <code>YAxisAPI(name='Emission Energy', unit='eV')</code> <code>z_axis</code> <code>ZAxisAPI</code> <p>Z-Axis of the figure.  Defaults to ZAxisAPI(name=\"Intensity\", unit=\"a.u.\").</p> <code>ZAxisAPI(name='Intensity', unit='a.u.')</code> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def __init__(\n    self,\n    incident_energy: NDArray[np.float64],\n    emission_energy: NDArray[np.float64],\n    rixs_map: NDArray[np.float64],\n    size: SizeRatioAPI = SizeRatioAPI(\n        size=(500, 500),\n        ratio_rixs=(2, 2),\n        ratio_xes=(3, 1),\n        ratio_xas=(3, 1),\n    ),\n    x_axis: XAxisAPI = XAxisAPI(name=\"Incident Energy\", unit=\"eV\"),\n    y_axis: YAxisAPI = YAxisAPI(name=\"Emission Energy\", unit=\"eV\"),\n    z_axis: ZAxisAPI = ZAxisAPI(name=\"Intensity\", unit=\"a.u.\"),\n):\n    \"\"\"Initialize the RIXS figure.\n\n    Args:\n        incident_energy (NDArray[np.float64]): Incident energy.\n        emission_energy (NDArray[np.float64]): Emission energy.\n        rixs_map (NDArray[np.float64]): RIXS data as a 2D array.\n        size (SizeRatioAPI, optional): Size of the figure.\n             Defaults to SizeRatioAPI(size=(500, 500), ratio_rixs=(2, 2),\n             ratio_xes=(3, 1), ratio_xas=(3, 1)).\n        x_axis (XAxisAPI, optional): X-Axis of the figure.\n             Defaults to XAxisAPI(name=\"Incident Energy\", unit=\"eV\").\n        y_axis (YAxisAPI, optional): Y-Axis of the figure.\n             Defaults to YAxisAPI(name=\"Emission Energy\", unit=\"eV\").\n        z_axis (ZAxisAPI, optional): Z-Axis of the figure.\n             Defaults to ZAxisAPI(name=\"Intensity\", unit=\"a.u.\").\n    \"\"\"\n    self.incident_energy = incident_energy\n    self.emission_energy = emission_energy\n    self.rixs_map = rixs_map\n\n    self.x_axis = x_axis\n    self.y_axis = y_axis\n    self.z_axis = z_axis\n    self.initialize_figure_size(size)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure.create_rixs","title":"<code>create_rixs(colorscale='Viridis', opacity=0.9, template=None)</code>","text":"<p>Create the RIXS figure.</p> <p>Parameters:</p> Name Type Description Default <code>colorscale</code> <code>str</code> <p>Color scale. Defaults to \"Viridis\".</p> <code>'Viridis'</code> <code>opacity</code> <code>float</code> <p>Opacity of the surface. Defaults to 0.9.</p> <code>0.9</code> <code>template</code> <code>str</code> <p>Template of the figure. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: RIXS figure.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def create_rixs(\n    self,\n    colorscale: str = \"Viridis\",\n    opacity: float = 0.9,\n    template: Optional[str] = None,\n) -&gt; go.Figure:\n    \"\"\"Create the RIXS figure.\n\n    Args:\n        colorscale (str, optional): Color scale. Defaults to \"Viridis\".\n        opacity (float, optional): Opacity of the surface. Defaults to 0.9.\n        template (str, optional): Template of the figure. Defaults to None.\n\n    Returns:\n        go.Figure: RIXS figure.\n    \"\"\"\n    fig = go.Figure(\n        data=[\n            go.Surface(\n                x=self.incident_energy,\n                y=self.emission_energy,\n                z=self.rixs_map,\n                colorscale=colorscale,\n                opacity=opacity,\n                contours_z=dict(\n                    show=True,\n                    usecolormap=True,\n                    highlightcolor=\"limegreen\",\n                    project_z=True,\n                ),\n            )\n        ],\n    )\n\n    fig.update_layout(\n        autosize=True,\n        width=self.rixs_width,\n        height=self.rixs_height,\n        scene=dict(\n            xaxis_title=DataFramePlot.title_text(\n                name=self.x_axis.name, unit=self.x_axis.unit\n            ),\n            yaxis_title=DataFramePlot.title_text(\n                name=self.y_axis.name, unit=self.y_axis.unit\n            ),\n            zaxis_title=DataFramePlot.title_text(\n                name=self.z_axis.name, unit=self.z_axis.unit\n            ),\n            aspectmode=\"cube\",\n        ),\n        template=template,\n    )\n    fig.update_traces(\n        contours_z=dict(\n            show=True, usecolormap=True, highlightcolor=\"limegreen\", project_z=True\n        )\n    )\n    return fig\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure.create_xas","title":"<code>create_xas(x, y, template=None)</code>","text":"<p>Create the XAS figure.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p>X-axis of the figure.</p> required <code>y</code> <code>NDArray[float64]</code> <p>Y-axis of the figure.</p> required <code>template</code> <code>str</code> <p>Template of the figure. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: XAS figure.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def create_xas(\n    self,\n    x: NDArray[np.float64],\n    y: NDArray[np.float64],\n    template: Optional[str] = None,\n) -&gt; go.Figure:\n    \"\"\"Create the XAS figure.\n\n    Args:\n        x (NDArray[np.float64]): X-axis of the figure.\n        y (NDArray[np.float64]): Y-axis of the figure.\n        template (str, optional): Template of the figure. Defaults to None.\n\n    Returns:\n        go.Figure: XAS figure.\n    \"\"\"\n    fig = px.line(x=x, y=y, template=template)\n    fig.update_layout(\n        autosize=True,\n        width=self.xas_width,\n        height=self.xas_height,\n    )\n    fig.update_xaxes(\n        title_text=DataFramePlot.title_text(\n            name=self.x_axis.name, unit=self.x_axis.unit\n        )\n    )\n    fig.update_yaxes(\n        title_text=DataFramePlot.title_text(\n            name=self.z_axis.name, unit=self.z_axis.unit\n        )\n    )\n    return fig\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure.create_xes","title":"<code>create_xes(x, y, template=None)</code>","text":"<p>Create the XES figure.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p>X-axis of the figure.</p> required <code>y</code> <code>NDArray[float64]</code> <p>Y-axis of the figure.</p> required <code>template</code> <code>str</code> <p>Template of the figure. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: XES figure.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def create_xes(\n    self,\n    x: NDArray[np.float64],\n    y: NDArray[np.float64],\n    template: Optional[str] = None,\n) -&gt; go.Figure:\n    \"\"\"Create the XES figure.\n\n    Args:\n        x (NDArray[np.float64]): X-axis of the figure.\n        y (NDArray[np.float64]): Y-axis of the figure.\n        template (str, optional): Template of the figure. Defaults to None.\n\n    Returns:\n        go.Figure: XES figure.\n    \"\"\"\n    fig = px.line(x=x, y=y, template=template)\n    fig.update_layout(\n        autosize=True,\n        width=self.xes_width,\n        height=self.xes_height,\n    )\n    # Udate the xaxis title\n    fig.update_xaxes(\n        title_text=DataFramePlot.title_text(\n            name=self.y_axis.name, unit=self.y_axis.unit\n        )\n    )\n    # Update the yaxis title\n    fig.update_yaxes(\n        title_text=DataFramePlot.title_text(\n            name=self.z_axis.name, unit=self.z_axis.unit\n        )\n    )\n    return fig\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSFigure.initialize_figure_size","title":"<code>initialize_figure_size(size)</code>","text":"<p>Initialize the size of the figure.</p> <p>Parameters:</p> Name Type Description Default <code>size</code> <code>SizeRatioAPI</code> <p>Size of the figure.</p> required Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def initialize_figure_size(self, size: SizeRatioAPI) -&gt; None:\n    \"\"\"Initialize the size of the figure.\n\n    Args:\n        size (SizeRatioAPI): Size of the figure.\n    \"\"\"\n    self.rixs_width = int(size.size[0] * size.ratio_rixs[0])\n    self.rixs_height = int(size.size[1] * size.ratio_rixs[1])\n    self.xas_width = int(size.size[0] * size.ratio_xas[0])\n    self.xas_height = int(size.size[1] * size.ratio_xas[1])\n    self.xes_width = int(size.size[0] * size.ratio_xes[0])\n    self.xes_height = int(size.size[1] * size.ratio_xes[1])\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSVisualizer","title":"<code>RIXSVisualizer</code>","text":"<p>RIXS Visualizer. This class is used to visualize RIXS data.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>class RIXSVisualizer:\n    \"\"\"RIXS Visualizer. This class is used to visualize RIXS data.\"\"\"\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"`RIXS-Visualizer` is a simple RIXS plane viewer, which \"\n            \"allows to visualize RIXS data in a 2D plane.\"\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"The input file. This can be a json, toml, npy, or npz file.\",\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def load_data(infile: Path) -&gt; RIXSModelAPI:\n        \"\"\"Load the data from the input file.\n\n        Args:\n            infile (Path): The input file path. This can be a json, toml, npy, or npz\n                file.\n\n        Raises:\n            ValueError: If the file type is not supported.\n\n        Returns:\n            RIXSModelAPI: The data as a pydantic model object with the following\n                attributes: incident_energy, emission_energy, and rixs_map. The\n                incident_energy and emission_energy are 1D arrays, and the rixs_map is\n                a 2D array.\n        \"\"\"\n        if infile.suffix == \".npy\":\n            data = np.load(infile, allow_pickle=True).item()\n        elif infile.suffix == \".npz\":\n            data = np.load(infile, allow_pickle=True)\n        elif infile.suffix == \".json\":\n            with open(infile, encoding=\"utf-8\") as f:\n                data = json.load(f)\n        elif infile.suffix in {\".toml\", \".lock\"}:\n            with open(infile, \"rb\") as f:\n                data = tomli.load(f)\n        else:\n            raise ValueError(f\"File type {infile.suffix} is not supported.\")\n        return RIXSModelAPI(\n            incident_energy=np.array(data[\"incident_energy\"]),\n            emission_energy=np.array(data[\"emission_energy\"]),\n            rixs_map=np.array(data[\"rixs_map\"]),\n        )\n\n    def __call__(self) -&gt; None:  # pragma: no cover\n        \"\"\"Run the RIXS Visualizer.\"\"\"\n        app = RIXSApp(**self.load_data(self.get_args()[\"infile\"]).model_dump())\n        app.app_run()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSVisualizer.__call__","title":"<code>__call__()</code>","text":"<p>Run the RIXS Visualizer.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def __call__(self) -&gt; None:  # pragma: no cover\n    \"\"\"Run the RIXS Visualizer.\"\"\"\n    app = RIXSApp(**self.load_data(self.get_args()[\"infile\"]).model_dump())\n    app.app_run()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSVisualizer.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"`RIXS-Visualizer` is a simple RIXS plane viewer, which \"\n        \"allows to visualize RIXS data in a 2D plane.\"\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"The input file. This can be a json, toml, npy, or npz file.\",\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.RIXSVisualizer.load_data","title":"<code>load_data(infile)</code>  <code>staticmethod</code>","text":"<p>Load the data from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file path. This can be a json, toml, npy, or npz file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the file type is not supported.</p> <p>Returns:</p> Name Type Description <code>RIXSModelAPI</code> <code>RIXSModelAPI</code> <p>The data as a pydantic model object with the following attributes: incident_energy, emission_energy, and rixs_map. The incident_energy and emission_energy are 1D arrays, and the rixs_map is a 2D array.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>@staticmethod\ndef load_data(infile: Path) -&gt; RIXSModelAPI:\n    \"\"\"Load the data from the input file.\n\n    Args:\n        infile (Path): The input file path. This can be a json, toml, npy, or npz\n            file.\n\n    Raises:\n        ValueError: If the file type is not supported.\n\n    Returns:\n        RIXSModelAPI: The data as a pydantic model object with the following\n            attributes: incident_energy, emission_energy, and rixs_map. The\n            incident_energy and emission_energy are 1D arrays, and the rixs_map is\n            a 2D array.\n    \"\"\"\n    if infile.suffix == \".npy\":\n        data = np.load(infile, allow_pickle=True).item()\n    elif infile.suffix == \".npz\":\n        data = np.load(infile, allow_pickle=True)\n    elif infile.suffix == \".json\":\n        with open(infile, encoding=\"utf-8\") as f:\n            data = json.load(f)\n    elif infile.suffix in {\".toml\", \".lock\"}:\n        with open(infile, \"rb\") as f:\n            data = tomli.load(f)\n    else:\n        raise ValueError(f\"File type {infile.suffix} is not supported.\")\n    return RIXSModelAPI(\n        incident_energy=np.array(data[\"incident_energy\"]),\n        emission_energy=np.array(data[\"emission_energy\"]),\n        rixs_map=np.array(data[\"rixs_map\"]),\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.rixs_visualizer.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Run the RIXS Visualizer from the command line.</p> Source code in <code>spectrafit/plugins/rixs_visualizer.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Run the RIXS Visualizer from the command line.\"\"\"\n    RIXSVisualizer()()\n</code></pre>"},{"location":"api/converter_api/#pptx-converter-for-powerpoint-files","title":"PPTX Converter for PowerPoint files","text":"<p>About the PPTX Converter</p> <p>The <code>PPTXConverter</code> class is a work in progress and is subject to change. Especially, the layout of the PowerPoint file is not yet finalized.</p> <p>Convert the lock file to a powerpoint presentation.</p>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXConverter","title":"<code>PPTXConverter</code>","text":"<p>               Bases: <code>Converter</code></p> <p>Generate a powerpoint presentation from a the spectrafit output.</p> <p>Attributes:</p> Name Type Description <code>pixel_size</code> <code>Dict[str, Dict[str, int]]</code> <p>The pixel size of the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>class PPTXConverter(Converter):\n    \"\"\"Generate a powerpoint presentation from a the spectrafit output.\n\n    Attributes:\n        pixel_size (Dict[str, Dict[str, int]]): The pixel size of the powerpoint\n            presentation.\n    \"\"\"\n\n    pixel_size = PPTXLayoutAPI.pptx_formats.keys()\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parse = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from *.lock output to a \"\n            \"PowerPoint presentation.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parse.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the *.lock file to convert to a powerpoint presentation.\",\n        )\n        parse.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format of the PowerPoint presentation. Default is '16:9'.\",\n            type=str,\n            default=\"16:9\",\n            choices=self.pixel_size,\n        )\n        return vars(parse.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n        \"\"\"Convert the lock file to a powerpoint presentation.\n\n        Args:\n            infile (Path): The input file of the as a path object.\n            file_format (str): The powerpoint presentation file format.\n\n        Raises:\n            ValueError: If the file format is not supported.\n            ValueError: If the input file is not a `*.lock` file.\n\n        Returns:\n            MutableMapping[str, Any]: The converted file as a dictionary.\n        \"\"\"\n        if file_format not in PPTXConverter.pixel_size:\n            raise ValueError(\n                f\"File format '{file_format}' is not supported;\"\n                f\"it must be one of {PPTXConverter.pixel_size}\"\n            )\n\n        if infile.suffix != \".lock\":\n            raise ValueError(\n                f\"File format '{infile.suffix}' is not supported; it must be '.lock'\"\n            )\n\n        with open(infile, \"rb\") as f:\n            data = PPTXDataAPI(**tomli.load(f))\n\n        return {file_format: data}\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the powerpoint presentation.\"\"\"\n        pptx_layout = PPTXLayoutAPI(\n            export_format, data=data[export_format]\n        ).get_pptx_layout()\n\n        PPTXLayout(\n            ratio=pptx_layout.ratio,\n            structure=pptx_layout.structure,\n            fname=Path(f\"{fname.stem}_{export_format.replace(':', '_')}.pptx\"),\n        )()\n\n    def __call__(self) -&gt; None:\n        \"\"\"Convert the lock file to a powerpoint presentation.\"\"\"\n        args = self.get_args()\n        data = self.convert(args[\"infile\"], args[\"file_format\"])\n        self.save(data, args[\"infile\"], args[\"file_format\"])\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXConverter.__call__","title":"<code>__call__()</code>","text":"<p>Convert the lock file to a powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Convert the lock file to a powerpoint presentation.\"\"\"\n    args = self.get_args()\n    data = self.convert(args[\"infile\"], args[\"file_format\"])\n    self.save(data, args[\"infile\"], args[\"file_format\"])\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the lock file to a powerpoint presentation.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file of the as a path object.</p> required <code>file_format</code> <code>str</code> <p>The powerpoint presentation file format.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the file format is not supported.</p> <code>ValueError</code> <p>If the input file is not a <code>*.lock</code> file.</p> <p>Returns:</p> Type Description <code>MutableMapping[str, Any]</code> <p>MutableMapping[str, Any]: The converted file as a dictionary.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; MutableMapping[str, Any]:\n    \"\"\"Convert the lock file to a powerpoint presentation.\n\n    Args:\n        infile (Path): The input file of the as a path object.\n        file_format (str): The powerpoint presentation file format.\n\n    Raises:\n        ValueError: If the file format is not supported.\n        ValueError: If the input file is not a `*.lock` file.\n\n    Returns:\n        MutableMapping[str, Any]: The converted file as a dictionary.\n    \"\"\"\n    if file_format not in PPTXConverter.pixel_size:\n        raise ValueError(\n            f\"File format '{file_format}' is not supported;\"\n            f\"it must be one of {PPTXConverter.pixel_size}\"\n        )\n\n    if infile.suffix != \".lock\":\n        raise ValueError(\n            f\"File format '{infile.suffix}' is not supported; it must be '.lock'\"\n        )\n\n    with open(infile, \"rb\") as f:\n        data = PPTXDataAPI(**tomli.load(f))\n\n    return {file_format: data}\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parse = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from *.lock output to a \"\n        \"PowerPoint presentation.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parse.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the *.lock file to convert to a powerpoint presentation.\",\n    )\n    parse.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format of the PowerPoint presentation. Default is '16:9'.\",\n        type=str,\n        default=\"16:9\",\n        choices=self.pixel_size,\n    )\n    return vars(parse.parse_args())\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the powerpoint presentation.\"\"\"\n    pptx_layout = PPTXLayoutAPI(\n        export_format, data=data[export_format]\n    ).get_pptx_layout()\n\n    PPTXLayout(\n        ratio=pptx_layout.ratio,\n        structure=pptx_layout.structure,\n        fname=Path(f\"{fname.stem}_{export_format.replace(':', '_')}.pptx\"),\n    )()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements","title":"<code>PPTXElements</code>","text":"<p>Generate a powerpoint presentation from a the spectrafit output.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>class PPTXElements:\n    \"\"\"Generate a powerpoint presentation from a the spectrafit output.\"\"\"\n\n    def __init__(self, slide: Type[Any]) -&gt; None:\n        \"\"\"Create a powerpoint presentation from a the spectrafit output.\n\n        Args:\n            slide (type): The slide of the powerpoint presentation.\n        \"\"\"\n        self.slide = slide\n\n    def create_textbox(\n        self,\n        text: str,\n        position: PPTXPositionAPI,\n        font_size: Pt = Pt(16),\n    ) -&gt; None:\n        \"\"\"Create a textbox from the input file.\n\n        Args:\n            text (str): The text of the textbox.\n            position (PPTXPositionAPI): The position of the textbox in the powerpoint\n                presentation.\n            font_size (Pt): The font size of the textbox. Defaults to Pt(16).\n        \"\"\"\n        tx_box = self.slide.shapes.add_textbox(\n            left=position.left,\n            top=position.top,\n            width=position.width,\n            height=position.height,\n        )\n\n        tf = tx_box.text_frame\n        tf.text = text\n        tf.size = font_size\n\n    def create_figure(\n        self,\n        fname: Path,\n        position_figure: PPTXPositionAPI,\n        position_textbox: PPTXPositionAPI,\n        text: str,\n        font_size: Pt,\n    ) -&gt; None:\n        \"\"\"Create a figure from the input file.\n\n        Args:\n            fname (Path): The temporay filename of the figure.\n            position_figure (PPTXPositionAPI): The position of the figure in the\n                powerpoint presentation.\n            position_textbox (PPTXPositionAPI): The position of the textbox in the\n                powerpoint presentation.\n            text (str): The text of the textbox.\n            font_size (Pt): The font size of the textbox.\n        \"\"\"\n        self.slide.shapes.add_picture(\n            str(fname),\n            left=position_figure.left,\n            top=position_figure.top,\n            width=position_figure.width,\n            height=position_figure.height,\n        )\n        self.create_textbox(\n            text=text,\n            position=position_textbox,\n            font_size=font_size,\n        )\n\n    def create_table(\n        self,\n        df: pd.DataFrame,\n        position_table: PPTXPositionAPI,\n        transpose: bool,\n        index_hidden: bool,\n        text: str,\n        position_textbox: PPTXPositionAPI,\n        font_size: Pt = Pt(12),\n    ) -&gt; None:\n        \"\"\"Create a table from the input file.\n\n        Args:\n            df (pd.DataFrame): The data of the table.\n                powerpoint presentation.\n            position_table (PPTXPositionAPI): The position of the table in the\n                powerpoint presentation.\n            transpose (bool): Transpose the table for row-like presentation in\n                powerpoint presentation.\n            index_hidden (bool): Hide the index of the table in the powerpoint\n                presentation.\n            text (str): The text of the table legend.\n            position_textbox (PPTXPositionAPI): The position of the textbox in the\n                powerpoint presentation.\n            font_size (Pt, optional): The font size of the table. Defaults to Pt(12).\n        \"\"\"\n        df = df.round(2)\n        if transpose:\n            df = df.transpose()\n        self.extract_table(\n            df=df, position_table=position_table, index_hidden=index_hidden\n        )\n\n        self.create_textbox(\n            text=text,\n            position=PPTXPositionAPI(\n                left=position_textbox.left,\n                top=position_textbox.top,\n                width=position_textbox.width,\n                height=position_textbox.height,\n            ),\n            font_size=font_size,\n        )\n\n    def extract_table(\n        self,\n        df: pd.DataFrame,\n        position_table: PPTXPositionAPI,\n        index_hidden: bool,\n    ) -&gt; None:\n        \"\"\"Create a table from the input file.\n\n        Args:\n            df (pd.DataFrame): The data of the table(s) in the powerpoint presentation.\n            position_table (PPTXPositionAPI): The position of the table in the\n                powerpoint presentation.\n            index_hidden (bool): Hide the index of the table in the powerpoint\n                presentation.\n        \"\"\"\n        rows, cols = df.shape\n        table = self.slide.shapes.add_table(\n            rows=rows + 1,\n            cols=cols + (not index_hidden),\n            left=position_table.left,\n            top=position_table.top,\n            width=position_table.width,\n            height=position_table.height,\n        )\n        table.table.cell(0, 0).text = \"\"\n        if index_hidden:\n            for i, col in enumerate(df.columns):\n                table.table.cell(0, i).text = str(col)\n                for j, value in enumerate(df[col]):\n                    table.table.cell(j + 1, i).text = str(value)\n        else:\n            for i, index in enumerate(df.index, start=1):\n                table.table.cell(i, 0).text = str(index)\n            for i, col in enumerate(df.columns, start=1):\n                table.table.cell(0, i).text = col\n                for j, value in enumerate(df[col]):\n                    table.table.cell(j + 1, i).text = str(value)\n\n    def create_credit(\n        self,\n        fname: Path,\n        text: str,\n        position_logo: PPTXPositionAPI,\n        position_text: PPTXPositionAPI,\n        font_size: Pt = Pt(14),\n    ) -&gt; None:\n        \"\"\"Create a credit for spectrafit.\n\n        Args:\n            fname (Path): The temporay filename of the figure.\n            text (str): The text of the credit.\n            position_logo (PPTXPositionAPI): The position of the logo in the powerpoint\n                presentation.\n            position_text (PPTXPositionAPI): The position of the text in the powerpoint\n                presentation.\n            font_size (Pt): The font size of the textbox. Defaults to Pt(14).\n        \"\"\"\n        self.create_figure(\n            fname=fname,\n            position_figure=position_logo,\n            text=text,\n            position_textbox=position_text,\n            font_size=font_size,\n        )\n\n    def create_title(self, text: str, position: PPTXPositionAPI) -&gt; None:\n        \"\"\"Create a title from the input file.\n\n        Args:\n            text (str): The text of the title.\n            position (PPTXPositionAPI): The position of the title in the powerpoint\n                presentation.\n        \"\"\"\n        title = self.slide.shapes.title\n        title.text = text\n        title.left = position.left\n        title.top = position.top\n        title.width = position.width\n        title.height = position.height\n\n    def create_subtitle(self, text: str, position: PPTXPositionAPI, index: int) -&gt; None:\n        \"\"\"Create a subtitle from the input file.\n\n        Args:\n            text (str): The text of the subtitle.\n            position (PPTXPositionAPI): The position of the subtitle in the powerpoint\n                presentation.\n            index (int): The index of the subtitle in the powerpoint presentation.\n        \"\"\"\n        subtitle = self.slide.placeholders[index]\n        subtitle.text = text\n        subtitle.left = position.left\n        subtitle.top = position.top\n        subtitle.width = position.width\n        subtitle.height = position.height\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.__init__","title":"<code>__init__(slide)</code>","text":"<p>Create a powerpoint presentation from a the spectrafit output.</p> <p>Parameters:</p> Name Type Description Default <code>slide</code> <code>type</code> <p>The slide of the powerpoint presentation.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def __init__(self, slide: Type[Any]) -&gt; None:\n    \"\"\"Create a powerpoint presentation from a the spectrafit output.\n\n    Args:\n        slide (type): The slide of the powerpoint presentation.\n    \"\"\"\n    self.slide = slide\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_credit","title":"<code>create_credit(fname, text, position_logo, position_text, font_size=Pt(14))</code>","text":"<p>Create a credit for spectrafit.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>Path</code> <p>The temporay filename of the figure.</p> required <code>text</code> <code>str</code> <p>The text of the credit.</p> required <code>position_logo</code> <code>PPTXPositionAPI</code> <p>The position of the logo in the powerpoint presentation.</p> required <code>position_text</code> <code>PPTXPositionAPI</code> <p>The position of the text in the powerpoint presentation.</p> required <code>font_size</code> <code>Pt</code> <p>The font size of the textbox. Defaults to Pt(14).</p> <code>Pt(14)</code> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_credit(\n    self,\n    fname: Path,\n    text: str,\n    position_logo: PPTXPositionAPI,\n    position_text: PPTXPositionAPI,\n    font_size: Pt = Pt(14),\n) -&gt; None:\n    \"\"\"Create a credit for spectrafit.\n\n    Args:\n        fname (Path): The temporay filename of the figure.\n        text (str): The text of the credit.\n        position_logo (PPTXPositionAPI): The position of the logo in the powerpoint\n            presentation.\n        position_text (PPTXPositionAPI): The position of the text in the powerpoint\n            presentation.\n        font_size (Pt): The font size of the textbox. Defaults to Pt(14).\n    \"\"\"\n    self.create_figure(\n        fname=fname,\n        position_figure=position_logo,\n        text=text,\n        position_textbox=position_text,\n        font_size=font_size,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_figure","title":"<code>create_figure(fname, position_figure, position_textbox, text, font_size)</code>","text":"<p>Create a figure from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>Path</code> <p>The temporay filename of the figure.</p> required <code>position_figure</code> <code>PPTXPositionAPI</code> <p>The position of the figure in the powerpoint presentation.</p> required <code>position_textbox</code> <code>PPTXPositionAPI</code> <p>The position of the textbox in the powerpoint presentation.</p> required <code>text</code> <code>str</code> <p>The text of the textbox.</p> required <code>font_size</code> <code>Pt</code> <p>The font size of the textbox.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_figure(\n    self,\n    fname: Path,\n    position_figure: PPTXPositionAPI,\n    position_textbox: PPTXPositionAPI,\n    text: str,\n    font_size: Pt,\n) -&gt; None:\n    \"\"\"Create a figure from the input file.\n\n    Args:\n        fname (Path): The temporay filename of the figure.\n        position_figure (PPTXPositionAPI): The position of the figure in the\n            powerpoint presentation.\n        position_textbox (PPTXPositionAPI): The position of the textbox in the\n            powerpoint presentation.\n        text (str): The text of the textbox.\n        font_size (Pt): The font size of the textbox.\n    \"\"\"\n    self.slide.shapes.add_picture(\n        str(fname),\n        left=position_figure.left,\n        top=position_figure.top,\n        width=position_figure.width,\n        height=position_figure.height,\n    )\n    self.create_textbox(\n        text=text,\n        position=position_textbox,\n        font_size=font_size,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_subtitle","title":"<code>create_subtitle(text, position, index)</code>","text":"<p>Create a subtitle from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text of the subtitle.</p> required <code>position</code> <code>PPTXPositionAPI</code> <p>The position of the subtitle in the powerpoint presentation.</p> required <code>index</code> <code>int</code> <p>The index of the subtitle in the powerpoint presentation.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_subtitle(self, text: str, position: PPTXPositionAPI, index: int) -&gt; None:\n    \"\"\"Create a subtitle from the input file.\n\n    Args:\n        text (str): The text of the subtitle.\n        position (PPTXPositionAPI): The position of the subtitle in the powerpoint\n            presentation.\n        index (int): The index of the subtitle in the powerpoint presentation.\n    \"\"\"\n    subtitle = self.slide.placeholders[index]\n    subtitle.text = text\n    subtitle.left = position.left\n    subtitle.top = position.top\n    subtitle.width = position.width\n    subtitle.height = position.height\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_table","title":"<code>create_table(df, position_table, transpose, index_hidden, text, position_textbox, font_size=Pt(12))</code>","text":"<p>Create a table from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data of the table. powerpoint presentation.</p> required <code>position_table</code> <code>PPTXPositionAPI</code> <p>The position of the table in the powerpoint presentation.</p> required <code>transpose</code> <code>bool</code> <p>Transpose the table for row-like presentation in powerpoint presentation.</p> required <code>index_hidden</code> <code>bool</code> <p>Hide the index of the table in the powerpoint presentation.</p> required <code>text</code> <code>str</code> <p>The text of the table legend.</p> required <code>position_textbox</code> <code>PPTXPositionAPI</code> <p>The position of the textbox in the powerpoint presentation.</p> required <code>font_size</code> <code>Pt</code> <p>The font size of the table. Defaults to Pt(12).</p> <code>Pt(12)</code> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_table(\n    self,\n    df: pd.DataFrame,\n    position_table: PPTXPositionAPI,\n    transpose: bool,\n    index_hidden: bool,\n    text: str,\n    position_textbox: PPTXPositionAPI,\n    font_size: Pt = Pt(12),\n) -&gt; None:\n    \"\"\"Create a table from the input file.\n\n    Args:\n        df (pd.DataFrame): The data of the table.\n            powerpoint presentation.\n        position_table (PPTXPositionAPI): The position of the table in the\n            powerpoint presentation.\n        transpose (bool): Transpose the table for row-like presentation in\n            powerpoint presentation.\n        index_hidden (bool): Hide the index of the table in the powerpoint\n            presentation.\n        text (str): The text of the table legend.\n        position_textbox (PPTXPositionAPI): The position of the textbox in the\n            powerpoint presentation.\n        font_size (Pt, optional): The font size of the table. Defaults to Pt(12).\n    \"\"\"\n    df = df.round(2)\n    if transpose:\n        df = df.transpose()\n    self.extract_table(\n        df=df, position_table=position_table, index_hidden=index_hidden\n    )\n\n    self.create_textbox(\n        text=text,\n        position=PPTXPositionAPI(\n            left=position_textbox.left,\n            top=position_textbox.top,\n            width=position_textbox.width,\n            height=position_textbox.height,\n        ),\n        font_size=font_size,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_textbox","title":"<code>create_textbox(text, position, font_size=Pt(16))</code>","text":"<p>Create a textbox from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text of the textbox.</p> required <code>position</code> <code>PPTXPositionAPI</code> <p>The position of the textbox in the powerpoint presentation.</p> required <code>font_size</code> <code>Pt</code> <p>The font size of the textbox. Defaults to Pt(16).</p> <code>Pt(16)</code> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_textbox(\n    self,\n    text: str,\n    position: PPTXPositionAPI,\n    font_size: Pt = Pt(16),\n) -&gt; None:\n    \"\"\"Create a textbox from the input file.\n\n    Args:\n        text (str): The text of the textbox.\n        position (PPTXPositionAPI): The position of the textbox in the powerpoint\n            presentation.\n        font_size (Pt): The font size of the textbox. Defaults to Pt(16).\n    \"\"\"\n    tx_box = self.slide.shapes.add_textbox(\n        left=position.left,\n        top=position.top,\n        width=position.width,\n        height=position.height,\n    )\n\n    tf = tx_box.text_frame\n    tf.text = text\n    tf.size = font_size\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.create_title","title":"<code>create_title(text, position)</code>","text":"<p>Create a title from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text of the title.</p> required <code>position</code> <code>PPTXPositionAPI</code> <p>The position of the title in the powerpoint presentation.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def create_title(self, text: str, position: PPTXPositionAPI) -&gt; None:\n    \"\"\"Create a title from the input file.\n\n    Args:\n        text (str): The text of the title.\n        position (PPTXPositionAPI): The position of the title in the powerpoint\n            presentation.\n    \"\"\"\n    title = self.slide.shapes.title\n    title.text = text\n    title.left = position.left\n    title.top = position.top\n    title.width = position.width\n    title.height = position.height\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXElements.extract_table","title":"<code>extract_table(df, position_table, index_hidden)</code>","text":"<p>Create a table from the input file.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The data of the table(s) in the powerpoint presentation.</p> required <code>position_table</code> <code>PPTXPositionAPI</code> <p>The position of the table in the powerpoint presentation.</p> required <code>index_hidden</code> <code>bool</code> <p>Hide the index of the table in the powerpoint presentation.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def extract_table(\n    self,\n    df: pd.DataFrame,\n    position_table: PPTXPositionAPI,\n    index_hidden: bool,\n) -&gt; None:\n    \"\"\"Create a table from the input file.\n\n    Args:\n        df (pd.DataFrame): The data of the table(s) in the powerpoint presentation.\n        position_table (PPTXPositionAPI): The position of the table in the\n            powerpoint presentation.\n        index_hidden (bool): Hide the index of the table in the powerpoint\n            presentation.\n    \"\"\"\n    rows, cols = df.shape\n    table = self.slide.shapes.add_table(\n        rows=rows + 1,\n        cols=cols + (not index_hidden),\n        left=position_table.left,\n        top=position_table.top,\n        width=position_table.width,\n        height=position_table.height,\n    )\n    table.table.cell(0, 0).text = \"\"\n    if index_hidden:\n        for i, col in enumerate(df.columns):\n            table.table.cell(0, i).text = str(col)\n            for j, value in enumerate(df[col]):\n                table.table.cell(j + 1, i).text = str(value)\n    else:\n        for i, index in enumerate(df.index, start=1):\n            table.table.cell(i, 0).text = str(index)\n        for i, col in enumerate(df.columns, start=1):\n            table.table.cell(0, i).text = col\n            for j, value in enumerate(df[col]):\n                table.table.cell(j + 1, i).text = str(value)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout","title":"<code>PPTXLayout</code>","text":"<p>               Bases: <code>PPTXElements</code></p> <p>Generate a powerpoint presentation from a the spectrafit output.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>class PPTXLayout(PPTXElements):\n    \"\"\"Generate a powerpoint presentation from a the spectrafit output.\"\"\"\n\n    def __init__(\n        self, ratio: PPTXRatioAPI, structure: PPTXStructureAPI, fname: Path\n    ) -&gt; None:\n        \"\"\"Create a powerpoint presentation from a the spectrafit output.\n\n        Args:\n            ratio (PPTXRatioAPI): The ratio of the powerpoint presentation.\n            structure (PPTXStructureAPI): The structure of the powerpoint presentation.\n            fname (Path): The temporay filename of the powerpoint presentation.\n        \"\"\"\n        self.ratio = ratio\n        self.structure = structure\n        self.fname = fname\n\n        self._initialiaze()\n        super().__init__(self.slide)\n\n    def _initialiaze(self) -&gt; None:\n        \"\"\"Initialize the powerpoint presentation.\"\"\"\n        self.prs = Presentation()\n        self.prs.slide_width = self.ratio.width\n        self.prs.slide_height = self.ratio.height\n        self.slide = self.prs.slides.add_slide(self.prs.slide_layouts[3])\n\n    def top_element(self) -&gt; None:\n        \"\"\"Create the top element of the powerpoint presentation.\"\"\"\n        self.create_title(\n            text=self.structure.header.text, position=self.structure.header.position\n        )\n\n    def lefr_element(self) -&gt; None:\n        \"\"\"Create the left element of the powerpoint presentation.\"\"\"\n        self.create_subtitle(\n            text=self.structure.sub_title_left.text,\n            position=self.structure.sub_title_left.position,\n            index=self.structure.sub_title_left.index,\n        )\n        self.create_figure(\n            fname=self.structure.sub_title_left.figure.fname,\n            position_figure=self.structure.sub_title_left.figure.position,\n            text=self.structure.sub_title_left.figure.description.text,\n            position_textbox=self.structure.sub_title_left.figure.description.position,\n            font_size=self.structure.sub_title_left.figure.description.font_size,\n        )\n\n    def right_element(self) -&gt; None:\n        \"\"\"Create the right element of the powerpoint presentation.\"\"\"\n        self.create_subtitle(\n            text=self.structure.sub_title_right.text,\n            position=self.structure.sub_title_right.position,\n            index=self.structure.sub_title_right.index,\n        )\n        self.create_table(\n            df=self.structure.sub_title_right.table_1.df,\n            position_table=self.structure.sub_title_right.table_1.position,\n            transpose=self.structure.sub_title_right.table_1.transpose,\n            index_hidden=self.structure.sub_title_right.table_1.index_hidden,\n            text=self.structure.sub_title_right.table_1.description.text,\n            position_textbox=(\n                self.structure.sub_title_right.table_1.description.position\n            ),\n            font_size=self.structure.sub_title_right.table_1.description.font_size,\n        )\n        self.create_table(\n            df=self.structure.sub_title_right.table_2.df,\n            position_table=self.structure.sub_title_right.table_2.position,\n            transpose=self.structure.sub_title_right.table_2.transpose,\n            index_hidden=self.structure.sub_title_right.table_2.index_hidden,\n            text=self.structure.sub_title_right.table_2.description.text,\n            position_textbox=(\n                self.structure.sub_title_right.table_2.description.position\n            ),\n            font_size=self.structure.sub_title_right.table_2.description.font_size,\n        )\n        self.create_table(\n            df=self.structure.sub_title_right.table_3.df,\n            position_table=self.structure.sub_title_right.table_3.position,\n            transpose=self.structure.sub_title_right.table_3.transpose,\n            index_hidden=self.structure.sub_title_right.table_3.index_hidden,\n            text=self.structure.sub_title_right.table_3.description.text,\n            position_textbox=(\n                self.structure.sub_title_right.table_3.description.position\n            ),\n            font_size=self.structure.sub_title_right.table_3.description.font_size,\n        )\n        self.create_credit(\n            fname=self.structure.sub_title_right.credit.fname,\n            text=self.structure.sub_title_right.credit.description.text,\n            position_logo=self.structure.sub_title_right.credit.position,\n            position_text=self.structure.sub_title_right.credit.description.position,\n            font_size=self.structure.sub_title_right.credit.description.font_size,\n        )\n\n    def save(self) -&gt; None:\n        \"\"\"Save the powerpoint presentation.\"\"\"\n        self.prs.save(str(self.fname))\n\n    def __call__(self) -&gt; None:\n        \"\"\"Create the powerpoint presentation.\"\"\"\n        self.top_element()\n        self.lefr_element()\n        self.right_element()\n        self.save()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.__call__","title":"<code>__call__()</code>","text":"<p>Create the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Create the powerpoint presentation.\"\"\"\n    self.top_element()\n    self.lefr_element()\n    self.right_element()\n    self.save()\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.__init__","title":"<code>__init__(ratio, structure, fname)</code>","text":"<p>Create a powerpoint presentation from a the spectrafit output.</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>PPTXRatioAPI</code> <p>The ratio of the powerpoint presentation.</p> required <code>structure</code> <code>PPTXStructureAPI</code> <p>The structure of the powerpoint presentation.</p> required <code>fname</code> <code>Path</code> <p>The temporay filename of the powerpoint presentation.</p> required Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def __init__(\n    self, ratio: PPTXRatioAPI, structure: PPTXStructureAPI, fname: Path\n) -&gt; None:\n    \"\"\"Create a powerpoint presentation from a the spectrafit output.\n\n    Args:\n        ratio (PPTXRatioAPI): The ratio of the powerpoint presentation.\n        structure (PPTXStructureAPI): The structure of the powerpoint presentation.\n        fname (Path): The temporay filename of the powerpoint presentation.\n    \"\"\"\n    self.ratio = ratio\n    self.structure = structure\n    self.fname = fname\n\n    self._initialiaze()\n    super().__init__(self.slide)\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.lefr_element","title":"<code>lefr_element()</code>","text":"<p>Create the left element of the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def lefr_element(self) -&gt; None:\n    \"\"\"Create the left element of the powerpoint presentation.\"\"\"\n    self.create_subtitle(\n        text=self.structure.sub_title_left.text,\n        position=self.structure.sub_title_left.position,\n        index=self.structure.sub_title_left.index,\n    )\n    self.create_figure(\n        fname=self.structure.sub_title_left.figure.fname,\n        position_figure=self.structure.sub_title_left.figure.position,\n        text=self.structure.sub_title_left.figure.description.text,\n        position_textbox=self.structure.sub_title_left.figure.description.position,\n        font_size=self.structure.sub_title_left.figure.description.font_size,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.right_element","title":"<code>right_element()</code>","text":"<p>Create the right element of the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def right_element(self) -&gt; None:\n    \"\"\"Create the right element of the powerpoint presentation.\"\"\"\n    self.create_subtitle(\n        text=self.structure.sub_title_right.text,\n        position=self.structure.sub_title_right.position,\n        index=self.structure.sub_title_right.index,\n    )\n    self.create_table(\n        df=self.structure.sub_title_right.table_1.df,\n        position_table=self.structure.sub_title_right.table_1.position,\n        transpose=self.structure.sub_title_right.table_1.transpose,\n        index_hidden=self.structure.sub_title_right.table_1.index_hidden,\n        text=self.structure.sub_title_right.table_1.description.text,\n        position_textbox=(\n            self.structure.sub_title_right.table_1.description.position\n        ),\n        font_size=self.structure.sub_title_right.table_1.description.font_size,\n    )\n    self.create_table(\n        df=self.structure.sub_title_right.table_2.df,\n        position_table=self.structure.sub_title_right.table_2.position,\n        transpose=self.structure.sub_title_right.table_2.transpose,\n        index_hidden=self.structure.sub_title_right.table_2.index_hidden,\n        text=self.structure.sub_title_right.table_2.description.text,\n        position_textbox=(\n            self.structure.sub_title_right.table_2.description.position\n        ),\n        font_size=self.structure.sub_title_right.table_2.description.font_size,\n    )\n    self.create_table(\n        df=self.structure.sub_title_right.table_3.df,\n        position_table=self.structure.sub_title_right.table_3.position,\n        transpose=self.structure.sub_title_right.table_3.transpose,\n        index_hidden=self.structure.sub_title_right.table_3.index_hidden,\n        text=self.structure.sub_title_right.table_3.description.text,\n        position_textbox=(\n            self.structure.sub_title_right.table_3.description.position\n        ),\n        font_size=self.structure.sub_title_right.table_3.description.font_size,\n    )\n    self.create_credit(\n        fname=self.structure.sub_title_right.credit.fname,\n        text=self.structure.sub_title_right.credit.description.text,\n        position_logo=self.structure.sub_title_right.credit.position,\n        position_text=self.structure.sub_title_right.credit.description.position,\n        font_size=self.structure.sub_title_right.credit.description.font_size,\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.save","title":"<code>save()</code>","text":"<p>Save the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def save(self) -&gt; None:\n    \"\"\"Save the powerpoint presentation.\"\"\"\n    self.prs.save(str(self.fname))\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.PPTXLayout.top_element","title":"<code>top_element()</code>","text":"<p>Create the top element of the powerpoint presentation.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def top_element(self) -&gt; None:\n    \"\"\"Create the top element of the powerpoint presentation.\"\"\"\n    self.create_title(\n        text=self.structure.header.text, position=self.structure.header.position\n    )\n</code></pre>"},{"location":"api/converter_api/#spectrafit.plugins.pptx_converter.command_line_runner","title":"<code>command_line_runner()</code>","text":"<p>Command line interface for the converter plugin.</p> Source code in <code>spectrafit/plugins/pptx_converter.py</code> Python<pre><code>def command_line_runner() -&gt; None:\n    \"\"\"Command line interface for the converter plugin.\"\"\"\n    PPTXConverter()()\n</code></pre>"},{"location":"api/data_model_api/","title":"Data Model","text":"<p>About the Data Model</p> <p>The Data Model API is a new feature in the v0.12.0 release of <code>SpectraFit</code> with major focus on:</p> <ol> <li>Data Validation</li> <li>Settings Management</li> </ol> <p>The Data Model API is a work in progress and is subject to change. It is realized by using the pydantic library.</p>"},{"location":"api/data_model_api/#data-model-api","title":"Data Model API","text":""},{"location":"api/data_model_api/#command-line-interface","title":"Command Line Interface","text":"<p>Reference model for the API of the command line interface.</p>"},{"location":"api/data_model_api/#spectrafit.api.cmd_model.CMDModelAPI","title":"<code>CMDModelAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the model command line argument.</p> Source code in <code>spectrafit/api/cmd_model.py</code> Python<pre><code>class CMDModelAPI(BaseModel):\n    \"\"\"Model for the model command line argument.\"\"\"\n\n    infile: str\n    outfile: str = Field(default=\"spectrafit_results\")\n    input: str = Field(default=\"fitting_input.toml\")\n    oversampling: bool = DataPreProcessingAPI().oversampling\n    energy_start: Optional[float] = DataPreProcessingAPI().energy_start\n    energy_stop: Optional[float] = DataPreProcessingAPI().energy_stop\n    smooth: Optional[int] = DataPreProcessingAPI().smooth\n    shift: Optional[float] = DataPreProcessingAPI().shift\n    column: List[Union[int, str]] = DataPreProcessingAPI().column\n    separator: str = \"\\t\"\n    decimal: str = \".\"\n    header: Optional[int] = None\n    comment: Optional[str] = None\n    global_: int = Field(GlobalFittingAPI().global_)\n    autopeak: Union[AutopeakAPI, bool, Any] = False\n    noplot: bool = False\n    version: bool = False\n    verbose: int = Field(default=0, ge=0, le=2)\n    description: Optional[DescriptionAPI] = Field(DescriptionAPI())\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.cmd_model.DescriptionAPI","title":"<code>DescriptionAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for the description command line argument.</p> Source code in <code>spectrafit/api/cmd_model.py</code> Python<pre><code>class DescriptionAPI(BaseModel):\n    \"\"\"Model for the description command line argument.\"\"\"\n\n    project_name: str = Field(\n        default=\"FittingProject\",\n        alias=\"projectName\",\n        description=\"Name of the project\",\n    )\n    project_details: str = Field(\n        default=f\"Fitting Project via SpectraFit v{__version__}\",\n        alias=\"projectDetails\",\n        description=\"Project details\",\n    )\n    keywords: List[str] = Field(\n        default=[\"spectra\"], description=\"Keywords for the project\"\n    )\n    authors: List[str] = Field(\n        default=[\"authors\"], description=\"Authors of the project\"\n    )\n    references: List[str] = Field(\n        default=[\"https://github.com/Anselmoo/spectrafit\"],\n        alias=\"refs\",\n        description=\"References for the project\",\n    )\n    metadata: Optional[Union[Dict[Any, Any], List[Any]]] = Field(\n        default=None, description=\"Metadata for the project\"\n    )\n    license: str = \"BSD-3-Clause\"\n    version: str = __version__\n    host_info: str = sha256(f\"{getuser()}@{gethostname()}\".encode()).hexdigest()\n    timestamp: str = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    id_: str = Field(\n        default=str(uuid4()), alias=\"id\", description=\"Unique ID of the project\"\n    )\n\n    @field_validator(\"references\")\n    @classmethod\n    def check_references(cls, v: List[str]) -&gt; Optional[List[str]]:\n        \"\"\"Check if the list of references have valid URLs.\"\"\"\n        return [str(HttpUrl(url)) for url in v]\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.cmd_model.DescriptionAPI.check_references","title":"<code>check_references(v)</code>  <code>classmethod</code>","text":"<p>Check if the list of references have valid URLs.</p> Source code in <code>spectrafit/api/cmd_model.py</code> Python<pre><code>@field_validator(\"references\")\n@classmethod\ndef check_references(cls, v: List[str]) -&gt; Optional[List[str]]:\n    \"\"\"Check if the list of references have valid URLs.\"\"\"\n    return [str(HttpUrl(url)) for url in v]\n</code></pre>"},{"location":"api/data_model_api/#models-and-components","title":"Models and Components","text":"<p>Reference model for the API of the models distributions.</p>"},{"location":"api/data_model_api/#spectrafit.api.models_model.AmplitudeAPI","title":"<code>AmplitudeAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the amplitude of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class AmplitudeAPI(BaseModel):\n    \"\"\"Definition of the amplitude of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum amplitude.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum amplitude.\")\n    vary: bool = Field(default=True, description=\"Vary the amplitude.\")\n    value: Optional[float] = Field(default=None, description=\"Initial Amplitude value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.AtanAPI","title":"<code>AtanAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Step of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class AtanAPI(BaseModel):\n    \"\"\"Definition of the Step of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.CGaussianAPI","title":"<code>CGaussianAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the cumulative Gaussian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class CGaussianAPI(BaseModel):\n    \"\"\"Definition of the cumulative Gaussian of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    fwhmg: FwhmgAPI = FwhmgAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.CLorentzianAPI","title":"<code>CLorentzianAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the cumulative Lorentzian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class CLorentzianAPI(BaseModel):\n    \"\"\"Definition of the cumulative Lorentzian of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    fwhml: FwhmlAPI = FwhmlAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.CVoigtAPI","title":"<code>CVoigtAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the cumulative Voigt of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class CVoigtAPI(BaseModel):\n    \"\"\"Definition of the cumulative Voigt of the models distributions.\"\"\"\n\n    center: CenterAPI = CenterAPI()\n    fwhmv: FwhmvAPI = FwhmvAPI()\n    gamma: GammaAPI = GammaAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.CenterAPI","title":"<code>CenterAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the center of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class CenterAPI(BaseModel):\n    \"\"\"Definition of the center of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum center.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum center.\")\n    vary: bool = Field(default=True, description=\"Vary the center.\")\n    value: Optional[float] = Field(default=None, description=\"Initial Center value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.CoefficientAPI","title":"<code>CoefficientAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Coefficient of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class CoefficientAPI(BaseModel):\n    \"\"\"Definition of the Coefficient of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum coefficient.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum coefficient.\")\n    vary: bool = Field(default=True, description=\"Vary the coefficient.\")\n    value: Optional[float] = Field(\n        default=None, description=\"Initial coefficient value.\"\n    )\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.ConfIntervalAPI","title":"<code>ConfIntervalAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of Confidence Interval Function.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class ConfIntervalAPI(BaseModel):\n    \"\"\"Definition of Confidence Interval Function.\"\"\"\n\n    p_names: Optional[List[str]] = Field(\n        default=None, description=\"List of parameters names.\"\n    )\n    trace: bool = Field(\n        default=True, description=\"Trace of the confidence interfall matrix.\"\n    )\n    maxiter: int = Field(\n        default=200,\n        gt=1,\n        le=2000,\n        description=\"Maximum number of iteration\",\n    )\n    verbose: bool = Field(\n        default=False, description=\"Print information about the fit process.\"\n    )\n    prob_func: Optional[Callable[[float], float]] = Field(\n        default=None, description=\"Probing function.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.ConstantAPI","title":"<code>ConstantAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Constant of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class ConstantAPI(BaseModel):\n    \"\"\"Definition of the Constant of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.DecayAPI","title":"<code>DecayAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Decay of the Exponential of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class DecayAPI(BaseModel):\n    \"\"\"Definition of the Decay of the Exponential of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum decay rate.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum decay rate.\")\n    vary: bool = Field(default=True, description=\"Vary the decay rate.\")\n    value: Optional[float] = Field(\n        default=None, description=\"Initial decay rate value.\"\n    )\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.DistributionModelAPI","title":"<code>DistributionModelAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class DistributionModelAPI(BaseModel):\n    \"\"\"Definition of the models distributions.\"\"\"\n\n    gaussian: GaussianAPI = GaussianAPI()\n    lorentzian: LorentzianAPI = LorentzianAPI()\n    voigt: VoigtAPI = VoigtAPI()\n    pseudovoigt: PseudovoigtAPI = PseudovoigtAPI()\n    exponential: ExponentialAPI = ExponentialAPI()\n    power: PowerAPI = PowerAPI()\n    linear: LinearAPI = LinearAPI()\n    constant: ConstantAPI = ConstantAPI()\n    erf: ErfAPI = ErfAPI()\n    heaviside: HeavisideAPI = HeavisideAPI()\n    atan: AtanAPI = AtanAPI()\n    log: LogAPI = LogAPI()\n    cgaussian: CGaussianAPI = CGaussianAPI()\n    clorentzian: CLorentzianAPI = CLorentzianAPI()\n    cvoigt: CVoigtAPI = CVoigtAPI()\n    polynom2: Polynomia2API = Polynomia2API()\n    polynom3: Polynomia3API = Polynomia3API()\n    pearson1: Pearson1API = Pearson1API()\n    pearson2: Pearson2API = Pearson2API()\n    pearson3: Pearson3API = Pearson3API()\n    pearson4: Pearson4API = Pearson4API()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.ErfAPI","title":"<code>ErfAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Step of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class ErfAPI(BaseModel):\n    \"\"\"Definition of the Step of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.ExponentAPI","title":"<code>ExponentAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Exponent of the Linear of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class ExponentAPI(BaseModel):\n    \"\"\"Definition of the Exponent of the Linear of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum exponent.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum exponent.\")\n    vary: bool = Field(default=True, description=\"Vary the exponent.\")\n    value: Optional[float] = Field(default=None, description=\"Initial exponent value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.ExponentialAPI","title":"<code>ExponentialAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Exponential of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class ExponentialAPI(BaseModel):\n    \"\"\"Definition of the Exponential of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    decay: DecayAPI = DecayAPI()\n    intercept: InterceptAPI = InterceptAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.FwhmgAPI","title":"<code>FwhmgAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the FWHM Gaussian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class FwhmgAPI(BaseModel):\n    \"\"\"Definition of the FWHM Gaussian of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(\n        default=None,\n        description=\"Maximum Full Width Half Maximum of the Gaussian Distribution.\",\n    )\n    min: Optional[int] = Field(\n        default=None,\n        description=\"Minimum Full Width Half Maximum of the Gaussian Distribution.\",\n    )\n    vary: bool = Field(\n        default=True,\n        description=\"Vary the Full Width Half Maximum of the Gaussian Distribution.\",\n    )\n    value: Optional[float] = Field(\n        default=None,\n        description=\"Initial Full Width Half Maximum of \"\n        \"the Gaussian Distribution value.\",\n    )\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.FwhmlAPI","title":"<code>FwhmlAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the FWHM Lorentzian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class FwhmlAPI(BaseModel):\n    \"\"\"Definition of the FWHM Lorentzian of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(\n        default=None,\n        description=\"Maximum Full Width Half Maximum of the Lorentzian Distribution.\",\n    )\n    min: Optional[int] = Field(\n        default=None,\n        description=\"Minimum Full Width Half Maximum of the Lorentzian Distribution.\",\n    )\n    vary: bool = Field(\n        default=True,\n        description=\"Vary the Full Width Half Maximum of the Lorentzian Distribution.\",\n    )\n    value: Optional[float] = Field(\n        default=None,\n        description=\"Initial Full Width Half Maximum of \"\n        \"the Lorentzian Distribution value.\",\n    )\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.FwhmvAPI","title":"<code>FwhmvAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the FWHM Voigt of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class FwhmvAPI(BaseModel):\n    \"\"\"Definition of the FWHM Voigt of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(\n        default=None,\n        description=\"Maximum Full Width Half Maximum of the Voigt Distribution.\",\n    )\n    min: Optional[int] = Field(\n        default=None,\n        description=\"Minimum Full Width Half Maximum of the Voigt Distribution.\",\n    )\n    vary: bool = Field(\n        default=True,\n        description=\"Vary the Full Width Half Maximum of the Voigt Distribution.\",\n    )\n    value: Optional[float] = Field(\n        default=None,\n        description=\"Initial Full Width Half Maximum of the Voigt Distribution value.\",\n    )\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.GammaAPI","title":"<code>GammaAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Gamma of the Voigt of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class GammaAPI(BaseModel):\n    \"\"\"Definition of the Gamma of the Voigt of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum gamma.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum gamma.\")\n    vary: bool = Field(default=True, description=\"Vary the gamma.\")\n    value: Optional[float] = Field(default=None, description=\"Initial Gamma value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.GaussianAPI","title":"<code>GaussianAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Gaussian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class GaussianAPI(BaseModel):\n    \"\"\"Definition of the Gaussian of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    fwhmg: FwhmgAPI = FwhmgAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.HeavisideAPI","title":"<code>HeavisideAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Step of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class HeavisideAPI(BaseModel):\n    \"\"\"Definition of the Step of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.InterceptAPI","title":"<code>InterceptAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Intercept of the Linear of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class InterceptAPI(BaseModel):\n    \"\"\"Definition of the Intercept of the Linear of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum intercept.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum intercept.\")\n    vary: bool = Field(default=True, description=\"Vary the intercept.\")\n    value: Optional[float] = Field(default=None, description=\"Initial intercept value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.KurtosisAPI","title":"<code>KurtosisAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the kurtosis of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class KurtosisAPI(BaseModel):\n    \"\"\"Definition of the kurtosis of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum kurtosis.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum kurtosis.\")\n    vary: bool = Field(default=True, description=\"Vary the kurtosis.\")\n    value: Optional[float] = Field(default=None, description=\"Initial kurtosis value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.LinearAPI","title":"<code>LinearAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Linear of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class LinearAPI(BaseModel):\n    \"\"\"Definition of the Linear of the models distributions.\"\"\"\n\n    slope: SlopeAPI = SlopeAPI()\n    intercept: InterceptAPI = InterceptAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.LogAPI","title":"<code>LogAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Step of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class LogAPI(BaseModel):\n    \"\"\"Definition of the Step of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.LorentzianAPI","title":"<code>LorentzianAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Lorentzian of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class LorentzianAPI(BaseModel):\n    \"\"\"Definition of the Lorentzian of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    fwhml: FwhmlAPI = FwhmlAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Pearson1API","title":"<code>Pearson1API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the pearson type I of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Pearson1API(BaseModel):\n    \"\"\"Definition of the pearson type I of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n    exponent: ExponentAPI = ExponentAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Pearson2API","title":"<code>Pearson2API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the pearson type II of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Pearson2API(BaseModel):\n    \"\"\"Definition of the pearson type II of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n    exponent: ExponentAPI = ExponentAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Pearson3API","title":"<code>Pearson3API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the pearson type III of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Pearson3API(BaseModel):\n    \"\"\"Definition of the pearson type III of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n    exponent: ExponentAPI = ExponentAPI()\n    skewness: SkewnessAPI = SkewnessAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Pearson4API","title":"<code>Pearson4API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the pearson type IV of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Pearson4API(BaseModel):\n    \"\"\"Definition of the pearson type IV of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    sigma: SigmaAPI = SigmaAPI()\n    exponent: ExponentAPI = ExponentAPI()\n    skewness: SkewnessAPI = SkewnessAPI()\n    kurtosis: KurtosisAPI = KurtosisAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Polynomia2API","title":"<code>Polynomia2API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the second order polynomial of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Polynomia2API(BaseModel):\n    \"\"\"Definition of the second order polynomial of the models distributions.\"\"\"\n\n    coefficient0: CoefficientAPI = CoefficientAPI()\n    coefficient1: CoefficientAPI = CoefficientAPI()\n    coefficient2: CoefficientAPI = CoefficientAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.Polynomia3API","title":"<code>Polynomia3API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the third order polynomial of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class Polynomia3API(BaseModel):\n    \"\"\"Definition of the third order polynomial of the models distributions.\"\"\"\n\n    coefficient0: CoefficientAPI = CoefficientAPI()\n    coefficient1: CoefficientAPI = CoefficientAPI()\n    coefficient2: CoefficientAPI = CoefficientAPI()\n    coefficient3: CoefficientAPI = CoefficientAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.PowerAPI","title":"<code>PowerAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Power of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class PowerAPI(BaseModel):\n    \"\"\"Definition of the Power of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    exponent: ExponentAPI = ExponentAPI()\n    intercept: InterceptAPI = InterceptAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.PseudovoigtAPI","title":"<code>PseudovoigtAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Pseudovoigt of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class PseudovoigtAPI(BaseModel):\n    \"\"\"Definition of the Pseudovoigt of the models distributions.\"\"\"\n\n    amplitude: AmplitudeAPI = AmplitudeAPI()\n    center: CenterAPI = CenterAPI()\n    fwhmg: FwhmgAPI = FwhmgAPI()\n    fwhml: FwhmlAPI = FwhmlAPI()\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.SigmaAPI","title":"<code>SigmaAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Sigma of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class SigmaAPI(BaseModel):\n    \"\"\"Definition of the Sigma of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum sigma.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum sigma.\")\n    vary: bool = Field(default=True, description=\"Vary the sigma.\")\n    value: Optional[float] = Field(default=None, description=\"Initial sigma value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.SkewnessAPI","title":"<code>SkewnessAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the skewness of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class SkewnessAPI(BaseModel):\n    \"\"\"Definition of the skewness of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum skewness.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum skewness.\")\n    vary: bool = Field(default=True, description=\"Vary the skewness.\")\n    value: Optional[float] = Field(default=None, description=\"Initial skewness value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.SlopeAPI","title":"<code>SlopeAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Slope of the Linear of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class SlopeAPI(BaseModel):\n    \"\"\"Definition of the Slope of the Linear of the models distributions.\"\"\"\n\n    max: Optional[float] = Field(default=None, description=\"Maximum slope.\")\n    min: Optional[int] = Field(default=None, description=\"Minimum slope.\")\n    vary: bool = Field(default=True, description=\"Vary the slope.\")\n    value: Optional[float] = Field(default=None, description=\"Inital slope value.\")\n    expr: Optional[str] = Field(default=None, description=__description__)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.models_model.VoigtAPI","title":"<code>VoigtAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the Voigt of the models distributions.</p> Source code in <code>spectrafit/api/models_model.py</code> Python<pre><code>class VoigtAPI(BaseModel):\n    \"\"\"Definition of the Voigt of the models distributions.\"\"\"\n\n    center: CenterAPI = CenterAPI()\n    fwhmv: FwhmvAPI = FwhmvAPI()\n    gamma: GammaAPI = GammaAPI()\n</code></pre>"},{"location":"api/data_model_api/#juptyer-notebook","title":"Juptyer Notebook","text":"<p>Reference model for the API of the Jupyter Notebook interface.</p>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.ColorAPI","title":"<code>ColorAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the colors of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class ColorAPI(BaseModel):\n    \"\"\"Definition of the colors of the plotly figure.\"\"\"\n\n    intensity: str = Field(\n        default=PlotlyColors[0], description=\"Color of the spectrum-intensity.\"\n    )\n    residual: str = Field(\n        default=PlotlyColors[1], description=\"Color of the residuals.\"\n    )\n    fit: str = Field(default=PlotlyColors[5], description=\"Color of the fit.\")\n    components: str = Field(\n        default=PlotlyColors[6], description=\"Color of the components, mainly peaks.\"\n    )\n    bars: List[str] = Field(\n        default=[i for j in zip(Teal_r, Purp_r) for i in j],\n        description=\"Color of the bar plot of the metrics.\",\n    )\n    lines: List[str] = Field(\n        default=Burg, description=\"Color of the lines of the plot.\"\n    )\n    paper: str = Field(default=\"white\", description=\"Color of the paper.\")\n    plot: str = Field(default=\"white\", description=\"Color of the plot.\")\n    color: str = Field(default=\"black\", description=\"Color of the text.\")\n    grid: str = Field(default=\"lightgrey\", description=\"Color of the grid.\")\n    line: str = Field(default=\"black\", description=\"Color of the bottom and side line.\")\n    zero_line: str = Field(default=\"grey\", description=\"Color of the zero line.\")\n    ticks: str = Field(default=\"black\", description=\"Color of the ticks.\")\n    font: str = Field(default=\"black\", description=\"Font color of the plot.\")\n\n    @field_validator(\n        \"paper\",\n        \"layout\",\n        \"grid\",\n        \"line\",\n        \"zero_line\",\n        \"ticks\",\n        \"font\",\n        check_fields=False,\n    )\n    @classmethod\n    def transparent_rgb(cls, v: str) -&gt; str:\n        \"\"\"Convert string to transparent RGB color.\n\n        Args:\n            v (str): One of the key-words of the validator decorator.\n\n        Returns:\n            str: Translate the word `transparent` to the rgb value `rgba(0,0,0,0)`.\n        \"\"\"\n        return \"rgba(0,0,0,0)\" if \"transparent\" in v.lower() else v\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.ColorAPI.transparent_rgb","title":"<code>transparent_rgb(v)</code>  <code>classmethod</code>","text":"<p>Convert string to transparent RGB color.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>str</code> <p>One of the key-words of the validator decorator.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Translate the word <code>transparent</code> to the rgb value <code>rgba(0,0,0,0)</code>.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>@field_validator(\n    \"paper\",\n    \"layout\",\n    \"grid\",\n    \"line\",\n    \"zero_line\",\n    \"ticks\",\n    \"font\",\n    check_fields=False,\n)\n@classmethod\ndef transparent_rgb(cls, v: str) -&gt; str:\n    \"\"\"Convert string to transparent RGB color.\n\n    Args:\n        v (str): One of the key-words of the validator decorator.\n\n    Returns:\n        str: Translate the word `transparent` to the rgb value `rgba(0,0,0,0)`.\n    \"\"\"\n    return \"rgba(0,0,0,0)\" if \"transparent\" in v.lower() else v\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.FnameAPI","title":"<code>FnameAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the file name.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class FnameAPI(BaseModel):\n    \"\"\"Definition of the file name.\"\"\"\n\n    fname: str = Field(..., description=\"Name of the file to save.\")\n    suffix: str = Field(..., description=\"Suffix of the file to save.\")\n    prefix: Optional[str] = Field(\n        default=None, description=\"Prefix of the file to save.\"\n    )\n    folder: Optional[str] = Field(default=None, description=\"Folder to save the file.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.FontAPI","title":"<code>FontAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the used font of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class FontAPI(BaseModel):\n    \"\"\"Definition of the used font of the plotly figure.\"\"\"\n\n    family: str = Field(\n        default=\"Open Sans, monospace\", description=\"Font family of the plot.\"\n    )\n    size: int = Field(default=12, description=\"Font size of the plot.\")\n    color: str = Field(default=\"black\", description=\"Font color of the plot.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.GridAPI","title":"<code>GridAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the grid of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class GridAPI(BaseModel):\n    \"\"\"Definition of the grid of the plotly figure.\"\"\"\n\n    show: bool = Field(default=True, description=\"Show grid lines.\")\n    ticks: str = Field(default=\"outside\", description=\"Show grid ticks.\")\n    dash: str = Field(default=\"dot\", description=\"Show grid dashes.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.LegendAPI","title":"<code>LegendAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the legend of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class LegendAPI(BaseModel):\n    \"\"\"Definition of the legend of the plotly figure.\"\"\"\n\n    orientation: str = Field(default=\"h\", description=\"Orientation of the legend.\")\n    yanchor: str = Field(default=\"bottom\", description=\"Y anchor of the legend.\")\n    y: float = Field(default=1.02, description=\"Y position of the legend.\")\n    xanchor: str = Field(default=\"right\", description=\"X anchor of the legend.\")\n    x: float = Field(default=1, description=\"X position of the legend.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.MetricAPI","title":"<code>MetricAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the residual plot (Y-Axis) of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class MetricAPI(BaseModel):\n    \"\"\"Definition of the residual plot (Y-Axis) of the plotly figure.\"\"\"\n\n    name_0: str = Field(\n        default=\"Metrics\", description=\"Name of the first metrics-axis of the plot.\"\n    )\n    unit_0: Optional[str] = Field(\n        default=\"a.u.\", description=\"Name of the first metrics-axis units of the plot.\"\n    )\n    name_1: str = Field(\n        default=\"Metrics\", description=\"Name of the second metrics-axis of the plot.\"\n    )\n    unit_1: Optional[str] = Field(\n        default=\"a.u.\", description=\"Name of the second metrics-axis units of the plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.PlotAPI","title":"<code>PlotAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class PlotAPI(BaseModel):\n    \"\"\"Definition of the plotly figure.\"\"\"\n\n    x: str = Field(..., description=\"Name of the x column to plot.\")\n    y: Union[str, List[str]] = Field(\n        ..., description=\"List of the names of the y columns to plot.\"\n    )\n    title: Optional[str] = Field(None, description=\"Title of the plot.\")\n    xaxis_title: XAxisAPI = XAxisAPI()\n    yaxis_title: YAxisAPI = YAxisAPI()\n    residual_title: ResidualAPI = ResidualAPI()\n    metric_title: MetricAPI = MetricAPI()\n    run_title: RunAPI = RunAPI()\n    legend_title: str = Field(default=\"Spectra\", description=\"Title of the legend.\")\n    show_legend: bool = Field(default=True, description=\"Show legend.\")\n    legend: LegendAPI = LegendAPI()\n    font: FontAPI = FontAPI()\n    minor_ticks: bool = Field(default=True, description=\"Show minor ticks.\")\n    color: ColorAPI = ColorAPI()\n    grid: GridAPI = GridAPI()\n    size: Tuple[int, Tuple[int, int]] = Field(\n        default=(800, (600, 300)), description=\"Size of the fit- and metric-plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.ResidualAPI","title":"<code>ResidualAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the residual plot (Y-Axis) of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class ResidualAPI(BaseModel):\n    \"\"\"Definition of the residual plot (Y-Axis) of the plotly figure.\"\"\"\n\n    name: str = Field(\n        default=\"Residuals\", description=\"Name of the residual-axis of the plot.\"\n    )\n    unit: Optional[str] = Field(\n        default=\"a.u.\", description=\"Name of the residual-axis units of the plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.RunAPI","title":"<code>RunAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the residual plot (Y-Axis) of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class RunAPI(BaseModel):\n    \"\"\"Definition of the residual plot (Y-Axis) of the plotly figure.\"\"\"\n\n    name: str = Field(default=\"Run\", description=\"Name of the Run-axis of the plot.\")\n    unit: Optional[str] = Field(\n        default=\"#\", description=\"Name of the run-axis units of the plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.XAxisAPI","title":"<code>XAxisAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defintion of the X-Axis of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class XAxisAPI(BaseModel):\n    \"\"\"Defintion of the X-Axis of the plotly figure.\"\"\"\n\n    name: str = Field(default=\"Energy\", description=\"Name of the x-axis of the plot.\")\n    unit: Optional[str] = Field(\n        default=\"eV\", description=\"Name of the x-axis units of the plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.notebook_model.YAxisAPI","title":"<code>YAxisAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Defintion of the Y-Axis of the plotly figure.</p> Source code in <code>spectrafit/api/notebook_model.py</code> Python<pre><code>class YAxisAPI(BaseModel):\n    \"\"\"Defintion of the Y-Axis of the plotly figure.\"\"\"\n\n    name: str = Field(\n        default=\"Intensity\", description=\"Name of the y-axis of the plot.\"\n    )\n    unit: Optional[str] = Field(\n        default=\"a.u.\", description=\"Name of the y-axis units of the plot.\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#report-design","title":"Report Design","text":"<p>Reference model for the API of the Jupyter Notebook report.</p>"},{"location":"api/data_model_api/#spectrafit.api.report_model.CreditsAPI","title":"<code>CreditsAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Credits API model.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class CreditsAPI(BaseModel):\n    \"\"\"Credits API model.\"\"\"\n\n    dtale: str = f\"dtale v{dtale_version}\"\n    emcee: str = f\"emcee v{emcee_version}\"\n    itables: str = f\"itables v{itables_version}\"\n    lmfit: str = f\"lmfit v{lmfit_version}\"\n    numdifftools: str = f\"numdifftools v{numdifftools_version}\"\n    numpy: str = f\"numpy v{numpy_version}\"\n    pandas: str = f\"pandas v{pandas_version}\"\n    plotly: str = f\"plotly v{plotly_version}\"\n    pydantic: str = f\"pydantic v{pydantic_version}\"\n    scipy: str = f\"scipy v{scipy_version}\"\n    sklearn: str = f\"sklearn v{sklearn_version}\"\n    statsmodels: str = f\"statsmodels v{statsmodels_version}\"\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.report_model.FitMethodAPI","title":"<code>FitMethodAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Fit method API model.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class FitMethodAPI(BaseModel):\n    \"\"\"Fit method API model.\"\"\"\n\n    global_fitting: Union[bool, int] = Field(\n        default=False,\n        description=\"Fitting in the global fashion\",\n    )\n    confidence_interval: Union[bool, Dict[str, Any]] = Field(\n        ...,\n        description=\"Settings for the confidence interval calculation\",\n    )\n    configurations: Dict[str, Any] = Field(\n        ..., description=\"Settings for the fitting configuration\"\n    )\n    settings_solver_models: Dict[str, Any] = Field(\n        ...,\n        description=\"Settings for the solver models including minimizer and optimizer\",\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.report_model.InputAPI","title":"<code>InputAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input API for the report endpoint.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class InputAPI(BaseModel):\n    \"\"\"Input API for the report endpoint.\"\"\"\n\n    description: DescriptionAPI = DescriptionAPI()\n    credits: CreditsAPI = CreditsAPI()\n    initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]] = Field(\n        ..., description=\"Initial model for the fit\"\n    )\n    method: FitMethodAPI = Field(\n        ..., description=\"Fitting method with optional including of confidence interval\"\n    )\n    pre_processing: DataPreProcessingAPI = Field(..., description=\"Data pre-processing\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.report_model.OutputAPI","title":"<code>OutputAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Output API for the report endpoint.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class OutputAPI(BaseModel):\n    \"\"\"Output API for the report endpoint.\"\"\"\n\n    df_org: Dict[Hashable, Any] = Field(\n        ...,\n        description=\"DataFrame of the original data via 'records' orient\",\n    )\n    df_fit: Dict[Hashable, Any] = Field(\n        ...,\n        description=\"DataFrame of the fitted data via 'records' orient\",\n    )\n    df_pre: Dict[Hashable, Any] = Field(\n        default={},\n        description=\"DataFrame of the pre-processed data via 'records' orient\",\n    )\n    model_config = ConfigDict(arbitrary_types_allowed=True)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.report_model.ReportAPI","title":"<code>ReportAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the report model.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class ReportAPI(BaseModel):\n    \"\"\"Definition of the report model.\"\"\"\n\n    input: InputAPI = Field(\n        ...,\n        description=\"Input data for the report.\",\n    )\n    solver: SolverAPI = Field(\n        ...,\n        description=\"Solver data for the report.\",\n    )\n    output: OutputAPI = Field(\n        ...,\n        description=\"Output data for the report.\",\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.report_model.SolverAPI","title":"<code>SolverAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Solver API for the report endpoint.</p> Source code in <code>spectrafit/api/report_model.py</code> Python<pre><code>class SolverAPI(BaseModel):\n    \"\"\"Solver API for the report endpoint.\"\"\"\n\n    goodness_of_fit: Dict[str, float] = Field(..., description=\"Goodness of fit\")\n    regression_metrics: Dict[str, List[Any]] = Field(\n        ..., description=\"Regression metrics\"\n    )\n    descriptive_statistic: Dict[str, List[Any]] = Field(\n        ..., description=\"Descriptive statistic\"\n    )\n    linear_correlation: Dict[str, List[Any]] = Field(\n        ..., description=\"Linear correlation\"\n    )\n    component_correlation: Dict[str, Dict[str, Any]] = Field(\n        default={},\n        description=\"Linear correlation of each attribute of components. if possible\",\n    )\n    confidence_interval: Dict[str, Any] = Field(\n        default={}, description=\"Confidence interval, if possible\"\n    )\n    covariance_matrix: Dict[str, Dict[str, Any]] = Field(\n        default={}, description=\"Covariance matrix, if possible\"\n    )\n    variables: Dict[str, Dict[str, Any]] = Field(\n        ...,\n        description=\"Variables with their initial, optimized and optional error values\",\n    )\n    errorbars: Dict[str, Any] = Field(\n        default={},\n        description=\"Error bar comment if values reach initial value or boundary\",\n    )\n    computional: Dict[str, Any] = Field(\n        ...,\n        description=\"Computional information like number of function evaluations\",\n    )\n</code></pre>"},{"location":"api/data_model_api/#tools-and-utilities","title":"Tools and Utilities","text":"<p>Reference model for the API of the SpectraFit tools.</p>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.AutopeakAPI","title":"<code>AutopeakAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the auto detection of peak command line argument.</p> <p>The auto detection of peaks is performed by the SpectraFit tools. Here is listed the set of parameters that are used to control the auto detection of peaks according to the following <code>scipy.signal.find_peaks</code> -module; source: https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class AutopeakAPI(BaseModel):\n    \"\"\"Definition of the auto detection of peak command line argument.\n\n    The auto detection of peaks is performed by the SpectraFit tools. Here is listed the\n    set of parameters that are used to control the auto detection of peaks according to\n    the following `scipy.signal.find_peaks` -module; source:\n    [https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html](\n    https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html\n    )\n    \"\"\"\n\n    modeltype: Optional[str] = None\n    height: Optional[List[float]] = None\n    threshold: Optional[List[float]] = None\n    distance: Optional[int] = None\n    prominence: Optional[List[float]] = None\n    width: Optional[List[float]] = None\n    wlen: Optional[int] = None\n    rel_height: Optional[float] = None\n    plateau_size: Optional[float] = None\n    model_config = ConfigDict(extra=\"forbid\", validate_assignment=True)\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.ColumnNamesAPI","title":"<code>ColumnNamesAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the column names of the exported model.</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class ColumnNamesAPI(BaseModel):\n    \"\"\"Definition of the column names of the exported model.\"\"\"\n\n    energy: str = \"energy\"\n    intensity: str = \"intensity\"\n    residual: str = \"residual\"\n    fit: str = \"fit\"\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.DataPreProcessingAPI","title":"<code>DataPreProcessingAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the data preprocessing command line argument.</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class DataPreProcessingAPI(BaseModel):\n    \"\"\"Definition of the data preprocessing command line argument.\"\"\"\n\n    oversampling: bool = Field(\n        default=False,\n        description=\"Oversampling the spectra by using factor of 5; default to False.\",\n    )\n    energy_start: Optional[float] = Field(\n        default=None,\n        description=\"Start energy of the spectra; default to None.\",\n    )\n    energy_stop: Optional[float] = Field(\n        default=None,\n        description=\"Stop energy of the spectra; default to None.\",\n    )\n    smooth: int = Field(\n        default=0,\n        ge=0,\n        description=\"Smoothing level of the spectra; default to 0.\",\n    )\n    shift: float = Field(\n        default=0,\n        description=\"Shift the energy axis; default to 0.\",\n    )\n    column: List[Union[int, str]] = Field(\n        min_length=1,\n        default=[0, 1],\n        description=\"Column of the data.\",\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.GeneralSolverModelsAPI","title":"<code>GeneralSolverModelsAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the general solver of SpectraFit.</p> <p>GeneralSolver</p> <p>The General Solver combines the settings for <code>lmfit</code> by adding the global fitting settings.</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class GeneralSolverModelsAPI(BaseModel):\n    \"\"\"Definition of the general solver of SpectraFit.\n\n    !!! note \"GeneralSolver\"\n\n        The General Solver combines the settings for `lmfit` by adding the global\n        fitting settings.\n    \"\"\"\n\n    global_: int = GlobalFittingAPI().global_\n    minimizer: Dict[str, Any] = SolverModelsAPI().minimizer\n    optimizer: Dict[str, Any] = SolverModelsAPI().optimizer\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.GlobalFittingAPI","title":"<code>GlobalFittingAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the global fitting routine.</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class GlobalFittingAPI(BaseModel):\n    \"\"\"Definition of the global fitting routine.\"\"\"\n\n    global_: int = Field(default=0, ge=0, le=2, description=\"Global fitting routine.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.tools_model.SolverModelsAPI","title":"<code>SolverModelsAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of the solver of SpectraFit.</p> Source code in <code>spectrafit/api/tools_model.py</code> Python<pre><code>class SolverModelsAPI(BaseModel):\n    \"\"\"Definition of the solver of SpectraFit.\"\"\"\n\n    minimizer: Dict[str, Any] = Field(\n        default={\"nan_policy\": \"propagate\", \"calc_covar\": True},\n        description=\"Minimizer options\",\n    )\n    optimizer: Dict[str, Any] = Field(\n        default={\"max_nfev\": None, \"method\": \"leastsq\"},\n        description=\"Optimzer options\",\n    )\n</code></pre>"},{"location":"api/data_model_api/#file-model-api","title":"File Model API","text":"<p>Definition of the data file model.</p>"},{"location":"api/data_model_api/#spectrafit.api.file_model.DataFileAPI","title":"<code>DataFileAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Definition of a data file.</p> Source code in <code>spectrafit/api/file_model.py</code> Python<pre><code>class DataFileAPI(BaseModel):\n    \"\"\"Definition of a data file.\"\"\"\n\n    skiprows: Optional[int] = Field(\n        default=None,\n        description=\"Number of lines to skip at the beginning of the file.\",\n    )\n    skipfooter: int = Field(\n        ...,\n        description=\"Number of lines to skip at the end of the file.\",\n    )\n    delimiter: str = Field(\n        ...,\n        description=\"Delimiter to use.\",\n    )\n    comment: Optional[str] = Field(\n        default=None,\n        description=\"Comment marker to use.\",\n    )\n    names: Optional[Callable[[Path, str], Optional[List[str]]]] = Field(\n        default=None,\n        description=\"Column names can be provided by list of strings or a function\",\n    )\n    header: Optional[Union[int, List[str]]] = Field(\n        default=None,\n        description=\"Column headers to use.\",\n    )\n    file_suffixes: List[str] = Field(\n        ...,\n        description=\"File suffixes to use.\",\n    )\n\n    @field_validator(\"delimiter\")\n    @classmethod\n    def check_delimiter(cls, v: str) -&gt; Optional[str]:\n        \"\"\"Check if the delimiter is valid.\"\"\"\n        if v in {\" \", \"\\t\", \",\", \";\", \"|\", r\"\\s+\"}:\n            return v\n        raise ValueError(f\" {v} is not a valid delimiter.\")\n\n    @field_validator(\"comment\")\n    @classmethod\n    def check_comment(cls, v: str) -&gt; Optional[str]:\n        \"\"\"Check if the comment marker is valid.\"\"\"\n        if v is None or v in {\"#\", \"%\"}:\n            return v\n        raise ValueError(f\" {v} is not a valid comment marker.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.file_model.DataFileAPI.check_comment","title":"<code>check_comment(v)</code>  <code>classmethod</code>","text":"<p>Check if the comment marker is valid.</p> Source code in <code>spectrafit/api/file_model.py</code> Python<pre><code>@field_validator(\"comment\")\n@classmethod\ndef check_comment(cls, v: str) -&gt; Optional[str]:\n    \"\"\"Check if the comment marker is valid.\"\"\"\n    if v is None or v in {\"#\", \"%\"}:\n        return v\n    raise ValueError(f\" {v} is not a valid comment marker.\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.file_model.DataFileAPI.check_delimiter","title":"<code>check_delimiter(v)</code>  <code>classmethod</code>","text":"<p>Check if the delimiter is valid.</p> Source code in <code>spectrafit/api/file_model.py</code> Python<pre><code>@field_validator(\"delimiter\")\n@classmethod\ndef check_delimiter(cls, v: str) -&gt; Optional[str]:\n    \"\"\"Check if the delimiter is valid.\"\"\"\n    if v in {\" \", \"\\t\", \",\", \";\", \"|\", r\"\\s+\"}:\n        return v\n    raise ValueError(f\" {v} is not a valid delimiter.\")\n</code></pre>"},{"location":"api/data_model_api/#pptx-model-api","title":"PPTX Model API","text":"<p>PPTXModel class for SpectraFit API.</p>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.DescriptionAPI","title":"<code>DescriptionAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Description class for PPTXData input.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class DescriptionAPI(BaseModel):\n    \"\"\"Description class for PPTXData input.\"\"\"\n\n    project_name: str\n    version: str\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.Field169API","title":"<code>Field169API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Field169 class for PPTXData input.</p> <p>About the field <code>16:9</code></p> <p>The field <code>16:9</code> of the elements in the powerpoint presentation defines the structure of the powerpoint presentation with the elements of the header, left subtitle and right subtitle for the ratio of <code>16:9</code> with pixel width and height of 1280 and 720 respectively.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class Field169API(BaseModel):\n    \"\"\"Field169 class for PPTXData input.\n\n    !!! info \"About the field `16:9`\"\n\n        The field `16:9` of the elements in the powerpoint presentation defines the\n        structure of the powerpoint presentation with the elements of the header,\n        left subtitle and right subtitle for the ratio of `16:9` with pixel width\n        and height of __1280__ and __720__ respectively.\n    \"\"\"\n\n    ratio: PPTXRatioAPI\n    structure: PPTXStructureAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.Field169HDRAPI","title":"<code>Field169HDRAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Field169HDRAPI class for PPTXData input.</p> <p>About the field <code>16:9 High Definition Resolution (HDR)</code></p> <p>The field <code>16:9</code> of the elements in the powerpoint presentation defines the structure of the powerpoint presentation with the elements of the header, left subtitle and right subtitle for the ratio of <code>16:9</code> with pixel width and height of 1920 and 1080 respectively.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class Field169HDRAPI(BaseModel):\n    \"\"\"Field169HDRAPI class for PPTXData input.\n\n    !!! info \"About the field `16:9 High Definition Resolution (HDR)`\"\n\n        The field `16:9` of the elements in the powerpoint presentation defines the\n        structure of the powerpoint presentation with the elements of the header,\n        left subtitle and right subtitle for the ratio of `16:9` with pixel width\n        and height of __1920__ and __1080__ respectively.\n    \"\"\"\n\n    ratio: PPTXRatioAPI\n    structure: PPTXStructureAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.Field43API","title":"<code>Field43API</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Field43 class for PPTXData input.</p> <p>About the field <code>4:3</code></p> <p>The field <code>4:3</code> of the elements in the powerpoint presentation defines the structure of the powerpoint presentation with the elements of the header, left subtitle and right subtitle for the ratio of <code>4:3</code> with pixel width and height of 960 and 720 respectively.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class Field43API(BaseModel):\n    \"\"\"Field43 class for PPTXData input.\n\n    !!! info \"About the field `4:3`\"\n\n        The field `4:3` of the elements in the powerpoint presentation defines the\n        structure of the powerpoint presentation with the elements of the header,\n        left subtitle and right subtitle for the ratio of `4:3` with pixel width\n        and height of __960__ and __720__ respectively.\n    \"\"\"\n\n    ratio: PPTXRatioAPI\n    structure: PPTXStructureAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.GoodnessOfFitAPI","title":"<code>GoodnessOfFitAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>GoodnessOfFit class.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class GoodnessOfFitAPI(BaseModel):\n    \"\"\"GoodnessOfFit class.\"\"\"\n\n    chi2: float = Field(..., alias=\"chi_square\")\n    r_chi2: float = Field(..., alias=\"reduced_chi_square\")\n    akaike: float = Field(..., alias=\"akaike_information\")\n    bayesian: float = Field(..., alias=\"bayesian_information\")\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.InputAPI","title":"<code>InputAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Input class for PPTXData input.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class InputAPI(BaseModel):\n    \"\"\"Input class for PPTXData input.\"\"\"\n\n    method: MethodAPI\n    description: DescriptionAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.MethodAPI","title":"<code>MethodAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Method class to check if global fitting is enabled.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class MethodAPI(BaseModel):\n    \"\"\"Method class to check if global fitting is enabled.\"\"\"\n\n    global_fitting: bool\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.OutputAPI","title":"<code>OutputAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Dataframe class for PPTXData output.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class OutputAPI(BaseModel):\n    \"\"\"Dataframe class for PPTXData output.\"\"\"\n\n    df_fit: Dict[str, List[float]]\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXBasicTitleAPI","title":"<code>PPTXBasicTitleAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PPTXBasicTitle class for PPTXData input.</p> <p>About the basic title</p> <p>The basic title of the elements in the powerpoint presentation defines the structure of the powerpoint presentation with the elements of the header, left subtitle and right subtitle for the ratio of <code>16:9</code> and <code>4:3</code>.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXBasicTitleAPI(BaseModel):\n    \"\"\"PPTXBasicTitle class for PPTXData input.\n\n    !!! info \"About the basic title\"\n\n        The basic title of the elements in the powerpoint presentation defines the\n        structure of the powerpoint presentation with the elements of the header,\n        left subtitle and right subtitle for the ratio of `16:9` and `4:3`.\n    \"\"\"\n\n    sub_title_left: str = \"Plot: Fitted and Experimental Spectra\"\n    sub_title_right: str = \"Tables: Metrics and Variables\"\n    figure_description: str = (\n        \"Figure 1: Fitted and Experimental Spectra with the Residuals\"\n    )\n    table_1_description: str = \"Table 1: Goodness of Fit\"\n    table_2_description: str = \"Table 2: Regression Metrics\"\n    table_3_description: str = \"Table 3: Variables\"\n\n    credit_logo: Path = (\n        Path(str(pkg_resources.get_distribution(\"spectrafit\").location))\n        / \"spectrafit/plugins/img/SpectraFit.png\"\n    )\n    credit_description: str = f\"SpectraFit: v{__version__}\"\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXDataAPI","title":"<code>PPTXDataAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>PPTXData class for SpectraFit API.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXDataAPI(BaseModel):\n    \"\"\"PPTXData class for SpectraFit API.\"\"\"\n\n    output: OutputAPI\n    input: InputAPI\n    solver: SolverAPI\n\n    class Config:\n        \"\"\"Config class to allow to pass also not pydantic class members.\"\"\"\n\n        extra = \"ignore\"\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXDataAPI.Config","title":"<code>Config</code>","text":"<p>Config class to allow to pass also not pydantic class members.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class Config:\n    \"\"\"Config class to allow to pass also not pydantic class members.\"\"\"\n\n    extra = \"ignore\"\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXDescriptionAPI","title":"<code>PPTXDescriptionAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Description class for PPTXData input.</p> <p>About the description</p> <p>The description of the elements in the powerpoint presentation. This includes the text of the description for figure, table and textbox.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXDescriptionAPI(BaseModel):\n    \"\"\"Description class for PPTXData input.\n\n    !!! info \"About the description\"\n\n        The description of the elements in the powerpoint presentation. This\n        includes the text of the description for figure, table and textbox.\n    \"\"\"\n\n    model_config = ConfigDict(validate_assignment=True, arbitrary_types_allowed=True)\n    position: PPTXPositionAPI\n    text: str\n    font_size: Pt = Field(default_factory=lambda: Pt(8))\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXFigureAPI","title":"<code>PPTXFigureAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Figure class for PPTXData input.</p> <p>About the figure</p> <p>The figure of the elements in the powerpoint presentation, which is connected to the <code>PPTXDescriptionAPI</code> to provide both the figure and the description at the same time. This includes the position of the figure and the description of the figure. The figure can be either a <code>png</code> or <code>jpg</code> file and the description is a <code>str</code>.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXFigureAPI(BaseModel):\n    \"\"\"Figure class for PPTXData input.\n\n    !!! info \"About the figure\"\n\n        The figure of the elements in the powerpoint presentation, which is connected\n        to the `PPTXDescriptionAPI` to provide both the figure and the description at\n        the same time. This includes the position of the figure and the description\n        of the figure. The figure can be either a `png` or `jpg` file and the\n        description is a `str`.\n    \"\"\"\n\n    position: PPTXPositionAPI\n    description: PPTXDescriptionAPI\n    fname: Path\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXHeaderAPI","title":"<code>PPTXHeaderAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Header class for PPTXData input.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXHeaderAPI(BaseModel):\n    \"\"\"Header class for PPTXData input.\"\"\"\n\n    position: PPTXPositionAPI\n    text: str\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI","title":"<code>PPTXLayoutAPI</code>","text":"<p>PPTXLayout class for PPTXData input.</p> <p>Attributes:</p> Name Type Description <code>pptx_formats</code> <code>Dict[str, List[Union[Field169API, Field169HDRAPI, Field43API]]]</code> <p>The formats of the powerpoint presentation. This includes the ratio of <code>16:9</code> and <code>4:3</code> with pixel width and height of 1280 and 720 respectively for <code>16:9</code> and 960 and 720 respectively for <code>4:3</code>.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXLayoutAPI:\n    \"\"\"PPTXLayout class for PPTXData input.\n\n    Attributes:\n        pptx_formats (Dict[str, List[Union[Field169API, Field169HDRAPI, Field43API]]]):\n            The formats of the powerpoint presentation. This includes the ratio of\n            `16:9` and `4:3` with pixel width and height of __1280__ and __720__\n            respectively for `16:9` and __960__ and __720__ respectively for `4:3`.\n    \"\"\"\n\n    pptx_formats: Dict[\n        str, Tuple[Type[Union[Field169API, Field169HDRAPI, Field43API]], Dict[str, int]]\n    ] = {\n        \"16:9\": (Field169API, {\"width\": 1280, \"height\": 720}),\n        \"16:9HDR\": (Field169HDRAPI, {\"width\": 1920, \"height\": 1080}),\n        \"4:3\": (Field43API, {\"width\": 960, \"height\": 720}),\n    }\n\n    def __init__(self, format: str, data: PPTXDataAPI) -&gt; None:\n        \"\"\"Initialize the PPTXLayout class.\n\n        Args:\n            format (str): The format of the powerpoint presentation.\n            data (PPTXDataAPI): The data of the powerpoint presentation.\n        \"\"\"\n        self._format = format\n        self.tmp_fname = self.tmp_plot(pd.DataFrame(data.output.df_fit))\n        self.title = data.input.description.project_name\n        self.df_gof = pd.DataFrame({k: [v] for k, v in data.solver.goodness_of_fit})\n        self.df_regression = pd.DataFrame(**data.solver.regression_metrics.model_dump())\n        self.df_variables = pd.DataFrame.from_dict(\n            data.solver.variables, orient=\"index\"\n        )\n\n    def tmp_plot(self, df_fit: pd.DataFrame) -&gt; Path:\n        \"\"\"Create a temporary plot.\n\n        Args:\n            df_fit (pd.DataFrame): The DataFrame containing the fit results.\n\n        Returns:\n            Path: The path to the temporary plot.\n        \"\"\"\n        with tempfile.NamedTemporaryFile(suffix=\".png\", delete=False) as tmp:\n            PlotSpectra(\n                df=df_fit,\n                args={},\n            ).plot_local_spectra()\n            tmp_fname = Path(tmp.name)\n            plt.savefig(tmp_fname, dpi=300, bbox_inches=\"tight\")\n            return tmp_fname\n\n    def create_ratio(self) -&gt; PPTXRatioAPI:\n        \"\"\"Create the ratio of the powerpoint presentation.\n\n        Returns:\n            PPTXRatioAPI: The ratio of the powerpoint presentation.\n        \"\"\"\n        return PPTXRatioAPI(\n            width=Pt(self.pptx_formats[self._format][1][\"width\"]),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"]),\n        )\n\n    def create_header(self) -&gt; PPTXHeaderAPI:\n        \"\"\"Create the header of the powerpoint presentation.\n\n        Returns:\n            PPTXHeaderAPI: The header of the powerpoint presentation.\n        \"\"\"\n        return PPTXHeaderAPI(\n            position=PPTXPositionAPI(\n                left=Pt(0),\n                top=Pt(0),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"]),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n            ),\n            text=self.title,\n        )\n\n    def create_sub_title_left(self) -&gt; PPTXSubTitleLeftAPI:\n        \"\"\"Create the left subtitle of the powerpoint presentation.\n\n        Returns:\n            PPTXSubTitleLeftAPI: The left subtitle of the powerpoint presentation.\n        \"\"\"\n        return PPTXSubTitleLeftAPI(\n            position=PPTXPositionAPI(\n                left=Pt(0),\n                top=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 10),\n            ),\n            text=PPTXBasicTitleAPI().sub_title_left,\n            figure=PPTXFigureAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(0),\n                    top=Pt(\n                        self.pptx_formats[self._format][1][\"height\"] // 5\n                        + self.pptx_formats[self._format][1][\"height\"] // 10\n                    ),\n                    width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    height=Pt(3 * self.pptx_formats[self._format][1][\"height\"] // 5),\n                ),\n                description=PPTXDescriptionAPI(\n                    position=PPTXPositionAPI(\n                        left=Pt(0),\n                        top=Pt(\n                            self.pptx_formats[self._format][1][\"height\"] // 10\n                            + 4 * self.pptx_formats[self._format][1][\"height\"] // 5\n                        ),\n                        width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                        height=Pt(18),\n                    ),\n                    text=PPTXBasicTitleAPI().figure_description,\n                ),\n                fname=self.tmp_fname,\n            ),\n        )\n\n    def create_sub_title_right(self) -&gt; PPTXSubTitleRightAPI:\n        \"\"\"Create the right subtitle of the powerpoint presentation.\n\n        Returns:\n            PPTXSubTitleRightAPI: The right subtitle of the powerpoint presentation.\n        \"\"\"\n        return PPTXSubTitleRightAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 10),\n            ),\n            text=PPTXBasicTitleAPI().sub_title_right,\n            table_1=self.create_table_1(),\n            table_2=self.create_table_2(),\n            table_3=self.create_table_3(),\n            credit=self.create_credit(),\n        )\n\n    def create_table_1(self) -&gt; PPTXTableAPI:\n        \"\"\"Create the table 1 of the powerpoint presentation.\n\n        Returns:\n            PPTXTableAPI: The table 1 of the powerpoint presentation.\n        \"\"\"\n        _basic_block = (\n            self.pptx_formats[self._format][1][\"height\"] // 5\n            + self.pptx_formats[self._format][1][\"height\"] // 10\n        )\n        return PPTXTableAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block + 20),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n            ),\n            description=PPTXDescriptionAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    top=Pt(_basic_block),\n                    width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    height=Pt(18),\n                ),\n                text=PPTXBasicTitleAPI().table_1_description,\n            ),\n            df=self.df_gof,\n            transpose=False,\n            index_hidden=True,\n        )\n\n    def create_table_2(self) -&gt; PPTXTableAPI:\n        \"\"\"Create the table 2 of the powerpoint presentation.\n\n        Returns:\n            PPTXTableAPI: The table 2 of the powerpoint presentation.\n        \"\"\"\n        _basic_block = (\n            self.pptx_formats[self._format][1][\"height\"] // 5\n            + self.pptx_formats[self._format][1][\"height\"] // 10\n            + self.pptx_formats[self._format][1][\"height\"] // 6\n        )\n        return PPTXTableAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block + 40),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n            ),\n            description=PPTXDescriptionAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    top=Pt(_basic_block + 20),\n                    width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    height=Pt(18),\n                ),\n                text=PPTXBasicTitleAPI().table_2_description,\n            ),\n            df=self.df_regression,\n            transpose=True,\n            index_hidden=True,\n        )\n\n    def create_table_3(self) -&gt; PPTXTableAPI:\n        \"\"\"Create the table 3 of the powerpoint presentation.\n\n        Returns:\n            PPTXTableAPI: The table 3 of the powerpoint presentation.\n        \"\"\"\n        _basic_block = (\n            self.pptx_formats[self._format][1][\"height\"] // 5\n            + self.pptx_formats[self._format][1][\"height\"] // 10\n            + self.pptx_formats[self._format][1][\"height\"] // 3\n        )\n        return PPTXTableAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block + 60),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n            ),\n            description=PPTXDescriptionAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    top=Pt(_basic_block + 40),\n                    width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    height=Pt(18),\n                ),\n                text=PPTXBasicTitleAPI().table_3_description,\n            ),\n            df=self.df_variables,\n            transpose=True,\n            index_hidden=False,\n        )\n\n    def create_credit(self) -&gt; PPTXFigureAPI:\n        \"\"\"Create the credit of the powerpoint presentation.\n\n        Returns:\n            PPTXFigureAPI: The credit of the powerpoint presentation.\n        \"\"\"\n        return PPTXFigureAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] - 40),\n                top=Pt(self.pptx_formats[self._format][1][\"height\"] - 40),\n                width=Pt(40),\n                height=Pt(40),\n            ),\n            description=PPTXDescriptionAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(self.pptx_formats[self._format][1][\"width\"] - 200),\n                    top=Pt(self.pptx_formats[self._format][1][\"height\"] - 40),\n                    width=Pt(200),\n                    height=Pt(14),\n                ),\n                text=PPTXBasicTitleAPI().credit_description,\n            ),\n            fname=PPTXBasicTitleAPI().credit_logo,\n        )\n\n    def get_pptx_layout(self) -&gt; Union[Field169API, Field169HDRAPI, Field43API]:\n        \"\"\"Get the powerpoint presentation layout.\n\n        Returns:\n            Union[Field169API, Field169HDRAPI, Field43API]: The powerpoint presentation\n                layout.\n        \"\"\"\n        return self.pptx_formats[self._format][0](\n            ratio=self.create_ratio(),\n            structure=PPTXStructureAPI(\n                header=self.create_header(),\n                sub_title_left=self.create_sub_title_left(),\n                sub_title_right=self.create_sub_title_right(),\n            ),\n        )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.__init__","title":"<code>__init__(format, data)</code>","text":"<p>Initialize the PPTXLayout class.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>str</code> <p>The format of the powerpoint presentation.</p> required <code>data</code> <code>PPTXDataAPI</code> <p>The data of the powerpoint presentation.</p> required Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def __init__(self, format: str, data: PPTXDataAPI) -&gt; None:\n    \"\"\"Initialize the PPTXLayout class.\n\n    Args:\n        format (str): The format of the powerpoint presentation.\n        data (PPTXDataAPI): The data of the powerpoint presentation.\n    \"\"\"\n    self._format = format\n    self.tmp_fname = self.tmp_plot(pd.DataFrame(data.output.df_fit))\n    self.title = data.input.description.project_name\n    self.df_gof = pd.DataFrame({k: [v] for k, v in data.solver.goodness_of_fit})\n    self.df_regression = pd.DataFrame(**data.solver.regression_metrics.model_dump())\n    self.df_variables = pd.DataFrame.from_dict(\n        data.solver.variables, orient=\"index\"\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_credit","title":"<code>create_credit()</code>","text":"<p>Create the credit of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXFigureAPI</code> <code>PPTXFigureAPI</code> <p>The credit of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_credit(self) -&gt; PPTXFigureAPI:\n    \"\"\"Create the credit of the powerpoint presentation.\n\n    Returns:\n        PPTXFigureAPI: The credit of the powerpoint presentation.\n    \"\"\"\n    return PPTXFigureAPI(\n        position=PPTXPositionAPI(\n            left=Pt(self.pptx_formats[self._format][1][\"width\"] - 40),\n            top=Pt(self.pptx_formats[self._format][1][\"height\"] - 40),\n            width=Pt(40),\n            height=Pt(40),\n        ),\n        description=PPTXDescriptionAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] - 200),\n                top=Pt(self.pptx_formats[self._format][1][\"height\"] - 40),\n                width=Pt(200),\n                height=Pt(14),\n            ),\n            text=PPTXBasicTitleAPI().credit_description,\n        ),\n        fname=PPTXBasicTitleAPI().credit_logo,\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_header","title":"<code>create_header()</code>","text":"<p>Create the header of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXHeaderAPI</code> <code>PPTXHeaderAPI</code> <p>The header of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_header(self) -&gt; PPTXHeaderAPI:\n    \"\"\"Create the header of the powerpoint presentation.\n\n    Returns:\n        PPTXHeaderAPI: The header of the powerpoint presentation.\n    \"\"\"\n    return PPTXHeaderAPI(\n        position=PPTXPositionAPI(\n            left=Pt(0),\n            top=Pt(0),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"]),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n        ),\n        text=self.title,\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_ratio","title":"<code>create_ratio()</code>","text":"<p>Create the ratio of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXRatioAPI</code> <code>PPTXRatioAPI</code> <p>The ratio of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_ratio(self) -&gt; PPTXRatioAPI:\n    \"\"\"Create the ratio of the powerpoint presentation.\n\n    Returns:\n        PPTXRatioAPI: The ratio of the powerpoint presentation.\n    \"\"\"\n    return PPTXRatioAPI(\n        width=Pt(self.pptx_formats[self._format][1][\"width\"]),\n        height=Pt(self.pptx_formats[self._format][1][\"height\"]),\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_sub_title_left","title":"<code>create_sub_title_left()</code>","text":"<p>Create the left subtitle of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXSubTitleLeftAPI</code> <code>PPTXSubTitleLeftAPI</code> <p>The left subtitle of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_sub_title_left(self) -&gt; PPTXSubTitleLeftAPI:\n    \"\"\"Create the left subtitle of the powerpoint presentation.\n\n    Returns:\n        PPTXSubTitleLeftAPI: The left subtitle of the powerpoint presentation.\n    \"\"\"\n    return PPTXSubTitleLeftAPI(\n        position=PPTXPositionAPI(\n            left=Pt(0),\n            top=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 10),\n        ),\n        text=PPTXBasicTitleAPI().sub_title_left,\n        figure=PPTXFigureAPI(\n            position=PPTXPositionAPI(\n                left=Pt(0),\n                top=Pt(\n                    self.pptx_formats[self._format][1][\"height\"] // 5\n                    + self.pptx_formats[self._format][1][\"height\"] // 10\n                ),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(3 * self.pptx_formats[self._format][1][\"height\"] // 5),\n            ),\n            description=PPTXDescriptionAPI(\n                position=PPTXPositionAPI(\n                    left=Pt(0),\n                    top=Pt(\n                        self.pptx_formats[self._format][1][\"height\"] // 10\n                        + 4 * self.pptx_formats[self._format][1][\"height\"] // 5\n                    ),\n                    width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                    height=Pt(18),\n                ),\n                text=PPTXBasicTitleAPI().figure_description,\n            ),\n            fname=self.tmp_fname,\n        ),\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_sub_title_right","title":"<code>create_sub_title_right()</code>","text":"<p>Create the right subtitle of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXSubTitleRightAPI</code> <code>PPTXSubTitleRightAPI</code> <p>The right subtitle of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_sub_title_right(self) -&gt; PPTXSubTitleRightAPI:\n    \"\"\"Create the right subtitle of the powerpoint presentation.\n\n    Returns:\n        PPTXSubTitleRightAPI: The right subtitle of the powerpoint presentation.\n    \"\"\"\n    return PPTXSubTitleRightAPI(\n        position=PPTXPositionAPI(\n            left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            top=Pt(self.pptx_formats[self._format][1][\"height\"] // 5),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 10),\n        ),\n        text=PPTXBasicTitleAPI().sub_title_right,\n        table_1=self.create_table_1(),\n        table_2=self.create_table_2(),\n        table_3=self.create_table_3(),\n        credit=self.create_credit(),\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_table_1","title":"<code>create_table_1()</code>","text":"<p>Create the table 1 of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXTableAPI</code> <code>PPTXTableAPI</code> <p>The table 1 of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_table_1(self) -&gt; PPTXTableAPI:\n    \"\"\"Create the table 1 of the powerpoint presentation.\n\n    Returns:\n        PPTXTableAPI: The table 1 of the powerpoint presentation.\n    \"\"\"\n    _basic_block = (\n        self.pptx_formats[self._format][1][\"height\"] // 5\n        + self.pptx_formats[self._format][1][\"height\"] // 10\n    )\n    return PPTXTableAPI(\n        position=PPTXPositionAPI(\n            left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            top=Pt(_basic_block + 20),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n        ),\n        description=PPTXDescriptionAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(18),\n            ),\n            text=PPTXBasicTitleAPI().table_1_description,\n        ),\n        df=self.df_gof,\n        transpose=False,\n        index_hidden=True,\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_table_2","title":"<code>create_table_2()</code>","text":"<p>Create the table 2 of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXTableAPI</code> <code>PPTXTableAPI</code> <p>The table 2 of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_table_2(self) -&gt; PPTXTableAPI:\n    \"\"\"Create the table 2 of the powerpoint presentation.\n\n    Returns:\n        PPTXTableAPI: The table 2 of the powerpoint presentation.\n    \"\"\"\n    _basic_block = (\n        self.pptx_formats[self._format][1][\"height\"] // 5\n        + self.pptx_formats[self._format][1][\"height\"] // 10\n        + self.pptx_formats[self._format][1][\"height\"] // 6\n    )\n    return PPTXTableAPI(\n        position=PPTXPositionAPI(\n            left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            top=Pt(_basic_block + 40),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n        ),\n        description=PPTXDescriptionAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block + 20),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(18),\n            ),\n            text=PPTXBasicTitleAPI().table_2_description,\n        ),\n        df=self.df_regression,\n        transpose=True,\n        index_hidden=True,\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.create_table_3","title":"<code>create_table_3()</code>","text":"<p>Create the table 3 of the powerpoint presentation.</p> <p>Returns:</p> Name Type Description <code>PPTXTableAPI</code> <code>PPTXTableAPI</code> <p>The table 3 of the powerpoint presentation.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def create_table_3(self) -&gt; PPTXTableAPI:\n    \"\"\"Create the table 3 of the powerpoint presentation.\n\n    Returns:\n        PPTXTableAPI: The table 3 of the powerpoint presentation.\n    \"\"\"\n    _basic_block = (\n        self.pptx_formats[self._format][1][\"height\"] // 5\n        + self.pptx_formats[self._format][1][\"height\"] // 10\n        + self.pptx_formats[self._format][1][\"height\"] // 3\n    )\n    return PPTXTableAPI(\n        position=PPTXPositionAPI(\n            left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            top=Pt(_basic_block + 60),\n            width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n            height=Pt(self.pptx_formats[self._format][1][\"height\"] // 6),\n        ),\n        description=PPTXDescriptionAPI(\n            position=PPTXPositionAPI(\n                left=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                top=Pt(_basic_block + 40),\n                width=Pt(self.pptx_formats[self._format][1][\"width\"] // 2),\n                height=Pt(18),\n            ),\n            text=PPTXBasicTitleAPI().table_3_description,\n        ),\n        df=self.df_variables,\n        transpose=True,\n        index_hidden=False,\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.get_pptx_layout","title":"<code>get_pptx_layout()</code>","text":"<p>Get the powerpoint presentation layout.</p> <p>Returns:</p> Type Description <code>Union[Field169API, Field169HDRAPI, Field43API]</code> <p>Union[Field169API, Field169HDRAPI, Field43API]: The powerpoint presentation layout.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def get_pptx_layout(self) -&gt; Union[Field169API, Field169HDRAPI, Field43API]:\n    \"\"\"Get the powerpoint presentation layout.\n\n    Returns:\n        Union[Field169API, Field169HDRAPI, Field43API]: The powerpoint presentation\n            layout.\n    \"\"\"\n    return self.pptx_formats[self._format][0](\n        ratio=self.create_ratio(),\n        structure=PPTXStructureAPI(\n            header=self.create_header(),\n            sub_title_left=self.create_sub_title_left(),\n            sub_title_right=self.create_sub_title_right(),\n        ),\n    )\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXLayoutAPI.tmp_plot","title":"<code>tmp_plot(df_fit)</code>","text":"<p>Create a temporary plot.</p> <p>Parameters:</p> Name Type Description Default <code>df_fit</code> <code>DataFrame</code> <p>The DataFrame containing the fit results.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The path to the temporary plot.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>def tmp_plot(self, df_fit: pd.DataFrame) -&gt; Path:\n    \"\"\"Create a temporary plot.\n\n    Args:\n        df_fit (pd.DataFrame): The DataFrame containing the fit results.\n\n    Returns:\n        Path: The path to the temporary plot.\n    \"\"\"\n    with tempfile.NamedTemporaryFile(suffix=\".png\", delete=False) as tmp:\n        PlotSpectra(\n            df=df_fit,\n            args={},\n        ).plot_local_spectra()\n        tmp_fname = Path(tmp.name)\n        plt.savefig(tmp_fname, dpi=300, bbox_inches=\"tight\")\n        return tmp_fname\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXPositionAPI","title":"<code>PPTXPositionAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Position class for PPTXData input.</p> <p>About the position</p> <p>The position of the elements in the powerpoint presentation. This includes the top, left, width and height of the elements for figure, table and textbox. All the values are in pixels.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXPositionAPI(BaseModel):\n    \"\"\"Position class for PPTXData input.\n\n    !!! info \"About the position\"\n\n        The position of the elements in the powerpoint presentation. This includes\n        the top, left, width and height of the elements for figure, table and\n        textbox. All the values are in pixels.\n    \"\"\"\n\n    model_config = ConfigDict(validate_assignment=True, arbitrary_types_allowed=True)\n    left: Pt\n    top: Pt\n    width: Pt\n    height: Pt\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXRatioAPI","title":"<code>PPTXRatioAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Ratio class for PPTXData input.</p> <p>About the ratio</p> <p>The ratio of the powerpoint presentation. This includes the width and height of the powerpoint presentation. The ratio is either <code>16:9</code> or <code>4:3</code>. The default ratio is <code>16:9</code> and the default width and height are <code>1920</code> and <code>1080</code> respectively. The width and height are in pixels.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXRatioAPI(BaseModel, arbitrary_types_allowed=True):\n    \"\"\"Ratio class for PPTXData input.\n\n    !!! info \"About the ratio\"\n\n        The ratio of the powerpoint presentation. This includes the width and height\n        of the powerpoint presentation. The ratio is either `16:9` or `4:3`. The\n        default ratio is `16:9` and the default width and height are `1920` and\n        `1080` respectively. The width and height are in pixels.\n\n    \"\"\"\n\n    model_config = ConfigDict(validate_assignment=True, arbitrary_types_allowed=True)\n    width: Pt\n    height: Pt\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXStructureAPI","title":"<code>PPTXStructureAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Structure class for PPTXData input.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXStructureAPI(BaseModel):\n    \"\"\"Structure class for PPTXData input.\"\"\"\n\n    header: PPTXHeaderAPI\n    sub_title_left: PPTXSubTitleLeftAPI\n    sub_title_right: PPTXSubTitleRightAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXSubTitleLeftAPI","title":"<code>PPTXSubTitleLeftAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>SubTitle_1 class for PPTXData input.</p> <p>About the left subtitle</p> <p>The left subtitle of the elements in the powerpoint presentation defines the first column of the powerpoint presentation with the elements of the subtitle, the figure and the description of the figure. This includes the position of the subtitle, the text of the subtitle, the figure and the description of the figure.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXSubTitleLeftAPI(BaseModel):\n    \"\"\"SubTitle_1 class for PPTXData input.\n\n    !!! info \"About the left subtitle\"\n\n        The left subtitle of the elements in the powerpoint presentation defines the\n        first column of the powerpoint presentation with the elements of the subtitle,\n        the figure and the description of the figure. This includes the position of\n        the subtitle, the text of the subtitle, the figure and the description of the\n        figure.\n    \"\"\"\n\n    index: int = 1\n    position: PPTXPositionAPI\n    text: str\n    figure: PPTXFigureAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXSubTitleRightAPI","title":"<code>PPTXSubTitleRightAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>SubTitle_2 class for PPTXData input.</p> <p>About the right subtitle</p> <p>The right subtitle of the elements in the powerpoint presentation defines the second column of the powerpoint presentation with the elements of the subtitle, the tables and their descriptions. The tables are divided into three tables for <code>goodness_of_fit</code>, <code>regression_metrics</code> and <code>variables</code>. This includes the position of the subtitle, the text of the subtitle, the tables and their descriptions. Finally, the credit of the figure is also included in the right subtitle.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXSubTitleRightAPI(BaseModel):\n    \"\"\"SubTitle_2 class for PPTXData input.\n\n    !!! info \"About the right subtitle\"\n\n        The right subtitle of the elements in the powerpoint presentation defines the\n        second column of the powerpoint presentation with the elements of the subtitle,\n        the tables and their descriptions. The tables are divided into three tables for\n        `goodness_of_fit`, `regression_metrics` and `variables`. This includes the\n        position of the subtitle, the text of the subtitle, the tables and their\n        descriptions. Finally, the credit of the figure is also included in the\n        right subtitle.\n    \"\"\"\n\n    index: int = 2\n    position: PPTXPositionAPI\n    text: str\n    table_1: PPTXTableAPI\n    table_2: PPTXTableAPI\n    table_3: PPTXTableAPI\n    credit: PPTXFigureAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.PPTXTableAPI","title":"<code>PPTXTableAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Table class for PPTXData input.</p> <p>About the table</p> <p>The table of the elements in the powerpoint presentation, which is connected to the <code>PPTXDescriptionAPI</code> to provide both the table and the description at the same time. This includes the position of the table and the description of the table. The table is a <code>pandas.DataFrame</code> and the description is a <code>str</code>.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class PPTXTableAPI(BaseModel):\n    \"\"\"Table class for PPTXData input.\n\n    !!! info \"About the table\"\n\n        The table of the elements in the powerpoint presentation, which is connected\n        to the `PPTXDescriptionAPI` to provide both the table and the description at\n        the same time. This includes the position of the table and the description\n        of the table. The table is a `pandas.DataFrame` and the description is a\n        `str`.\n    \"\"\"\n\n    model_config = ConfigDict(validate_assignment=True, arbitrary_types_allowed=True)\n    df: pd.DataFrame\n    transpose: bool\n    index_hidden: bool\n    position: PPTXPositionAPI\n    description: PPTXDescriptionAPI\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.RegressionMetricsAPI","title":"<code>RegressionMetricsAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>RegressionMetrics class.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class RegressionMetricsAPI(BaseModel):\n    \"\"\"RegressionMetrics class.\"\"\"\n\n    index: List[str]\n    columns: List[int]\n    data: List[List[float]]\n\n    @field_validator(\"index\")\n    @classmethod\n    def short_metrics(cls, v: List[str]) -&gt; List[str]:\n        \"\"\"Shorten the metrics names.\n\n        Args:\n            v (List[str]): The metrics names.\n\n        Returns:\n            List[str]: The shortened metrics names.\n        \"\"\"\n        pattern = r\"(?&lt;!\\d)[a-zA-Z0-9]{2,}(?!\\d)\"\n        abbreviations: Dict[str, str] = {}\n        for metric in v:\n            abbreviation = \"\".join(re.findall(pattern, metric)).lower()[:2]\n            while abbreviation in abbreviations.values() or len(abbreviation) &lt; 2:\n                abbreviation = \"\".join(re.findall(pattern, metric)).lower()[\n                    : len(abbreviation) + 1\n                ]\n            abbreviations[metric] = abbreviation\n        return list(abbreviations.values())\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.RegressionMetricsAPI.short_metrics","title":"<code>short_metrics(v)</code>  <code>classmethod</code>","text":"<p>Shorten the metrics names.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>List[str]</code> <p>The metrics names.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: The shortened metrics names.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>@field_validator(\"index\")\n@classmethod\ndef short_metrics(cls, v: List[str]) -&gt; List[str]:\n    \"\"\"Shorten the metrics names.\n\n    Args:\n        v (List[str]): The metrics names.\n\n    Returns:\n        List[str]: The shortened metrics names.\n    \"\"\"\n    pattern = r\"(?&lt;!\\d)[a-zA-Z0-9]{2,}(?!\\d)\"\n    abbreviations: Dict[str, str] = {}\n    for metric in v:\n        abbreviation = \"\".join(re.findall(pattern, metric)).lower()[:2]\n        while abbreviation in abbreviations.values() or len(abbreviation) &lt; 2:\n            abbreviation = \"\".join(re.findall(pattern, metric)).lower()[\n                : len(abbreviation) + 1\n            ]\n        abbreviations[metric] = abbreviation\n    return list(abbreviations.values())\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.SolverAPI","title":"<code>SolverAPI</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Solver class for getting the metrics of the fit for PPTXData output.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>class SolverAPI(BaseModel):\n    \"\"\"Solver class for getting the metrics of the fit for PPTXData output.\"\"\"\n\n    goodness_of_fit: GoodnessOfFitAPI\n    regression_metrics: RegressionMetricsAPI\n    variables: Dict[str, Dict[str, float]]\n\n    @field_validator(\"variables\")\n    @classmethod\n    def short_variables(\n        cls, v: Dict[str, Dict[str, float]]\n    ) -&gt; Dict[str, Dict[str, float]]:\n        \"\"\"Shorten the variables names.\n\n        Args:\n            v (Dict[str, Dict[str, float]]): The variables names.\n\n        Returns:\n            Dict[str, Dict[str, float]]: The shortened variables names.\n        \"\"\"\n        new_dict = {}\n        for key, value in v.items():\n            new_key = \"\".join([part[:2] for part in key.split(\"_\")])\n            new_value = {}\n            for sub_key, sub_value in value.items():\n                new_sub_key = sub_key.replace(\"_value\", \"\")\n                new_value[new_sub_key] = sub_value\n            new_dict[new_key] = new_value\n        return new_dict\n</code></pre>"},{"location":"api/data_model_api/#spectrafit.api.pptx_model.SolverAPI.short_variables","title":"<code>short_variables(v)</code>  <code>classmethod</code>","text":"<p>Shorten the variables names.</p> <p>Parameters:</p> Name Type Description Default <code>v</code> <code>Dict[str, Dict[str, float]]</code> <p>The variables names.</p> required <p>Returns:</p> Type Description <code>Dict[str, Dict[str, float]]</code> <p>Dict[str, Dict[str, float]]: The shortened variables names.</p> Source code in <code>spectrafit/api/pptx_model.py</code> Python<pre><code>@field_validator(\"variables\")\n@classmethod\ndef short_variables(\n    cls, v: Dict[str, Dict[str, float]]\n) -&gt; Dict[str, Dict[str, float]]:\n    \"\"\"Shorten the variables names.\n\n    Args:\n        v (Dict[str, Dict[str, float]]): The variables names.\n\n    Returns:\n        Dict[str, Dict[str, float]]: The shortened variables names.\n    \"\"\"\n    new_dict = {}\n    for key, value in v.items():\n        new_key = \"\".join([part[:2] for part in key.split(\"_\")])\n        new_value = {}\n        for sub_key, sub_value in value.items():\n            new_sub_key = sub_key.replace(\"_value\", \"\")\n            new_value[new_sub_key] = sub_value\n        new_dict[new_key] = new_value\n    return new_dict\n</code></pre>"},{"location":"api/modelling_api/","title":"Modelling","text":"<p>Minimization models for curve fitting.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection","title":"<code>AutoPeakDetection</code>","text":"<p>Automatic detection of peaks in a spectrum.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>class AutoPeakDetection:\n    \"\"\"Automatic detection of peaks in a spectrum.\"\"\"\n\n    def __init__(\n        self,\n        x: NDArray[np.float64],\n        data: NDArray[np.float64],\n        args: Dict[str, Any],\n    ) -&gt; None:\n        \"\"\"Initialize the AutoPeakDetection class.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            data (NDArray[np.float64]): `y`-values of the data as 1d-array.\n            args (Dict[str, Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n        \"\"\"\n        self.x = x\n        self.data = data\n        self._args = args[\"autopeak\"]\n\n    @staticmethod\n    def check_key_exists(\n        key: str, args: Dict[str, Any], value: Union[float, Tuple[Any, Any]]\n    ) -&gt; Any:\n        \"\"\"Check if a key exists in a dictionary.\n\n        Please check for the reference key also [scipy.signal.find_peaks][1].\n\n        [1]:\n            https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html\n\n\n        Args:\n            key (str): Reference key of `scipy.signal.find_peaks`.\n            args (Dict[str, Any]): Reference values of `scipy.signal.find_peaks`, if not\n                 defined will be set to estimated default values.\n            value (Union[float, Tuple[float,float]]): Default value for the reference\n                 key.\n\n        Returns:\n            Any: The reference value for `scipy.signal.find_peaks`.\n        \"\"\"\n        return args.get(key, value)\n\n    @property\n    def estimate_height(self) -&gt; Tuple[float, float]:\n        r\"\"\"Estimate the initial height based on an inverse noise ratio of a signal.\n\n        !!! info \"About the estimation of the height\"\n\n            The lower end of the height is the inverse noise ratio of the `data`, and\n            upper limit is the maximum value of the `data`. The noise ratio of the\n            `data` is based on the original implementation by `SciPy`:\n\n            ```python\n            def signaltonoise(a, axis=0, ddof=0):\n                a = np.asanyarray(a)\n                m = a.mean(axis)\n                sd = a.std(axis=axis, ddof=ddof)\n                return np.where(sd == 0, 0, m / sd)\n            ```\n\n        Returns:\n            Tuple[float, float]: Tuple of the inverse signal to noise ratio and\n                 the maximum value of the `data`.\n        \"\"\"\n        return 1 - self.data.mean() / self.data.std(), self.data.max()\n\n    @property\n    def estimate_threshold(self) -&gt; Tuple[float, float]:\n        \"\"\"Estimate the threshold value for the peak detection.\n\n        Returns:\n            Tuple[float, float]: Minimum and maximum value of the spectrum `data`,\n                 respectively, `intensity`.\n        \"\"\"\n        return self.data.min(), self.data.max()\n\n    @property\n    def estimate_distance(self) -&gt; float:\n        \"\"\"Estimate the initial distance between peaks.\n\n        Returns:\n            float: Estimated distance between peaks.\n        \"\"\"\n        min_step = np.diff(self.x).min()\n        return max(min_step, 1.0)\n\n    @property\n    def estimate_prominence(self) -&gt; Tuple[float, float]:\n        \"\"\"Estimate the prominence of a peak.\n\n        !!! info \"About the estimation of the prominence\"\n\n            The prominence is the difference between the height of the peak and the\n            bottom. To get a estimate of the prominence, the height of the peak is\n            calculated by maximum value of the `data` and the bottom is calculated by\n            the harmonic mean of the `data`.\n\n        Returns:\n            Tuple[float, float]: Tuple of the harmonic-mean and maximum value of `data`.\n        \"\"\"\n        try:\n            return hmean(self.data), self.data.max()\n        except ValueError as exc:\n            print(f\"{exc}: Using standard arithmetic mean of NumPy.\\n\")\n        return self.data.mean(), self.data.max()\n\n    @property\n    def estimated_width(self) -&gt; Tuple[float, float]:\n        \"\"\"Estimate the width of a peak.\n\n        !!! info \"About the estimation of the width\"\n\n            The width of a peak is estimated for a lower and an upper end. For the lower\n            end, the minimum stepsize is used. For the upper end, the stepsize between\n            the half maximum and the minimum value of the `data` is used as the width.\n\n        Returns:\n            Tuple[float, float]: Estimated width lower and uper end of the peaks.\n        \"\"\"\n        return (\n            np.diff(self.x).min(),\n            np.abs(self.x[self.data.argmax()] - self.x[self.data.argmin()]) / 2,\n        )\n\n    @property\n    def estimated_rel_height(self) -&gt; float:\n        \"\"\"Estimate the relative height of a peak.\n\n        !!! info \"About the estimation of the relative height\"\n\n            The relative height of a peak is approximated by the difference of the\n            harmonic mean value of the `data` and the minimum value of the `data`\n            divided by the factor of `4`. In case of negative ratios, the value will be\n            set to `Zero`.\n\n        Returns:\n            float: Estimated relative height of a peak.\n        \"\"\"\n        try:\n            rel_height = (hmean(self.data) - self.data.min()) / 4\n        except ValueError as exc:\n            print(f\"{exc}: Using standard arithmetic mean of NumPy.\\n\")\n            rel_height = (self.data.mean() - self.data.min()) / 4\n        return rel_height if rel_height &gt; 0 else 0.0\n\n    @property\n    def estimated_wlen(self) -&gt; float:\n        r\"\"\"Estimate the window length for the peak detection.\n\n        !!! info \"About the estimation of the window length\"\n\n            The window length is the length of the window for the peak detection is\n            defined to be 1% of the length of the `data`, consequently the len of the\n            `data` is divided by 100. In case of a window length smaller than 1, the\n            window length will be set to numerical value of 1, which is defined by\n            `1 + 1e-9`.\n\n        Returns:\n            float: Estimated window length is set to the numeric value of &gt; 1.\n        \"\"\"\n        wlen = self.data.size / 100\n        return wlen if wlen &gt; 1.0 else 1 + 1e-9\n\n    @property\n    def estimated_plateau_size(self) -&gt; Tuple[float, float]:\n        \"\"\"Estimate the plateau size for the peak detection.\n\n        Returns:\n            Tuple[float, float]: Estimated plateau size is set to `zero` for the lower\n                 end and the maximum value of the `x` for the upper end.\n        \"\"\"\n        return 0.0, self.x.max()\n\n    def initialize_peak_detection(self) -&gt; None:\n        \"\"\"Initialize the peak detection.\n\n        !!! note \"Initialize the peak detection\"\n\n            This method is used to initialize the peak detection. The initialization can\n            be activated by setting the `initialize` attribute to `True`, which will\n            automatically estimate the default parameters for the peak detection. In\n            case of the `initialize` attribute is defined as dictionary, the proposed\n            values are taken from the dictionary if th\n\n        Raise:\n            TypeError: If the `initialize` attribute is not of type `bool` or `dict`.\n        \"\"\"\n        if isinstance(self._args, bool):\n            self.default_values()\n        elif isinstance(self._args, dict):\n            ReferenceKeys().detection_check(self._args)\n            self.height = self.check_key_exists(\n                key=\"height\", args=self._args, value=self.estimate_height\n            )\n            self.threshold = self.check_key_exists(\n                key=\"threshold\", args=self._args, value=self.estimate_threshold\n            )\n            self.distance = self.check_key_exists(\n                key=\"distance\", args=self._args, value=self.estimate_distance\n            )\n            self.prominence = self.check_key_exists(\n                key=\"prominence\", args=self._args, value=self.estimate_prominence\n            )\n            self.width = self.check_key_exists(\n                key=\"width\", args=self._args, value=self.estimated_width\n            )\n            self.wlen = self.check_key_exists(\n                key=\"wlen\", args=self._args, value=self.estimated_wlen\n            )\n            self.rel_height = self.check_key_exists(\n                key=\"rel_height\", args=self._args, value=self.estimated_rel_height\n            )\n            self.plateau_size = self.check_key_exists(\n                key=\"plateau_size\", args=self._args, value=0.0\n            )\n        else:\n            raise TypeError(\n                f\"The type of the `args` is not supported: {type(self._args)}\"\n            )\n\n    def default_values(self) -&gt; None:\n        \"\"\"Set the default values for the peak detection.\"\"\"\n        self.height = self.estimate_height\n        self.threshold = self.estimate_threshold\n        self.distance = self.estimate_distance\n        self.prominence = self.estimate_prominence\n        self.width = self.estimated_width\n        self.wlen = self.estimated_wlen\n        self.rel_height = self.estimated_rel_height\n        self.plateau_size = 0\n\n    def __autodetect__(self) -&gt; Any:\n        \"\"\"Return peak positions and properties.\"\"\"\n        return find_peaks(\n            self.data,\n            height=self.height,\n            threshold=self.threshold,\n            distance=self.distance,\n            prominence=self.prominence,\n            width=self.width,\n            wlen=self.wlen,\n            rel_height=self.rel_height,\n            plateau_size=self.plateau_size,\n        )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimate_distance","title":"<code>estimate_distance: float</code>  <code>property</code>","text":"<p>Estimate the initial distance between peaks.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Estimated distance between peaks.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimate_height","title":"<code>estimate_height: Tuple[float, float]</code>  <code>property</code>","text":"<p>Estimate the initial height based on an inverse noise ratio of a signal.</p> <p>About the estimation of the height</p> <p>The lower end of the height is the inverse noise ratio of the <code>data</code>, and upper limit is the maximum value of the <code>data</code>. The noise ratio of the <code>data</code> is based on the original implementation by <code>SciPy</code>:</p> Python<pre><code>def signaltonoise(a, axis=0, ddof=0):\n    a = np.asanyarray(a)\n    m = a.mean(axis)\n    sd = a.std(axis=axis, ddof=ddof)\n    return np.where(sd == 0, 0, m / sd)\n</code></pre> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Tuple of the inverse signal to noise ratio and  the maximum value of the <code>data</code>.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimate_prominence","title":"<code>estimate_prominence: Tuple[float, float]</code>  <code>property</code>","text":"<p>Estimate the prominence of a peak.</p> <p>About the estimation of the prominence</p> <p>The prominence is the difference between the height of the peak and the bottom. To get a estimate of the prominence, the height of the peak is calculated by maximum value of the <code>data</code> and the bottom is calculated by the harmonic mean of the <code>data</code>.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Tuple of the harmonic-mean and maximum value of <code>data</code>.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimate_threshold","title":"<code>estimate_threshold: Tuple[float, float]</code>  <code>property</code>","text":"<p>Estimate the threshold value for the peak detection.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Minimum and maximum value of the spectrum <code>data</code>,  respectively, <code>intensity</code>.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimated_plateau_size","title":"<code>estimated_plateau_size: Tuple[float, float]</code>  <code>property</code>","text":"<p>Estimate the plateau size for the peak detection.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Estimated plateau size is set to <code>zero</code> for the lower  end and the maximum value of the <code>x</code> for the upper end.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimated_rel_height","title":"<code>estimated_rel_height: float</code>  <code>property</code>","text":"<p>Estimate the relative height of a peak.</p> <p>About the estimation of the relative height</p> <p>The relative height of a peak is approximated by the difference of the harmonic mean value of the <code>data</code> and the minimum value of the <code>data</code> divided by the factor of <code>4</code>. In case of negative ratios, the value will be set to <code>Zero</code>.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Estimated relative height of a peak.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimated_width","title":"<code>estimated_width: Tuple[float, float]</code>  <code>property</code>","text":"<p>Estimate the width of a peak.</p> <p>About the estimation of the width</p> <p>The width of a peak is estimated for a lower and an upper end. For the lower end, the minimum stepsize is used. For the upper end, the stepsize between the half maximum and the minimum value of the <code>data</code> is used as the width.</p> <p>Returns:</p> Type Description <code>Tuple[float, float]</code> <p>Tuple[float, float]: Estimated width lower and uper end of the peaks.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.estimated_wlen","title":"<code>estimated_wlen: float</code>  <code>property</code>","text":"<p>Estimate the window length for the peak detection.</p> <p>About the estimation of the window length</p> <p>The window length is the length of the window for the peak detection is defined to be 1% of the length of the <code>data</code>, consequently the len of the <code>data</code> is divided by 100. In case of a window length smaller than 1, the window length will be set to numerical value of 1, which is defined by <code>1 + 1e-9</code>.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Estimated window length is set to the numeric value of &gt; 1.</p>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.__autodetect__","title":"<code>__autodetect__()</code>","text":"<p>Return peak positions and properties.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def __autodetect__(self) -&gt; Any:\n    \"\"\"Return peak positions and properties.\"\"\"\n    return find_peaks(\n        self.data,\n        height=self.height,\n        threshold=self.threshold,\n        distance=self.distance,\n        prominence=self.prominence,\n        width=self.width,\n        wlen=self.wlen,\n        rel_height=self.rel_height,\n        plateau_size=self.plateau_size,\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.__init__","title":"<code>__init__(x, data, args)</code>","text":"<p>Initialize the AutoPeakDetection class.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>data</code> <code>NDArray[float64]</code> <p><code>y</code>-values of the data as 1d-array.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required Source code in <code>spectrafit/models.py</code> Python<pre><code>def __init__(\n    self,\n    x: NDArray[np.float64],\n    data: NDArray[np.float64],\n    args: Dict[str, Any],\n) -&gt; None:\n    \"\"\"Initialize the AutoPeakDetection class.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        data (NDArray[np.float64]): `y`-values of the data as 1d-array.\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n    \"\"\"\n    self.x = x\n    self.data = data\n    self._args = args[\"autopeak\"]\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.check_key_exists","title":"<code>check_key_exists(key, args, value)</code>  <code>staticmethod</code>","text":"<p>Check if a key exists in a dictionary.</p> <p>Please check for the reference key also scipy.signal.find_peaks.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Reference key of <code>scipy.signal.find_peaks</code>.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>Reference values of <code>scipy.signal.find_peaks</code>, if not  defined will be set to estimated default values.</p> required <code>value</code> <code>Union[float, Tuple[float, float]]</code> <p>Default value for the reference  key.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The reference value for <code>scipy.signal.find_peaks</code>.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef check_key_exists(\n    key: str, args: Dict[str, Any], value: Union[float, Tuple[Any, Any]]\n) -&gt; Any:\n    \"\"\"Check if a key exists in a dictionary.\n\n    Please check for the reference key also [scipy.signal.find_peaks][1].\n\n    [1]:\n        https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.find_peaks.html\n\n\n    Args:\n        key (str): Reference key of `scipy.signal.find_peaks`.\n        args (Dict[str, Any]): Reference values of `scipy.signal.find_peaks`, if not\n             defined will be set to estimated default values.\n        value (Union[float, Tuple[float,float]]): Default value for the reference\n             key.\n\n    Returns:\n        Any: The reference value for `scipy.signal.find_peaks`.\n    \"\"\"\n    return args.get(key, value)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.default_values","title":"<code>default_values()</code>","text":"<p>Set the default values for the peak detection.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def default_values(self) -&gt; None:\n    \"\"\"Set the default values for the peak detection.\"\"\"\n    self.height = self.estimate_height\n    self.threshold = self.estimate_threshold\n    self.distance = self.estimate_distance\n    self.prominence = self.estimate_prominence\n    self.width = self.estimated_width\n    self.wlen = self.estimated_wlen\n    self.rel_height = self.estimated_rel_height\n    self.plateau_size = 0\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.AutoPeakDetection.initialize_peak_detection","title":"<code>initialize_peak_detection()</code>","text":"<p>Initialize the peak detection.</p> <p>Initialize the peak detection</p> <p>This method is used to initialize the peak detection. The initialization can be activated by setting the <code>initialize</code> attribute to <code>True</code>, which will automatically estimate the default parameters for the peak detection. In case of the <code>initialize</code> attribute is defined as dictionary, the proposed values are taken from the dictionary if th</p> Raise Source code in <code>spectrafit/models.py</code> Python<pre><code>def initialize_peak_detection(self) -&gt; None:\n    \"\"\"Initialize the peak detection.\n\n    !!! note \"Initialize the peak detection\"\n\n        This method is used to initialize the peak detection. The initialization can\n        be activated by setting the `initialize` attribute to `True`, which will\n        automatically estimate the default parameters for the peak detection. In\n        case of the `initialize` attribute is defined as dictionary, the proposed\n        values are taken from the dictionary if th\n\n    Raise:\n        TypeError: If the `initialize` attribute is not of type `bool` or `dict`.\n    \"\"\"\n    if isinstance(self._args, bool):\n        self.default_values()\n    elif isinstance(self._args, dict):\n        ReferenceKeys().detection_check(self._args)\n        self.height = self.check_key_exists(\n            key=\"height\", args=self._args, value=self.estimate_height\n        )\n        self.threshold = self.check_key_exists(\n            key=\"threshold\", args=self._args, value=self.estimate_threshold\n        )\n        self.distance = self.check_key_exists(\n            key=\"distance\", args=self._args, value=self.estimate_distance\n        )\n        self.prominence = self.check_key_exists(\n            key=\"prominence\", args=self._args, value=self.estimate_prominence\n        )\n        self.width = self.check_key_exists(\n            key=\"width\", args=self._args, value=self.estimated_width\n        )\n        self.wlen = self.check_key_exists(\n            key=\"wlen\", args=self._args, value=self.estimated_wlen\n        )\n        self.rel_height = self.check_key_exists(\n            key=\"rel_height\", args=self._args, value=self.estimated_rel_height\n        )\n        self.plateau_size = self.check_key_exists(\n            key=\"plateau_size\", args=self._args, value=0.0\n        )\n    else:\n        raise TypeError(\n            f\"The type of the `args` is not supported: {type(self._args)}\"\n        )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.Constants","title":"<code>Constants</code>  <code>dataclass</code>","text":"<p>Mathematical constants for the curve models.</p> <p>Constants</p> <ol> <li> <p>Natural logarithm of 2</p> <pre>\\[\nln2 = \\log{2}\n\\]</pre> </li> <li> <p>Square root of 2 times pi</p> <pre>\\[\nsq2pi = \\sqrt{2 \\pi}\n\\]</pre> </li> <li> <p>Square root of pi</p> <pre>\\[\nsqpi = \\sqrt{ \\pi}\n\\]</pre> </li> <li> <p>Square root of 2</p> <pre>\\[\nsq2 = \\sqrt{2}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Gaussian</p> <pre>\\[\nfwhmg2sig = \\frac{1}{ 2 \\sqrt{2\\log{2}}}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Lorentzian</p> <pre>\\[\nfwhml2sig = \\frac{1}{2}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Voigt according to the article by     Olivero and Longbothum<sup>1</sup>, check also     XPSLibary website.</p> <p>$$ fwhm_{text{Voigt}} approx 0.5346 cdot fwhm_{text{Gaussian}} +   sqrt{ 0.2166 fwhm_{text{Lorentzian}}^2  + fwhm_{text{Gaussian}}^2 }</p> <p>$$</p> <p>In case of equal FWHM for Gaussian and Lorentzian, the Voigt FWHM can be defined as:</p> <pre>\\[\nfwhm_{\\text{Voigt}} \\approx 1.0692 + 2 \\sqrt{0.2166 + 2 \\ln{2}} \\cdot \\sigma\n\\]</pre> <pre>\\[\nfwhmv2sig = \\frac{1}{fwhm_{\\text{Voigt}}}\n\\]</pre> </li> </ol> <ol> <li> <p>J.J. Olivero, R.L. Longbothum, Empirical fits to the Voigt line width: A brief review, Journal of Quantitative Spectroscopy and Radiative Transfer, Volume 17, Issue 2, 1977, Pages 233-236, ISSN 0022-4073, doi.org/10.1016/0022-4073(77)90161-3.\u00a0\u21a9</p> </li> </ol> Source code in <code>spectrafit/models.py</code> Python<pre><code>@dataclass(frozen=True)\nclass Constants:\n    r\"\"\"Mathematical constants for the curve models.\n\n    !!! info \"Constants\"\n\n        1. Natural logarithm of 2\n\n            $$\n            ln2 = \\log{2}\n            $$\n\n        2. Square root of 2 times pi\n\n            $$\n            sq2pi = \\sqrt{2 \\pi}\n            $$\n\n        3. Square root of pi\n\n            $$\n            sqpi = \\sqrt{ \\pi}\n            $$\n\n        4. Square root of 2\n\n            $$\n            sq2 = \\sqrt{2}\n            $$\n\n        5. Full width at half maximum to sigma for Gaussian\n\n            $$\n            fwhmg2sig = \\frac{1}{ 2 \\sqrt{2\\log{2}}}\n            $$\n\n        6. Full width at half maximum to sigma for Lorentzian\n\n            $$\n            fwhml2sig = \\frac{1}{2}\n            $$\n\n        7. Full width at half maximum to sigma for Voigt according to the article by\n            Olivero and Longbothum[^1], check also\n            [XPSLibary website](https://xpslibrary.com/voigt-peak-shape/).\n\n            $$\n            fwhm_{\\text{Voigt}} \\approx 0.5346 \\cdot fwhm_{\\text{Gaussian}} +\n              \\sqrt{ 0.2166 fwhm_{\\text{Lorentzian}}^2  + fwhm_{\\text{Gaussian}}^2 }\n\n            $$\n\n            In case of equal FWHM for Gaussian and Lorentzian, the Voigt FWHM can be\n            defined as:\n\n            $$\n            fwhm_{\\text{Voigt}} \\approx 1.0692 + 2 \\sqrt{0.2166 + 2 \\ln{2}} \\cdot \\sigma\n            $$\n\n            $$\n            fwhmv2sig = \\frac{1}{fwhm_{\\text{Voigt}}}\n            $$\n\n        [^1]:\n            J.J. Olivero, R.L. Longbothum,\n            _Empirical fits to the Voigt line width: A brief review_,\n            **Journal of Quantitative Spectroscopy and Radiative Transfer**,\n            Volume 17, Issue 2, 1977, Pages 233-236, ISSN 0022-4073,\n            https://doi.org/10.1016/0022-4073(77)90161-3.\n    \"\"\"\n\n    ln2 = log(2.0)\n    sq2pi = sqrt(2.0 * pi)\n    sqpi = sqrt(pi)\n    sq2 = sqrt(2.0)\n    fwhmg2sig = 1 / (2.0 * sqrt(2.0 * log(2.0)))\n    fwhml2sig = 1 / 2.0\n    fwhmv2sig = 1 / (2 * 0.5346 + 2 * sqrt(0.2166 + log(2) * 2))\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels","title":"<code>DistributionModels</code>","text":"<p>Distribution models for the fit.</p> <p>About distribution models</p> <p><code>DistributionModels</code> are wrapper functions for the distribution models. The overall goal is to extract from the best parameters the single contributions in the model. The superposition of the single contributions is the final model.</p> <p>About the cumulative distribution</p> <p>The cumulative distribution is the sum of the single contributions. The cumulative distribution is the model that is fitted to the data. In contrast to the single contributions, the cumulative distribution is not normalized and therefore the amplitude of the single contributions is not directly comparable to the amplitude of the cumulative distribution. Also, the cumulative distributions are consquently using the <code>fwhm</code> parameter instead of the <code>sigma</code> parameter.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>class DistributionModels:\n    \"\"\"Distribution models for the fit.\n\n    !!! note \"About distribution models\"\n\n        `DistributionModels` are wrapper functions for the distribution models. The\n        overall goal is to extract from the best parameters the single contributions in\n        the model. The superposition of the single contributions is the final model.\n\n    !!! note \"About the cumulative distribution\"\n\n        The cumulative distribution is the sum of the single contributions. The\n        cumulative distribution is the model that is fitted to the data. In contrast to\n        the single contributions, the cumulative distribution is not normalized and\n        therefore the amplitude of the single contributions is not directly comparable\n        to the amplitude of the cumulative distribution. Also, the cumulative\n        distributions are consquently using the `fwhm` parameter instead of the\n        `sigma` parameter.\n    \"\"\"\n\n    @staticmethod\n    def gaussian(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhmg: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Gaussian distribution.\n\n        $$\n        {\\displaystyle g(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\n        (  -{\\frac {1}{2}}{\\frac {(x-\\mu )^{2}}{\\sigma ^{2}}} ) }\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Gaussian distribution.\n                 Defaults to 1.0.\n            center (float, optional): Center of the Gaussian distribution.\n                 Defaults to 0.0.\n            fwhmg (float, optional): Full width at half maximum (FWHM) of the Gaussian\n                distribution. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Gaussian distribution of `x` given.\n        \"\"\"\n        sigma = fwhmg * Constants.fwhmg2sig\n        return np.array(amplitude / (Constants.sq2pi * sigma)) * np.exp(\n            -((1.0 * x - center) ** 2) / (2 * sigma**2)\n        )\n\n    @staticmethod\n    def lorentzian(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhml: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Lorentzian distribution.\n\n        $$\n        f(x;x_{0},\\gamma )={\\frac  {1}{\\pi \\gamma\n        [ 1+ ( {\\frac  {x-x_{0}}{\\gamma }})^{2} ]\n        }} ={1 \\over \\pi \\gamma } [ {\\gamma ^{2} \\over (x-x_{0})^{2}+\\gamma ^{2}} ]\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Lorentzian distribution.\n                Defaults to 1.0.\n            center (float, optional): Center of the Lorentzian distribution. Defaults to\n                0.0.\n            fwhml (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n                distribution. Defaults to 1.0.\n\n        Returns:\n            Union[NDArray[np.float64], float]: Lorentzian distribution of `x` given.\n        \"\"\"\n        sigma = fwhml * Constants.fwhml2sig\n        return np.array(amplitude / (1 + ((1.0 * x - center) / sigma) ** 2)) / (\n            pi * sigma\n        )\n\n    @staticmethod\n    def voigt(\n        x: NDArray[np.float64],\n        center: float = 0.0,\n        fwhmv: float = 1.0,\n        gamma: Optional[float] = None,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Voigt distribution.\n\n        $$\n        {\\displaystyle V(x;\\sigma ,\\gamma )\\equiv\n        \\int_{-\\infty }^{\\infty }G(x';\\sigma )\n        L(x-x';\\gamma )\\,dx'}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            center (float, optional): Center of the Voigt distribution. Defaults to 0.0.\n            fwhmv (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n                distribution. Defaults to 1.0.\n            gamma (float, optional): Scaling factor of the complex part of the\n                [Faddeeva Function](https://en.wikipedia.org/wiki/Faddeeva_function).\n                Defaults to None.\n\n        Returns:\n            NDArray[np.float64]: Voigt distribution of `x` given.\n        \"\"\"\n        sigma = fwhmv * Constants.fwhmv2sig\n        if gamma is None:\n            gamma = sigma\n        z = (x - center + 1j * gamma) / (sigma * Constants.sq2)\n        return np.array(wofz(z).real / (sigma * Constants.sq2pi))\n\n    @staticmethod\n    def pseudovoigt(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhmg: float = 1.0,\n        fwhml: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional Pseudo-Voigt distribution.\n\n        !!! note \"See also:\"\n\n            J. Appl. Cryst. (2000). 33, 1311-1316\n            https://doi.org/10.1107/S0021889800010219\n\n        Args:\n            x (NDArray[np.float64]):  `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Pseudo-Voigt distribution.\n                Defaults to 1.0.\n            center (float, optional): Center of the Pseudo-Voigt distribution.\n                Defaults to 0.0.\n            fwhmg (float, optional): Full width half maximum of the Gaussian\n                distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n            fwhml (float, optional): Full width half maximum of the Lorentzian\n                distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Pseudo-Voigt distribution of `x` given.\n        \"\"\"\n        f = np.power(\n            fwhmg**5\n            + 2.69269 * fwhmg**4 * fwhml\n            + 2.42843 * fwhmg**3 * fwhml**2\n            + 4.47163 * fwhmg**2 * fwhml**3\n            + 0.07842 * fwhmg * fwhml**4\n            + fwhml**5,\n            0.2,\n        )\n        n = (\n            1.36603 * (fwhml / f)\n            - 0.47719 * (fwhml / f) ** 2\n            + 0.11116 * (fwhml / f) ** 3\n        )\n        return np.array(\n            n\n            * DistributionModels.lorentzian(\n                x=x, amplitude=amplitude, center=center, fwhml=fwhml\n            )\n            + (1 - n)\n            * DistributionModels.gaussian(\n                x=x, amplitude=amplitude, center=center, fwhmg=fwhmg\n            )\n        )\n\n    @staticmethod\n    def exponential(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        decay: float = 1.0,\n        intercept: float = 0.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional exponential decay.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the exponential function.\n                 Defaults to 1.0.\n            decay (float, optional): Decay of the exponential function. Defaults to 1.0.\n            intercept (float, optional): Intercept of the exponential function.\n                 Defaults to 0.0.\n\n        Returns:\n            NDArray[np.float64]: Exponential decay of `x` given.\n        \"\"\"\n        return np.array(amplitude * np.exp(-x / decay) + intercept)\n\n    @staticmethod\n    def power(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        exponent: float = 1.0,\n        intercept: float = 0.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional power function.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the power function. Defaults to\n                1.0.\n            exponent (float, optional): Exponent of the power function. Defaults to 1.0.\n            intercept (float, optional): Intercept of the power function. Defaults to\n                0.0.\n\n        Returns:\n            NDArray[np.float64]: power function of `x` given.\n        \"\"\"\n        return np.array(amplitude * np.power(x, exponent) + intercept)\n\n    @staticmethod\n    def linear(\n        x: NDArray[np.float64],\n        slope: float = 1.0,\n        intercept: float = 0.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional linear function.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            slope (float, optional): Slope of the linear function. Defaults to 1.0.\n            intercept (float, optional): Intercept of the linear function.\n                 Defaults to 0.0.\n\n        Returns:\n            NDArray[np.float64]: Linear function of `x` given.\n        \"\"\"\n        return np.array(slope * x + intercept)\n\n    @staticmethod\n    def constant(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional constant value.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the constant. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Constant value of `x` given.\n        \"\"\"\n        return np.array(np.linspace(amplitude, amplitude, len(x)))\n\n    @staticmethod\n    def _norm(\n        x: NDArray[np.float64], center: float, sigma: float\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Normalize the data for step functions.\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            center (float): Center of the step function.\n            sigma (float): Sigma of the step function.\n\n        Returns:\n            NDArray[np.float64]: Normalized data.\n        \"\"\"\n        if abs(sigma) &lt; 1.0e-13:\n            sigma = 1.0e-13\n        return np.subtract(x, center) / sigma\n\n    @staticmethod\n    def erf(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional error function.\n\n        $$\n        f(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the error function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the error function. Defaults to 0.0.\n            sigma (float, optional): Sigma of the error function. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Error function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude * 0.5 * (1 + erf(DistributionModels._norm(x, center, sigma)))\n        )\n\n    @staticmethod\n    def heaviside(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Heaviside step function.\n\n        $$\n        f(x) = \\begin{cases}\n        0 &amp; x &lt; 0 \\\\\n        0.5 &amp; x = 0 \\\\\n        1 &amp; x &gt; 0\n        \\end{cases}\n        $$\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Heaviside step function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Heaviside step function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the Heaviside step function.\n                 Defaults to 1.0.\n\n\n        Returns:\n            NDArray[np.float64]: Heaviside step function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude * 0.5 * (1 + np.sign(DistributionModels._norm(x, center, sigma)))\n        )\n\n    @staticmethod\n    def atan(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional arctan step function.\n\n        $$\n        f(x) = \\frac{1}{\\pi} \\arctan(\\frac{x - c}{s})\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the arctan step function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the arctan step function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the arctan step function.\n                 Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Arctan step function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            * 0.5\n            * (1 + np.arctan(DistributionModels._norm(x, center, sigma)) / pi)\n        )\n\n    @staticmethod\n    def log(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional logarithmic step function.\n\n        $$\n        f(x) = \\frac{1}{1 + e^{-\\frac{x - c}{s}}}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the logarithmic step function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the logarithmic step function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the logarithmic step function.\n                 Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Logarithmic step function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            * 0.5\n            * (1 + np.log(DistributionModels._norm(x, center, sigma)) / pi)\n        )\n\n    @staticmethod\n    def cgaussian(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhmg: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional cumulative Gaussian function.\n\n        $$\n        f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Gaussian function. Defaults to\n                1.0.\n            center (float, optional): Center of the Gaussian function. Defaults to 0.0.\n            fwhmg (float, optional): Full width at half maximum of the Gaussian\n                 function. Defaults to 1.0.\n\n\n        Returns:\n            NDArray[np.float64]: Cumulative Gaussian function of `x` given.\n        \"\"\"\n        sigma = fwhmg * Constants.fwhmg2sig\n        return np.array(\n            amplitude * 0.5 * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n        )\n\n    @staticmethod\n    def clorentzian(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhml: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional cumulative Lorentzian function.\n\n        $$\n        f(x) = \\frac{1}{\\pi} \\arctan\\left(\\frac{x - c}{s}\\right) + \\frac{1}{2}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Lorentzian function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Lorentzian function.\n                 Defaults to 0.0.\n            fwhml (float, optional): Full width at half maximum of the Lorentzian\n                function. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Cumulative Lorentzian function of `x` given.\n        \"\"\"\n        sigma = fwhml * Constants.fwhml2sig\n        return np.array(amplitude * (np.arctan((x - center) / sigma) / pi) + 0.5)\n\n    @staticmethod\n    def cvoigt(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        fwhmv: float = 1.0,\n        gamma: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional cumulative Voigt function.\n\n        $$\n        f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Voigt function. Defaults to\n                1.0.\n            center (float, optional): Center of the Voigt function. Defaults to 0.0.\n            fwhmv (float, optional): Full width at half maximum of the Voigt function.\n                Defaults to 1.0.\n            gamma (float, optional): Gamma of the Voigt function. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Cumulative Voigt function of `x` given.\n        \"\"\"\n        sigma = fwhmv * Constants.fwhmv2sig\n        return np.array(\n            amplitude\n            * 0.5\n            * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n            * np.exp(-(((x - center) / gamma) ** 2))\n        )\n\n    @staticmethod\n    def polynom2(\n        x: NDArray[np.float64],\n        coefficient0: float = 1.0,\n        coefficient1: float = 1.0,\n        coefficient2: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional second order polynomial function.\n\n        $$\n        f(x) = c_2 x^2 + c_1 x + c_0\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data\n            coefficient0 (float, optional): Zeroth coefficient of the\n                 polynomial function. Defaults to 1.0.\n            coefficient1 (float, optional): First coefficient of the\n                 polynomial function. Defaults to 1.0.\n            coefficient2 (float, optional): Second coefficient of the\n                 polynomial function. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Third order polynomial function of `x`\n        \"\"\"\n        return np.array(coefficient0 + coefficient1 * x + coefficient2 * x**2)\n\n    @staticmethod\n    def polynom3(\n        x: NDArray[np.float64],\n        coefficient0: float = 1.0,\n        coefficient1: float = 1.0,\n        coefficient2: float = 1.0,\n        coefficient3: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        \"\"\"Return a 1-dimensional third order polynomial function.\n\n        $$\n        f(x) = c_3 x^3 + c_2 x^2 + c_1 x + c_0\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data\n            coefficient0 (float, optional): Zeroth coefficient of the\n                 polynomial function. Defaults to 1.0.\n            coefficient1 (float, optional): First coefficient of the\n                 polynomial function. Defaults to 1.0.\n            coefficient2 (float, optional): Second coefficient of the\n                 polynomial function. Defaults to 1.0.\n            coefficient3 (float, optional): Third coefficient of the\n                 polynomial function. Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Third order polynomial function of `x`\n        \"\"\"\n        return np.array(\n            coefficient0 + coefficient1 * x + coefficient2 * x**2 + coefficient3 * x**3\n        )\n\n    @staticmethod\n    def pearson1(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n        exponent: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Pearson type I distribution.\n\n        $$\n        f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{\\sigma^2}\n        \\right]^{-\\frac{1}{\\nu}}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Pearson type I function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Pearson type I function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the Pearson type I function.\n                 Defaults to 1.0.\n            exponent (float, optional): Exponent of the Pearson type I function.\n                 Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Pearson type I function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            / (sigma * np.sqrt(2 * np.pi))\n            * np.power(1 + ((x - center) / sigma) ** 2, -1 / exponent)\n        )\n\n    @staticmethod\n    def pearson2(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n        exponent: float = 1.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Pearson type II distribution.\n\n        $$\n        f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n        \\right]^{-\\nu}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Pearson type II function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Pearson type II function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the Pearson type II function.\n                 Defaults to 1.0.\n            exponent (float, optional): Exponent of the Pearson type II function.\n                 Defaults to 1.0.\n\n        Returns:\n            NDArray[np.float64]: Pearson type II function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            / (sigma * np.sqrt(2 * pi))\n            * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n        )\n\n    @staticmethod\n    def pearson3(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n        exponent: float = 1.0,\n        skewness: float = 0.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Pearson type III distribution.\n\n        $$\n        f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n        \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n        \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Pearson type III function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Pearson type III function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the Pearson type III function.\n                 Defaults to 1.0.\n            exponent (float, optional): Exponent of the Pearson type III function.\n                 Defaults to 1.0.\n            skewness (float, optional): Skewness of the Pearson type III function.\n                 Defaults to 0.0.\n\n        Returns:\n            NDArray[np.float64]: Pearson type III function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            / (sigma * np.sqrt(2 * pi))\n            * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n            * np.power(\n                1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n            )\n        )\n\n    @staticmethod\n    def pearson4(\n        x: NDArray[np.float64],\n        amplitude: float = 1.0,\n        center: float = 0.0,\n        sigma: float = 1.0,\n        exponent: float = 1.0,\n        skewness: float = 0.0,\n        kurtosis: float = 0.0,\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Return a 1-dimensional Pearson type IV distribution.\n\n        $$\n        f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n        \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n        \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n        \\left[1 + \\frac{\\delta}{\\nu}\n        \\left(\\frac{x - c}{\\sigma}\\right)^2 \\right]^{-\\nu - 1/2}\n        $$\n\n        Args:\n            x (NDArray[np.float64]): `x`-values of the data.\n            amplitude (float, optional): Amplitude of the Pearson type IV function.\n                    Defaults to 1.0.\n            center (float, optional): Center of the Pearson type IV function.\n                 Defaults to 0.0.\n            sigma (float, optional): Sigma of the Pearson type IV function.\n                 Defaults to 1.0.\n            exponent (float, optional): Exponent of the Pearson type IV function.\n                 Defaults to 1.0.\n            skewness (float, optional): Skewness of the Pearson type IV function.\n                 Defaults to 0.0.\n            kurtosis (float, optional): Kurtosis of the Pearson type IV function.\n                 Defaults to 0.0.\n\n        Returns:\n            NDArray[np.float64]: Pearson type IV function of `x` given.\n        \"\"\"\n        return np.array(\n            amplitude\n            / (sigma * np.sqrt(2 * pi))\n            * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n            * np.power(\n                1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n            )\n            * np.power(\n                1 + (kurtosis / exponent) * ((x - center) / sigma) ** 2,\n                -exponent - 1 / 2,\n            )\n        )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.atan","title":"<code>atan(x, amplitude=1.0, center=0.0, sigma=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional arctan step function.</p> <pre>\\[\nf(x) = \\frac{1}{\\pi} \\arctan(\\frac{x - c}{s})\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the arctan step function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the arctan step function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the arctan step function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Arctan step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef atan(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional arctan step function.\n\n    $$\n    f(x) = \\frac{1}{\\pi} \\arctan(\\frac{x - c}{s})\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the arctan step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the arctan step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the arctan step function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Arctan step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + np.arctan(DistributionModels._norm(x, center, sigma)) / pi)\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.cgaussian","title":"<code>cgaussian(x, amplitude=1.0, center=0.0, fwhmg=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional cumulative Gaussian function.</p> <pre>\\[\nf(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Gaussian function. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Gaussian function. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width at half maximum of the Gaussian  function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Gaussian function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef cgaussian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Gaussian function.\n\n    $$\n    f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Gaussian function. Defaults to\n            1.0.\n        center (float, optional): Center of the Gaussian function. Defaults to 0.0.\n        fwhmg (float, optional): Full width at half maximum of the Gaussian\n             function. Defaults to 1.0.\n\n\n    Returns:\n        NDArray[np.float64]: Cumulative Gaussian function of `x` given.\n    \"\"\"\n    sigma = fwhmg * Constants.fwhmg2sig\n    return np.array(\n        amplitude * 0.5 * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.clorentzian","title":"<code>clorentzian(x, amplitude=1.0, center=0.0, fwhml=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional cumulative Lorentzian function.</p> <pre>\\[\nf(x) = \\frac{1}{\\pi} \\arctan\\left(\\frac{x - c}{s}\\right) + \\frac{1}{2}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Lorentzian function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Lorentzian function.  Defaults to 0.0.</p> <code>0.0</code> <code>fwhml</code> <code>float</code> <p>Full width at half maximum of the Lorentzian function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Lorentzian function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef clorentzian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Lorentzian function.\n\n    $$\n    f(x) = \\frac{1}{\\pi} \\arctan\\left(\\frac{x - c}{s}\\right) + \\frac{1}{2}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Lorentzian function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Lorentzian function.\n             Defaults to 0.0.\n        fwhml (float, optional): Full width at half maximum of the Lorentzian\n            function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Cumulative Lorentzian function of `x` given.\n    \"\"\"\n    sigma = fwhml * Constants.fwhml2sig\n    return np.array(amplitude * (np.arctan((x - center) / sigma) / pi) + 0.5)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.constant","title":"<code>constant(x, amplitude=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional constant value.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the constant. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Constant value of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef constant(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional constant value.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the constant. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Constant value of `x` given.\n    \"\"\"\n    return np.array(np.linspace(amplitude, amplitude, len(x)))\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.cvoigt","title":"<code>cvoigt(x, amplitude=1.0, center=0.0, fwhmv=1.0, gamma=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional cumulative Voigt function.</p> <pre>\\[\nf(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Voigt function. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmv</code> <code>float</code> <p>Full width at half maximum of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <code>gamma</code> <code>float</code> <p>Gamma of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Voigt function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef cvoigt(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmv: float = 1.0,\n    gamma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Voigt function.\n\n    $$\n    f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Voigt function. Defaults to\n            1.0.\n        center (float, optional): Center of the Voigt function. Defaults to 0.0.\n        fwhmv (float, optional): Full width at half maximum of the Voigt function.\n            Defaults to 1.0.\n        gamma (float, optional): Gamma of the Voigt function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Cumulative Voigt function of `x` given.\n    \"\"\"\n    sigma = fwhmv * Constants.fwhmv2sig\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n        * np.exp(-(((x - center) / gamma) ** 2))\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.erf","title":"<code>erf(x, amplitude=1.0, center=0.0, sigma=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional error function.</p> <pre>\\[\nf(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the error function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the error function. Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the error function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Error function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef erf(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional error function.\n\n    $$\n    f(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the error function.\n                Defaults to 1.0.\n        center (float, optional): Center of the error function. Defaults to 0.0.\n        sigma (float, optional): Sigma of the error function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Error function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude * 0.5 * (1 + erf(DistributionModels._norm(x, center, sigma)))\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.exponential","title":"<code>exponential(x, amplitude=1.0, decay=1.0, intercept=0.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional exponential decay.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the exponential function.  Defaults to 1.0.</p> <code>1.0</code> <code>decay</code> <code>float</code> <p>Decay of the exponential function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the exponential function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Exponential decay of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef exponential(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    decay: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional exponential decay.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the exponential function.\n             Defaults to 1.0.\n        decay (float, optional): Decay of the exponential function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the exponential function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Exponential decay of `x` given.\n    \"\"\"\n    return np.array(amplitude * np.exp(-x / decay) + intercept)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.gaussian","title":"<code>gaussian(x, amplitude=1.0, center=0.0, fwhmg=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Gaussian distribution.</p> <pre>\\[\n{\\displaystyle g(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\n(  -{\\frac {1}{2}}{\\frac {(x-\\mu )^{2}}{\\sigma ^{2}}} ) }\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Gaussian distribution.  Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Gaussian distribution.  Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Gaussian distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Gaussian distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef gaussian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Gaussian distribution.\n\n    $$\n    {\\displaystyle g(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\n    (  -{\\frac {1}{2}}{\\frac {(x-\\mu )^{2}}{\\sigma ^{2}}} ) }\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Gaussian distribution.\n             Defaults to 1.0.\n        center (float, optional): Center of the Gaussian distribution.\n             Defaults to 0.0.\n        fwhmg (float, optional): Full width at half maximum (FWHM) of the Gaussian\n            distribution. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Gaussian distribution of `x` given.\n    \"\"\"\n    sigma = fwhmg * Constants.fwhmg2sig\n    return np.array(amplitude / (Constants.sq2pi * sigma)) * np.exp(\n        -((1.0 * x - center) ** 2) / (2 * sigma**2)\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.heaviside","title":"<code>heaviside(x, amplitude=1.0, center=0.0, sigma=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Heaviside step function.</p> <p>$$ f(x) = begin{cases} 0 &amp; x &lt; 0 \\ 0.5 &amp; x = 0 \\ 1 &amp; x &gt; 0 end{cases} $$ Args:     x (NDArray[np.float64]): <code>x</code>-values of the data.     amplitude (float, optional): Amplitude of the Heaviside step function.             Defaults to 1.0.     center (float, optional): Center of the Heaviside step function.          Defaults to 0.0.     sigma (float, optional): Sigma of the Heaviside step function.          Defaults to 1.0.</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Heaviside step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef heaviside(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Heaviside step function.\n\n    $$\n    f(x) = \\begin{cases}\n    0 &amp; x &lt; 0 \\\\\n    0.5 &amp; x = 0 \\\\\n    1 &amp; x &gt; 0\n    \\end{cases}\n    $$\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Heaviside step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Heaviside step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Heaviside step function.\n             Defaults to 1.0.\n\n\n    Returns:\n        NDArray[np.float64]: Heaviside step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude * 0.5 * (1 + np.sign(DistributionModels._norm(x, center, sigma)))\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.linear","title":"<code>linear(x, slope=1.0, intercept=0.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional linear function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>slope</code> <code>float</code> <p>Slope of the linear function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the linear function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Linear function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef linear(\n    x: NDArray[np.float64],\n    slope: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional linear function.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        slope (float, optional): Slope of the linear function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the linear function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Linear function of `x` given.\n    \"\"\"\n    return np.array(slope * x + intercept)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.log","title":"<code>log(x, amplitude=1.0, center=0.0, sigma=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional logarithmic step function.</p> <pre>\\[\nf(x) = \\frac{1}{1 + e^{-\\frac{x - c}{s}}}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the logarithmic step function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the logarithmic step function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the logarithmic step function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Logarithmic step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef log(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional logarithmic step function.\n\n    $$\n    f(x) = \\frac{1}{1 + e^{-\\frac{x - c}{s}}}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the logarithmic step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the logarithmic step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the logarithmic step function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Logarithmic step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + np.log(DistributionModels._norm(x, center, sigma)) / pi)\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.lorentzian","title":"<code>lorentzian(x, amplitude=1.0, center=0.0, fwhml=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Lorentzian distribution.</p> <pre>\\[\nf(x;x_{0},\\gamma )={\\frac  {1}{\\pi \\gamma\n[ 1+ ( {\\frac  {x-x_{0}}{\\gamma }})^{2} ]\n}} ={1 \\over \\pi \\gamma } [ {\\gamma ^{2} \\over (x-x_{0})^{2}+\\gamma ^{2}} ]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Lorentzian distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhml</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Union[NDArray[np.float64], float]: Lorentzian distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef lorentzian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Lorentzian distribution.\n\n    $$\n    f(x;x_{0},\\gamma )={\\frac  {1}{\\pi \\gamma\n    [ 1+ ( {\\frac  {x-x_{0}}{\\gamma }})^{2} ]\n    }} ={1 \\over \\pi \\gamma } [ {\\gamma ^{2} \\over (x-x_{0})^{2}+\\gamma ^{2}} ]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Lorentzian distribution.\n            Defaults to 1.0.\n        center (float, optional): Center of the Lorentzian distribution. Defaults to\n            0.0.\n        fwhml (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n            distribution. Defaults to 1.0.\n\n    Returns:\n        Union[NDArray[np.float64], float]: Lorentzian distribution of `x` given.\n    \"\"\"\n    sigma = fwhml * Constants.fwhml2sig\n    return np.array(amplitude / (1 + ((1.0 * x - center) / sigma) ** 2)) / (\n        pi * sigma\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.pearson1","title":"<code>pearson1(x, amplitude=1.0, center=0.0, sigma=1.0, exponent=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Pearson type I distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{\\sigma^2}\n\\right]^{-\\frac{1}{\\nu}}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type I function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type I function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type I function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type I function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type I function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson1(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type I distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{\\sigma^2}\n    \\right]^{-\\frac{1}{\\nu}}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type I function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type I function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type I function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type I function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type I function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * np.pi))\n        * np.power(1 + ((x - center) / sigma) ** 2, -1 / exponent)\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.pearson2","title":"<code>pearson2(x, amplitude=1.0, center=0.0, sigma=1.0, exponent=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Pearson type II distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type II function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type II function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type II function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type II function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type II function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson2(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type II distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type II function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type II function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type II function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type II function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type II function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.pearson3","title":"<code>pearson3(x, amplitude=1.0, center=0.0, sigma=1.0, exponent=1.0, skewness=0.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Pearson type III distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n\\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type III function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type III function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type III function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type III function.  Defaults to 1.0.</p> <code>1.0</code> <code>skewness</code> <code>float</code> <p>Skewness of the Pearson type III function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type III function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson3(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n    skewness: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type III distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n    \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type III function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type III function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type III function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type III function.\n             Defaults to 1.0.\n        skewness (float, optional): Skewness of the Pearson type III function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type III function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n        * np.power(\n            1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n        )\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.pearson4","title":"<code>pearson4(x, amplitude=1.0, center=0.0, sigma=1.0, exponent=1.0, skewness=0.0, kurtosis=0.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Pearson type IV distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n\\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n\\left[1 + \\frac{\\delta}{\\nu}\n\\left(\\frac{x - c}{\\sigma}\\right)^2 \\right]^{-\\nu - 1/2}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type IV function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type IV function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type IV function.  Defaults to 1.0.</p> <code>1.0</code> <code>skewness</code> <code>float</code> <p>Skewness of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <code>kurtosis</code> <code>float</code> <p>Kurtosis of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type IV function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson4(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n    skewness: float = 0.0,\n    kurtosis: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type IV distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n    \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n    \\left[1 + \\frac{\\delta}{\\nu}\n    \\left(\\frac{x - c}{\\sigma}\\right)^2 \\right]^{-\\nu - 1/2}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type IV function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type IV function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type IV function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type IV function.\n             Defaults to 1.0.\n        skewness (float, optional): Skewness of the Pearson type IV function.\n             Defaults to 0.0.\n        kurtosis (float, optional): Kurtosis of the Pearson type IV function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type IV function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n        * np.power(\n            1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n        )\n        * np.power(\n            1 + (kurtosis / exponent) * ((x - center) / sigma) ** 2,\n            -exponent - 1 / 2,\n        )\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.polynom2","title":"<code>polynom2(x, coefficient0=1.0, coefficient1=1.0, coefficient2=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional second order polynomial function.</p> <pre>\\[\nf(x) = c_2 x^2 + c_1 x + c_0\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data</p> required <code>coefficient0</code> <code>float</code> <p>Zeroth coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient1</code> <code>float</code> <p>First coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient2</code> <code>float</code> <p>Second coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Third order polynomial function of <code>x</code></p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef polynom2(\n    x: NDArray[np.float64],\n    coefficient0: float = 1.0,\n    coefficient1: float = 1.0,\n    coefficient2: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional second order polynomial function.\n\n    $$\n    f(x) = c_2 x^2 + c_1 x + c_0\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data\n        coefficient0 (float, optional): Zeroth coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient1 (float, optional): First coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient2 (float, optional): Second coefficient of the\n             polynomial function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Third order polynomial function of `x`\n    \"\"\"\n    return np.array(coefficient0 + coefficient1 * x + coefficient2 * x**2)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.polynom3","title":"<code>polynom3(x, coefficient0=1.0, coefficient1=1.0, coefficient2=1.0, coefficient3=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional third order polynomial function.</p> <pre>\\[\nf(x) = c_3 x^3 + c_2 x^2 + c_1 x + c_0\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data</p> required <code>coefficient0</code> <code>float</code> <p>Zeroth coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient1</code> <code>float</code> <p>First coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient2</code> <code>float</code> <p>Second coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient3</code> <code>float</code> <p>Third coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Third order polynomial function of <code>x</code></p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef polynom3(\n    x: NDArray[np.float64],\n    coefficient0: float = 1.0,\n    coefficient1: float = 1.0,\n    coefficient2: float = 1.0,\n    coefficient3: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional third order polynomial function.\n\n    $$\n    f(x) = c_3 x^3 + c_2 x^2 + c_1 x + c_0\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data\n        coefficient0 (float, optional): Zeroth coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient1 (float, optional): First coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient2 (float, optional): Second coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient3 (float, optional): Third coefficient of the\n             polynomial function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Third order polynomial function of `x`\n    \"\"\"\n    return np.array(\n        coefficient0 + coefficient1 * x + coefficient2 * x**2 + coefficient3 * x**3\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.power","title":"<code>power(x, amplitude=1.0, exponent=1.0, intercept=0.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional power function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the power function. Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the power function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the power function. Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: power function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef power(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    exponent: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional power function.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the power function. Defaults to\n            1.0.\n        exponent (float, optional): Exponent of the power function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the power function. Defaults to\n            0.0.\n\n    Returns:\n        NDArray[np.float64]: power function of `x` given.\n    \"\"\"\n    return np.array(amplitude * np.power(x, exponent) + intercept)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.pseudovoigt","title":"<code>pseudovoigt(x, amplitude=1.0, center=0.0, fwhmg=1.0, fwhml=1.0)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Pseudo-Voigt distribution.</p> <p>See also:</p> <p>J. Appl. Cryst. (2000). 33, 1311-1316 doi.org/10.1107/S0021889800010219</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pseudo-Voigt distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width half maximum of the Gaussian distribution in the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <code>fwhml</code> <code>float</code> <p>Full width half maximum of the Lorentzian distribution in the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pseudo-Voigt distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pseudovoigt(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional Pseudo-Voigt distribution.\n\n    !!! note \"See also:\"\n\n        J. Appl. Cryst. (2000). 33, 1311-1316\n        https://doi.org/10.1107/S0021889800010219\n\n    Args:\n        x (NDArray[np.float64]):  `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pseudo-Voigt distribution.\n            Defaults to 1.0.\n        center (float, optional): Center of the Pseudo-Voigt distribution.\n            Defaults to 0.0.\n        fwhmg (float, optional): Full width half maximum of the Gaussian\n            distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n        fwhml (float, optional): Full width half maximum of the Lorentzian\n            distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pseudo-Voigt distribution of `x` given.\n    \"\"\"\n    f = np.power(\n        fwhmg**5\n        + 2.69269 * fwhmg**4 * fwhml\n        + 2.42843 * fwhmg**3 * fwhml**2\n        + 4.47163 * fwhmg**2 * fwhml**3\n        + 0.07842 * fwhmg * fwhml**4\n        + fwhml**5,\n        0.2,\n    )\n    n = (\n        1.36603 * (fwhml / f)\n        - 0.47719 * (fwhml / f) ** 2\n        + 0.11116 * (fwhml / f) ** 3\n    )\n    return np.array(\n        n\n        * DistributionModels.lorentzian(\n            x=x, amplitude=amplitude, center=center, fwhml=fwhml\n        )\n        + (1 - n)\n        * DistributionModels.gaussian(\n            x=x, amplitude=amplitude, center=center, fwhmg=fwhmg\n        )\n    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.DistributionModels.voigt","title":"<code>voigt(x, center=0.0, fwhmv=1.0, gamma=None)</code>  <code>staticmethod</code>","text":"<p>Return a 1-dimensional Voigt distribution.</p> <pre>\\[\n{\\displaystyle V(x;\\sigma ,\\gamma )\\equiv\n\\int_{-\\infty }^{\\infty }G(x';\\sigma )\nL(x-x';\\gamma )\\,dx'}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>center</code> <code>float</code> <p>Center of the Voigt distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmv</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <code>gamma</code> <code>float</code> <p>Scaling factor of the complex part of the Faddeeva Function. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Voigt distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef voigt(\n    x: NDArray[np.float64],\n    center: float = 0.0,\n    fwhmv: float = 1.0,\n    gamma: Optional[float] = None,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Voigt distribution.\n\n    $$\n    {\\displaystyle V(x;\\sigma ,\\gamma )\\equiv\n    \\int_{-\\infty }^{\\infty }G(x';\\sigma )\n    L(x-x';\\gamma )\\,dx'}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        center (float, optional): Center of the Voigt distribution. Defaults to 0.0.\n        fwhmv (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n            distribution. Defaults to 1.0.\n        gamma (float, optional): Scaling factor of the complex part of the\n            [Faddeeva Function](https://en.wikipedia.org/wiki/Faddeeva_function).\n            Defaults to None.\n\n    Returns:\n        NDArray[np.float64]: Voigt distribution of `x` given.\n    \"\"\"\n    sigma = fwhmv * Constants.fwhmv2sig\n    if gamma is None:\n        gamma = sigma\n    z = (x - center + 1j * gamma) / (sigma * Constants.sq2)\n    return np.array(wofz(z).real / (sigma * Constants.sq2pi))\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters","title":"<code>ModelParameters</code>","text":"<p>               Bases: <code>AutoPeakDetection</code></p> <p>Class to define the model parameters.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>class ModelParameters(AutoPeakDetection):\n    \"\"\"Class to define the model parameters.\"\"\"\n\n    def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n        \"\"\"Initialize the model parameters.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n            args (Dict[str, Any]):\n                 Nested arguments dictionary for the model based on **one** or **two**\n                 `int` keys depending if global fitting parameters, will explicit\n                 defined or not.\n\n        !!! note \"About `args` for models\"\n\n            The `args` dictionary is used to define the model parameters. And the total\n            nested dictionary structure is as follows:\n\n            ```python\n            args: Dict[str, Dict[int, Dict[str, Dict[str, Union[str, int, float]]]]]\n            ```\n\n        !!! info \"About the fitting options\"\n\n            In general, there are two option for the fitting possible:\n\n            1. `Classic fitting` or `local fitting`, where the parameters are defined\n                for a 2D spectrum.\n            2. `Global fitting`, where the parameters are defined for a 3D spectrum.\n                Here, the parameters can be automatically defined for each column on the\n                basis of the initial parameters or they can be completley defined by the\n                user. The `global fitting` definition starts at `1` similiar to the\n                peaks attributes notation.\n        \"\"\"\n        self.col_len = df.shape[1] - 1\n        self.args = args\n        self.params = Parameters()\n        self.x, self.data = self.df_to_numvalues(df=df, args=args)\n\n        super().__init__(self.x, self.data, self.args)\n\n    def df_to_numvalues(\n        self, df: pd.DataFrame, args: Dict[str, Any]\n    ) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]:\n        \"\"\"Transform the dataframe to numeric values of `x` and `data`.\n\n        !!! note \"About the dataframe to numeric values\"\n\n            The transformation is done by the `value` property of pandas. The dataframe\n            is separated into the `x` and `data` columns and the `x` column is\n            transformed to the energy values and the `data` column is transformed to\n            the intensity values depending on the `args` dictionary. In terms of global\n            fitting, the `data` contains the intensity values for each column.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n            args (Dict[str, Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Returns:\n            Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of `x` and\n                 `data` as numpy arrays.\n        \"\"\"\n        if args[\"global_\"]:\n            return (\n                df[args[\"column\"][0]].to_numpy(),\n                df.loc[:, df.columns != args[\"column\"][0]].to_numpy(),\n            )\n        return (df[args[\"column\"][0]].to_numpy(), df[args[\"column\"][1]].to_numpy())\n\n    @property\n    def return_params(self) -&gt; Parameters:\n        \"\"\"Return the `class` representation of the model parameters.\n\n        Returns:\n            Parameters: Model parameters class.\n        \"\"\"\n        self.__perform__()\n        return self.params\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return the `string` representation of the model parameters.\n\n        Returns:\n            str: String representation of the model parameters.\n        \"\"\"\n        self.__perform__()\n        return str(self.params)\n\n    def __perform__(self) -&gt; None:\n        \"\"\"Perform the model parameter definition.\n\n        Raises:\n            KeyError: Global fitting is combination with automatic peak detection is\n                 not implemented yet.\n        \"\"\"\n        if self.args[\"global_\"] == 0 and not self.args[\"autopeak\"]:\n            self.define_parameters()\n        elif self.args[\"global_\"] == 1 and not self.args[\"autopeak\"]:\n            self.define_parameters_global()\n        elif self.args[\"global_\"] == 2 and not self.args[\"autopeak\"]:\n            self.define_parameters_global_pre()\n        elif self.args[\"global_\"] == 0:\n            self.initialize_peak_detection()\n            self.define_parameters_auto()\n        elif self.args[\"global_\"] in [1, 2]:\n            raise KeyError(\n                \"Global fitting mode with automatic peak detection \"\n                \"is not supported yet.\"\n            )\n\n    def define_parameters_auto(self) -&gt; None:\n        \"\"\"Auto define the model parameters for local fitting.\"\"\"\n        positions, properties = self.__autodetect__()\n        if (\n            not isinstance(self.args[\"autopeak\"], bool)\n            and \"modeltype\" in self.args[\"autopeak\"]\n        ):\n            _model = self.args[\"autopeak\"][\"modeltype\"].lower()\n            ReferenceKeys().automodel_check(model=_model)\n            models = _model\n        else:\n            models = \"gaussian\"\n\n        if models == \"gaussian\":\n            for i, (_cent, _amp, _fhmw) in enumerate(\n                zip(\n                    self.x[positions],\n                    properties[\"peak_heights\"],\n                    properties[\"widths\"],\n                ),\n                start=1,\n            ):\n                self.params.add(\n                    f\"{models}_amplitude_{i}\",\n                    value=_amp,\n                    min=-np.abs(1.25 * _amp),\n                    max=np.abs(1.25 * _amp),\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_center_{i}\",\n                    value=_cent,\n                    min=0.5 * _cent,\n                    max=2 * _cent,\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_fwhmg_{i}\",\n                    value=_fhmw,\n                    min=0,\n                    max=2 * _fhmw,\n                    vary=True,\n                )\n        elif models == \"lorentzian\":\n            for i, (_cent, _amp, _fhmw) in enumerate(\n                zip(\n                    self.x[positions],\n                    properties[\"peak_heights\"],\n                    properties[\"widths\"],\n                ),\n                start=1,\n            ):\n                self.params.add(\n                    f\"{models}_amplitude_{i}\",\n                    value=_amp,\n                    min=-np.abs(1.25 * _amp),\n                    max=np.abs(1.25 * _amp),\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_center_{i}\",\n                    value=_cent,\n                    min=0.5 * _cent,\n                    max=2 * _cent,\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_fwhml_{i}\",\n                    value=_fhmw,\n                    min=0,\n                    max=2 * _fhmw,\n                    vary=True,\n                )\n        elif models == \"voigt\":\n            for i, (_cent, _amp, _fhmw) in enumerate(\n                zip(\n                    self.x[positions],\n                    properties[\"peak_heights\"],\n                    properties[\"widths\"],\n                ),\n                start=1,\n            ):\n                self.params.add(\n                    f\"{models}_amplitude_{i}\",\n                    value=_amp,\n                    min=-np.abs(1.25 * _amp),\n                    max=np.abs(1.25 * _amp),\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_center_{i}\",\n                    value=_cent,\n                    min=0.5 * _cent,\n                    max=2 * _cent,\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_fwhmv_{i}\",\n                    value=_fhmw,\n                    min=0,\n                    max=2 * _fhmw,\n                    vary=True,\n                )\n        elif models == \"pseudovoigt\":\n            for i, (_cent, _amp, _fhmw) in enumerate(\n                zip(\n                    self.x[positions],\n                    properties[\"peak_heights\"],\n                    properties[\"widths\"],\n                ),\n                start=1,\n            ):\n                self.params.add(\n                    f\"{models}_amplitude_{i}\",\n                    value=_amp,\n                    min=-np.abs(1.25 * _amp),\n                    max=np.abs(1.25 * _amp),\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_center_{i}\",\n                    value=_cent,\n                    min=0.5 * _cent,\n                    max=2 * _cent,\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_fwhmg_{i}\",\n                    value=0.5 * _fhmw,\n                    min=0,\n                    max=_fhmw,\n                    vary=True,\n                )\n                self.params.add(\n                    f\"{models}_fwhml_{i}\",\n                    value=0.5 * _fhmw,\n                    min=0,\n                    max=2 * _fhmw,\n                    vary=True,\n                )\n\n        self.args[\"auto_generated_models\"] = {\n            \"models\": {\n                key: {\n                    \"value\": self.params[key].value,\n                    \"min\": self.params[key].min,\n                    \"max\": self.params[key].max,\n                    \"vary\": self.params[key].vary,\n                }\n                for key in self.params\n            },\n            \"positions\": positions.tolist(),\n            \"properties\": {key: value.tolist() for key, value in properties.items()},\n        }\n\n    def define_parameters(self) -&gt; None:\n        \"\"\"Define the input parameters for a `params`-dictionary for classic fitting.\"\"\"\n        for key_1, value_1 in self.args[\"peaks\"].items():\n            self.define_parameters_loop(key_1=key_1, value_1=value_1)\n\n    def define_parameters_loop(self, key_1: str, value_1: Dict[str, Any]) -&gt; None:\n        \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n        Args:\n            key_1 (str): The key of the first level of the input dictionary.\n            value_1 (Dict[str, Any]): The value of the first level of the input\n                 dictionary.\n        \"\"\"\n        for key_2, value_2 in value_1.items():\n            self.define_parameters_loop_2(key_1=key_1, key_2=key_2, value_2=value_2)\n\n    def define_parameters_loop_2(\n        self, key_1: str, key_2: str, value_2: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n        Args:\n            key_1 (str): The key of the first level of the input dictionary.\n            key_2 (str): The key of the second level of the input dictionary.\n            value_2 (Dict[str, Any]): The value of the second level of the input\n                 dictionary.\n        \"\"\"\n        for key_3, value_3 in value_2.items():\n            self.define_parameters_loop_3(\n                key_1=key_1, key_2=key_2, key_3=key_3, value_3=value_3\n            )\n\n    def define_parameters_loop_3(\n        self, key_1: str, key_2: str, key_3: str, value_3: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n        Args:\n            key_1 (str): The key of the first level of the input dictionary.\n            key_2 (str): The key of the second level of the input dictionary.\n            key_3 (str): The key of the third level of the input dictionary.\n            value_3 (Dict[str, Any]): The value of the third level of the input\n                 dictionary.\n        \"\"\"\n        self.params.add(f\"{key_2}_{key_3}_{key_1}\", **value_3)\n\n    def define_parameters_global(self) -&gt; None:\n        \"\"\"Define the input parameters for a `params`-dictionary for global fitting.\"\"\"\n        for col_i in range(self.col_len):\n            for key_1, value_1 in self.args[\"peaks\"].items():\n                for key_2, value_2 in value_1.items():\n                    for key_3, value_3 in value_2.items():\n                        self._define_parameter(\n                            col_i=col_i,\n                            key_1=key_1,\n                            key_2=key_2,\n                            key_3=key_3,\n                            value_3=value_3,\n                        )\n\n    def _define_parameter(\n        self, col_i: int, key_1: str, key_2: str, key_3: str, value_3: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Define the input parameters for a `params`-dictionary for global fitting.\n\n        Args:\n            col_i (int): The column index.\n            key_1 (str): The key of the first level of the input dictionary.\n            key_2 (str): The key of the second level of the input dictionary.\n            key_3 (str): The key of the third level of the input dictionary.\n            value_3 (Dict[str, Any]): The value of the third level of the input\n                 dictionary.\n        \"\"\"\n        if col_i:\n            if key_3 != \"amplitude\":\n                self.params.add(\n                    f\"{key_2}_{key_3}_{key_1}_{col_i + 1}\",\n                    expr=f\"{key_2}_{key_3}_{key_1}_1\",\n                )\n            else:\n                self.params.add(\n                    f\"{key_2}_{key_3}_{key_1}_{col_i + 1}\",\n                    **value_3,\n                )\n\n        else:\n            self.params.add(f\"{key_2}_{key_3}_{key_1}_1\", **value_3)\n\n    def define_parameters_global_pre(self) -&gt; None:\n        \"\"\"Define the input parameters for a `params`-dictionary for global fitting.\n\n        !!! warning \"About `params` for global fitting\"\n\n            `define_parameters_global_pre` requires fully defined `params`-dictionary\n            in the json, toml, or yaml file input. This means:\n\n            1. Number of the spectra must be defined.\n            2. Number of the peaks must be defined.\n            3. Number of the parameters must be defined.\n            4. The parameters must be defined.\n        \"\"\"\n        for key_1, value_1 in self.args[\"peaks\"].items():\n            for key_2, value_2 in value_1.items():\n                for key_3, value_3 in value_2.items():\n                    for key_4, value_4 in value_3.items():\n                        self.params.add(f\"{key_3}_{key_4}_{key_2}_{key_1}\", **value_4)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.return_params","title":"<code>return_params: Parameters</code>  <code>property</code>","text":"<p>Return the <code>class</code> representation of the model parameters.</p> <p>Returns:</p> Name Type Description <code>Parameters</code> <code>Parameters</code> <p>Model parameters class.</p>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.__init__","title":"<code>__init__(df, args)</code>","text":"<p>Initialize the model parameters.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>).</p> required <code>args</code> <code>Dict[str, Any]</code> <p>Nested arguments dictionary for the model based on one or two <code>int</code> keys depending if global fitting parameters, will explicit  defined or not.</p> required <p>About <code>args</code> for models</p> <p>The <code>args</code> dictionary is used to define the model parameters. And the total nested dictionary structure is as follows:</p> Python<pre><code>args: Dict[str, Dict[int, Dict[str, Dict[str, Union[str, int, float]]]]]\n</code></pre> <p>About the fitting options</p> <p>In general, there are two option for the fitting possible:</p> <ol> <li><code>Classic fitting</code> or <code>local fitting</code>, where the parameters are defined     for a 2D spectrum.</li> <li><code>Global fitting</code>, where the parameters are defined for a 3D spectrum.     Here, the parameters can be automatically defined for each column on the     basis of the initial parameters or they can be completley defined by the     user. The <code>global fitting</code> definition starts at <code>1</code> similiar to the     peaks attributes notation.</li> </ol> Source code in <code>spectrafit/models.py</code> Python<pre><code>def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the model parameters.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n        args (Dict[str, Any]):\n             Nested arguments dictionary for the model based on **one** or **two**\n             `int` keys depending if global fitting parameters, will explicit\n             defined or not.\n\n    !!! note \"About `args` for models\"\n\n        The `args` dictionary is used to define the model parameters. And the total\n        nested dictionary structure is as follows:\n\n        ```python\n        args: Dict[str, Dict[int, Dict[str, Dict[str, Union[str, int, float]]]]]\n        ```\n\n    !!! info \"About the fitting options\"\n\n        In general, there are two option for the fitting possible:\n\n        1. `Classic fitting` or `local fitting`, where the parameters are defined\n            for a 2D spectrum.\n        2. `Global fitting`, where the parameters are defined for a 3D spectrum.\n            Here, the parameters can be automatically defined for each column on the\n            basis of the initial parameters or they can be completley defined by the\n            user. The `global fitting` definition starts at `1` similiar to the\n            peaks attributes notation.\n    \"\"\"\n    self.col_len = df.shape[1] - 1\n    self.args = args\n    self.params = Parameters()\n    self.x, self.data = self.df_to_numvalues(df=df, args=args)\n\n    super().__init__(self.x, self.data, self.args)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.__perform__","title":"<code>__perform__()</code>","text":"<p>Perform the model parameter definition.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>Global fitting is combination with automatic peak detection is  not implemented yet.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def __perform__(self) -&gt; None:\n    \"\"\"Perform the model parameter definition.\n\n    Raises:\n        KeyError: Global fitting is combination with automatic peak detection is\n             not implemented yet.\n    \"\"\"\n    if self.args[\"global_\"] == 0 and not self.args[\"autopeak\"]:\n        self.define_parameters()\n    elif self.args[\"global_\"] == 1 and not self.args[\"autopeak\"]:\n        self.define_parameters_global()\n    elif self.args[\"global_\"] == 2 and not self.args[\"autopeak\"]:\n        self.define_parameters_global_pre()\n    elif self.args[\"global_\"] == 0:\n        self.initialize_peak_detection()\n        self.define_parameters_auto()\n    elif self.args[\"global_\"] in [1, 2]:\n        raise KeyError(\n            \"Global fitting mode with automatic peak detection \"\n            \"is not supported yet.\"\n        )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.__str__","title":"<code>__str__()</code>","text":"<p>Return the <code>string</code> representation of the model parameters.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation of the model parameters.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return the `string` representation of the model parameters.\n\n    Returns:\n        str: String representation of the model parameters.\n    \"\"\"\n    self.__perform__()\n    return str(self.params)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters","title":"<code>define_parameters()</code>","text":"<p>Define the input parameters for a <code>params</code>-dictionary for classic fitting.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters(self) -&gt; None:\n    \"\"\"Define the input parameters for a `params`-dictionary for classic fitting.\"\"\"\n    for key_1, value_1 in self.args[\"peaks\"].items():\n        self.define_parameters_loop(key_1=key_1, value_1=value_1)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_auto","title":"<code>define_parameters_auto()</code>","text":"<p>Auto define the model parameters for local fitting.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_auto(self) -&gt; None:\n    \"\"\"Auto define the model parameters for local fitting.\"\"\"\n    positions, properties = self.__autodetect__()\n    if (\n        not isinstance(self.args[\"autopeak\"], bool)\n        and \"modeltype\" in self.args[\"autopeak\"]\n    ):\n        _model = self.args[\"autopeak\"][\"modeltype\"].lower()\n        ReferenceKeys().automodel_check(model=_model)\n        models = _model\n    else:\n        models = \"gaussian\"\n\n    if models == \"gaussian\":\n        for i, (_cent, _amp, _fhmw) in enumerate(\n            zip(\n                self.x[positions],\n                properties[\"peak_heights\"],\n                properties[\"widths\"],\n            ),\n            start=1,\n        ):\n            self.params.add(\n                f\"{models}_amplitude_{i}\",\n                value=_amp,\n                min=-np.abs(1.25 * _amp),\n                max=np.abs(1.25 * _amp),\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_center_{i}\",\n                value=_cent,\n                min=0.5 * _cent,\n                max=2 * _cent,\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_fwhmg_{i}\",\n                value=_fhmw,\n                min=0,\n                max=2 * _fhmw,\n                vary=True,\n            )\n    elif models == \"lorentzian\":\n        for i, (_cent, _amp, _fhmw) in enumerate(\n            zip(\n                self.x[positions],\n                properties[\"peak_heights\"],\n                properties[\"widths\"],\n            ),\n            start=1,\n        ):\n            self.params.add(\n                f\"{models}_amplitude_{i}\",\n                value=_amp,\n                min=-np.abs(1.25 * _amp),\n                max=np.abs(1.25 * _amp),\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_center_{i}\",\n                value=_cent,\n                min=0.5 * _cent,\n                max=2 * _cent,\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_fwhml_{i}\",\n                value=_fhmw,\n                min=0,\n                max=2 * _fhmw,\n                vary=True,\n            )\n    elif models == \"voigt\":\n        for i, (_cent, _amp, _fhmw) in enumerate(\n            zip(\n                self.x[positions],\n                properties[\"peak_heights\"],\n                properties[\"widths\"],\n            ),\n            start=1,\n        ):\n            self.params.add(\n                f\"{models}_amplitude_{i}\",\n                value=_amp,\n                min=-np.abs(1.25 * _amp),\n                max=np.abs(1.25 * _amp),\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_center_{i}\",\n                value=_cent,\n                min=0.5 * _cent,\n                max=2 * _cent,\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_fwhmv_{i}\",\n                value=_fhmw,\n                min=0,\n                max=2 * _fhmw,\n                vary=True,\n            )\n    elif models == \"pseudovoigt\":\n        for i, (_cent, _amp, _fhmw) in enumerate(\n            zip(\n                self.x[positions],\n                properties[\"peak_heights\"],\n                properties[\"widths\"],\n            ),\n            start=1,\n        ):\n            self.params.add(\n                f\"{models}_amplitude_{i}\",\n                value=_amp,\n                min=-np.abs(1.25 * _amp),\n                max=np.abs(1.25 * _amp),\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_center_{i}\",\n                value=_cent,\n                min=0.5 * _cent,\n                max=2 * _cent,\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_fwhmg_{i}\",\n                value=0.5 * _fhmw,\n                min=0,\n                max=_fhmw,\n                vary=True,\n            )\n            self.params.add(\n                f\"{models}_fwhml_{i}\",\n                value=0.5 * _fhmw,\n                min=0,\n                max=2 * _fhmw,\n                vary=True,\n            )\n\n    self.args[\"auto_generated_models\"] = {\n        \"models\": {\n            key: {\n                \"value\": self.params[key].value,\n                \"min\": self.params[key].min,\n                \"max\": self.params[key].max,\n                \"vary\": self.params[key].vary,\n            }\n            for key in self.params\n        },\n        \"positions\": positions.tolist(),\n        \"properties\": {key: value.tolist() for key, value in properties.items()},\n    }\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_global","title":"<code>define_parameters_global()</code>","text":"<p>Define the input parameters for a <code>params</code>-dictionary for global fitting.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_global(self) -&gt; None:\n    \"\"\"Define the input parameters for a `params`-dictionary for global fitting.\"\"\"\n    for col_i in range(self.col_len):\n        for key_1, value_1 in self.args[\"peaks\"].items():\n            for key_2, value_2 in value_1.items():\n                for key_3, value_3 in value_2.items():\n                    self._define_parameter(\n                        col_i=col_i,\n                        key_1=key_1,\n                        key_2=key_2,\n                        key_3=key_3,\n                        value_3=value_3,\n                    )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_global_pre","title":"<code>define_parameters_global_pre()</code>","text":"<p>Define the input parameters for a <code>params</code>-dictionary for global fitting.</p> <p>About <code>params</code> for global fitting</p> <p><code>define_parameters_global_pre</code> requires fully defined <code>params</code>-dictionary in the json, toml, or yaml file input. This means:</p> <ol> <li>Number of the spectra must be defined.</li> <li>Number of the peaks must be defined.</li> <li>Number of the parameters must be defined.</li> <li>The parameters must be defined.</li> </ol> Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_global_pre(self) -&gt; None:\n    \"\"\"Define the input parameters for a `params`-dictionary for global fitting.\n\n    !!! warning \"About `params` for global fitting\"\n\n        `define_parameters_global_pre` requires fully defined `params`-dictionary\n        in the json, toml, or yaml file input. This means:\n\n        1. Number of the spectra must be defined.\n        2. Number of the peaks must be defined.\n        3. Number of the parameters must be defined.\n        4. The parameters must be defined.\n    \"\"\"\n    for key_1, value_1 in self.args[\"peaks\"].items():\n        for key_2, value_2 in value_1.items():\n            for key_3, value_3 in value_2.items():\n                for key_4, value_4 in value_3.items():\n                    self.params.add(f\"{key_3}_{key_4}_{key_2}_{key_1}\", **value_4)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_loop","title":"<code>define_parameters_loop(key_1, value_1)</code>","text":"<p>Loop through the input parameters for a <code>params</code>-dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>key_1</code> <code>str</code> <p>The key of the first level of the input dictionary.</p> required <code>value_1</code> <code>Dict[str, Any]</code> <p>The value of the first level of the input  dictionary.</p> required Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_loop(self, key_1: str, value_1: Dict[str, Any]) -&gt; None:\n    \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n    Args:\n        key_1 (str): The key of the first level of the input dictionary.\n        value_1 (Dict[str, Any]): The value of the first level of the input\n             dictionary.\n    \"\"\"\n    for key_2, value_2 in value_1.items():\n        self.define_parameters_loop_2(key_1=key_1, key_2=key_2, value_2=value_2)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_loop_2","title":"<code>define_parameters_loop_2(key_1, key_2, value_2)</code>","text":"<p>Loop through the input parameters for a <code>params</code>-dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>key_1</code> <code>str</code> <p>The key of the first level of the input dictionary.</p> required <code>key_2</code> <code>str</code> <p>The key of the second level of the input dictionary.</p> required <code>value_2</code> <code>Dict[str, Any]</code> <p>The value of the second level of the input  dictionary.</p> required Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_loop_2(\n    self, key_1: str, key_2: str, value_2: Dict[str, Any]\n) -&gt; None:\n    \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n    Args:\n        key_1 (str): The key of the first level of the input dictionary.\n        key_2 (str): The key of the second level of the input dictionary.\n        value_2 (Dict[str, Any]): The value of the second level of the input\n             dictionary.\n    \"\"\"\n    for key_3, value_3 in value_2.items():\n        self.define_parameters_loop_3(\n            key_1=key_1, key_2=key_2, key_3=key_3, value_3=value_3\n        )\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.define_parameters_loop_3","title":"<code>define_parameters_loop_3(key_1, key_2, key_3, value_3)</code>","text":"<p>Loop through the input parameters for a <code>params</code>-dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>key_1</code> <code>str</code> <p>The key of the first level of the input dictionary.</p> required <code>key_2</code> <code>str</code> <p>The key of the second level of the input dictionary.</p> required <code>key_3</code> <code>str</code> <p>The key of the third level of the input dictionary.</p> required <code>value_3</code> <code>Dict[str, Any]</code> <p>The value of the third level of the input  dictionary.</p> required Source code in <code>spectrafit/models.py</code> Python<pre><code>def define_parameters_loop_3(\n    self, key_1: str, key_2: str, key_3: str, value_3: Dict[str, Any]\n) -&gt; None:\n    \"\"\"Loop through the input parameters for a `params`-dictionary.\n\n    Args:\n        key_1 (str): The key of the first level of the input dictionary.\n        key_2 (str): The key of the second level of the input dictionary.\n        key_3 (str): The key of the third level of the input dictionary.\n        value_3 (Dict[str, Any]): The value of the third level of the input\n             dictionary.\n    \"\"\"\n    self.params.add(f\"{key_2}_{key_3}_{key_1}\", **value_3)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ModelParameters.df_to_numvalues","title":"<code>df_to_numvalues(df, args)</code>","text":"<p>Transform the dataframe to numeric values of <code>x</code> and <code>data</code>.</p> <p>About the dataframe to numeric values</p> <p>The transformation is done by the <code>value</code> property of pandas. The dataframe is separated into the <code>x</code> and <code>data</code> columns and the <code>x</code> column is transformed to the energy values and the <code>data</code> column is transformed to the intensity values depending on the <code>args</code> dictionary. In terms of global fitting, the <code>data</code> contains the intensity values for each column.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>).</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>Tuple[NDArray[float64], NDArray[float64]]</code> <p>Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of <code>x</code> and  <code>data</code> as numpy arrays.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def df_to_numvalues(\n    self, df: pd.DataFrame, args: Dict[str, Any]\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]:\n    \"\"\"Transform the dataframe to numeric values of `x` and `data`.\n\n    !!! note \"About the dataframe to numeric values\"\n\n        The transformation is done by the `value` property of pandas. The dataframe\n        is separated into the `x` and `data` columns and the `x` column is\n        transformed to the energy values and the `data` column is transformed to\n        the intensity values depending on the `args` dictionary. In terms of global\n        fitting, the `data` contains the intensity values for each column.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of `x` and\n             `data` as numpy arrays.\n    \"\"\"\n    if args[\"global_\"]:\n        return (\n            df[args[\"column\"][0]].to_numpy(),\n            df.loc[:, df.columns != args[\"column\"][0]].to_numpy(),\n        )\n    return (df[args[\"column\"][0]].to_numpy(), df[args[\"column\"][1]].to_numpy())\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ReferenceKeys","title":"<code>ReferenceKeys</code>  <code>dataclass</code>","text":"<p>Reference keys for model fitting and peak detection.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@dataclass(frozen=True)\nclass ReferenceKeys:\n    \"\"\"Reference keys for model fitting and peak detection.\"\"\"\n\n    __models__ = list(DistributionModelAPI.model_json_schema()[\"properties\"].keys())\n\n    __automodels__ = [\n        \"gaussian\",\n        \"lorentzian\",\n        \"voigt\",\n        \"pseudovoigt\",\n    ]\n\n    def model_check(self, model: str) -&gt; None:\n        \"\"\"Check if model is available.\n\n        Args:\n            model (str): Model name.\n\n        Raises:\n            NotImplementedError: If the model is not implemented.\n        \"\"\"\n        if model.split(\"_\")[0] not in self.__models__:\n            raise NotImplementedError(f\"{model} is not supported!\")\n\n    def automodel_check(self, model: str) -&gt; None:\n        \"\"\"Check if model is available.\n\n        Args:\n            model (str): Auto Model name (gaussian, lorentzian, voigt, or pseudovoigt).\n\n        Raises:\n            KeyError: If the model is not supported.\n        \"\"\"\n        if model not in self.__automodels__:\n            raise KeyError(f\"{model} is not supported!\")\n\n    def detection_check(self, args: Dict[str, Any]) -&gt; None:\n        \"\"\"Check if detection is available.\n\n        Args:\n            args (Dict[str, Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Raises:\n            KeyError: If the key is not parameter of the `scipy.signal.find_peaks`\n                function. This will be checked via `pydantic` in `spectrafit.api`.\n        \"\"\"\n        AutopeakAPI(**args)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ReferenceKeys.automodel_check","title":"<code>automodel_check(model)</code>","text":"<p>Check if model is available.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Auto Model name (gaussian, lorentzian, voigt, or pseudovoigt).</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the model is not supported.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def automodel_check(self, model: str) -&gt; None:\n    \"\"\"Check if model is available.\n\n    Args:\n        model (str): Auto Model name (gaussian, lorentzian, voigt, or pseudovoigt).\n\n    Raises:\n        KeyError: If the model is not supported.\n    \"\"\"\n    if model not in self.__automodels__:\n        raise KeyError(f\"{model} is not supported!\")\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ReferenceKeys.detection_check","title":"<code>detection_check(args)</code>","text":"<p>Check if detection is available.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key is not parameter of the <code>scipy.signal.find_peaks</code> function. This will be checked via <code>pydantic</code> in <code>spectrafit.api</code>.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def detection_check(self, args: Dict[str, Any]) -&gt; None:\n    \"\"\"Check if detection is available.\n\n    Args:\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Raises:\n        KeyError: If the key is not parameter of the `scipy.signal.find_peaks`\n            function. This will be checked via `pydantic` in `spectrafit.api`.\n    \"\"\"\n    AutopeakAPI(**args)\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.ReferenceKeys.model_check","title":"<code>model_check(model)</code>","text":"<p>Check if model is available.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name.</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the model is not implemented.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def model_check(self, model: str) -&gt; None:\n    \"\"\"Check if model is available.\n\n    Args:\n        model (str): Model name.\n\n    Raises:\n        NotImplementedError: If the model is not implemented.\n    \"\"\"\n    if model.split(\"_\")[0] not in self.__models__:\n        raise NotImplementedError(f\"{model} is not supported!\")\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.SolverModels","title":"<code>SolverModels</code>","text":"<p>               Bases: <code>ModelParameters</code></p> <p>Solving models for 2D and 3D data sets.</p> <p>Solver Modes</p> <ul> <li><code>\"2D\"</code>: Solve 2D models via the classic <code>lmfit</code> function.</li> <li><code>\"3D\"</code>: Solve 3D models via global git. For the <code>global-fitting</code> procedure,      the <code>lmfit</code> function is used to solve the models with an extended set of      parameters.   the <code>lmfit</code> function is used.</li> </ul> Source code in <code>spectrafit/models.py</code> Python<pre><code>class SolverModels(ModelParameters):\n    \"\"\"Solving models for 2D and 3D data sets.\n\n    !!! hint \"Solver Modes\"\n        * `\"2D\"`: Solve 2D models via the classic `lmfit` function.\n        * `\"3D\"`: Solve 3D models via global git. For the `global-fitting` procedure,\n             the `lmfit` function is used to solve the models with an extended set of\n             parameters.\n          the `lmfit` function is used.\n    \"\"\"\n\n    def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n        \"\"\"Initialize the solver modes.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n            args (Dict[str, Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n        \"\"\"\n        super().__init__(df=df, args=args)\n        self.args_solver = SolverModelsAPI(**args).model_dump()\n        self.args_global = GlobalFittingAPI(**args).model_dump()\n        self.params = self.return_params\n\n    def __call__(self) -&gt; Tuple[Minimizer, Any]:\n        \"\"\"Solve the fitting model.\n\n        Returns:\n            Tuple[Minimizer, Any]: Minimizer class and the fitting results.\n        \"\"\"\n        if self.args_global[\"global_\"]:\n            minimizer = Minimizer(\n                self.solve_global_fitting,\n                params=self.params,\n                fcn_args=(self.x, self.data),\n                **self.args_solver[\"minimizer\"],\n            )\n        else:\n            minimizer = Minimizer(\n                self.solve_local_fitting,\n                params=self.params,\n                fcn_args=(self.x, self.data),\n                **self.args_solver[\"minimizer\"],\n            )\n\n        result = minimizer.minimize(\n            **self.args_solver[\"optimizer\"],\n        )\n        self.args_solver[\"optimizer\"][\"max_nfev\"] = minimizer.max_nfev\n        return minimizer, result\n\n    @staticmethod\n    def solve_local_fitting(\n        params: Dict[str, Parameters],\n        x: NDArray[np.float64],\n        data: NDArray[np.float64],\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Solving the fitting problem.\n\n        !!! note \"About implemented models\"\n            `solve_local_fitting` is a wrapper function for the calling the implemented\n            moldels. Based on the `params` dictionary, the function calls the\n            corresponding models and merge them to the general model with will be\n            optimized by the `lmfit`-optimizer.\n            Currently the following models are supported:\n\n            - [Gaussian](https://en.wikipedia.org/wiki/Gaussian_function)\n            - [Lorentzian](https://en.wikipedia.org/wiki/Cauchy_distribution)\n                also known as Cauchy distribution\n            - [Voigt](https://en.wikipedia.org/wiki/Voigt_profile)\n            - [Pseudo Voigt][1]\n            - Exponential\n            - [power][2] (also known as Log-parabola or just power)\n            - Linear\n            - Constant\n            - [Error Function](https://en.wikipedia.org/wiki/Error_function)\n            - [Arcus Tangens][3]\n            - Logarithmic\n\n            [1]: https://en.wikipedia.org/wiki/Voigt_profile#Pseudo-Voigt_approximation\n            [2]: https://en.wikipedia.org/wiki/Power_law\n            [3]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\n\n        Args:\n            params (Dict[str, Parameters]): The best optimized parameters of the fit.\n            x (NDArray[np.float64]): `x`-values of the data.\n            data (NDArray[np.float64]): `y`-values of the data as 1d-array.\n\n        Returns:\n            NDArray[np.float64]: The best-fitted data based on the proposed model.\n        \"\"\"\n        val = np.zeros(x.shape)\n        peak_kwargs: Dict[Tuple[str, str], Parameters] = defaultdict(dict)\n\n        for model in params:\n            model = model.lower()\n            ReferenceKeys().model_check(model=model)\n            c_name = model.split(\"_\")\n            peak_kwargs[(c_name[0], c_name[2])][c_name[1]] = params[model]\n\n        for key, _kwarg in peak_kwargs.items():\n            val += getattr(DistributionModels(), key[0])(x, **_kwarg)\n        return val - data\n\n    @staticmethod\n    def solve_global_fitting(\n        params: Dict[str, Parameters],\n        x: NDArray[np.float64],\n        data: NDArray[np.float64],\n    ) -&gt; NDArray[np.float64]:\n        r\"\"\"Solving the fitting for global problem.\n\n        !!! note \"About implemented models\"\n            `solve_global_fitting` is the global solution of `solve_local_fitting` a\n            wrapper function for the calling the implemented moldels. For the kind of\n            supported models see `solve_local_fitting`.\n\n        !!! note \"About the global solution\"\n            The global solution is a solution for the problem, where the `x`-values is\n            the energy, but the y-values are the intensities, which has to be fitted as\n            one unit. For this reason, the residual is calculated as the difference\n            between all the y-values and the global proposed solution. Later the\n            residual has to be flattened to a 1-dimensional array and minimized by the\n            `lmfit`-optimizer.\n\n\n        Args:\n            params (Dict[str, Parameters]): The best optimized parameters of the fit.\n            x (NDArray[np.float64]): `x`-values of the data.\n            data (NDArray[np.float64]): `y`-values of the data as 2D-array.\n\n        Returns:\n            NDArray[np.float64]: The best-fitted data based on the proposed model.\n        \"\"\"\n        val = np.zeros(data.shape)\n        peak_kwargs: Dict[Tuple[str, str, str], Parameters] = defaultdict(dict)\n\n        for model in params:\n            model = model.lower()\n            ReferenceKeys().model_check(model=model)\n            c_name = model.split(\"_\")\n            peak_kwargs[(c_name[0], c_name[2], c_name[3])][c_name[1]] = params[model]\n        for key, _kwarg in peak_kwargs.items():\n            i = int(key[2]) - 1\n            val[:, i] += getattr(DistributionModels(), key[0])(x, **_kwarg)\n\n        val -= data\n        return val.flatten()\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.SolverModels.__call__","title":"<code>__call__()</code>","text":"<p>Solve the fitting model.</p> <p>Returns:</p> Type Description <code>Tuple[Minimizer, Any]</code> <p>Tuple[Minimizer, Any]: Minimizer class and the fitting results.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def __call__(self) -&gt; Tuple[Minimizer, Any]:\n    \"\"\"Solve the fitting model.\n\n    Returns:\n        Tuple[Minimizer, Any]: Minimizer class and the fitting results.\n    \"\"\"\n    if self.args_global[\"global_\"]:\n        minimizer = Minimizer(\n            self.solve_global_fitting,\n            params=self.params,\n            fcn_args=(self.x, self.data),\n            **self.args_solver[\"minimizer\"],\n        )\n    else:\n        minimizer = Minimizer(\n            self.solve_local_fitting,\n            params=self.params,\n            fcn_args=(self.x, self.data),\n            **self.args_solver[\"minimizer\"],\n        )\n\n    result = minimizer.minimize(\n        **self.args_solver[\"optimizer\"],\n    )\n    self.args_solver[\"optimizer\"][\"max_nfev\"] = minimizer.max_nfev\n    return minimizer, result\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.SolverModels.__init__","title":"<code>__init__(df, args)</code>","text":"<p>Initialize the solver modes.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>).</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required Source code in <code>spectrafit/models.py</code> Python<pre><code>def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the solver modes.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n    \"\"\"\n    super().__init__(df=df, args=args)\n    self.args_solver = SolverModelsAPI(**args).model_dump()\n    self.args_global = GlobalFittingAPI(**args).model_dump()\n    self.params = self.return_params\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.SolverModels.solve_global_fitting","title":"<code>solve_global_fitting(params, x, data)</code>  <code>staticmethod</code>","text":"<p>Solving the fitting for global problem.</p> <p>About implemented models</p> <p><code>solve_global_fitting</code> is the global solution of <code>solve_local_fitting</code> a wrapper function for the calling the implemented moldels. For the kind of supported models see <code>solve_local_fitting</code>.</p> <p>About the global solution</p> <p>The global solution is a solution for the problem, where the <code>x</code>-values is the energy, but the y-values are the intensities, which has to be fitted as one unit. For this reason, the residual is calculated as the difference between all the y-values and the global proposed solution. Later the residual has to be flattened to a 1-dimensional array and minimized by the <code>lmfit</code>-optimizer.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Parameters]</code> <p>The best optimized parameters of the fit.</p> required <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>data</code> <code>NDArray[float64]</code> <p><code>y</code>-values of the data as 2D-array.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: The best-fitted data based on the proposed model.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef solve_global_fitting(\n    params: Dict[str, Parameters],\n    x: NDArray[np.float64],\n    data: NDArray[np.float64],\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Solving the fitting for global problem.\n\n    !!! note \"About implemented models\"\n        `solve_global_fitting` is the global solution of `solve_local_fitting` a\n        wrapper function for the calling the implemented moldels. For the kind of\n        supported models see `solve_local_fitting`.\n\n    !!! note \"About the global solution\"\n        The global solution is a solution for the problem, where the `x`-values is\n        the energy, but the y-values are the intensities, which has to be fitted as\n        one unit. For this reason, the residual is calculated as the difference\n        between all the y-values and the global proposed solution. Later the\n        residual has to be flattened to a 1-dimensional array and minimized by the\n        `lmfit`-optimizer.\n\n\n    Args:\n        params (Dict[str, Parameters]): The best optimized parameters of the fit.\n        x (NDArray[np.float64]): `x`-values of the data.\n        data (NDArray[np.float64]): `y`-values of the data as 2D-array.\n\n    Returns:\n        NDArray[np.float64]: The best-fitted data based on the proposed model.\n    \"\"\"\n    val = np.zeros(data.shape)\n    peak_kwargs: Dict[Tuple[str, str, str], Parameters] = defaultdict(dict)\n\n    for model in params:\n        model = model.lower()\n        ReferenceKeys().model_check(model=model)\n        c_name = model.split(\"_\")\n        peak_kwargs[(c_name[0], c_name[2], c_name[3])][c_name[1]] = params[model]\n    for key, _kwarg in peak_kwargs.items():\n        i = int(key[2]) - 1\n        val[:, i] += getattr(DistributionModels(), key[0])(x, **_kwarg)\n\n    val -= data\n    return val.flatten()\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.SolverModels.solve_local_fitting","title":"<code>solve_local_fitting(params, x, data)</code>  <code>staticmethod</code>","text":"<p>Solving the fitting problem.</p> <p>About implemented models</p> <p><code>solve_local_fitting</code> is a wrapper function for the calling the implemented moldels. Based on the <code>params</code> dictionary, the function calls the corresponding models and merge them to the general model with will be optimized by the <code>lmfit</code>-optimizer. Currently the following models are supported:</p> <ul> <li>Gaussian</li> <li>Lorentzian     also known as Cauchy distribution</li> <li>Voigt</li> <li>Pseudo Voigt</li> <li>Exponential</li> <li>power (also known as Log-parabola or just power)</li> <li>Linear</li> <li>Constant</li> <li>Error Function</li> <li>Arcus Tangens</li> <li>Logarithmic</li> </ul> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Parameters]</code> <p>The best optimized parameters of the fit.</p> required <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>data</code> <code>NDArray[float64]</code> <p><code>y</code>-values of the data as 1d-array.</p> required <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: The best-fitted data based on the proposed model.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef solve_local_fitting(\n    params: Dict[str, Parameters],\n    x: NDArray[np.float64],\n    data: NDArray[np.float64],\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Solving the fitting problem.\n\n    !!! note \"About implemented models\"\n        `solve_local_fitting` is a wrapper function for the calling the implemented\n        moldels. Based on the `params` dictionary, the function calls the\n        corresponding models and merge them to the general model with will be\n        optimized by the `lmfit`-optimizer.\n        Currently the following models are supported:\n\n        - [Gaussian](https://en.wikipedia.org/wiki/Gaussian_function)\n        - [Lorentzian](https://en.wikipedia.org/wiki/Cauchy_distribution)\n            also known as Cauchy distribution\n        - [Voigt](https://en.wikipedia.org/wiki/Voigt_profile)\n        - [Pseudo Voigt][1]\n        - Exponential\n        - [power][2] (also known as Log-parabola or just power)\n        - Linear\n        - Constant\n        - [Error Function](https://en.wikipedia.org/wiki/Error_function)\n        - [Arcus Tangens][3]\n        - Logarithmic\n\n        [1]: https://en.wikipedia.org/wiki/Voigt_profile#Pseudo-Voigt_approximation\n        [2]: https://en.wikipedia.org/wiki/Power_law\n        [3]: https://en.wikipedia.org/wiki/Inverse_trigonometric_functions\n\n    Args:\n        params (Dict[str, Parameters]): The best optimized parameters of the fit.\n        x (NDArray[np.float64]): `x`-values of the data.\n        data (NDArray[np.float64]): `y`-values of the data as 1d-array.\n\n    Returns:\n        NDArray[np.float64]: The best-fitted data based on the proposed model.\n    \"\"\"\n    val = np.zeros(x.shape)\n    peak_kwargs: Dict[Tuple[str, str], Parameters] = defaultdict(dict)\n\n    for model in params:\n        model = model.lower()\n        ReferenceKeys().model_check(model=model)\n        c_name = model.split(\"_\")\n        peak_kwargs[(c_name[0], c_name[2])][c_name[1]] = params[model]\n\n    for key, _kwarg in peak_kwargs.items():\n        val += getattr(DistributionModels(), key[0])(x, **_kwarg)\n    return val - data\n</code></pre>"},{"location":"api/modelling_api/#spectrafit.models.calculated_model","title":"<code>calculated_model(params, x, df, global_fit)</code>","text":"<p>Calculate the single contributions of the models and add them to the dataframe.</p> <p>About calculated models</p> <p><code>calculated_model</code> are also wrapper functions similar to <code>solve_model</code>. The overall goal is to extract from the best parameters the single contributions in the model. Currently, <code>lmfit</code> provides only a single model, so the best-fit.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Parameters]</code> <p>The best optimized parameters of the fit.</p> required <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will be  extended by the single contribution of the model.</p> required <code>global_fit</code> <code>int</code> <p>If 1 or 2, the model is calculated for the global fit.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Extended dataframe containing the single contributions of the models.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>def calculated_model(\n    params: Dict[str, Parameters],\n    x: NDArray[np.float64],\n    df: pd.DataFrame,\n    global_fit: int,\n) -&gt; pd.DataFrame:\n    r\"\"\"Calculate the single contributions of the models and add them to the dataframe.\n\n    !!! note \"About calculated models\"\n        `calculated_model` are also wrapper functions similar to `solve_model`. The\n        overall goal is to extract from the best parameters the single contributions in\n        the model. Currently, `lmfit` provides only a single model, so the best-fit.\n\n    Args:\n        params (Dict[str, Parameters]): The best optimized parameters of the fit.\n        x (NDArray[np.float64]): `x`-values of the data.\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will be\n             extended by the single contribution of the model.\n        global_fit (int): If 1 or 2, the model is calculated for the global fit.\n\n    Returns:\n        pd.DataFrame: Extended dataframe containing the single contributions of the\n            models.\n    \"\"\"\n    peak_kwargs: Dict[Any, Parameters] = defaultdict(dict)\n\n    for model in params:\n        model = model.lower()\n        ReferenceKeys().model_check(model=model)\n        p_name = model.split(\"_\")\n        if global_fit:\n            peak_kwargs[(p_name[0], p_name[2], p_name[3])][p_name[1]] = params[model]\n        else:\n            peak_kwargs[(p_name[0], p_name[2])][p_name[1]] = params[model]\n\n    _df = df.copy()\n    for key, _kwarg in peak_kwargs.items():\n        c_name = f\"{key[0]}_{key[1]}_{key[2]}\" if global_fit else f\"{key[0]}_{key[1]}\"\n        _df[c_name] = getattr(DistributionModels(), key[0])(x, **_kwarg)\n\n    return _df\n</code></pre>"},{"location":"api/notebook_api/","title":"Jupyter-Notebook","text":"<p>About the Notebook API</p> <p>The Notebook API is a new feature in the v0.12.0 release of <code>SpectraFit</code> with major focus on working with Jupyter Notebooks.</p> <p>The Notebook API is a work in progress and is subject to change.</p> <p>Jupyter Notebook plugin for SpectraFit.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay","title":"<code>DataFrameDisplay</code>","text":"<p>Class for displaying a dataframe in different ways.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class DataFrameDisplay:\n    \"\"\"Class for displaying a dataframe in different ways.\"\"\"\n\n    def df_display(self, df: pd.DataFrame, mode: Optional[str] = None) -&gt; Optional[Any]:\n        \"\"\"Call the DataframeDisplay class.\n\n        !!! info \"About `df_display`\"\n\n            This function is used to display a dataframe in two different ways.\n\n            1. Regular display mode:\n                1. Via `IPython.display` for regular sliced displaying of the dataframe\n                   in the notebook.\n                2. Via `IPython.display` as Markdown for regular displaying of the\n                    complete dataframe in the notebook.\n            2. Interactive display mode:\n                1. Via `itables` for interactive displaying of the dataframe in the\n                    notebook, which allows for sorting, filtering, and jumping. For\n                    more information see [itables](https://github.com/mwouts/itables).\n                2. Via `dtale` for interactive displaying of the dataframe in the\n                    notebook, which allows advanced data analysis of the dataframe in\n                    an external window. For more information see\n                    [dtale](https://github.com/man-group/dtale).\n\n        Args:\n            df (pd.DataFrame): Dataframe to display.\n            mode (str, Optional): Display mode. Defaults to None.\n\n        Raises:\n            ValueError: Raises ValueError if mode of displaying is not supported.\n\n        Returns:\n            Optional[Any]: Returns the dtale object for plotting in the Jupyter\n                 notebook, if mode is `dtale`.\n        \"\"\"\n        if mode == \"regular\":\n            self.regular_display(df=df)\n        elif mode == \"markdown\":\n            self.markdown_display(df=df)\n        elif mode == \"interactive\":\n            self.interactive_display(df=df)\n        elif mode == \"dtale\":\n            return self.dtale_display(df=df)\n        elif mode is not None:\n            raise ValueError(\n                f\"Invalid mode: {mode}. \"\n                \"Valid modes are: regular, interactive, dtale, markdown.\"\n            )\n        return None\n\n    @staticmethod\n    def regular_display(df: pd.DataFrame) -&gt; None:\n        \"\"\"Display the dataframe in a regular way.\n\n        Args:\n            df (pd.DataFrame): Dataframe to display.\n        \"\"\"\n        display(df)\n\n    @staticmethod\n    def interactive_display(df: pd.DataFrame) -&gt; None:\n        \"\"\"Display the dataframe in an interactive way.\n\n        Args:\n            df (pd.DataFrame): Dataframe to display.\n        \"\"\"\n        itables_show(df)\n\n    @staticmethod\n    def dtale_display(df: pd.DataFrame) -&gt; Any:\n        \"\"\"Display the dataframe in a dtale way.\n\n        Args:\n            df (pd.DataFrame): Dataframe to display.\n\n        Returns:\n            Any: Returns the dtale object for plotting in the Jupyter notebook.\n        \"\"\"\n        return dtale_show(df)\n\n    @staticmethod\n    def markdown_display(df: pd.DataFrame) -&gt; None:\n        \"\"\"Display the dataframe in a markdown way.\n\n        Args:\n            df (pd.DataFrame): Dataframe to display.\n        \"\"\"\n        display_markdown(df.to_markdown(), raw=True)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay.df_display","title":"<code>df_display(df, mode=None)</code>","text":"<p>Call the DataframeDisplay class.</p> <p>About <code>df_display</code></p> <p>This function is used to display a dataframe in two different ways.</p> <ol> <li>Regular display mode:<ol> <li>Via <code>IPython.display</code> for regular sliced displaying of the dataframe    in the notebook.</li> <li>Via <code>IPython.display</code> as Markdown for regular displaying of the     complete dataframe in the notebook.</li> </ol> </li> <li>Interactive display mode:<ol> <li>Via <code>itables</code> for interactive displaying of the dataframe in the     notebook, which allows for sorting, filtering, and jumping. For     more information see itables.</li> <li>Via <code>dtale</code> for interactive displaying of the dataframe in the     notebook, which allows advanced data analysis of the dataframe in     an external window. For more information see     dtale.</li> </ol> </li> </ol> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to display.</p> required <code>mode</code> <code>(str, Optional)</code> <p>Display mode. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raises ValueError if mode of displaying is not supported.</p> <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Optional[Any]: Returns the dtale object for plotting in the Jupyter  notebook, if mode is <code>dtale</code>.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def df_display(self, df: pd.DataFrame, mode: Optional[str] = None) -&gt; Optional[Any]:\n    \"\"\"Call the DataframeDisplay class.\n\n    !!! info \"About `df_display`\"\n\n        This function is used to display a dataframe in two different ways.\n\n        1. Regular display mode:\n            1. Via `IPython.display` for regular sliced displaying of the dataframe\n               in the notebook.\n            2. Via `IPython.display` as Markdown for regular displaying of the\n                complete dataframe in the notebook.\n        2. Interactive display mode:\n            1. Via `itables` for interactive displaying of the dataframe in the\n                notebook, which allows for sorting, filtering, and jumping. For\n                more information see [itables](https://github.com/mwouts/itables).\n            2. Via `dtale` for interactive displaying of the dataframe in the\n                notebook, which allows advanced data analysis of the dataframe in\n                an external window. For more information see\n                [dtale](https://github.com/man-group/dtale).\n\n    Args:\n        df (pd.DataFrame): Dataframe to display.\n        mode (str, Optional): Display mode. Defaults to None.\n\n    Raises:\n        ValueError: Raises ValueError if mode of displaying is not supported.\n\n    Returns:\n        Optional[Any]: Returns the dtale object for plotting in the Jupyter\n             notebook, if mode is `dtale`.\n    \"\"\"\n    if mode == \"regular\":\n        self.regular_display(df=df)\n    elif mode == \"markdown\":\n        self.markdown_display(df=df)\n    elif mode == \"interactive\":\n        self.interactive_display(df=df)\n    elif mode == \"dtale\":\n        return self.dtale_display(df=df)\n    elif mode is not None:\n        raise ValueError(\n            f\"Invalid mode: {mode}. \"\n            \"Valid modes are: regular, interactive, dtale, markdown.\"\n        )\n    return None\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay.dtale_display","title":"<code>dtale_display(df)</code>  <code>staticmethod</code>","text":"<p>Display the dataframe in a dtale way.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to display.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Returns the dtale object for plotting in the Jupyter notebook.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef dtale_display(df: pd.DataFrame) -&gt; Any:\n    \"\"\"Display the dataframe in a dtale way.\n\n    Args:\n        df (pd.DataFrame): Dataframe to display.\n\n    Returns:\n        Any: Returns the dtale object for plotting in the Jupyter notebook.\n    \"\"\"\n    return dtale_show(df)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay.interactive_display","title":"<code>interactive_display(df)</code>  <code>staticmethod</code>","text":"<p>Display the dataframe in an interactive way.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to display.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef interactive_display(df: pd.DataFrame) -&gt; None:\n    \"\"\"Display the dataframe in an interactive way.\n\n    Args:\n        df (pd.DataFrame): Dataframe to display.\n    \"\"\"\n    itables_show(df)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay.markdown_display","title":"<code>markdown_display(df)</code>  <code>staticmethod</code>","text":"<p>Display the dataframe in a markdown way.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to display.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef markdown_display(df: pd.DataFrame) -&gt; None:\n    \"\"\"Display the dataframe in a markdown way.\n\n    Args:\n        df (pd.DataFrame): Dataframe to display.\n    \"\"\"\n    display_markdown(df.to_markdown(), raw=True)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFrameDisplay.regular_display","title":"<code>regular_display(df)</code>  <code>staticmethod</code>","text":"<p>Display the dataframe in a regular way.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to display.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef regular_display(df: pd.DataFrame) -&gt; None:\n    \"\"\"Display the dataframe in a regular way.\n\n    Args:\n        df (pd.DataFrame): Dataframe to display.\n    \"\"\"\n    display(df)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot","title":"<code>DataFramePlot</code>","text":"<p>Class to plot a dataframe.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class DataFramePlot:\n    \"\"\"Class to plot a dataframe.\"\"\"\n\n    def plot_2dataframes(\n        self,\n        args_plot: PlotAPI,\n        df_1: pd.DataFrame,\n        df_2: Optional[pd.DataFrame] = None,\n    ) -&gt; None:\n        \"\"\"Plot of two dataframes.\n\n        !!! info \"About the plot\"\n\n            The plot is a combination of two plots. The first plot is the\n            can be the residual plot of a fit or the _modified_ data. The second\n            plot can be the fit or the original data.\n\n        !!! missing \"`line_dash_map`\"\n\n            Currently, the `line_dash_map` is not working, and the dash is not\n            plotted. Most likely, this is related to the fact that the columns\n            are not labeled in the dataframe.\n\n        Args:\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n            df_1 (pd.DataFrame): First dataframe to plot, which will generate\n                 automatically a fit plot with residual plot. The ratio is 70% to 20%\n                 with 10% space in between.\n            df_2 (Optional[pd.DataFrame], optional): Second optional dataframe to\n                 plot for comparsion. In this case, the ratio will between first\n                 and second plot will be same. Defaults to None.\n        \"\"\"\n        if df_2 is None:\n            _fig1 = px.line(\n                df_1,\n                x=ColumnNamesAPI().energy,\n                y=ColumnNamesAPI().residual,\n                color_discrete_sequence=[args_plot.color.residual],\n            )\n            _y = df_1.columns.drop([ColumnNamesAPI().energy, ColumnNamesAPI().residual])\n            _fig2 = px.line(\n                df_1,\n                x=ColumnNamesAPI().energy,\n                y=_y,\n                color_discrete_map={\n                    ColumnNamesAPI().intensity: args_plot.color.intensity,\n                    ColumnNamesAPI().fit: args_plot.color.fit,\n                    **{\n                        key: args_plot.color.components\n                        for key in _y.drop(\n                            [ColumnNamesAPI().intensity, ColumnNamesAPI().fit]\n                        )\n                    },\n                },\n                line_dash_map={\n                    ColumnNamesAPI().intensity: \"solid\",\n                    ColumnNamesAPI().fit: \"longdash\",\n                    **{\n                        key: \"dash\"\n                        for key in _y.drop(\n                            [ColumnNamesAPI().intensity, ColumnNamesAPI().fit]\n                        )\n                    },\n                },\n            )\n        else:\n            _fig1 = px.line(df_1, x=args_plot.x, y=args_plot.y)\n            _fig2 = px.line(df_2, x=args_plot.x, y=args_plot.y)\n\n        fig = make_subplots(\n            rows=2, cols=1, shared_xaxes=True, shared_yaxes=True, vertical_spacing=0.05\n        )\n\n        for _spec_1 in _fig1[\"data\"]:\n            fig.append_trace(_spec_1, row=1, col=1)\n        for _spec_2 in _fig2[\"data\"]:\n            fig.append_trace(_spec_2, row=2, col=1)\n        height = args_plot.size[1][0]\n        self.update_layout_axes(fig, args_plot, height)\n        xaxis_title = self.title_text(\n            name=args_plot.xaxis_title.name, unit=args_plot.xaxis_title.unit\n        )\n        yaxis_title = self.title_text(\n            name=args_plot.yaxis_title.name, unit=args_plot.yaxis_title.unit\n        )\n\n        fig.update_xaxes(title_text=xaxis_title, row=1, col=1)\n        fig.update_xaxes(title_text=xaxis_title, row=2, col=1)\n        if df_2 is None:\n            residual_title = self.title_text(\n                name=args_plot.residual_title.name, unit=args_plot.residual_title.unit\n            )\n            fig[\"layout\"][\"yaxis1\"].update(domain=[0.8, 1])\n            fig[\"layout\"][\"yaxis2\"].update(domain=[0, 0.7])\n            fig.update_yaxes(title_text=residual_title, row=1, col=1)\n        else:\n            fig.update_yaxes(title_text=yaxis_title, row=1, col=1)\n        fig.update_yaxes(title_text=yaxis_title, row=2, col=1)\n        fig.show(\n            config={\n                \"toImageButtonOptions\": dict(\n                    format=\"png\", filename=\"plot_of_2_dataframes\", scale=4\n                )\n            }\n        )\n\n    def plot_dataframe(self, args_plot: PlotAPI, df: pd.DataFrame) -&gt; None:\n        \"\"\"Plot the dataframe according to the PlotAPI arguments.\n\n        Args:\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n            df (pd.DataFrame): Dataframe to plot.\n        \"\"\"\n        fig = px.line(df, x=args_plot.x, y=args_plot.y)\n        height = args_plot.size[1][0]\n        self.update_layout_axes(fig, args_plot, height)\n        fig.update_xaxes(\n            title_text=self.title_text(\n                name=args_plot.xaxis_title.name, unit=args_plot.xaxis_title.unit\n            )\n        )\n        fig.update_yaxes(\n            title_text=self.title_text(\n                name=args_plot.yaxis_title.name, unit=args_plot.yaxis_title.unit\n            )\n        )\n        fig.show(\n            config={\n                \"toImageButtonOptions\": dict(\n                    format=\"png\", filename=\"plot_dataframe\", scale=4\n                )\n            }\n        )\n\n    def plot_global_fit(self, args_plot: PlotAPI, df: pd.DataFrame) -&gt; None:\n        \"\"\"Plot the global dataframe according to the PlotAPI arguments.\n\n        Args:\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n            df (pd.DataFrame): Dataframe to plot.\n        \"\"\"\n        for i in range(\n            1,\n            sum(bool(_col.startswith(ColumnNamesAPI().fit)) for _col in df.columns) + 1,\n        ):\n            _col = [col for col in df.columns if col.endswith(str(i))]\n            _col.append(ColumnNamesAPI().energy)\n            _df = df[_col]\n            _df = _df.rename(\n                columns={\n                    f\"{ColumnNamesAPI().intensity}_{i}\": ColumnNamesAPI().intensity,\n                    f\"{ColumnNamesAPI().fit}_{i}\": ColumnNamesAPI().fit,\n                    f\"{ColumnNamesAPI().residual}_{i}\": ColumnNamesAPI().residual,\n                }\n            )\n            self.plot_2dataframes(args_plot, _df)\n\n    def plot_metric(\n        self,\n        args_plot: PlotAPI,\n        df_metric: pd.DataFrame,\n        bar_criteria: Union[str, List[str]],\n        line_criteria: Union[str, List[str]],\n    ) -&gt; None:\n        \"\"\"Plot the metric according to the PlotAPI arguments.\n\n        Args:\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n            df_metric (pd.DataFrame): Metric dataframe to plot.\n            bar_criteria (Union[str, List[str]]): String or list of criteria to plot as\n                 bars.\n            line_criteria (Union[str, List[str]]): String or l of criteria to plot as\n                 lines.\n        \"\"\"\n        fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n        _fig_bar = px.bar(\n            df_metric,\n            y=bar_criteria,\n            color_discrete_sequence=args_plot.color.bars,\n        )\n        _fig_line = px.line(\n            df_metric,\n            y=line_criteria,\n            color_discrete_sequence=args_plot.color.lines,\n        )\n        _fig_line.update_traces(mode=\"lines+markers\", yaxis=\"y2\")\n        fig.add_traces(_fig_bar.data + _fig_line.data)\n        fig.update_layout(xaxis_type=\"category\")\n        height = args_plot.size[1][1]\n        self.update_layout_axes(fig, args_plot, height)\n        fig.update_xaxes(\n            title_text=self.title_text(\n                name=args_plot.run_title.name, unit=args_plot.run_title.unit\n            )\n        )\n        fig.update_yaxes(\n            title_text=self.title_text(\n                name=args_plot.metric_title.name_0, unit=args_plot.metric_title.unit_0\n            ),\n            secondary_y=False,\n        )\n        fig.update_yaxes(\n            title_text=self.title_text(\n                name=args_plot.metric_title.name_1, unit=args_plot.metric_title.unit_1\n            ),\n            secondary_y=True,\n        )\n        fig.show(\n            config={\n                \"toImageButtonOptions\": dict(\n                    format=\"png\", filename=\"plot_metric\", scale=4\n                )\n            }\n        )\n\n    def update_layout_axes(\n        self, fig: Figure, args_plot: PlotAPI, height: int\n    ) -&gt; Figure:\n        \"\"\"Update the layout of the plot.\n\n        Args:\n            fig (Figure): Figure to update.\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n            height (int): Height of the plot.\n\n        Returns:\n            Figure: Updated figure.\n        \"\"\"\n        fig.update_layout(\n            title=args_plot.title,\n            legend_title=args_plot.legend_title,\n            legend=args_plot.legend.model_dump(),\n            font=args_plot.font.model_dump(),\n            showlegend=args_plot.show_legend,\n            width=args_plot.size[0],\n            height=height,\n            paper_bgcolor=args_plot.color.paper,\n            plot_bgcolor=args_plot.color.plot,\n        )\n\n        fig.update_xaxes(\n            minor=self.get_minor(args_plot=args_plot),\n            gridcolor=args_plot.color.grid,\n            linecolor=args_plot.color.line,\n            zerolinecolor=args_plot.color.zero_line,\n            color=args_plot.color.color,\n        )\n\n        fig.update_yaxes(\n            minor=self.get_minor(args_plot=args_plot),\n            gridcolor=args_plot.color.grid,\n            linecolor=args_plot.color.line,\n            zerolinecolor=args_plot.color.zero_line,\n            color=args_plot.color.color,\n        )\n        return fig\n\n    @staticmethod\n    def title_text(name: str, unit: Optional[str] = None) -&gt; str:\n        \"\"\"Return the title text.\n\n        Args:\n            name (str): Name of the variable.\n            unit (Optional[str], optional): Unit of the variable. Defaults to None.\n\n        Returns:\n            str: Title text.\n        \"\"\"\n        return name if unit is None else f\"{name} [{unit}]\"\n\n    def get_minor(self, args_plot: PlotAPI) -&gt; Dict[str, Union[str, bool]]:\n        \"\"\"Get the minor axis arguments.\n\n        Args:\n            args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n\n        Returns:\n            Dict[str, Union[str, bool]]: Dictionary with the minor axis arguments.\n        \"\"\"\n        return dict(\n            tickcolor=args_plot.color.ticks,\n            showgrid=args_plot.grid.show,\n            ticks=args_plot.grid.ticks,\n            griddash=args_plot.grid.dash,\n        )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.get_minor","title":"<code>get_minor(args_plot)</code>","text":"<p>Get the minor axis arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <p>Returns:</p> Type Description <code>Dict[str, Union[str, bool]]</code> <p>Dict[str, Union[str, bool]]: Dictionary with the minor axis arguments.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def get_minor(self, args_plot: PlotAPI) -&gt; Dict[str, Union[str, bool]]:\n    \"\"\"Get the minor axis arguments.\n\n    Args:\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n\n    Returns:\n        Dict[str, Union[str, bool]]: Dictionary with the minor axis arguments.\n    \"\"\"\n    return dict(\n        tickcolor=args_plot.color.ticks,\n        showgrid=args_plot.grid.show,\n        ticks=args_plot.grid.ticks,\n        griddash=args_plot.grid.dash,\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.plot_2dataframes","title":"<code>plot_2dataframes(args_plot, df_1, df_2=None)</code>","text":"<p>Plot of two dataframes.</p> <p>About the plot</p> <p>The plot is a combination of two plots. The first plot is the can be the residual plot of a fit or the modified data. The second plot can be the fit or the original data.</p> <p><code>line_dash_map</code></p> <p>Currently, the <code>line_dash_map</code> is not working, and the dash is not plotted. Most likely, this is related to the fact that the columns are not labeled in the dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <code>df_1</code> <code>DataFrame</code> <p>First dataframe to plot, which will generate  automatically a fit plot with residual plot. The ratio is 70% to 20%  with 10% space in between.</p> required <code>df_2</code> <code>Optional[DataFrame]</code> <p>Second optional dataframe to  plot for comparsion. In this case, the ratio will between first  and second plot will be same. Defaults to None.</p> <code>None</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_2dataframes(\n    self,\n    args_plot: PlotAPI,\n    df_1: pd.DataFrame,\n    df_2: Optional[pd.DataFrame] = None,\n) -&gt; None:\n    \"\"\"Plot of two dataframes.\n\n    !!! info \"About the plot\"\n\n        The plot is a combination of two plots. The first plot is the\n        can be the residual plot of a fit or the _modified_ data. The second\n        plot can be the fit or the original data.\n\n    !!! missing \"`line_dash_map`\"\n\n        Currently, the `line_dash_map` is not working, and the dash is not\n        plotted. Most likely, this is related to the fact that the columns\n        are not labeled in the dataframe.\n\n    Args:\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n        df_1 (pd.DataFrame): First dataframe to plot, which will generate\n             automatically a fit plot with residual plot. The ratio is 70% to 20%\n             with 10% space in between.\n        df_2 (Optional[pd.DataFrame], optional): Second optional dataframe to\n             plot for comparsion. In this case, the ratio will between first\n             and second plot will be same. Defaults to None.\n    \"\"\"\n    if df_2 is None:\n        _fig1 = px.line(\n            df_1,\n            x=ColumnNamesAPI().energy,\n            y=ColumnNamesAPI().residual,\n            color_discrete_sequence=[args_plot.color.residual],\n        )\n        _y = df_1.columns.drop([ColumnNamesAPI().energy, ColumnNamesAPI().residual])\n        _fig2 = px.line(\n            df_1,\n            x=ColumnNamesAPI().energy,\n            y=_y,\n            color_discrete_map={\n                ColumnNamesAPI().intensity: args_plot.color.intensity,\n                ColumnNamesAPI().fit: args_plot.color.fit,\n                **{\n                    key: args_plot.color.components\n                    for key in _y.drop(\n                        [ColumnNamesAPI().intensity, ColumnNamesAPI().fit]\n                    )\n                },\n            },\n            line_dash_map={\n                ColumnNamesAPI().intensity: \"solid\",\n                ColumnNamesAPI().fit: \"longdash\",\n                **{\n                    key: \"dash\"\n                    for key in _y.drop(\n                        [ColumnNamesAPI().intensity, ColumnNamesAPI().fit]\n                    )\n                },\n            },\n        )\n    else:\n        _fig1 = px.line(df_1, x=args_plot.x, y=args_plot.y)\n        _fig2 = px.line(df_2, x=args_plot.x, y=args_plot.y)\n\n    fig = make_subplots(\n        rows=2, cols=1, shared_xaxes=True, shared_yaxes=True, vertical_spacing=0.05\n    )\n\n    for _spec_1 in _fig1[\"data\"]:\n        fig.append_trace(_spec_1, row=1, col=1)\n    for _spec_2 in _fig2[\"data\"]:\n        fig.append_trace(_spec_2, row=2, col=1)\n    height = args_plot.size[1][0]\n    self.update_layout_axes(fig, args_plot, height)\n    xaxis_title = self.title_text(\n        name=args_plot.xaxis_title.name, unit=args_plot.xaxis_title.unit\n    )\n    yaxis_title = self.title_text(\n        name=args_plot.yaxis_title.name, unit=args_plot.yaxis_title.unit\n    )\n\n    fig.update_xaxes(title_text=xaxis_title, row=1, col=1)\n    fig.update_xaxes(title_text=xaxis_title, row=2, col=1)\n    if df_2 is None:\n        residual_title = self.title_text(\n            name=args_plot.residual_title.name, unit=args_plot.residual_title.unit\n        )\n        fig[\"layout\"][\"yaxis1\"].update(domain=[0.8, 1])\n        fig[\"layout\"][\"yaxis2\"].update(domain=[0, 0.7])\n        fig.update_yaxes(title_text=residual_title, row=1, col=1)\n    else:\n        fig.update_yaxes(title_text=yaxis_title, row=1, col=1)\n    fig.update_yaxes(title_text=yaxis_title, row=2, col=1)\n    fig.show(\n        config={\n            \"toImageButtonOptions\": dict(\n                format=\"png\", filename=\"plot_of_2_dataframes\", scale=4\n            )\n        }\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.plot_dataframe","title":"<code>plot_dataframe(args_plot, df)</code>","text":"<p>Plot the dataframe according to the PlotAPI arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <code>df</code> <code>DataFrame</code> <p>Dataframe to plot.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_dataframe(self, args_plot: PlotAPI, df: pd.DataFrame) -&gt; None:\n    \"\"\"Plot the dataframe according to the PlotAPI arguments.\n\n    Args:\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n        df (pd.DataFrame): Dataframe to plot.\n    \"\"\"\n    fig = px.line(df, x=args_plot.x, y=args_plot.y)\n    height = args_plot.size[1][0]\n    self.update_layout_axes(fig, args_plot, height)\n    fig.update_xaxes(\n        title_text=self.title_text(\n            name=args_plot.xaxis_title.name, unit=args_plot.xaxis_title.unit\n        )\n    )\n    fig.update_yaxes(\n        title_text=self.title_text(\n            name=args_plot.yaxis_title.name, unit=args_plot.yaxis_title.unit\n        )\n    )\n    fig.show(\n        config={\n            \"toImageButtonOptions\": dict(\n                format=\"png\", filename=\"plot_dataframe\", scale=4\n            )\n        }\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.plot_global_fit","title":"<code>plot_global_fit(args_plot, df)</code>","text":"<p>Plot the global dataframe according to the PlotAPI arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <code>df</code> <code>DataFrame</code> <p>Dataframe to plot.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_global_fit(self, args_plot: PlotAPI, df: pd.DataFrame) -&gt; None:\n    \"\"\"Plot the global dataframe according to the PlotAPI arguments.\n\n    Args:\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n        df (pd.DataFrame): Dataframe to plot.\n    \"\"\"\n    for i in range(\n        1,\n        sum(bool(_col.startswith(ColumnNamesAPI().fit)) for _col in df.columns) + 1,\n    ):\n        _col = [col for col in df.columns if col.endswith(str(i))]\n        _col.append(ColumnNamesAPI().energy)\n        _df = df[_col]\n        _df = _df.rename(\n            columns={\n                f\"{ColumnNamesAPI().intensity}_{i}\": ColumnNamesAPI().intensity,\n                f\"{ColumnNamesAPI().fit}_{i}\": ColumnNamesAPI().fit,\n                f\"{ColumnNamesAPI().residual}_{i}\": ColumnNamesAPI().residual,\n            }\n        )\n        self.plot_2dataframes(args_plot, _df)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.plot_metric","title":"<code>plot_metric(args_plot, df_metric, bar_criteria, line_criteria)</code>","text":"<p>Plot the metric according to the PlotAPI arguments.</p> <p>Parameters:</p> Name Type Description Default <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <code>df_metric</code> <code>DataFrame</code> <p>Metric dataframe to plot.</p> required <code>bar_criteria</code> <code>Union[str, List[str]]</code> <p>String or list of criteria to plot as  bars.</p> required <code>line_criteria</code> <code>Union[str, List[str]]</code> <p>String or l of criteria to plot as  lines.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_metric(\n    self,\n    args_plot: PlotAPI,\n    df_metric: pd.DataFrame,\n    bar_criteria: Union[str, List[str]],\n    line_criteria: Union[str, List[str]],\n) -&gt; None:\n    \"\"\"Plot the metric according to the PlotAPI arguments.\n\n    Args:\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n        df_metric (pd.DataFrame): Metric dataframe to plot.\n        bar_criteria (Union[str, List[str]]): String or list of criteria to plot as\n             bars.\n        line_criteria (Union[str, List[str]]): String or l of criteria to plot as\n             lines.\n    \"\"\"\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n    _fig_bar = px.bar(\n        df_metric,\n        y=bar_criteria,\n        color_discrete_sequence=args_plot.color.bars,\n    )\n    _fig_line = px.line(\n        df_metric,\n        y=line_criteria,\n        color_discrete_sequence=args_plot.color.lines,\n    )\n    _fig_line.update_traces(mode=\"lines+markers\", yaxis=\"y2\")\n    fig.add_traces(_fig_bar.data + _fig_line.data)\n    fig.update_layout(xaxis_type=\"category\")\n    height = args_plot.size[1][1]\n    self.update_layout_axes(fig, args_plot, height)\n    fig.update_xaxes(\n        title_text=self.title_text(\n            name=args_plot.run_title.name, unit=args_plot.run_title.unit\n        )\n    )\n    fig.update_yaxes(\n        title_text=self.title_text(\n            name=args_plot.metric_title.name_0, unit=args_plot.metric_title.unit_0\n        ),\n        secondary_y=False,\n    )\n    fig.update_yaxes(\n        title_text=self.title_text(\n            name=args_plot.metric_title.name_1, unit=args_plot.metric_title.unit_1\n        ),\n        secondary_y=True,\n    )\n    fig.show(\n        config={\n            \"toImageButtonOptions\": dict(\n                format=\"png\", filename=\"plot_metric\", scale=4\n            )\n        }\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.title_text","title":"<code>title_text(name, unit=None)</code>  <code>staticmethod</code>","text":"<p>Return the title text.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the variable.</p> required <code>unit</code> <code>Optional[str]</code> <p>Unit of the variable. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Title text.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef title_text(name: str, unit: Optional[str] = None) -&gt; str:\n    \"\"\"Return the title text.\n\n    Args:\n        name (str): Name of the variable.\n        unit (Optional[str], optional): Unit of the variable. Defaults to None.\n\n    Returns:\n        str: Title text.\n    \"\"\"\n    return name if unit is None else f\"{name} [{unit}]\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.DataFramePlot.update_layout_axes","title":"<code>update_layout_axes(fig, args_plot, height)</code>","text":"<p>Update the layout of the plot.</p> <p>Parameters:</p> Name Type Description Default <code>fig</code> <code>Figure</code> <p>Figure to update.</p> required <code>args_plot</code> <code>PlotAPI</code> <p>PlotAPI object for the settings of the plot.</p> required <code>height</code> <code>int</code> <p>Height of the plot.</p> required <p>Returns:</p> Name Type Description <code>Figure</code> <code>Figure</code> <p>Updated figure.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def update_layout_axes(\n    self, fig: Figure, args_plot: PlotAPI, height: int\n) -&gt; Figure:\n    \"\"\"Update the layout of the plot.\n\n    Args:\n        fig (Figure): Figure to update.\n        args_plot (PlotAPI): PlotAPI object for the settings of the plot.\n        height (int): Height of the plot.\n\n    Returns:\n        Figure: Updated figure.\n    \"\"\"\n    fig.update_layout(\n        title=args_plot.title,\n        legend_title=args_plot.legend_title,\n        legend=args_plot.legend.model_dump(),\n        font=args_plot.font.model_dump(),\n        showlegend=args_plot.show_legend,\n        width=args_plot.size[0],\n        height=height,\n        paper_bgcolor=args_plot.color.paper,\n        plot_bgcolor=args_plot.color.plot,\n    )\n\n    fig.update_xaxes(\n        minor=self.get_minor(args_plot=args_plot),\n        gridcolor=args_plot.color.grid,\n        linecolor=args_plot.color.line,\n        zerolinecolor=args_plot.color.zero_line,\n        color=args_plot.color.color,\n    )\n\n    fig.update_yaxes(\n        minor=self.get_minor(args_plot=args_plot),\n        gridcolor=args_plot.color.grid,\n        linecolor=args_plot.color.line,\n        zerolinecolor=args_plot.color.zero_line,\n        color=args_plot.color.color,\n    )\n    return fig\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport","title":"<code>ExportReport</code>","text":"<p>               Bases: <code>SolverResults</code></p> <p>Class for exporting results as toml.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class ExportReport(SolverResults):\n    \"\"\"Class for exporting results as toml.\"\"\"\n\n    def __init__(\n        self,\n        description: DescriptionAPI,\n        initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]],\n        pre_processing: DataPreProcessingAPI,\n        settings_solver_models: SolverModelsAPI,\n        fname: FnameAPI,\n        args_out: Dict[str, Any],\n        df_org: pd.DataFrame,\n        df_fit: pd.DataFrame,\n        df_pre: pd.DataFrame = pd.DataFrame(),\n    ) -&gt; None:\n        \"\"\"Initialize the ExportReport class.\n\n        Args:\n            description (DescriptionAPI): Description of the fit project.\n            initial_model (List[Dict[str, Dict[str, Dict[str, Any]]]]): Initial model\n                 for the fit.\n            pre_processing (DataPreProcessingAPI): Data pre-processing settings.\n            settings_solver_models (SolverModelsAPI): Solver models settings.\n            fname (FnameAPI): Filename of the fit project including the path, prefix,\n                 and suffix.\n            args_out (Dict[str, Any]): Dictionary of SpectraFit settings and results.\n            df_org (pd.DataFrame): Dataframe of the original data for performing\n                 the fit.\n            df_fit (pd.DataFrame): Dataframe of the final fit data.\n            df_pre (Optional[pd.DataFrame], optional): Dataframe of the pre-processed.\n                 Defaults to pd.DataFrame().\n        \"\"\"\n        super().__init__(args_out=args_out)\n        self.description = description\n        self.initial_model = initial_model\n        self.pre_processing = pre_processing\n        self.settings_solver_models = settings_solver_models\n        self.fname = fname\n\n        self.df_org = df_org.to_dict(orient=\"list\")\n        self.df_fit = df_fit.to_dict(orient=\"list\")\n        self.df_pre = df_pre.to_dict(orient=\"list\")\n\n    @property\n    def make_input_contribution(self) -&gt; InputAPI:\n        \"\"\"Make input contribution of the report.\n\n        Returns:\n            InputAPI: Input contribution of the report as class.\n        \"\"\"\n        return InputAPI(\n            description=self.description,\n            initial_model=self.initial_model,\n            pre_processing=self.pre_processing,\n            method=FitMethodAPI(\n                global_fitting=self.settings_global_fitting,\n                confidence_interval=self.settings_conf_interval,\n                configurations=self.settings_configurations,\n                settings_solver_models=self.settings_solver_models.model_dump(\n                    exclude_none=True\n                ),\n            ),\n        )\n\n    @property\n    def make_solver_contribution(self) -&gt; SolverAPI:\n        \"\"\"Make solver contribution of the report.\n\n        Returns:\n            SolverAPI: Solver contribution of the report as class.\n        \"\"\"\n        return SolverAPI(\n            goodness_of_fit=self.get_gof,\n            regression_metrics=self.get_regression_metrics,\n            descriptive_statistic=self.get_descriptive_statistic,\n            linear_correlation=self.get_linear_correlation,\n            component_correlation=self.get_component_correlation,\n            confidence_interval=self.get_confidence_interval,\n            covariance_matrix=self.get_covariance_matrix,\n            variables=self.get_variables,\n            errorbars=self.get_errorbars,\n            computional=self.get_computional,\n        )\n\n    @property\n    def make_output_contribution(self) -&gt; OutputAPI:\n        \"\"\"Make output contribution of the report.\n\n        Returns:\n            OutputAPI: Output contribution of the report as class.\n        \"\"\"\n        return OutputAPI(df_org=self.df_org, df_fit=self.df_fit, df_pre=self.df_pre)\n\n    def __call__(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the complete report as dictionary.\n\n        !!! info \"About the report and `exclude_none_dictionary`\"\n\n            The report is generated by using the `ReportAPI` class, which is a\n            `Pydantic`-definition of the report. The `Pydantic`-definition is\n            converted to a dictionary by using the `.model_dump()` option of `Pydantic`.\n            The `recursive_exclude_none` function is used to remove all `None` values\n            from the dictionary, which are hidden in the nested dictionaries.\n\n        Returns:\n            Dict[str, Any]: Report as dictionary by using the `.dict()` option of\n                 pydantic. `None` is excluded.\n        \"\"\"\n        report = ReportAPI(\n            input=self.make_input_contribution,\n            solver=self.make_solver_contribution,\n            output=self.make_output_contribution,\n        ).model_dump(exclude_none=True)\n        report = exclude_none_dictionary(report)\n        report = transform_nested_types(report)\n        return report\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport.make_input_contribution","title":"<code>make_input_contribution: InputAPI</code>  <code>property</code>","text":"<p>Make input contribution of the report.</p> <p>Returns:</p> Name Type Description <code>InputAPI</code> <code>InputAPI</code> <p>Input contribution of the report as class.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport.make_output_contribution","title":"<code>make_output_contribution: OutputAPI</code>  <code>property</code>","text":"<p>Make output contribution of the report.</p> <p>Returns:</p> Name Type Description <code>OutputAPI</code> <code>OutputAPI</code> <p>Output contribution of the report as class.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport.make_solver_contribution","title":"<code>make_solver_contribution: SolverAPI</code>  <code>property</code>","text":"<p>Make solver contribution of the report.</p> <p>Returns:</p> Name Type Description <code>SolverAPI</code> <code>SolverAPI</code> <p>Solver contribution of the report as class.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport.__call__","title":"<code>__call__()</code>","text":"<p>Get the complete report as dictionary.</p> <p>About the report and <code>exclude_none_dictionary</code></p> <p>The report is generated by using the <code>ReportAPI</code> class, which is a <code>Pydantic</code>-definition of the report. The <code>Pydantic</code>-definition is converted to a dictionary by using the <code>.model_dump()</code> option of <code>Pydantic</code>. The <code>recursive_exclude_none</code> function is used to remove all <code>None</code> values from the dictionary, which are hidden in the nested dictionaries.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Report as dictionary by using the <code>.dict()</code> option of  pydantic. <code>None</code> is excluded.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def __call__(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the complete report as dictionary.\n\n    !!! info \"About the report and `exclude_none_dictionary`\"\n\n        The report is generated by using the `ReportAPI` class, which is a\n        `Pydantic`-definition of the report. The `Pydantic`-definition is\n        converted to a dictionary by using the `.model_dump()` option of `Pydantic`.\n        The `recursive_exclude_none` function is used to remove all `None` values\n        from the dictionary, which are hidden in the nested dictionaries.\n\n    Returns:\n        Dict[str, Any]: Report as dictionary by using the `.dict()` option of\n             pydantic. `None` is excluded.\n    \"\"\"\n    report = ReportAPI(\n        input=self.make_input_contribution,\n        solver=self.make_solver_contribution,\n        output=self.make_output_contribution,\n    ).model_dump(exclude_none=True)\n    report = exclude_none_dictionary(report)\n    report = transform_nested_types(report)\n    return report\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportReport.__init__","title":"<code>__init__(description, initial_model, pre_processing, settings_solver_models, fname, args_out, df_org, df_fit, df_pre=pd.DataFrame())</code>","text":"<p>Initialize the ExportReport class.</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>DescriptionAPI</code> <p>Description of the fit project.</p> required <code>initial_model</code> <code>List[Dict[str, Dict[str, Dict[str, Any]]]]</code> <p>Initial model  for the fit.</p> required <code>pre_processing</code> <code>DataPreProcessingAPI</code> <p>Data pre-processing settings.</p> required <code>settings_solver_models</code> <code>SolverModelsAPI</code> <p>Solver models settings.</p> required <code>fname</code> <code>FnameAPI</code> <p>Filename of the fit project including the path, prefix,  and suffix.</p> required <code>args_out</code> <code>Dict[str, Any]</code> <p>Dictionary of SpectraFit settings and results.</p> required <code>df_org</code> <code>DataFrame</code> <p>Dataframe of the original data for performing  the fit.</p> required <code>df_fit</code> <code>DataFrame</code> <p>Dataframe of the final fit data.</p> required <code>df_pre</code> <code>Optional[DataFrame]</code> <p>Dataframe of the pre-processed.  Defaults to pd.DataFrame().</p> <code>DataFrame()</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def __init__(\n    self,\n    description: DescriptionAPI,\n    initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]],\n    pre_processing: DataPreProcessingAPI,\n    settings_solver_models: SolverModelsAPI,\n    fname: FnameAPI,\n    args_out: Dict[str, Any],\n    df_org: pd.DataFrame,\n    df_fit: pd.DataFrame,\n    df_pre: pd.DataFrame = pd.DataFrame(),\n) -&gt; None:\n    \"\"\"Initialize the ExportReport class.\n\n    Args:\n        description (DescriptionAPI): Description of the fit project.\n        initial_model (List[Dict[str, Dict[str, Dict[str, Any]]]]): Initial model\n             for the fit.\n        pre_processing (DataPreProcessingAPI): Data pre-processing settings.\n        settings_solver_models (SolverModelsAPI): Solver models settings.\n        fname (FnameAPI): Filename of the fit project including the path, prefix,\n             and suffix.\n        args_out (Dict[str, Any]): Dictionary of SpectraFit settings and results.\n        df_org (pd.DataFrame): Dataframe of the original data for performing\n             the fit.\n        df_fit (pd.DataFrame): Dataframe of the final fit data.\n        df_pre (Optional[pd.DataFrame], optional): Dataframe of the pre-processed.\n             Defaults to pd.DataFrame().\n    \"\"\"\n    super().__init__(args_out=args_out)\n    self.description = description\n    self.initial_model = initial_model\n    self.pre_processing = pre_processing\n    self.settings_solver_models = settings_solver_models\n    self.fname = fname\n\n    self.df_org = df_org.to_dict(orient=\"list\")\n    self.df_fit = df_fit.to_dict(orient=\"list\")\n    self.df_pre = df_pre.to_dict(orient=\"list\")\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportResults","title":"<code>ExportResults</code>","text":"<p>Class for exporting results as csv.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class ExportResults:\n    \"\"\"Class for exporting results as csv.\"\"\"\n\n    def export_df(self, df: pd.DataFrame, args: FnameAPI) -&gt; None:\n        \"\"\"Export the dataframe as csv.\n\n        Args:\n            df (pd.DataFrame): Dataframe to export.\n            args (FnameAPI): Arguments for the file export including the path, prefix,\n                 and suffix.\n        \"\"\"\n        df.to_csv(\n            self.fname2path(\n                fname=args.fname,\n                prefix=args.prefix,\n                suffix=args.suffix,\n                folder=args.folder,\n            ),\n            index=False,\n        )\n\n    def export_report(self, report: Dict[Any, Any], args: FnameAPI) -&gt; None:\n        \"\"\"Export the results as toml file.\n\n        Args:\n            report (Dict[Any, Any]): Results as dictionary to export.\n            args (FnameAPI): Arguments for the file export including the path, prefix,\n                 and suffix.\n        \"\"\"\n        with open(\n            self.fname2path(\n                fname=args.fname,\n                prefix=args.prefix,\n                suffix=args.suffix,\n                folder=args.folder,\n            ),\n            \"wb+\",\n        ) as f:\n            tomli_w.dump(report, f)\n\n    @staticmethod\n    def fname2path(\n        fname: str,\n        suffix: str,\n        prefix: Optional[str] = None,\n        folder: Optional[str] = None,\n    ) -&gt; Path:\n        \"\"\"Translate string to Path object.\n\n        Args:\n            fname (str): Filename\n            suffix (str): Name of the suffix of the file.\n            prefix (Optional[str], optional): Name of the prefix of the file. Defaults\n                 to None.\n            folder (Optional[str], optional): Folder, where it will be saved.\n                 This folders will be created, if not exist. Defaults to None.\n\n        Returns:\n            Path: Path object of the file.\n        \"\"\"\n        if prefix:\n            fname = f\"{prefix}_{fname}\"\n        _fname = Path(fname).with_suffix(f\".{suffix}\")\n        if folder:\n            Path(folder).mkdir(parents=True, exist_ok=True)\n            _fname = Path(folder) / _fname\n        return _fname\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportResults.export_df","title":"<code>export_df(df, args)</code>","text":"<p>Export the dataframe as csv.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe to export.</p> required <code>args</code> <code>FnameAPI</code> <p>Arguments for the file export including the path, prefix,  and suffix.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def export_df(self, df: pd.DataFrame, args: FnameAPI) -&gt; None:\n    \"\"\"Export the dataframe as csv.\n\n    Args:\n        df (pd.DataFrame): Dataframe to export.\n        args (FnameAPI): Arguments for the file export including the path, prefix,\n             and suffix.\n    \"\"\"\n    df.to_csv(\n        self.fname2path(\n            fname=args.fname,\n            prefix=args.prefix,\n            suffix=args.suffix,\n            folder=args.folder,\n        ),\n        index=False,\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportResults.export_report","title":"<code>export_report(report, args)</code>","text":"<p>Export the results as toml file.</p> <p>Parameters:</p> Name Type Description Default <code>report</code> <code>Dict[Any, Any]</code> <p>Results as dictionary to export.</p> required <code>args</code> <code>FnameAPI</code> <p>Arguments for the file export including the path, prefix,  and suffix.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def export_report(self, report: Dict[Any, Any], args: FnameAPI) -&gt; None:\n    \"\"\"Export the results as toml file.\n\n    Args:\n        report (Dict[Any, Any]): Results as dictionary to export.\n        args (FnameAPI): Arguments for the file export including the path, prefix,\n             and suffix.\n    \"\"\"\n    with open(\n        self.fname2path(\n            fname=args.fname,\n            prefix=args.prefix,\n            suffix=args.suffix,\n            folder=args.folder,\n        ),\n        \"wb+\",\n    ) as f:\n        tomli_w.dump(report, f)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.ExportResults.fname2path","title":"<code>fname2path(fname, suffix, prefix=None, folder=None)</code>  <code>staticmethod</code>","text":"<p>Translate string to Path object.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>Filename</p> required <code>suffix</code> <code>str</code> <p>Name of the suffix of the file.</p> required <code>prefix</code> <code>Optional[str]</code> <p>Name of the prefix of the file. Defaults  to None.</p> <code>None</code> <code>folder</code> <code>Optional[str]</code> <p>Folder, where it will be saved.  This folders will be created, if not exist. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>Path object of the file.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>@staticmethod\ndef fname2path(\n    fname: str,\n    suffix: str,\n    prefix: Optional[str] = None,\n    folder: Optional[str] = None,\n) -&gt; Path:\n    \"\"\"Translate string to Path object.\n\n    Args:\n        fname (str): Filename\n        suffix (str): Name of the suffix of the file.\n        prefix (Optional[str], optional): Name of the prefix of the file. Defaults\n             to None.\n        folder (Optional[str], optional): Folder, where it will be saved.\n             This folders will be created, if not exist. Defaults to None.\n\n    Returns:\n        Path: Path object of the file.\n    \"\"\"\n    if prefix:\n        fname = f\"{prefix}_{fname}\"\n    _fname = Path(fname).with_suffix(f\".{suffix}\")\n    if folder:\n        Path(folder).mkdir(parents=True, exist_ok=True)\n        _fname = Path(folder) / _fname\n    return _fname\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults","title":"<code>SolverResults</code>","text":"<p>Class for storing the results of the solver.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class SolverResults:\n    \"\"\"Class for storing the results of the solver.\"\"\"\n\n    def __init__(self, args_out: Dict[str, Any]) -&gt; None:\n        \"\"\"Initialize the SolverResults class.\n\n        Args:\n            args_out (Dict[str, Any]): Dictionary of SpectraFit settings and results.\n        \"\"\"\n        self.args_out = args_out\n\n    @property\n    def settings_global_fitting(self) -&gt; Union[bool, int]:\n        \"\"\"Global fitting settings.\n\n        Returns:\n            Union[bool, int]: Global fitting settings.\n        \"\"\"\n        return self.args_out[\"global_\"]\n\n    @property\n    def settings_configurations(self) -&gt; Dict[str, Any]:\n        \"\"\"Configure settings.\n\n        Returns:\n            Dict[str, Any]: Configuration settings.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"configurations\"]\n\n    @property\n    def get_gof(self) -&gt; Dict[str, float]:\n        \"\"\"Get the goodness of fit values.\n\n        Returns:\n            Dict[str, float]: Goodness of fit values as dictionary.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"statistics\"]\n\n    @property\n    def get_variables(self) -&gt; Dict[str, Dict[str, float]]:\n        \"\"\"Get the variables of the fit.\n\n        Returns:\n            Dict[str, Dict[str, float]]: Variables of the fit.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"variables\"]\n\n    @property\n    def get_errorbars(self) -&gt; Dict[str, float]:\n        \"\"\"Get the comments about the error bars of fit values.\n\n        Returns:\n            Dict[str, float]: Comments about the error bars as dictionary or dataframe.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"errorbars\"]\n\n    @property\n    def get_component_correlation(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the linear correlation of the components.\n\n        Returns:\n            Dict[str, Any]: Linear correlation of the components as dictionary.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"correlations\"]\n\n    @property\n    def get_covariance_matrix(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the covariance matrix.\n\n        Returns:\n            Dict[str, Any]: Covariance matrix as dictionary.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"covariance_matrix\"]\n\n    @property\n    def get_regression_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the regression metrics.\n\n        Returns:\n            Dict[str, Any]: Regression metrics as dictionary.\n        \"\"\"\n        return self.args_out[\"regression_metrics\"]\n\n    @property\n    def get_descriptive_statistic(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the descriptive statistic.\n\n        Returns:\n            Dict[str, Any]: Descriptive statistic as dictionary of the spectra, fit, and\n                 components as dictionary.\n        \"\"\"\n        return self.args_out[\"descriptive_statistic\"]\n\n    @property\n    def get_linear_correlation(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the linear correlation.\n\n        Returns:\n            Dict[str, Any]: Linear correlation of the spectra, fit, and components\n                 as dictionary.\n        \"\"\"\n        return self.args_out[\"linear_correlation\"]\n\n    @property\n    def get_computional(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the computational time.\n\n        Returns:\n            Dict[str, Any]: Computational time as dictionary.\n        \"\"\"\n        return self.args_out[\"fit_insights\"][\"computional\"]\n\n    @property\n    def settings_conf_interval(self) -&gt; Union[bool, Dict[str, Any]]:\n        \"\"\"Confidence interval settings.\n\n        Returns:\n            Union[bool, Dict[str, Any]]: Confidence interval settings.\n        \"\"\"\n        if isinstance(self.args_out[\"conf_interval\"], dict):\n            self.args_out[\"conf_interval\"] = {\n                key: value if value is not None else {}\n                for key, value in self.args_out[\"conf_interval\"].items()\n            }\n        return self.args_out[\"conf_interval\"]\n\n    @property\n    def get_confidence_interval(self) -&gt; Dict[Any, Any]:\n        \"\"\"Get the confidence interval.\n\n        Returns:\n            Dict[Any, Any]: Confidence interval as dictionary with or without the\n                    confidence interval results.\n        \"\"\"\n        if self.args_out[\"conf_interval\"] is False:\n            return {}\n        return self.args_out[\"confidence_interval\"]\n\n    @property\n    def get_current_metric(self) -&gt; pd.DataFrame:\n        \"\"\"Get the current metric.\n\n        !!! note \"About the regression metrics\"\n\n            For using the regression metrics, the `regression_metrics` must be averaged\n            to merge the results of the different configurations together with the\n            `goodness_of_fit` and `variables` results.\n\n        Returns:\n            pd.DataFrame: Current metric based on `regression_metrics` and\n            `goodness_of_fit` as dataframe.\n        \"\"\"\n        gof = {key: [value] for key, value in self.get_gof.items()}\n        reg = {\n            key: [np.average(val)]\n            for key, val in zip(\n                self.get_regression_metrics[\"index\"],\n                self.get_regression_metrics[\"data\"],\n            )\n        }\n        metric = {**gof, **reg}\n        return pd.DataFrame(metric)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_component_correlation","title":"<code>get_component_correlation: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the linear correlation of the components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Linear correlation of the components as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_computional","title":"<code>get_computional: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the computational time.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Computational time as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_confidence_interval","title":"<code>get_confidence_interval: Dict[Any, Any]</code>  <code>property</code>","text":"<p>Get the confidence interval.</p> <p>Returns:</p> Type Description <code>Dict[Any, Any]</code> <p>Dict[Any, Any]: Confidence interval as dictionary with or without the     confidence interval results.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_covariance_matrix","title":"<code>get_covariance_matrix: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the covariance matrix.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Covariance matrix as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_current_metric","title":"<code>get_current_metric: pd.DataFrame</code>  <code>property</code>","text":"<p>Get the current metric.</p> <p>About the regression metrics</p> <p>For using the regression metrics, the <code>regression_metrics</code> must be averaged to merge the results of the different configurations together with the <code>goodness_of_fit</code> and <code>variables</code> results.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: Current metric based on <code>regression_metrics</code> and</p> <code>DataFrame</code> <p><code>goodness_of_fit</code> as dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_descriptive_statistic","title":"<code>get_descriptive_statistic: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the descriptive statistic.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Descriptive statistic as dictionary of the spectra, fit, and  components as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_errorbars","title":"<code>get_errorbars: Dict[str, float]</code>  <code>property</code>","text":"<p>Get the comments about the error bars of fit values.</p> <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>Dict[str, float]: Comments about the error bars as dictionary or dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_gof","title":"<code>get_gof: Dict[str, float]</code>  <code>property</code>","text":"<p>Get the goodness of fit values.</p> <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>Dict[str, float]: Goodness of fit values as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_linear_correlation","title":"<code>get_linear_correlation: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the linear correlation.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Linear correlation of the spectra, fit, and components  as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_regression_metrics","title":"<code>get_regression_metrics: Dict[str, Any]</code>  <code>property</code>","text":"<p>Get the regression metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Regression metrics as dictionary.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.get_variables","title":"<code>get_variables: Dict[str, Dict[str, float]]</code>  <code>property</code>","text":"<p>Get the variables of the fit.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, float]]</code> <p>Dict[str, Dict[str, float]]: Variables of the fit.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.settings_conf_interval","title":"<code>settings_conf_interval: Union[bool, Dict[str, Any]]</code>  <code>property</code>","text":"<p>Confidence interval settings.</p> <p>Returns:</p> Type Description <code>Union[bool, Dict[str, Any]]</code> <p>Union[bool, Dict[str, Any]]: Confidence interval settings.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.settings_configurations","title":"<code>settings_configurations: Dict[str, Any]</code>  <code>property</code>","text":"<p>Configure settings.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Configuration settings.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.settings_global_fitting","title":"<code>settings_global_fitting: Union[bool, int]</code>  <code>property</code>","text":"<p>Global fitting settings.</p> <p>Returns:</p> Type Description <code>Union[bool, int]</code> <p>Union[bool, int]: Global fitting settings.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SolverResults.__init__","title":"<code>__init__(args_out)</code>","text":"<p>Initialize the SolverResults class.</p> <p>Parameters:</p> Name Type Description Default <code>args_out</code> <code>Dict[str, Any]</code> <p>Dictionary of SpectraFit settings and results.</p> required Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def __init__(self, args_out: Dict[str, Any]) -&gt; None:\n    \"\"\"Initialize the SolverResults class.\n\n    Args:\n        args_out (Dict[str, Any]): Dictionary of SpectraFit settings and results.\n    \"\"\"\n    self.args_out = args_out\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook","title":"<code>SpectraFitNotebook</code>","text":"<p>               Bases: <code>DataFramePlot</code>, <code>DataFrameDisplay</code>, <code>ExportResults</code></p> <p>Jupyter Notebook plugin for SpectraFit.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>class SpectraFitNotebook(DataFramePlot, DataFrameDisplay, ExportResults):\n    \"\"\"Jupyter Notebook plugin for SpectraFit.\"\"\"\n\n    args: Dict[str, Any]\n    global_: Union[bool, int] = False\n    autopeak: bool = False\n    df_fit: pd.DataFrame\n    df_pre: pd.DataFrame = pd.DataFrame()\n    df_metric: pd.DataFrame = pd.DataFrame()\n    df_peaks: pd.DataFrame = pd.DataFrame()\n    initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]]\n\n    def __init__(\n        self,\n        df: pd.DataFrame,\n        x_column: str,\n        y_column: Union[str, List[str]],\n        oversampling: bool = False,\n        smooth: int = 0,\n        shift: float = 0,\n        energy_start: Optional[float] = None,\n        energy_stop: Optional[float] = None,\n        title: Optional[str] = None,\n        xaxis_title: XAxisAPI = XAxisAPI(name=\"Energy\", unit=\"eV\"),\n        yaxis_title: YAxisAPI = YAxisAPI(name=\"Intensity\", unit=\"a.u.\"),\n        residual_title: ResidualAPI = ResidualAPI(name=\"Residual\", unit=\"a.u.\"),\n        metric_title: MetricAPI = MetricAPI(\n            name_0=\"Metrics\", unit_0=\"a.u.\", name_1=\"Metrics\", unit_1=\"a.u.\"\n        ),\n        run_title: RunAPI = RunAPI(name=\"Run\", unit=\"#\"),\n        legend_title: str = \"Spectra\",\n        show_legend: bool = True,\n        legend: LegendAPI = LegendAPI(\n            orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\n        ),\n        font: FontAPI = FontAPI(family=\"Open Sans, monospace\", size=12, color=\"black\"),\n        minor_ticks: bool = True,\n        color: ColorAPI = ColorAPI(),\n        grid: GridAPI = GridAPI(),\n        size: Tuple[int, Tuple[int, int]] = (800, (600, 300)),\n        fname: str = \"results\",\n        folder: Optional[str] = None,\n        description: DescriptionAPI = DescriptionAPI(),\n    ) -&gt; None:\n        \"\"\"Initialize the SpectraFitNotebook class.\n\n        !!! info \"About `Pydantic`-Definition\"\n\n            For being consistent with the `SpectraFit` class, the `SpectraFitNotebook`\n            class refers to the `Pydantic`-Definition of the `SpectraFit` class.\n            Currently, the following definitions are used:\n\n            - `XAxisAPI`: Definition of the x-axis including units\n            - `YAxisAPI`: Definition of the y-axis including units\n            - `ResidualAPI`: Definition of the residual including units\n            - `LegendAPI`: Definition of the legend according to `Plotly`\n            - `FontAPI`: Definition of the font according to `Plotly`, which can be\n                replaced by _built-in_ definitions\n            - `ColorAPI`: Definition of the colors according to `Plotly`, which can be\n                replace by _built-in_ definitions\n            - `GridAPI`: Definition of the grid according to `Plotly`\n            - `DescriptionAPI`: Definition of the description of the fit project\n\n            All classes can be replaced by the corresponding `dict`-definition.\n\n            ```python\n            LegendAPI(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n            ```\n\n            can be also\n\n            ```python\n            dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n            ```\n\n        Args:\n            df (pd.DataFrame): Dataframe with the data to fit.\n            x_column (str): Name of the x column.\n            y_column (Union[str, List[str]]): Name of the y column(s).\n            oversampling (bool, optional): Activate the oversampling options.\n                 Defaults to False.\n            smooth (int, optional): Activate the smoothing functions setting an\n                 `int&gt;0`. Defaults to 0.\n            shift (float, optional): Apply shift to the x-column. Defaults to 0.\n            energy_start (Optional[float], optional): Energy start. Defaults to None.\n            energy_stop (Optional[float], optional): Energy stop. Defaults to None.\n            title (Optional[str], optional): Plot title. Defaults to None.\n            xaxis_title (XAxisAPI, optional): X-Axis title. Defaults to XAxisAPI().\n            yaxis_title (YAxisAPI, optional): Y-Axis title. Defaults to YAxisAPI().\n            residual_title (ResidualAPI, optional): Residual title. Defaults to\n                 ResidualAPI().\n            metric_title (MetricAPI, optional): Metric title for both axes, bar and\n                 line plot. Defaults to MetricAPI().\n            run_title (RunAPI, optional): Run title. Defaults to RunAPI().\n            legend_title (str, optional): Legend title. Defaults to \"Spectra\".\n            show_legend (bool, optional): Show legend. Defaults to True.\n            legend (LegendAPI, optional): Legend options. Defaults to LegendAPI().\n            font (FontAPI, optional): Font options. Defaults to FontAPI().\n            minor_ticks (bool, optional): Show minor ticks. Defaults to True.\n            color (ColorAPI, optional): Color options. Defaults to ColorAPI().\n            grid (GridAPI, optional): Grid options. Defaults to GridAPI().\n            size (Tuple[int, Tuple[int, int]] , optional): Size of the fit- and metric-\n                 plot. First width defines the fit, the second the metrics.\n                 Defaults to (800, (600,300)).\n            fname (str, optional): Filename of the export. Defaults to \"results\".\n            folder (Optional[str], optional): Folder of the export. Defaults to None.\n            description (DescriptionAPI, optional): Description of the data. Defaults\n                 to DescriptionAPI()..\n\n\n        Raises:\n            ValueError: If the dataframe only contains one column.\n        \"\"\"\n        self.x_column = x_column\n        self.y_column = y_column\n\n        if df.shape[1] &lt; 2:\n            raise ValueError(\"The dataframe must have 2 or more columns.\")\n\n        if isinstance(self.y_column, list):\n            self.global_ = 1\n            self.df = df[[self.x_column, *self.y_column]]\n        else:\n            self.df = df[[self.x_column, self.y_column]]\n        self.df_org = self.df.copy()\n\n        self.args_pre = DataPreProcessingAPI(\n            oversampling=oversampling,\n            energy_start=energy_start,\n            energy_stop=energy_stop,\n            smooth=smooth,\n            shift=shift,\n            column=list(self.df.columns),\n        )\n        self.args_desc = description\n\n        self.args_plot = PlotAPI(\n            x=self.x_column,\n            y=self.y_column,\n            title=title,\n            xaxis_title=xaxis_title,\n            yaxis_title=yaxis_title,\n            residual_title=residual_title,\n            metric_title=metric_title,\n            run_title=run_title,\n            legend_title=legend_title,\n            show_legend=show_legend,\n            legend=legend,\n            font=font,\n            minor_ticks=minor_ticks,\n            color=color,\n            grid=grid,\n            size=size,\n        )\n        self.export_args_df = FnameAPI(fname=fname, folder=folder, suffix=\"csv\")\n        self.export_args_out = FnameAPI(fname=fname, folder=folder, suffix=\"lock\")\n\n        self.settings_solver_models: SolverModelsAPI = SolverModelsAPI()\n        self.pre_statistic: Dict[str, Any] = {}\n\n    @property\n    def pre_process(self) -&gt; None:\n        \"\"\"Pre-processing class.\"\"\"\n        self.df, _pre_statistic = PreProcessing(\n            df=self.df, args=self.args_pre.model_dump()\n        )()\n        self.pre_statistic = _pre_statistic[\"data_statistic\"]\n        self.df_pre = self.df.copy()\n\n    @property\n    def return_pre_statistic(self) -&gt; Dict[str, Any]:\n        \"\"\"Return the pre-processing statistic.\"\"\"\n        return self.pre_statistic\n\n    @property\n    def return_df_org(self) -&gt; pd.DataFrame:\n        \"\"\"Return the original dataframe.\"\"\"\n        return self.df_org\n\n    @property\n    def return_df_pre(self) -&gt; Union[pd.DataFrame, None]:\n        \"\"\"Return the pre-processed dataframe.\"\"\"\n        return self.df_pre\n\n    @property\n    def return_df(self) -&gt; pd.DataFrame:\n        \"\"\"Return the dataframe.\"\"\"\n        return self.df\n\n    @property\n    def return_df_fit(self) -&gt; pd.DataFrame:\n        \"\"\"Return the fit dataframe.\"\"\"\n        return self.df_fit\n\n    @property\n    def export_df_act(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        self.export_args_df.prefix = \"act\"\n        self.export_df(df=self.df, args=self.export_args_df)\n\n    @property\n    def export_df_fit(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        self.export_args_df.prefix = \"fit\"\n        self.export_df(df=self.df_fit, args=self.export_args_df)\n\n    @property\n    def export_df_org(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        self.export_args_df.prefix = \"org\"\n        self.export_df(df=self.df_org, args=self.export_args_df)\n\n    @property\n    def export_df_pre(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        if self.df_pre.empty is False:\n            self.export_args_df.prefix = \"pre\"\n            self.export_df(df=self.df_pre, args=self.export_args_df)\n\n    @property\n    def export_df_metric(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        if self.df_metric.empty is False:\n            self.export_args_df.prefix = \"metric\"\n            self.export_df(df=self.df_metric, args=self.export_args_df)\n\n    @property\n    def export_df_peaks(self) -&gt; None:\n        \"\"\"Export the dataframe.\"\"\"\n        if self.df_peaks.empty is False:\n            self.export_args_df.prefix = \"peaks\"\n            self.export_df(df=self.df_peaks, args=self.export_args_df)\n\n    @property\n    def plot_original_df(self) -&gt; None:\n        \"\"\"Plot the original spectra.\"\"\"\n        self.plot_dataframe(args_plot=self.args_plot, df=self.df_org)\n\n    @property\n    def plot_current_df(self) -&gt; None:\n        \"\"\"Plot the current spectra.\"\"\"\n        self.plot_dataframe(args_plot=self.args_plot, df=self.df)\n\n    @property\n    def plot_preprocessed_df(self) -&gt; None:\n        \"\"\"Plot the current processed spectra.\"\"\"\n        self.plot_2dataframes(\n            args_plot=self.args_plot, df_1=self.df_pre, df_2=self.df_org\n        )\n\n    def plot_fit_df(self) -&gt; None:\n        \"\"\"Plot the fit.\"\"\"\n        if self.global_ == 1:\n            self.plot_global_fit(args_plot=self.args_plot, df=self.df_fit)\n        else:\n            self.plot_2dataframes(args_plot=self.args_plot, df_1=self.df_fit)\n\n    def plot_current_metric(\n        self,\n        bar_criteria: Optional[Union[str, List[str]]] = None,\n        line_criteria: Optional[Union[str, List[str]]] = None,\n    ) -&gt; None:\n        \"\"\"Plot the current metric.\n\n        Args:\n            bar_criteria (Optional[Union[str, List[str]]], optional): Criteria for the\n                    bar plot. Defaults to None.\n            line_criteria (Optional[Union[str, List[str]]], optional): Criteria for\n                    the line plot. Defaults to None.\n        \"\"\"\n        if bar_criteria is None:\n            bar_criteria = [\n                \"akaike_information\",\n                \"bayesian_information\",\n            ]\n\n        if line_criteria is None:\n            line_criteria = [\n                \"mean_squared_error\",\n            ]\n\n        self.plot_metric(\n            args_plot=self.args_plot,\n            df_metric=self.df_metric,\n            bar_criteria=bar_criteria,\n            line_criteria=line_criteria,\n        )\n\n    @property\n    def generate_report(self) -&gt; None:\n        \"\"\"Generate the SpectraFit report of the final fit.\"\"\"\n        self.export_report(\n            report=ExportReport(\n                description=self.args_desc,\n                initial_model=self.initial_model,\n                pre_processing=self.args_pre,\n                settings_solver_models=self.settings_solver_models,\n                fname=self.export_args_out,\n                args_out=self.args,\n                df_org=self.df_org,\n                df_pre=self.df_pre,\n                df_fit=self.df_fit,\n            )(),\n            args=self.export_args_out,\n        )\n\n    def solver_model(\n        self,\n        initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]],\n        show_plot: bool = True,\n        show_metric: bool = True,\n        show_df: bool = False,\n        show_peaks: bool = False,\n        conf_interval: Union[bool, Dict[str, Any]] = False,\n        bar_criteria: Optional[Union[str, List[str]]] = None,\n        line_criteria: Optional[Union[str, List[str]]] = None,\n        solver_settings: Optional[Dict[str, Any]] = None,\n    ) -&gt; None:\n        \"\"\"Solves the fit problem based on the proposed model.\n\n        Args:\n            initial_model (List[Dict[str, Dict[str, Dict[str, Any]]]]): List of\n                 dictionary with the initial model and its fitting parameters and\n                 options for the components.\n            show_plot (bool, optional): Show current fit results as plot.\n                 Defaults to True.\n            show_metric (bool, optional): Show the metric of the fit. Defaults to True.\n            show_df (bool, optional): Show current fit results as dataframe. Defaults\n                 to False.\n            show_peaks (bool, optional): Show the peaks of fit. Defaults to False.\n            conf_interval (Union[bool,Dict[str, Any]], optional): Bool or dictionary for\n                 the parameter with the parameter for calculating the confidence\n                 interval. Using `conf_interval=False` turns of the calculation of\n                 the confidence interval and accelerate its. Defaults to False.\n            bar_criteria (Optional[Union[str, List[str]]], optional): Criteria for the\n                bar plot. It is recommended to use attributes from `goodness of fit`\n                module. Defaults to None.\n            line_criteria (Optional[Union[str, List[str]]], optional): Criteria for\n                the line plot. It is recommended to use attributes from\n                `regression metric` module. Defaults to None.\n            solver_settings (Optional[Dict[str, Any]], optional): Settings for\n                the solver models, which is split into settings for `minimizer` and\n                `optimizer`.  Defaults to None.\n\n        !!! info: \"About criteria\"\n\n            The criteria for the bar and line plot are defined as a list of strings.\n            The supported keywords are defined by the built-in metrics for\n            `goodness of fit` and `regression` and can be checked in [documentation](\n                https://anselmoo.github.io/spectrafit/doc/statistics/\n            ).\n\n        \"\"\"\n        self.initial_model = initial_model\n\n        if isinstance(conf_interval, bool):\n            conf_interval = (\n                ConfIntervalAPI().model_dump() if conf_interval is True else False\n            )\n        elif isinstance(conf_interval, dict):\n            conf_interval = ConfIntervalAPI(**conf_interval).dict(exclude_none=True)\n\n        if solver_settings is not None and isinstance(solver_settings, dict):\n            self.settings_solver_models = SolverModelsAPI(**solver_settings)\n\n        self.df_fit, self.args = PostProcessing(\n            self.df,\n            {\n                \"global_\": self.global_,\n                \"conf_interval\": conf_interval,\n            },\n            *SolverModels(\n                df=self.df,\n                args={\n                    \"global_\": self.global_,\n                    \"column\": list(self.df.columns),\n                    \"autopeak\": self.autopeak,\n                    **list2dict(peak_list=self.initial_model),\n                    **self.settings_solver_models.model_dump(),\n                },\n            )(),\n        )()\n        self.update_metric()\n        self.update_peaks()\n        if show_plot:\n            self.plot_fit_df()\n\n        if show_metric:\n            self.plot_current_metric(\n                bar_criteria=bar_criteria, line_criteria=line_criteria\n            )\n\n        if show_df:\n            self.interactive_display(df=self.df_fit)\n\n        if show_peaks:\n            self.interactive_display(df=self.df_peaks)\n\n    def update_peaks(self) -&gt; None:\n        \"\"\"Update the peaks dataframe as multi-column dataframe.\n\n        The multi-column dataframe is used for the interactive display of the\n        peaks with initial, current (model), and best fit values.\n        \"\"\"\n        tuples = []\n        _list = []\n        for key_1, _dict in self.args[\"fit_insights\"][\"variables\"].items():\n            tuples.extend([(key_1, key_2) for key_2, val in _dict.items()])\n            _list.extend([val for _, val in _dict.items()])\n\n        self.df_peaks = pd.concat(\n            [\n                self.df_peaks,\n                pd.DataFrame(\n                    pd.Series(\n                        _list,\n                        index=pd.MultiIndex.from_tuples(\n                            tuples, names=[\"component\", \"parameter\"]\n                        ),\n                    )\n                ).T,\n            ],\n            ignore_index=True,\n        )\n\n    def update_metric(self) -&gt; None:\n        \"\"\"Update the metric dataframe.\"\"\"\n        self.df_metric = pd.concat(\n            [self.df_metric, SolverResults(self.args).get_current_metric],\n            ignore_index=True,\n        )\n\n    def display_fit_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n        \"\"\"Display the fit dataframe.\n\n        Args:\n            mode (str, optional): Display mode. Defaults to \"regular\".\n        \"\"\"\n        self.df_display(df=self.df_fit, mode=mode)\n\n    def display_preprocessed_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n        \"\"\"Display the preprocessed dataframe.\n\n        Args:\n            mode (str, optional): Display mode. Defaults to \"regular\".\n        \"\"\"\n        self.df_display(df=self.df_pre, mode=mode)\n\n    def display_original_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n        \"\"\"Display the original dataframe.\n\n        Args:\n            mode (str, optional): Display mode. Defaults to \"regular\".\n        \"\"\"\n        self.df_display(df=self.df_org, mode=mode)\n\n    def display_current_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n        \"\"\"Display the current dataframe.\n\n        Args:\n            mode (str, optional): Display mode. Defaults to \"regular\".\n        \"\"\"\n        self.df_display(df=self.df, mode=mode)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_act","title":"<code>export_df_act: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_fit","title":"<code>export_df_fit: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_metric","title":"<code>export_df_metric: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_org","title":"<code>export_df_org: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_peaks","title":"<code>export_df_peaks: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.export_df_pre","title":"<code>export_df_pre: None</code>  <code>property</code>","text":"<p>Export the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.generate_report","title":"<code>generate_report: None</code>  <code>property</code>","text":"<p>Generate the SpectraFit report of the final fit.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.plot_current_df","title":"<code>plot_current_df: None</code>  <code>property</code>","text":"<p>Plot the current spectra.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.plot_original_df","title":"<code>plot_original_df: None</code>  <code>property</code>","text":"<p>Plot the original spectra.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.plot_preprocessed_df","title":"<code>plot_preprocessed_df: None</code>  <code>property</code>","text":"<p>Plot the current processed spectra.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.pre_process","title":"<code>pre_process: None</code>  <code>property</code>","text":"<p>Pre-processing class.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.return_df","title":"<code>return_df: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.return_df_fit","title":"<code>return_df_fit: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the fit dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.return_df_org","title":"<code>return_df_org: pd.DataFrame</code>  <code>property</code>","text":"<p>Return the original dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.return_df_pre","title":"<code>return_df_pre: Union[pd.DataFrame, None]</code>  <code>property</code>","text":"<p>Return the pre-processed dataframe.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.return_pre_statistic","title":"<code>return_pre_statistic: Dict[str, Any]</code>  <code>property</code>","text":"<p>Return the pre-processing statistic.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.__init__","title":"<code>__init__(df, x_column, y_column, oversampling=False, smooth=0, shift=0, energy_start=None, energy_stop=None, title=None, xaxis_title=XAxisAPI(name='Energy', unit='eV'), yaxis_title=YAxisAPI(name='Intensity', unit='a.u.'), residual_title=ResidualAPI(name='Residual', unit='a.u.'), metric_title=MetricAPI(name_0='Metrics', unit_0='a.u.', name_1='Metrics', unit_1='a.u.'), run_title=RunAPI(name='Run', unit='#'), legend_title='Spectra', show_legend=True, legend=LegendAPI(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1), font=FontAPI(family='Open Sans, monospace', size=12, color='black'), minor_ticks=True, color=ColorAPI(), grid=GridAPI(), size=(800, (600, 300)), fname='results', folder=None, description=DescriptionAPI())</code>","text":"<p>Initialize the SpectraFitNotebook class.</p> <p>About <code>Pydantic</code>-Definition</p> <p>For being consistent with the <code>SpectraFit</code> class, the <code>SpectraFitNotebook</code> class refers to the <code>Pydantic</code>-Definition of the <code>SpectraFit</code> class. Currently, the following definitions are used:</p> <ul> <li><code>XAxisAPI</code>: Definition of the x-axis including units</li> <li><code>YAxisAPI</code>: Definition of the y-axis including units</li> <li><code>ResidualAPI</code>: Definition of the residual including units</li> <li><code>LegendAPI</code>: Definition of the legend according to <code>Plotly</code></li> <li><code>FontAPI</code>: Definition of the font according to <code>Plotly</code>, which can be     replaced by built-in definitions</li> <li><code>ColorAPI</code>: Definition of the colors according to <code>Plotly</code>, which can be     replace by built-in definitions</li> <li><code>GridAPI</code>: Definition of the grid according to <code>Plotly</code></li> <li><code>DescriptionAPI</code>: Definition of the description of the fit project</li> </ul> <p>All classes can be replaced by the corresponding <code>dict</code>-definition.</p> Python<pre><code>LegendAPI(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>can be also</p> Python<pre><code>dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe with the data to fit.</p> required <code>x_column</code> <code>str</code> <p>Name of the x column.</p> required <code>y_column</code> <code>Union[str, List[str]]</code> <p>Name of the y column(s).</p> required <code>oversampling</code> <code>bool</code> <p>Activate the oversampling options.  Defaults to False.</p> <code>False</code> <code>smooth</code> <code>int</code> <p>Activate the smoothing functions setting an  <code>int&gt;0</code>. Defaults to 0.</p> <code>0</code> <code>shift</code> <code>float</code> <p>Apply shift to the x-column. Defaults to 0.</p> <code>0</code> <code>energy_start</code> <code>Optional[float]</code> <p>Energy start. Defaults to None.</p> <code>None</code> <code>energy_stop</code> <code>Optional[float]</code> <p>Energy stop. Defaults to None.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Plot title. Defaults to None.</p> <code>None</code> <code>xaxis_title</code> <code>XAxisAPI</code> <p>X-Axis title. Defaults to XAxisAPI().</p> <code>XAxisAPI(name='Energy', unit='eV')</code> <code>yaxis_title</code> <code>YAxisAPI</code> <p>Y-Axis title. Defaults to YAxisAPI().</p> <code>YAxisAPI(name='Intensity', unit='a.u.')</code> <code>residual_title</code> <code>ResidualAPI</code> <p>Residual title. Defaults to  ResidualAPI().</p> <code>ResidualAPI(name='Residual', unit='a.u.')</code> <code>metric_title</code> <code>MetricAPI</code> <p>Metric title for both axes, bar and  line plot. Defaults to MetricAPI().</p> <code>MetricAPI(name_0='Metrics', unit_0='a.u.', name_1='Metrics', unit_1='a.u.')</code> <code>run_title</code> <code>RunAPI</code> <p>Run title. Defaults to RunAPI().</p> <code>RunAPI(name='Run', unit='#')</code> <code>legend_title</code> <code>str</code> <p>Legend title. Defaults to \"Spectra\".</p> <code>'Spectra'</code> <code>show_legend</code> <code>bool</code> <p>Show legend. Defaults to True.</p> <code>True</code> <code>legend</code> <code>LegendAPI</code> <p>Legend options. Defaults to LegendAPI().</p> <code>LegendAPI(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)</code> <code>font</code> <code>FontAPI</code> <p>Font options. Defaults to FontAPI().</p> <code>FontAPI(family='Open Sans, monospace', size=12, color='black')</code> <code>minor_ticks</code> <code>bool</code> <p>Show minor ticks. Defaults to True.</p> <code>True</code> <code>color</code> <code>ColorAPI</code> <p>Color options. Defaults to ColorAPI().</p> <code>ColorAPI()</code> <code>grid</code> <code>GridAPI</code> <p>Grid options. Defaults to GridAPI().</p> <code>GridAPI()</code> <code>size</code> <code>Tuple[int, Tuple[int, int]]</code> <p>Size of the fit- and metric-  plot. First width defines the fit, the second the metrics.  Defaults to (800, (600,300)).</p> <code>(800, (600, 300))</code> <code>fname</code> <code>str</code> <p>Filename of the export. Defaults to \"results\".</p> <code>'results'</code> <code>folder</code> <code>Optional[str]</code> <p>Folder of the export. Defaults to None.</p> <code>None</code> <code>description</code> <code>DescriptionAPI</code> <p>Description of the data. Defaults  to DescriptionAPI()..</p> <code>DescriptionAPI()</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the dataframe only contains one column.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def __init__(\n    self,\n    df: pd.DataFrame,\n    x_column: str,\n    y_column: Union[str, List[str]],\n    oversampling: bool = False,\n    smooth: int = 0,\n    shift: float = 0,\n    energy_start: Optional[float] = None,\n    energy_stop: Optional[float] = None,\n    title: Optional[str] = None,\n    xaxis_title: XAxisAPI = XAxisAPI(name=\"Energy\", unit=\"eV\"),\n    yaxis_title: YAxisAPI = YAxisAPI(name=\"Intensity\", unit=\"a.u.\"),\n    residual_title: ResidualAPI = ResidualAPI(name=\"Residual\", unit=\"a.u.\"),\n    metric_title: MetricAPI = MetricAPI(\n        name_0=\"Metrics\", unit_0=\"a.u.\", name_1=\"Metrics\", unit_1=\"a.u.\"\n    ),\n    run_title: RunAPI = RunAPI(name=\"Run\", unit=\"#\"),\n    legend_title: str = \"Spectra\",\n    show_legend: bool = True,\n    legend: LegendAPI = LegendAPI(\n        orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1\n    ),\n    font: FontAPI = FontAPI(family=\"Open Sans, monospace\", size=12, color=\"black\"),\n    minor_ticks: bool = True,\n    color: ColorAPI = ColorAPI(),\n    grid: GridAPI = GridAPI(),\n    size: Tuple[int, Tuple[int, int]] = (800, (600, 300)),\n    fname: str = \"results\",\n    folder: Optional[str] = None,\n    description: DescriptionAPI = DescriptionAPI(),\n) -&gt; None:\n    \"\"\"Initialize the SpectraFitNotebook class.\n\n    !!! info \"About `Pydantic`-Definition\"\n\n        For being consistent with the `SpectraFit` class, the `SpectraFitNotebook`\n        class refers to the `Pydantic`-Definition of the `SpectraFit` class.\n        Currently, the following definitions are used:\n\n        - `XAxisAPI`: Definition of the x-axis including units\n        - `YAxisAPI`: Definition of the y-axis including units\n        - `ResidualAPI`: Definition of the residual including units\n        - `LegendAPI`: Definition of the legend according to `Plotly`\n        - `FontAPI`: Definition of the font according to `Plotly`, which can be\n            replaced by _built-in_ definitions\n        - `ColorAPI`: Definition of the colors according to `Plotly`, which can be\n            replace by _built-in_ definitions\n        - `GridAPI`: Definition of the grid according to `Plotly`\n        - `DescriptionAPI`: Definition of the description of the fit project\n\n        All classes can be replaced by the corresponding `dict`-definition.\n\n        ```python\n        LegendAPI(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n        ```\n\n        can be also\n\n        ```python\n        dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n        ```\n\n    Args:\n        df (pd.DataFrame): Dataframe with the data to fit.\n        x_column (str): Name of the x column.\n        y_column (Union[str, List[str]]): Name of the y column(s).\n        oversampling (bool, optional): Activate the oversampling options.\n             Defaults to False.\n        smooth (int, optional): Activate the smoothing functions setting an\n             `int&gt;0`. Defaults to 0.\n        shift (float, optional): Apply shift to the x-column. Defaults to 0.\n        energy_start (Optional[float], optional): Energy start. Defaults to None.\n        energy_stop (Optional[float], optional): Energy stop. Defaults to None.\n        title (Optional[str], optional): Plot title. Defaults to None.\n        xaxis_title (XAxisAPI, optional): X-Axis title. Defaults to XAxisAPI().\n        yaxis_title (YAxisAPI, optional): Y-Axis title. Defaults to YAxisAPI().\n        residual_title (ResidualAPI, optional): Residual title. Defaults to\n             ResidualAPI().\n        metric_title (MetricAPI, optional): Metric title for both axes, bar and\n             line plot. Defaults to MetricAPI().\n        run_title (RunAPI, optional): Run title. Defaults to RunAPI().\n        legend_title (str, optional): Legend title. Defaults to \"Spectra\".\n        show_legend (bool, optional): Show legend. Defaults to True.\n        legend (LegendAPI, optional): Legend options. Defaults to LegendAPI().\n        font (FontAPI, optional): Font options. Defaults to FontAPI().\n        minor_ticks (bool, optional): Show minor ticks. Defaults to True.\n        color (ColorAPI, optional): Color options. Defaults to ColorAPI().\n        grid (GridAPI, optional): Grid options. Defaults to GridAPI().\n        size (Tuple[int, Tuple[int, int]] , optional): Size of the fit- and metric-\n             plot. First width defines the fit, the second the metrics.\n             Defaults to (800, (600,300)).\n        fname (str, optional): Filename of the export. Defaults to \"results\".\n        folder (Optional[str], optional): Folder of the export. Defaults to None.\n        description (DescriptionAPI, optional): Description of the data. Defaults\n             to DescriptionAPI()..\n\n\n    Raises:\n        ValueError: If the dataframe only contains one column.\n    \"\"\"\n    self.x_column = x_column\n    self.y_column = y_column\n\n    if df.shape[1] &lt; 2:\n        raise ValueError(\"The dataframe must have 2 or more columns.\")\n\n    if isinstance(self.y_column, list):\n        self.global_ = 1\n        self.df = df[[self.x_column, *self.y_column]]\n    else:\n        self.df = df[[self.x_column, self.y_column]]\n    self.df_org = self.df.copy()\n\n    self.args_pre = DataPreProcessingAPI(\n        oversampling=oversampling,\n        energy_start=energy_start,\n        energy_stop=energy_stop,\n        smooth=smooth,\n        shift=shift,\n        column=list(self.df.columns),\n    )\n    self.args_desc = description\n\n    self.args_plot = PlotAPI(\n        x=self.x_column,\n        y=self.y_column,\n        title=title,\n        xaxis_title=xaxis_title,\n        yaxis_title=yaxis_title,\n        residual_title=residual_title,\n        metric_title=metric_title,\n        run_title=run_title,\n        legend_title=legend_title,\n        show_legend=show_legend,\n        legend=legend,\n        font=font,\n        minor_ticks=minor_ticks,\n        color=color,\n        grid=grid,\n        size=size,\n    )\n    self.export_args_df = FnameAPI(fname=fname, folder=folder, suffix=\"csv\")\n    self.export_args_out = FnameAPI(fname=fname, folder=folder, suffix=\"lock\")\n\n    self.settings_solver_models: SolverModelsAPI = SolverModelsAPI()\n    self.pre_statistic: Dict[str, Any] = {}\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.display_current_df","title":"<code>display_current_df(mode='regular')</code>","text":"<p>Display the current dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Display mode. Defaults to \"regular\".</p> <code>'regular'</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def display_current_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n    \"\"\"Display the current dataframe.\n\n    Args:\n        mode (str, optional): Display mode. Defaults to \"regular\".\n    \"\"\"\n    self.df_display(df=self.df, mode=mode)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.display_fit_df","title":"<code>display_fit_df(mode='regular')</code>","text":"<p>Display the fit dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Display mode. Defaults to \"regular\".</p> <code>'regular'</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def display_fit_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n    \"\"\"Display the fit dataframe.\n\n    Args:\n        mode (str, optional): Display mode. Defaults to \"regular\".\n    \"\"\"\n    self.df_display(df=self.df_fit, mode=mode)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.display_original_df","title":"<code>display_original_df(mode='regular')</code>","text":"<p>Display the original dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Display mode. Defaults to \"regular\".</p> <code>'regular'</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def display_original_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n    \"\"\"Display the original dataframe.\n\n    Args:\n        mode (str, optional): Display mode. Defaults to \"regular\".\n    \"\"\"\n    self.df_display(df=self.df_org, mode=mode)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.display_preprocessed_df","title":"<code>display_preprocessed_df(mode='regular')</code>","text":"<p>Display the preprocessed dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>str</code> <p>Display mode. Defaults to \"regular\".</p> <code>'regular'</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def display_preprocessed_df(self, mode: Optional[str] = \"regular\") -&gt; None:\n    \"\"\"Display the preprocessed dataframe.\n\n    Args:\n        mode (str, optional): Display mode. Defaults to \"regular\".\n    \"\"\"\n    self.df_display(df=self.df_pre, mode=mode)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.plot_current_metric","title":"<code>plot_current_metric(bar_criteria=None, line_criteria=None)</code>","text":"<p>Plot the current metric.</p> <p>Parameters:</p> Name Type Description Default <code>bar_criteria</code> <code>Optional[Union[str, List[str]]]</code> <p>Criteria for the     bar plot. Defaults to None.</p> <code>None</code> <code>line_criteria</code> <code>Optional[Union[str, List[str]]]</code> <p>Criteria for     the line plot. Defaults to None.</p> <code>None</code> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_current_metric(\n    self,\n    bar_criteria: Optional[Union[str, List[str]]] = None,\n    line_criteria: Optional[Union[str, List[str]]] = None,\n) -&gt; None:\n    \"\"\"Plot the current metric.\n\n    Args:\n        bar_criteria (Optional[Union[str, List[str]]], optional): Criteria for the\n                bar plot. Defaults to None.\n        line_criteria (Optional[Union[str, List[str]]], optional): Criteria for\n                the line plot. Defaults to None.\n    \"\"\"\n    if bar_criteria is None:\n        bar_criteria = [\n            \"akaike_information\",\n            \"bayesian_information\",\n        ]\n\n    if line_criteria is None:\n        line_criteria = [\n            \"mean_squared_error\",\n        ]\n\n    self.plot_metric(\n        args_plot=self.args_plot,\n        df_metric=self.df_metric,\n        bar_criteria=bar_criteria,\n        line_criteria=line_criteria,\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.plot_fit_df","title":"<code>plot_fit_df()</code>","text":"<p>Plot the fit.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def plot_fit_df(self) -&gt; None:\n    \"\"\"Plot the fit.\"\"\"\n    if self.global_ == 1:\n        self.plot_global_fit(args_plot=self.args_plot, df=self.df_fit)\n    else:\n        self.plot_2dataframes(args_plot=self.args_plot, df_1=self.df_fit)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.solver_model","title":"<code>solver_model(initial_model, show_plot=True, show_metric=True, show_df=False, show_peaks=False, conf_interval=False, bar_criteria=None, line_criteria=None, solver_settings=None)</code>","text":"<p>Solves the fit problem based on the proposed model.</p> <p>Parameters:</p> Name Type Description Default <code>initial_model</code> <code>List[Dict[str, Dict[str, Dict[str, Any]]]]</code> <p>List of  dictionary with the initial model and its fitting parameters and  options for the components.</p> required <code>show_plot</code> <code>bool</code> <p>Show current fit results as plot.  Defaults to True.</p> <code>True</code> <code>show_metric</code> <code>bool</code> <p>Show the metric of the fit. Defaults to True.</p> <code>True</code> <code>show_df</code> <code>bool</code> <p>Show current fit results as dataframe. Defaults  to False.</p> <code>False</code> <code>show_peaks</code> <code>bool</code> <p>Show the peaks of fit. Defaults to False.</p> <code>False</code> <code>conf_interval</code> <code>Union[bool, Dict[str, Any]]</code> <p>Bool or dictionary for  the parameter with the parameter for calculating the confidence  interval. Using <code>conf_interval=False</code> turns of the calculation of  the confidence interval and accelerate its. Defaults to False.</p> <code>False</code> <code>bar_criteria</code> <code>Optional[Union[str, List[str]]]</code> <p>Criteria for the bar plot. It is recommended to use attributes from <code>goodness of fit</code> module. Defaults to None.</p> <code>None</code> <code>line_criteria</code> <code>Optional[Union[str, List[str]]]</code> <p>Criteria for the line plot. It is recommended to use attributes from <code>regression metric</code> module. Defaults to None.</p> <code>None</code> <code>solver_settings</code> <code>Optional[Dict[str, Any]]</code> <p>Settings for the solver models, which is split into settings for <code>minimizer</code> and <code>optimizer</code>.  Defaults to None.</p> <code>None</code> <p>!!! info: \"About criteria\"</p> MySQL<pre><code>The criteria for the bar and line plot are defined as a list of strings.\nThe supported keywords are defined by the built-in metrics for\n`goodness of fit` and `regression` and can be checked in [documentation](\n    https://anselmoo.github.io/spectrafit/doc/statistics/\n).\n</code></pre> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def solver_model(\n    self,\n    initial_model: List[Dict[str, Dict[str, Dict[str, Any]]]],\n    show_plot: bool = True,\n    show_metric: bool = True,\n    show_df: bool = False,\n    show_peaks: bool = False,\n    conf_interval: Union[bool, Dict[str, Any]] = False,\n    bar_criteria: Optional[Union[str, List[str]]] = None,\n    line_criteria: Optional[Union[str, List[str]]] = None,\n    solver_settings: Optional[Dict[str, Any]] = None,\n) -&gt; None:\n    \"\"\"Solves the fit problem based on the proposed model.\n\n    Args:\n        initial_model (List[Dict[str, Dict[str, Dict[str, Any]]]]): List of\n             dictionary with the initial model and its fitting parameters and\n             options for the components.\n        show_plot (bool, optional): Show current fit results as plot.\n             Defaults to True.\n        show_metric (bool, optional): Show the metric of the fit. Defaults to True.\n        show_df (bool, optional): Show current fit results as dataframe. Defaults\n             to False.\n        show_peaks (bool, optional): Show the peaks of fit. Defaults to False.\n        conf_interval (Union[bool,Dict[str, Any]], optional): Bool or dictionary for\n             the parameter with the parameter for calculating the confidence\n             interval. Using `conf_interval=False` turns of the calculation of\n             the confidence interval and accelerate its. Defaults to False.\n        bar_criteria (Optional[Union[str, List[str]]], optional): Criteria for the\n            bar plot. It is recommended to use attributes from `goodness of fit`\n            module. Defaults to None.\n        line_criteria (Optional[Union[str, List[str]]], optional): Criteria for\n            the line plot. It is recommended to use attributes from\n            `regression metric` module. Defaults to None.\n        solver_settings (Optional[Dict[str, Any]], optional): Settings for\n            the solver models, which is split into settings for `minimizer` and\n            `optimizer`.  Defaults to None.\n\n    !!! info: \"About criteria\"\n\n        The criteria for the bar and line plot are defined as a list of strings.\n        The supported keywords are defined by the built-in metrics for\n        `goodness of fit` and `regression` and can be checked in [documentation](\n            https://anselmoo.github.io/spectrafit/doc/statistics/\n        ).\n\n    \"\"\"\n    self.initial_model = initial_model\n\n    if isinstance(conf_interval, bool):\n        conf_interval = (\n            ConfIntervalAPI().model_dump() if conf_interval is True else False\n        )\n    elif isinstance(conf_interval, dict):\n        conf_interval = ConfIntervalAPI(**conf_interval).dict(exclude_none=True)\n\n    if solver_settings is not None and isinstance(solver_settings, dict):\n        self.settings_solver_models = SolverModelsAPI(**solver_settings)\n\n    self.df_fit, self.args = PostProcessing(\n        self.df,\n        {\n            \"global_\": self.global_,\n            \"conf_interval\": conf_interval,\n        },\n        *SolverModels(\n            df=self.df,\n            args={\n                \"global_\": self.global_,\n                \"column\": list(self.df.columns),\n                \"autopeak\": self.autopeak,\n                **list2dict(peak_list=self.initial_model),\n                **self.settings_solver_models.model_dump(),\n            },\n        )(),\n    )()\n    self.update_metric()\n    self.update_peaks()\n    if show_plot:\n        self.plot_fit_df()\n\n    if show_metric:\n        self.plot_current_metric(\n            bar_criteria=bar_criteria, line_criteria=line_criteria\n        )\n\n    if show_df:\n        self.interactive_display(df=self.df_fit)\n\n    if show_peaks:\n        self.interactive_display(df=self.df_peaks)\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.update_metric","title":"<code>update_metric()</code>","text":"<p>Update the metric dataframe.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def update_metric(self) -&gt; None:\n    \"\"\"Update the metric dataframe.\"\"\"\n    self.df_metric = pd.concat(\n        [self.df_metric, SolverResults(self.args).get_current_metric],\n        ignore_index=True,\n    )\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.notebook.SpectraFitNotebook.update_peaks","title":"<code>update_peaks()</code>","text":"<p>Update the peaks dataframe as multi-column dataframe.</p> <p>The multi-column dataframe is used for the interactive display of the peaks with initial, current (model), and best fit values.</p> Source code in <code>spectrafit/plugins/notebook.py</code> Python<pre><code>def update_peaks(self) -&gt; None:\n    \"\"\"Update the peaks dataframe as multi-column dataframe.\n\n    The multi-column dataframe is used for the interactive display of the\n    peaks with initial, current (model), and best fit values.\n    \"\"\"\n    tuples = []\n    _list = []\n    for key_1, _dict in self.args[\"fit_insights\"][\"variables\"].items():\n        tuples.extend([(key_1, key_2) for key_2, val in _dict.items()])\n        _list.extend([val for _, val in _dict.items()])\n\n    self.df_peaks = pd.concat(\n        [\n            self.df_peaks,\n            pd.DataFrame(\n                pd.Series(\n                    _list,\n                    index=pd.MultiIndex.from_tuples(\n                        tuples, names=[\"component\", \"parameter\"]\n                    ),\n                )\n            ).T,\n        ],\n        ignore_index=True,\n    )\n</code></pre>"},{"location":"api/notebook_api/#color-scheme","title":"Color Scheme","text":"<p>For changing the color scheme of the plots, additional color schemes can be added to the <code>spectrafit.plugins.notebook</code> module. The color schemes are defined as a pydantic <code>BaseSettings</code> class with the following attributes:</p> <p>Color themes for the Plots in Jupyter Notebooks.</p>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.ColorBlindColor","title":"<code>ColorBlindColor</code>","text":"<p>               Bases: <code>ColorAPI</code></p> <p>Color blind theme for SpectraFit.</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class ColorBlindColor(ColorAPI):\n    \"\"\"Color blind theme for SpectraFit.\"\"\"\n\n    intensity: str = \"#1f77b4\"\n    residual: str = \"#ff7f0e\"\n    fit: str = \"#d62728\"\n    bars: List[str] = [\"#d62728\", \"#9467bd\", \"#8c564b\", \"#e377c2\", \"#7f7f7f\"]\n    lines: List[str] = [\"#8c564b\", \"#e377c2\", \"#7f7f7f\", \"#d62728\", \"#9467bd\"]\n    components: str = \"#2ca02c\"\n    paper: str = \"#ffffff\"\n    plot: str = \"#ffffff\"\n    color: str = \"#000000\"\n    grid: str = \"#d9d9d9\"\n    line: str = \"#d9d9d9\"\n    zero_line: str = \"#1f77b4\"\n    ticks: str = \"#000000\"\n    font: str = \"#000000\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.ColorBlindFont","title":"<code>ColorBlindFont</code>","text":"<p>               Bases: <code>FontAPI</code></p> <p>Color blind font theme for SpectraFit.</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class ColorBlindFont(FontAPI):\n    \"\"\"Color blind font theme for SpectraFit.\"\"\"\n\n    family: str = \"Open Sans\"\n    size: int = 12\n    color: str = \"#000000\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DevOpsDarkColor","title":"<code>DevOpsDarkColor</code>","text":"<p>               Bases: <code>ColorAPI</code></p> <p>GitHub dark color inspired theme for SpectraFit.</p> <p>Please check, primer/github-vscode-theme</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DevOpsDarkColor(ColorAPI):\n    \"\"\"GitHub dark color inspired theme for SpectraFit.\n\n    Please check, https://github.com/primer/github-vscode-theme\n    \"\"\"\n\n    intensity: str = \"#1e4f8a\"\n    residual: str = \"#d73a49\"\n    fit: str = \"#22863a\"\n    bars: List[str] = [\"#005cc5\", \"#6f42c1\", \"#d73a49\", \"#22863a\", \"#d73a49\"]\n    lines: List[str] = [\"#d73a49\", \"#22863a\", \"#d73a49\", \"#005cc5\", \"#6f42c1\"]\n    components: str = \"#d73a49\"\n    paper: str = \"#0d1117\"\n    plot: str = \"#0d1117\"\n    color: str = \"#c9d1d9\"\n    grid: str = \"#30363d\"\n    line: str = \"#30363d\"\n    zero_line: str = \"#005cc5\"\n    ticks: str = \"#c9d1d9\"\n    font: str = \"#c9d1d9\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DevOpsDarkFont","title":"<code>DevOpsDarkFont</code>","text":"<p>               Bases: <code>FontAPI</code></p> <p>GitHub dark font inspired theme for SpectraFit.</p> <p>Please check, primer/github-vscode-theme</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DevOpsDarkFont(FontAPI):\n    \"\"\"GitHub dark font inspired theme for SpectraFit.\n\n    Please check, https://github.com/primer/github-vscode-theme\n    \"\"\"\n\n    family: str = __fira_code__\n    size: int = 12\n    color: str = \"#c9d1d9\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DevOpsLightColor","title":"<code>DevOpsLightColor</code>","text":"<p>               Bases: <code>ColorAPI</code></p> <p>GitHub light color inspired theme for SpectraFit.</p> <p>Please check, primer/github-vscode-theme</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DevOpsLightColor(ColorAPI):\n    \"\"\"GitHub light color inspired theme for SpectraFit.\n\n    Please check, https://github.com/primer/github-vscode-theme\n    \"\"\"\n\n    intensity: str = \"#1e4f8a\"\n    residual: str = \"#d73a49\"\n    fit: str = \"#d73a49\"\n    bars: List[str] = [\"#005cc5\", \"#6f42c1\", \"#d73a49\", \"#22863a\", \"#d73a49\"]\n    lines: List[str] = [\"#d73a49\", \"#22863a\", \"#d73a49\", \"#005cc5\", \"#6f42c1\"]\n    components: str = \"#22863a\"\n    paper: str = \"#ffffff\"\n    plot: str = \"#ffffff\"\n    color: str = \"#000000\"\n    grid: str = \"#d9d9d9\"\n    line: str = \"#d9d9d9\"\n    zero_line: str = \"#005cc5\"\n    ticks: str = \"#000000\"\n    font: str = \"#000000\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DevOpsLightFont","title":"<code>DevOpsLightFont</code>","text":"<p>               Bases: <code>FontAPI</code></p> <p>GitHub light font inspired theme for SpectraFit.</p> <p>Please check, primer/github-vscode-theme</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DevOpsLightFont(FontAPI):\n    \"\"\"GitHub light font inspired theme for SpectraFit.\n\n    Please check, https://github.com/primer/github-vscode-theme\n    \"\"\"\n\n    family: str = __fira_code__\n    size: int = 12\n    color: str = \"#000000\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DraculaColor","title":"<code>DraculaColor</code>","text":"<p>               Bases: <code>ColorAPI</code></p> <p>Dracula color theme for SpectraFit.</p> <p>Dracula Color</p> <p>The Dracula Color is a color theme is used for the dark mode of the <code>SpectraFit</code> application. This color theme is used in the following way:</p> <ul> <li>Background    #282a36 \u2192 paper, plot</li> <li>Current Line  #44475a \u2192 not used</li> <li>Foreground    #f8f8f2 \u2192 color, grid, ticks,  font</li> <li>Comment       #6272a4 \u2192 line</li> <li>Cyan  #8be9fd \u2192 zero_line</li> <li>Green #50fa7b \u2192 fit</li> <li>Orange        #ffb86c \u2192 not used</li> <li>Pink  #ff79c6 \u2192 components</li> <li>Purple        #bd93f9 \u2192 intensity</li> <li>Red   #ff5555 \u2192 residual</li> <li>Yellow        #f1fa8c \u2192 not used</li> </ul> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DraculaColor(ColorAPI):\n    \"\"\"Dracula color theme for SpectraFit.\n\n    !!! info \"Dracula Color\"\n\n        The [Dracula Color](https://draculatheme.com/contribute) is a color theme is\n        used for the dark mode of the `SpectraFit` application. This color theme is\n        used in the following way:\n\n        * Background    #282a36 &amp;rarr; **paper**, **plot**\n        * Current Line\t#44475a &amp;rarr; _not used_\n        * Foreground\t#f8f8f2 &amp;rarr; **color**, **grid**, **ticks**,  **font**\n        * Comment\t#6272a4 &amp;rarr; **line**\n        * Cyan\t#8be9fd &amp;rarr; **zero_line**\n        * Green\t#50fa7b &amp;rarr; **fit**\n        * Orange\t#ffb86c &amp;rarr; _not used_\n        * Pink\t#ff79c6 &amp;rarr; **components**\n        * Purple\t#bd93f9 &amp;rarr; **intensity**\n        * Red\t#ff5555 &amp;rarr; **residual**\n        * Yellow\t#f1fa8c &amp;rarr; _not used_\n\n    \"\"\"\n\n    intensity: str = \"#bd93f9\"\n    residual: str = \"#ff5555\"\n    fit: str = \"#50fa7b\"\n    bars: List[str] = [\"#803C62\", \"#FFC4E6\", \"#FF79C6\", \"#806273\", \"#CC609D\"]\n    lines: List[str] = [\"#805C36\", \"#FFDCB8\", \"#FFB86C\", \"#806E5C\", \"#CC9356\"]\n    components: str = \"#ff79c6\"\n    paper: str = \"#282a36\"\n    plot: str = \"#282a36\"\n    color: str = \"#f8f8f2\"\n    grid: str = \"#f8f8f2\"\n    line: str = \"#6272a4\"\n    zero_line: str = \"#8be9fd\"\n    ticks: str = \"#f8f8f2\"\n    font: str = \"#f8f8f2\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.DraculaFont","title":"<code>DraculaFont</code>","text":"<p>               Bases: <code>FontAPI</code></p> <p>Dracula font theme for SpectraFit.</p> <p>Dracula Font</p> <p>The Dracula Font is a font theme is used for the dark mode of the <code>SpectraFit</code> application. This font theme is used in the following way:</p> <ul> <li>Font Family   \"Fira Code\" \u2192 family</li> <li>Font Size     12 \u2192 size</li> <li>Font Color dracula white \u2192 color</li> </ul> <p>See also: tonsky/FiraCode</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class DraculaFont(FontAPI):\n    \"\"\"Dracula font theme for SpectraFit.\n\n    !!! info \"Dracula Font\"\n\n        The [Dracula Font](https://draculatheme.com/contribute) is a font theme is\n        used for the dark mode of the `SpectraFit` application. This font theme is\n        used in the following way:\n\n        * Font Family\t\"Fira Code\" &amp;rarr; **family**\n        * Font Size\t12 &amp;rarr; **size**\n        * Font Color dracula white &amp;rarr; **color**\n\n        See also: https://github.com/tonsky/FiraCode\n    \"\"\"\n\n    family: str = __fira_code__\n    size: int = 12\n    color: str = \"#f8f8f2\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.MoonAkiColor","title":"<code>MoonAkiColor</code>","text":"<p>               Bases: <code>ColorAPI</code></p> <p>MoonAki dark color theme for SpectraFit.</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class MoonAkiColor(ColorAPI):\n    \"\"\"MoonAki dark color theme for SpectraFit.\"\"\"\n\n    intensity: str = \"#f92672\"\n    residual: str = \"#fd971f\"\n    fit: str = \"#a6e22e\"\n    bars: List[str] = [\"#66d9ef\", \"#ae81ff\", \"#f92672\", \"#a6e22e\", \"#fd971f\"]\n    lines: List[str] = [\"#f92672\", \"#a6e22e\", \"#fd971f\", \"#66d9ef\", \"#ae81ff\"]\n    components: str = \"#ae81ff\"\n    paper: str = \"#272822\"\n    plot: str = \"#272822\"\n    color: str = \"#f8f8f2\"\n    grid: str = \"#49483e\"\n    line: str = \"#49483e\"\n    zero_line: str = \"#66d9ef\"\n    ticks: str = \"#f8f8f2\"\n    font: str = \"#f8f8f2\"\n</code></pre>"},{"location":"api/notebook_api/#spectrafit.plugins.color_schemas.MoonAkiFont","title":"<code>MoonAkiFont</code>","text":"<p>               Bases: <code>FontAPI</code></p> <p>MoonAki dark font theme for SpectraFit.</p> Source code in <code>spectrafit/plugins/color_schemas.py</code> Python<pre><code>class MoonAkiFont(FontAPI):\n    \"\"\"MoonAki dark font theme for SpectraFit.\"\"\"\n\n    family: str = \"Monaco\"\n    size: int = 12\n    color: str = \"#f8f8f2\"\n</code></pre>"},{"location":"api/notebook_api/#running-spectrafit-in-the-builtin-jupyter-notebook","title":"Running SpectraFit in the builtin Jupyter-Notebook","text":"<p>For running <code>SpectraFit</code> in the builtin Jupyter-Notebook, the following command can be used:</p> Bash<pre><code>spectrafit-jupyter\n</code></pre> <p>And next, the <code>SpectraFitNotebook</code> class can be used for fitting the data:</p> Python<pre><code>from spectrafit.plugins.notebook import SpectraFitNotebook\n</code></pre>"},{"location":"api/plotting_api/","title":"Plotting","text":"<p>Plotting of the fit results.</p> <p>About the Font Cache</p> <p>For avoiding problems with the font cache, the font cache is rebuilt at the beginning of the program. This can take a few seconds. If you want to avoid this, you can comment out the line <code>matplotlib.font_manager._rebuild()</code> in the <code>plotting.py</code> file.</p>"},{"location":"api/plotting_api/#spectrafit.plotting.PlotSpectra","title":"<code>PlotSpectra</code>","text":"<p>Plotting of the fit results.</p> Source code in <code>spectrafit/plotting.py</code> Python<pre><code>class PlotSpectra:\n    \"\"\"Plotting of the fit results.\"\"\"\n\n    def __init__(self, df: pd.DataFrame, args: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Initialize the PlotSpectra class.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str, Any], optional): The input file arguments as a dictionary\n                 with additional information beyond the command line arguments. Only\n                 needed for global fitting. Defaults to None.\n        \"\"\"\n        self.df = df\n        self.args = args\n\n    def __call__(self) -&gt; None:\n        \"\"\"Plot the data and the fit.\"\"\"\n        if self.args is not None:\n            if not self.args[\"noplot\"]:\n                if self.args[\"global_\"]:\n                    self.plot_global_spectra()\n                else:\n                    self.plot_local_spectra()\n            plt.show()\n\n    def plot_global_spectra(self) -&gt; None:\n        \"\"\"Plot spectra for global fitting.\n\n        !!! info \"Plotting of the global spectra\"\n\n            The plotting routine for global fitting is similar to the local plotting\n            routine, but the spectra are plotted in a grid spectra plot. The first\n            row of the grid plot contains the residuals of each single fit, the\n            second row the best fit of the model with single peak contributions.\n        \"\"\"\n        n_spec: int = len(list(self.args[\"data_statistic\"])) - 1 if self.args else 1\n        _, axs = plt.subplots(\n            nrows=2,\n            ncols=n_spec,\n            sharex=True,\n            figsize=(9, 9),\n            gridspec_kw={\"height_ratios\": [1, 2]},\n        )\n\n        for i in range(n_spec):\n            axs[0, i].set_title(f\"Spectrum #{i + 1}\")\n            sns.regplot(\n                x=ColumnNamesAPI().energy,\n                y=f\"{ColumnNamesAPI().residual}_{i + 1}\",\n                data=self.df,\n                ax=axs[0, i],\n                color=color[5],\n            )\n            axs[1, i] = sns.lineplot(\n                x=ColumnNamesAPI().energy,\n                y=f\"{ColumnNamesAPI().intensity}_{i + 1}\",\n                data=self.df,\n                ax=axs[1, i],\n                color=color[1],\n            )\n            axs[1, i] = sns.lineplot(\n                x=ColumnNamesAPI().energy,\n                y=f\"fit_{i + 1}\",\n                data=self.df,\n                ax=axs[1, i],\n                ls=\"--\",\n                color=color[0],\n            )\n            peaks = [\n                peak\n                for peak in self.df.columns\n                if not peak.startswith(tuple(ColumnNamesAPI().model_dump().values()))\n                and peak.endswith(f\"_{i + 1}\")\n            ]\n            color_peaks = sns.color_palette(\"rocket\", len(peaks))\n            for j, peak in enumerate(peaks):\n                axs[1, i] = sns.lineplot(\n                    x=ColumnNamesAPI().energy,\n                    y=peak,\n                    data=self.df,\n                    ax=axs[1, i],\n                    ls=\":\",\n                    color=color_peaks[j],\n                )\n\n        plt.tight_layout()\n\n    def plot_local_spectra(self) -&gt; None:\n        \"\"\"Plot spectra for local fitting.\n\n        `plot_spectra` performs a dual split plot. In the upper part, the residuum is\n        plotted together with a linear regression line. This means, if the linear\n        regression is a flat line, the fit and spectra are identically.\n        In the lower part, the fit is plotted together with the original spectra. Also\n        the single contributions of the fit are drawn.\n\n        !!! info \"About Plotting\"\n\n            `plot_spectra` is a wrapper around the `seaborn.lineplot` and\n            `seaborn.regplot` function. Furthermore, the `MultiCursor` widget is used\n            to create an interactive plot, for picking the energy and intensity of the\n            spectrum. the `MultiCursor` widget is a part of the `matplotlib` library\n            and can be used for both, the residual plot and the spectrum plot.\n\n\n        ![_](../../images/image001.png)\n        &gt; The upper part shows the residuum and the linear regression line. The lower\n        &gt; part shows the fit and the single contributions of the fit.\n        \"\"\"\n        fig, (ax1, ax2) = plt.subplots(\n            2, sharex=True, figsize=(9, 9), gridspec_kw={\"height_ratios\": [1, 2]}\n        )\n        ax1 = sns.regplot(\n            x=ColumnNamesAPI().energy,\n            y=ColumnNamesAPI().residual,\n            data=self.df,\n            ax=ax1,\n            color=color[5],\n        )\n        ax2 = sns.lineplot(\n            x=ColumnNamesAPI().energy,\n            y=ColumnNamesAPI().intensity,\n            data=self.df,\n            ax=ax2,\n            color=color[1],\n        )\n        ax2 = sns.lineplot(\n            x=ColumnNamesAPI().energy,\n            y=ColumnNamesAPI().fit,\n            data=self.df,\n            ax=ax2,\n            ls=\"--\",\n            color=color[0],\n        )\n        peaks = [\n            peak\n            for peak in self.df.columns\n            if peak not in list(ColumnNamesAPI().model_dump().values())\n        ]\n        color_peaks = sns.color_palette(\"rocket\", len(peaks))\n        for i, peak in enumerate(peaks):\n            ax2 = sns.lineplot(\n                x=ColumnNamesAPI().energy,\n                y=peak,\n                data=self.df,\n                ax=ax2,\n                ls=\":\",\n                color=color_peaks[i],\n            )\n\n        _ = MultiCursor(\n            fig.canvas, (ax1, ax2), color=color[4], ls=\"--\", lw=1, horizOn=True\n        )\n</code></pre>"},{"location":"api/plotting_api/#spectrafit.plotting.PlotSpectra.__call__","title":"<code>__call__()</code>","text":"<p>Plot the data and the fit.</p> Source code in <code>spectrafit/plotting.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Plot the data and the fit.\"\"\"\n    if self.args is not None:\n        if not self.args[\"noplot\"]:\n            if self.args[\"global_\"]:\n                self.plot_global_spectra()\n            else:\n                self.plot_local_spectra()\n        plt.show()\n</code></pre>"},{"location":"api/plotting_api/#spectrafit.plotting.PlotSpectra.__init__","title":"<code>__init__(df, args=None)</code>","text":"<p>Initialize the PlotSpectra class.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary  with additional information beyond the command line arguments. Only  needed for global fitting. Defaults to None.</p> <code>None</code> Source code in <code>spectrafit/plotting.py</code> Python<pre><code>def __init__(self, df: pd.DataFrame, args: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Initialize the PlotSpectra class.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str, Any], optional): The input file arguments as a dictionary\n             with additional information beyond the command line arguments. Only\n             needed for global fitting. Defaults to None.\n    \"\"\"\n    self.df = df\n    self.args = args\n</code></pre>"},{"location":"api/plotting_api/#spectrafit.plotting.PlotSpectra.plot_global_spectra","title":"<code>plot_global_spectra()</code>","text":"<p>Plot spectra for global fitting.</p> <p>Plotting of the global spectra</p> <p>The plotting routine for global fitting is similar to the local plotting routine, but the spectra are plotted in a grid spectra plot. The first row of the grid plot contains the residuals of each single fit, the second row the best fit of the model with single peak contributions.</p> Source code in <code>spectrafit/plotting.py</code> Python<pre><code>def plot_global_spectra(self) -&gt; None:\n    \"\"\"Plot spectra for global fitting.\n\n    !!! info \"Plotting of the global spectra\"\n\n        The plotting routine for global fitting is similar to the local plotting\n        routine, but the spectra are plotted in a grid spectra plot. The first\n        row of the grid plot contains the residuals of each single fit, the\n        second row the best fit of the model with single peak contributions.\n    \"\"\"\n    n_spec: int = len(list(self.args[\"data_statistic\"])) - 1 if self.args else 1\n    _, axs = plt.subplots(\n        nrows=2,\n        ncols=n_spec,\n        sharex=True,\n        figsize=(9, 9),\n        gridspec_kw={\"height_ratios\": [1, 2]},\n    )\n\n    for i in range(n_spec):\n        axs[0, i].set_title(f\"Spectrum #{i + 1}\")\n        sns.regplot(\n            x=ColumnNamesAPI().energy,\n            y=f\"{ColumnNamesAPI().residual}_{i + 1}\",\n            data=self.df,\n            ax=axs[0, i],\n            color=color[5],\n        )\n        axs[1, i] = sns.lineplot(\n            x=ColumnNamesAPI().energy,\n            y=f\"{ColumnNamesAPI().intensity}_{i + 1}\",\n            data=self.df,\n            ax=axs[1, i],\n            color=color[1],\n        )\n        axs[1, i] = sns.lineplot(\n            x=ColumnNamesAPI().energy,\n            y=f\"fit_{i + 1}\",\n            data=self.df,\n            ax=axs[1, i],\n            ls=\"--\",\n            color=color[0],\n        )\n        peaks = [\n            peak\n            for peak in self.df.columns\n            if not peak.startswith(tuple(ColumnNamesAPI().model_dump().values()))\n            and peak.endswith(f\"_{i + 1}\")\n        ]\n        color_peaks = sns.color_palette(\"rocket\", len(peaks))\n        for j, peak in enumerate(peaks):\n            axs[1, i] = sns.lineplot(\n                x=ColumnNamesAPI().energy,\n                y=peak,\n                data=self.df,\n                ax=axs[1, i],\n                ls=\":\",\n                color=color_peaks[j],\n            )\n\n    plt.tight_layout()\n</code></pre>"},{"location":"api/plotting_api/#spectrafit.plotting.PlotSpectra.plot_local_spectra","title":"<code>plot_local_spectra()</code>","text":"<p>Plot spectra for local fitting.</p> <p><code>plot_spectra</code> performs a dual split plot. In the upper part, the residuum is plotted together with a linear regression line. This means, if the linear regression is a flat line, the fit and spectra are identically. In the lower part, the fit is plotted together with the original spectra. Also the single contributions of the fit are drawn.</p> <p>About Plotting</p> <p><code>plot_spectra</code> is a wrapper around the <code>seaborn.lineplot</code> and <code>seaborn.regplot</code> function. Furthermore, the <code>MultiCursor</code> widget is used to create an interactive plot, for picking the energy and intensity of the spectrum. the <code>MultiCursor</code> widget is a part of the <code>matplotlib</code> library and can be used for both, the residual plot and the spectrum plot.</p> <p></p> <p>The upper part shows the residuum and the linear regression line. The lower part shows the fit and the single contributions of the fit.</p> Source code in <code>spectrafit/plotting.py</code> Python<pre><code>def plot_local_spectra(self) -&gt; None:\n    \"\"\"Plot spectra for local fitting.\n\n    `plot_spectra` performs a dual split plot. In the upper part, the residuum is\n    plotted together with a linear regression line. This means, if the linear\n    regression is a flat line, the fit and spectra are identically.\n    In the lower part, the fit is plotted together with the original spectra. Also\n    the single contributions of the fit are drawn.\n\n    !!! info \"About Plotting\"\n\n        `plot_spectra` is a wrapper around the `seaborn.lineplot` and\n        `seaborn.regplot` function. Furthermore, the `MultiCursor` widget is used\n        to create an interactive plot, for picking the energy and intensity of the\n        spectrum. the `MultiCursor` widget is a part of the `matplotlib` library\n        and can be used for both, the residual plot and the spectrum plot.\n\n\n    ![_](../../images/image001.png)\n    &gt; The upper part shows the residuum and the linear regression line. The lower\n    &gt; part shows the fit and the single contributions of the fit.\n    \"\"\"\n    fig, (ax1, ax2) = plt.subplots(\n        2, sharex=True, figsize=(9, 9), gridspec_kw={\"height_ratios\": [1, 2]}\n    )\n    ax1 = sns.regplot(\n        x=ColumnNamesAPI().energy,\n        y=ColumnNamesAPI().residual,\n        data=self.df,\n        ax=ax1,\n        color=color[5],\n    )\n    ax2 = sns.lineplot(\n        x=ColumnNamesAPI().energy,\n        y=ColumnNamesAPI().intensity,\n        data=self.df,\n        ax=ax2,\n        color=color[1],\n    )\n    ax2 = sns.lineplot(\n        x=ColumnNamesAPI().energy,\n        y=ColumnNamesAPI().fit,\n        data=self.df,\n        ax=ax2,\n        ls=\"--\",\n        color=color[0],\n    )\n    peaks = [\n        peak\n        for peak in self.df.columns\n        if peak not in list(ColumnNamesAPI().model_dump().values())\n    ]\n    color_peaks = sns.color_palette(\"rocket\", len(peaks))\n    for i, peak in enumerate(peaks):\n        ax2 = sns.lineplot(\n            x=ColumnNamesAPI().energy,\n            y=peak,\n            data=self.df,\n            ax=ax2,\n            ls=\":\",\n            color=color_peaks[i],\n        )\n\n    _ = MultiCursor(\n        fig.canvas, (ax1, ax2), color=color[4], ls=\"--\", lw=1, horizOn=True\n    )\n</code></pre>"},{"location":"api/reporting_api/","title":"Reporting","text":"<p>Fit-Results as Report.</p>"},{"location":"api/reporting_api/#spectrafit.report.CIReport","title":"<code>CIReport</code>","text":"<p>Generate a report of confidence intervals.</p> <p>About the Confidence Interval Report</p> <p>This class is responsible for generating a report that displays confidence intervals for a given set of parameters. The report can be generated as a table.</p> <p>Please also check the original implementation of the <code>lmfit</code> package: lmfit.github.io/lmfit-py/confidence.html#lmfit.ci_report</p> <p>Parameters:</p> Name Type Description Default <code>ci</code> <code>Parameters</code> <p>The confidence intervals for the parameters.</p> required <code>with_offset</code> <code>bool</code> <p>Whether to include the offset in the report. Defaults to True.</p> <code>True</code> <code>ndigits</code> <code>int</code> <p>The number of digits to display in the report. Defaults to 5.</p> <code>5</code> Source code in <code>spectrafit/report.py</code> Python<pre><code>class CIReport:\n    \"\"\"Generate a report of confidence intervals.\n\n    !!! info \"About the Confidence Interval Report\"\n\n        This class is responsible for generating a report that displays confidence\n        intervals for a given set of parameters. The report can be generated as a\n        table.\n\n        Please also check the original implementation of the `lmfit` package:\n        https://lmfit.github.io/lmfit-py/confidence.html#lmfit.ci_report\n\n    Args:\n        ci (Parameters): The confidence intervals for the parameters.\n        with_offset (bool, optional): Whether to include the offset in the report.\n            Defaults to True.\n        ndigits (int, optional): The number of digits to display in the report.\n            Defaults to 5.\n    \"\"\"\n\n    def __init__(\n        self,\n        ci: Dict[str, List[Tuple[float, float]]],\n        with_offset: bool = True,\n        ndigits: int = 5,\n        best_tol: float = 1.0e-2,\n    ):\n        \"\"\"Initialize the Report object.\n\n        Args:\n            ci (Dict[str, List[Tuple[float, float]]]): The confidence intervals for\n                the parameters.\n            with_offset (bool): Whether to include an offset in the report.\n                Defaults to True.\n            ndigits (int): The number of digits to round the report values to.\n                Defaults to 5.\n            best_tol (float): The tolerance for the best value.\n                Defaults to 1.0e-2.\n        \"\"\"\n        self.ci = ci\n        self.with_offset = with_offset\n        self.ndigits = ndigits\n        self.best_tol = best_tol\n\n        self.df = pd.DataFrame()\n\n    def convp(self, x: Tuple[float, float], bound_type: str) -&gt; str:\n        \"\"\"Convert the confidence interval to a string.\n\n        Args:\n            x (Tuple[float, float]): The confidence interval.\n            bound_type (str): The type of the bound.\n\n        Returns:\n            str: The confidence interval as a string.\n        \"\"\"\n        return (\n            \"BEST\" if abs(x[0]) &lt; self.best_tol else f\"{x[0] * 100:.2f}% - {bound_type}\"\n        )\n\n    def calculate_offset(self, row: List[Tuple[float, float]]) -&gt; float:\n        \"\"\"Calculate the offset for a row.\n\n        Args:\n            row (List[Tuple[float, float]]): The row to calculate the offset for.\n\n        Returns:\n            float: The offset for the row.\n        \"\"\"\n        offset = 0.0\n        if self.with_offset:\n            for cval, val in row:\n                if abs(cval) &lt; (self.best_tol or 0.0):\n                    offset = val\n        return offset\n\n    def create_report_row(\n        self, name: str, row: List[Tuple[float, float]], offset: float\n    ) -&gt; None:\n        \"\"\"Create a row for the report.\n\n        Args:\n            name (str): The name of the row.\n            row (List[Tuple[float, float]]): The row to create the report for.\n            offset (float): The offset for the row.\n        \"\"\"\n        for i, (cval, val) in enumerate(row):\n            sval = val if cval &lt; self.best_tol else val - offset\n            bound_type = \"LOWER\" if i &lt; len(row) / 2 else \"UPPER\"\n            self.report.setdefault(self.convp((cval, val), bound_type), {})[name] = sval\n\n    def __call__(self) -&gt; None:\n        \"\"\"Generate the Confidence report as a table.\"\"\"\n        self.report: Dict[str, Dict[str, float]] = {}\n        for name, row in self.ci.items():\n            offset = self.calculate_offset(row)\n            self.create_report_row(name, row, offset)\n\n        self.tabulate(df=pd.DataFrame(self.report))\n\n    def tabulate(self, df: pd.DataFrame) -&gt; None:\n        \"\"\"Print the Confidence report as a table.\"\"\"\n        PrintingResults.print_tabulate_df(df=df, floatfmt=f\".{self.ndigits}f\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.__call__","title":"<code>__call__()</code>","text":"<p>Generate the Confidence report as a table.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Generate the Confidence report as a table.\"\"\"\n    self.report: Dict[str, Dict[str, float]] = {}\n    for name, row in self.ci.items():\n        offset = self.calculate_offset(row)\n        self.create_report_row(name, row, offset)\n\n    self.tabulate(df=pd.DataFrame(self.report))\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.__init__","title":"<code>__init__(ci, with_offset=True, ndigits=5, best_tol=0.01)</code>","text":"<p>Initialize the Report object.</p> <p>Parameters:</p> Name Type Description Default <code>ci</code> <code>Dict[str, List[Tuple[float, float]]]</code> <p>The confidence intervals for the parameters.</p> required <code>with_offset</code> <code>bool</code> <p>Whether to include an offset in the report. Defaults to True.</p> <code>True</code> <code>ndigits</code> <code>int</code> <p>The number of digits to round the report values to. Defaults to 5.</p> <code>5</code> <code>best_tol</code> <code>float</code> <p>The tolerance for the best value. Defaults to 1.0e-2.</p> <code>0.01</code> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __init__(\n    self,\n    ci: Dict[str, List[Tuple[float, float]]],\n    with_offset: bool = True,\n    ndigits: int = 5,\n    best_tol: float = 1.0e-2,\n):\n    \"\"\"Initialize the Report object.\n\n    Args:\n        ci (Dict[str, List[Tuple[float, float]]]): The confidence intervals for\n            the parameters.\n        with_offset (bool): Whether to include an offset in the report.\n            Defaults to True.\n        ndigits (int): The number of digits to round the report values to.\n            Defaults to 5.\n        best_tol (float): The tolerance for the best value.\n            Defaults to 1.0e-2.\n    \"\"\"\n    self.ci = ci\n    self.with_offset = with_offset\n    self.ndigits = ndigits\n    self.best_tol = best_tol\n\n    self.df = pd.DataFrame()\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.calculate_offset","title":"<code>calculate_offset(row)</code>","text":"<p>Calculate the offset for a row.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>List[Tuple[float, float]]</code> <p>The row to calculate the offset for.</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>The offset for the row.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def calculate_offset(self, row: List[Tuple[float, float]]) -&gt; float:\n    \"\"\"Calculate the offset for a row.\n\n    Args:\n        row (List[Tuple[float, float]]): The row to calculate the offset for.\n\n    Returns:\n        float: The offset for the row.\n    \"\"\"\n    offset = 0.0\n    if self.with_offset:\n        for cval, val in row:\n            if abs(cval) &lt; (self.best_tol or 0.0):\n                offset = val\n    return offset\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.convp","title":"<code>convp(x, bound_type)</code>","text":"<p>Convert the confidence interval to a string.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Tuple[float, float]</code> <p>The confidence interval.</p> required <code>bound_type</code> <code>str</code> <p>The type of the bound.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The confidence interval as a string.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def convp(self, x: Tuple[float, float], bound_type: str) -&gt; str:\n    \"\"\"Convert the confidence interval to a string.\n\n    Args:\n        x (Tuple[float, float]): The confidence interval.\n        bound_type (str): The type of the bound.\n\n    Returns:\n        str: The confidence interval as a string.\n    \"\"\"\n    return (\n        \"BEST\" if abs(x[0]) &lt; self.best_tol else f\"{x[0] * 100:.2f}% - {bound_type}\"\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.create_report_row","title":"<code>create_report_row(name, row, offset)</code>","text":"<p>Create a row for the report.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the row.</p> required <code>row</code> <code>List[Tuple[float, float]]</code> <p>The row to create the report for.</p> required <code>offset</code> <code>float</code> <p>The offset for the row.</p> required Source code in <code>spectrafit/report.py</code> Python<pre><code>def create_report_row(\n    self, name: str, row: List[Tuple[float, float]], offset: float\n) -&gt; None:\n    \"\"\"Create a row for the report.\n\n    Args:\n        name (str): The name of the row.\n        row (List[Tuple[float, float]]): The row to create the report for.\n        offset (float): The offset for the row.\n    \"\"\"\n    for i, (cval, val) in enumerate(row):\n        sval = val if cval &lt; self.best_tol else val - offset\n        bound_type = \"LOWER\" if i &lt; len(row) / 2 else \"UPPER\"\n        self.report.setdefault(self.convp((cval, val), bound_type), {})[name] = sval\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.CIReport.tabulate","title":"<code>tabulate(df)</code>","text":"<p>Print the Confidence report as a table.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def tabulate(self, df: pd.DataFrame) -&gt; None:\n    \"\"\"Print the Confidence report as a table.\"\"\"\n    PrintingResults.print_tabulate_df(df=df, floatfmt=f\".{self.ndigits}f\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport","title":"<code>FitReport</code>","text":"<p>Generate fit reports based on the result of the fitting process.</p> <p>Parameters:</p> Name Type Description Default <code>inpars</code> <code>Parameters</code> <p>The input parameters used for fitting.</p> required <code>sort_pars</code> <code>bool</code> <p>Whether to sort the parameters. Defaults to True.</p> <code>True</code> <code>show_correl</code> <code>bool</code> <p>Whether to show correlations of components. Defaults to True.</p> <code>True</code> <code>min_correl</code> <code>float</code> <p>The minimum correlation value to consider. Defaults to 0.0.</p> <code>0.0</code> <code>modelpars</code> <code>dict</code> <p>The model parameters. Defaults to None.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>inpars</code> <code>Parameters</code> <p>The input parameters used for fitting.</p> <code>sort_pars</code> <code>bool</code> <p>Whether to sort the parameters.</p> <code>show_correl</code> <code>bool</code> <p>Whether to show correlations of components.</p> <code>min_correl</code> <code>float</code> <p>The minimum correlation value to consider.</p> <code>modelpars</code> <code>dict</code> <p>The model parameters.</p> <code>result</code> <code>FitResult</code> <p>The result of the fitting process.</p> <code>params</code> <code>Parameters</code> <p>The parameters used for fitting.</p> <code>parnames</code> <code>list</code> <p>The names of the parameters.</p> <p>Methods:</p> Name Description <code>generate_fit_statistics</code> <p>Generate fit statistics based on the result of the fitting process.</p> <code>generate_variables</code> <p>Generate a DataFrame containing information about the variables.</p> <code>generate_correlations</code> <p>Generate a correlation matrix for the varying parameters.</p> <code>generate_report</code> <p>Generate a report containing fit statistics, correlations, and variables.</p> <code>__call__</code> <p>Generate and print a report based on the data.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>class FitReport:\n    \"\"\"Generate fit reports based on the result of the fitting process.\n\n    Args:\n        inpars (Parameters): The input parameters used for fitting.\n        sort_pars (bool, optional): Whether to sort the parameters.\n            Defaults to True.\n        show_correl (bool, optional): Whether to show correlations of components.\n            Defaults to True.\n        min_correl (float, optional): The minimum correlation value to consider.\n            Defaults to 0.0.\n        modelpars (dict, optional): The model parameters. Defaults to None.\n\n    Attributes:\n        inpars (Parameters): The input parameters used for fitting.\n        sort_pars (bool): Whether to sort the parameters.\n        show_correl (bool): Whether to show correlations of components.\n        min_correl (float): The minimum correlation value to consider.\n        modelpars (dict): The model parameters.\n        result (FitResult): The result of the fitting process.\n        params (Parameters): The parameters used for fitting.\n        parnames (list): The names of the parameters.\n\n    Methods:\n        generate_fit_statistics(): Generate fit statistics based on the result\n            of the fitting process.\n        generate_variables(): Generate a DataFrame containing information\n            about the variables.\n        generate_correlations(): Generate a correlation matrix for the\n            varying parameters.\n        generate_report(): Generate a report containing fit statistics,\n            correlations, and variables.\n        __call__(): Generate and print a report based on the data.\n    \"\"\"\n\n    def __init__(\n        self,\n        inpars: Union[Parameters, Callable[..., Any]],\n        sort_pars: bool = True,\n        show_correl: bool = True,\n        min_correl: float = 0.0,\n        modelpars: Optional[Callable[..., Any]] = None,\n    ) -&gt; None:\n        \"\"\"Initialize the Report object.\n\n        Args:\n            inpars (Parameters or object): The input parameters or\n                object.\n            sort_pars (bool, optional): Whether to sort the parameters.\n                Defaults to True.\n            show_correl (bool, optional): Whether to show correlations.\n                Defaults to True.\n            min_correl (float, optional): The minimum correlation value.\n                Defaults to 0.0.\n            modelpars (object, optional): The model parameters.\n                Defaults to None.\n        \"\"\"\n        self.inpars = inpars\n        self.sort_pars = sort_pars\n        self.show_correl = show_correl\n        self.min_correl = min_correl\n        self.modelpars = modelpars\n\n        if isinstance(self.inpars, Parameters):\n            self.result, self.params = None, self.inpars\n        if hasattr(self.inpars, \"params\"):\n            self.result = self.inpars\n            self.params = self.inpars.params\n\n        if self.sort_pars:\n            key = self.sort_pars if callable(self.sort_pars) else alphanumeric_sort\n            self.parnames = sorted(self.params, key=key)\n        else:\n            self.parnames = list(self.params.keys())\n\n    def generate_fit_statistics(self) -&gt; Optional[pd.DataFrame]:\n        \"\"\"Generate fit statistics based on the result of the fitting process.\n\n        Returns:\n            Optional[pd.DataFrame]: A pandas DataFrame containing the\n            fit statistics, including:\n                - fitting method\n                - function evals\n                - data points\n                - variables\n                - chi-square\n                - reduced chi-square\n                - Akaike info crit\n                - Bayesian info crit\n                - R-squared (if available)\n        \"\"\"\n        if self.result is not None:\n            return pd.DataFrame(\n                {\n                    \"fitting method\": [self.result.method],  # type: ignore\n                    \"function evals\": [getfloat_attr(self.result, \"nfev\")],\n                    \"data points\": [getfloat_attr(self.result, \"ndata\")],\n                    \"variables\": [getfloat_attr(self.result, \"nvarys\")],\n                    \"chi-square\": [getfloat_attr(self.result, \"chisqr\")],\n                    \"reduced chi-square\": [getfloat_attr(self.result, \"redchi\")],\n                    \"Akaike info crit\": [getfloat_attr(self.result, \"aic\")],\n                    \"Bayesian info crit\": [getfloat_attr(self.result, \"bic\")],\n                    \"R-squared\": [\n                        (\n                            getfloat_attr(self.result, \"rsquared\")\n                            if hasattr(self.result, \"rsquared\")\n                            else None\n                        )\n                    ],\n                }\n            )\n        return None\n\n    def generate_variables(self) -&gt; pd.DataFrame:\n        \"\"\"Generate a pandas DataFrame containing information about the variables.\n\n        Returns:\n            pd.DataFrame: A DataFrame with the following columns:\n                - name: The name of the variable\n                - value: The current value of the variable\n                - stderr absolute: The absolute standard error of the variable\n                - stderr percent: The percentage standard error of the variable\n                - expr: The expression defining the variable (if any)\n                - init: The initial value of the variable\n                - model_value: The value of the variable in the model (if applicable)\n                - fixed: A boolean indicating whether the variable is fixed or not\n        \"\"\"\n        variables = []\n        namelen = max(len(n) for n in self.parnames)\n        for name in self.parnames:\n            par = self.params[name]\n            space = \" \" * (namelen - len(name))\n            nout = f\"{name}:{space}\"\n            inval = None\n            if par.init_value is not None:\n                inval = par.init_value\n            model_val = None\n            if self.modelpars is not None and name in self.modelpars:  # type: ignore\n                model_val = self.modelpars[name].value  # type: ignore\n            try:\n                sval = gformat(par.value)\n            except (TypeError, ValueError):  # pragma: no cover\n                sval = None\n            serr = None\n            spercent = None\n            if par.stderr is not None:\n                serr = gformat(par.stderr)\n                try:\n                    spercent = abs(par.stderr / par.value) * 100\n                except ZeroDivisionError:  # pragma: no cover\n                    spercent = None\n\n            variable = {\n                \"name\": nout,\n                \"value\": sval,\n                \"stderr absolute\": serr,\n                \"stderr percent\": spercent,\n                \"expr\": par.expr,\n                \"init\": inval,\n                \"model_value\": model_val,\n                \"fixed\": par.vary,\n            }\n\n            variables.append(variable)\n        return pd.DataFrame(variables)\n\n    def generate_correlations(self) -&gt; pd.DataFrame:\n        \"\"\"Generate a correlation matrix for the varying parameters.\n\n        Returns:\n            pd.DataFrame: The correlation matrix with the\n                varying parameters as rows and columns.\n        \"\"\"\n        correl_matrix = pd.DataFrame(index=self.parnames, columns=self.parnames)\n        for i, name in enumerate(self.parnames):\n            par = self.params[name]\n            if not par.vary:\n                continue\n            if hasattr(par, \"correl\") and par.correl is not None:\n                for name2 in self.parnames[i + 1 :]:\n                    if (\n                        name != name2\n                        and name2 in par.correl\n                        and abs(par.correl[name2]) &gt; self.min_correl\n                    ):\n                        correl_matrix.loc[name, name2] = par.correl[name2]\n                        correl_matrix.loc[name2, name] = par.correl[\n                            name2\n                        ]  # mirror the value\n        correl_matrix.fillna(1, inplace=True)  # fill diagonal with 1s\n        return correl_matrix\n\n    def generate_report(self) -&gt; Dict[str, pd.DataFrame]:\n        \"\"\"Generate a report.\n\n        !!! info \"About the Report\"\n\n            This report contains fit statistics, correlations of\n            components (if enabled), and variables and values.\n\n        Returns:\n            report (Dict[str, pd.DataFrame]): A dictionary containing\n                the generated report.\n        \"\"\"\n        report = {}\n        report[\"Fit Statistics\"] = self.generate_fit_statistics()\n        report[\"Variables and Values\"] = self.generate_variables()\n        if self.show_correl:\n            report[\"Correlations of Components\"] = self.generate_correlations()\n        return report\n\n    def __call__(self) -&gt; None:\n        \"\"\"Generate and print a report based on the data.\n\n        This method generates a report using the `generate_report` method and\n            prints it to the console.\n        The report is organized into sections, where each section is\n            represented by a DataFrame.\n        The report is printed using the `tabulate` function from the\n            `tabulate` library.\n        The table format is chosen based on the platform, using \"fancy_grid\"\n            for non-Windows platforms and \"grid\" for Windows.\n        The floating point numbers in the table are formatted with three\n            decimal places.\n        \"\"\"\n        report = self.generate_report()\n        for section, df in report.items():\n            print(f\"\\n{section}\\n\")\n            PrintingResults.print_tabulate_df(df=df)\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.__call__","title":"<code>__call__()</code>","text":"<p>Generate and print a report based on the data.</p> <p>This method generates a report using the <code>generate_report</code> method and     prints it to the console. The report is organized into sections, where each section is     represented by a DataFrame. The report is printed using the <code>tabulate</code> function from the     <code>tabulate</code> library. The table format is chosen based on the platform, using \"fancy_grid\"     for non-Windows platforms and \"grid\" for Windows. The floating point numbers in the table are formatted with three     decimal places.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Generate and print a report based on the data.\n\n    This method generates a report using the `generate_report` method and\n        prints it to the console.\n    The report is organized into sections, where each section is\n        represented by a DataFrame.\n    The report is printed using the `tabulate` function from the\n        `tabulate` library.\n    The table format is chosen based on the platform, using \"fancy_grid\"\n        for non-Windows platforms and \"grid\" for Windows.\n    The floating point numbers in the table are formatted with three\n        decimal places.\n    \"\"\"\n    report = self.generate_report()\n    for section, df in report.items():\n        print(f\"\\n{section}\\n\")\n        PrintingResults.print_tabulate_df(df=df)\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.__init__","title":"<code>__init__(inpars, sort_pars=True, show_correl=True, min_correl=0.0, modelpars=None)</code>","text":"<p>Initialize the Report object.</p> <p>Parameters:</p> Name Type Description Default <code>inpars</code> <code>Parameters or object</code> <p>The input parameters or object.</p> required <code>sort_pars</code> <code>bool</code> <p>Whether to sort the parameters. Defaults to True.</p> <code>True</code> <code>show_correl</code> <code>bool</code> <p>Whether to show correlations. Defaults to True.</p> <code>True</code> <code>min_correl</code> <code>float</code> <p>The minimum correlation value. Defaults to 0.0.</p> <code>0.0</code> <code>modelpars</code> <code>object</code> <p>The model parameters. Defaults to None.</p> <code>None</code> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __init__(\n    self,\n    inpars: Union[Parameters, Callable[..., Any]],\n    sort_pars: bool = True,\n    show_correl: bool = True,\n    min_correl: float = 0.0,\n    modelpars: Optional[Callable[..., Any]] = None,\n) -&gt; None:\n    \"\"\"Initialize the Report object.\n\n    Args:\n        inpars (Parameters or object): The input parameters or\n            object.\n        sort_pars (bool, optional): Whether to sort the parameters.\n            Defaults to True.\n        show_correl (bool, optional): Whether to show correlations.\n            Defaults to True.\n        min_correl (float, optional): The minimum correlation value.\n            Defaults to 0.0.\n        modelpars (object, optional): The model parameters.\n            Defaults to None.\n    \"\"\"\n    self.inpars = inpars\n    self.sort_pars = sort_pars\n    self.show_correl = show_correl\n    self.min_correl = min_correl\n    self.modelpars = modelpars\n\n    if isinstance(self.inpars, Parameters):\n        self.result, self.params = None, self.inpars\n    if hasattr(self.inpars, \"params\"):\n        self.result = self.inpars\n        self.params = self.inpars.params\n\n    if self.sort_pars:\n        key = self.sort_pars if callable(self.sort_pars) else alphanumeric_sort\n        self.parnames = sorted(self.params, key=key)\n    else:\n        self.parnames = list(self.params.keys())\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.generate_correlations","title":"<code>generate_correlations()</code>","text":"<p>Generate a correlation matrix for the varying parameters.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: The correlation matrix with the varying parameters as rows and columns.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def generate_correlations(self) -&gt; pd.DataFrame:\n    \"\"\"Generate a correlation matrix for the varying parameters.\n\n    Returns:\n        pd.DataFrame: The correlation matrix with the\n            varying parameters as rows and columns.\n    \"\"\"\n    correl_matrix = pd.DataFrame(index=self.parnames, columns=self.parnames)\n    for i, name in enumerate(self.parnames):\n        par = self.params[name]\n        if not par.vary:\n            continue\n        if hasattr(par, \"correl\") and par.correl is not None:\n            for name2 in self.parnames[i + 1 :]:\n                if (\n                    name != name2\n                    and name2 in par.correl\n                    and abs(par.correl[name2]) &gt; self.min_correl\n                ):\n                    correl_matrix.loc[name, name2] = par.correl[name2]\n                    correl_matrix.loc[name2, name] = par.correl[\n                        name2\n                    ]  # mirror the value\n    correl_matrix.fillna(1, inplace=True)  # fill diagonal with 1s\n    return correl_matrix\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.generate_fit_statistics","title":"<code>generate_fit_statistics()</code>","text":"<p>Generate fit statistics based on the result of the fitting process.</p> <p>Returns:</p> Type Description <code>Optional[DataFrame]</code> <p>Optional[pd.DataFrame]: A pandas DataFrame containing the</p> <code>Optional[DataFrame]</code> <p>fit statistics, including: - fitting method - function evals - data points - variables - chi-square - reduced chi-square - Akaike info crit - Bayesian info crit - R-squared (if available)</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def generate_fit_statistics(self) -&gt; Optional[pd.DataFrame]:\n    \"\"\"Generate fit statistics based on the result of the fitting process.\n\n    Returns:\n        Optional[pd.DataFrame]: A pandas DataFrame containing the\n        fit statistics, including:\n            - fitting method\n            - function evals\n            - data points\n            - variables\n            - chi-square\n            - reduced chi-square\n            - Akaike info crit\n            - Bayesian info crit\n            - R-squared (if available)\n    \"\"\"\n    if self.result is not None:\n        return pd.DataFrame(\n            {\n                \"fitting method\": [self.result.method],  # type: ignore\n                \"function evals\": [getfloat_attr(self.result, \"nfev\")],\n                \"data points\": [getfloat_attr(self.result, \"ndata\")],\n                \"variables\": [getfloat_attr(self.result, \"nvarys\")],\n                \"chi-square\": [getfloat_attr(self.result, \"chisqr\")],\n                \"reduced chi-square\": [getfloat_attr(self.result, \"redchi\")],\n                \"Akaike info crit\": [getfloat_attr(self.result, \"aic\")],\n                \"Bayesian info crit\": [getfloat_attr(self.result, \"bic\")],\n                \"R-squared\": [\n                    (\n                        getfloat_attr(self.result, \"rsquared\")\n                        if hasattr(self.result, \"rsquared\")\n                        else None\n                    )\n                ],\n            }\n        )\n    return None\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.generate_report","title":"<code>generate_report()</code>","text":"<p>Generate a report.</p> <p>About the Report</p> <p>This report contains fit statistics, correlations of components (if enabled), and variables and values.</p> <p>Returns:</p> Name Type Description <code>report</code> <code>Dict[str, DataFrame]</code> <p>A dictionary containing the generated report.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def generate_report(self) -&gt; Dict[str, pd.DataFrame]:\n    \"\"\"Generate a report.\n\n    !!! info \"About the Report\"\n\n        This report contains fit statistics, correlations of\n        components (if enabled), and variables and values.\n\n    Returns:\n        report (Dict[str, pd.DataFrame]): A dictionary containing\n            the generated report.\n    \"\"\"\n    report = {}\n    report[\"Fit Statistics\"] = self.generate_fit_statistics()\n    report[\"Variables and Values\"] = self.generate_variables()\n    if self.show_correl:\n        report[\"Correlations of Components\"] = self.generate_correlations()\n    return report\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.FitReport.generate_variables","title":"<code>generate_variables()</code>","text":"<p>Generate a pandas DataFrame containing information about the variables.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: A DataFrame with the following columns: - name: The name of the variable - value: The current value of the variable - stderr absolute: The absolute standard error of the variable - stderr percent: The percentage standard error of the variable - expr: The expression defining the variable (if any) - init: The initial value of the variable - model_value: The value of the variable in the model (if applicable) - fixed: A boolean indicating whether the variable is fixed or not</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def generate_variables(self) -&gt; pd.DataFrame:\n    \"\"\"Generate a pandas DataFrame containing information about the variables.\n\n    Returns:\n        pd.DataFrame: A DataFrame with the following columns:\n            - name: The name of the variable\n            - value: The current value of the variable\n            - stderr absolute: The absolute standard error of the variable\n            - stderr percent: The percentage standard error of the variable\n            - expr: The expression defining the variable (if any)\n            - init: The initial value of the variable\n            - model_value: The value of the variable in the model (if applicable)\n            - fixed: A boolean indicating whether the variable is fixed or not\n    \"\"\"\n    variables = []\n    namelen = max(len(n) for n in self.parnames)\n    for name in self.parnames:\n        par = self.params[name]\n        space = \" \" * (namelen - len(name))\n        nout = f\"{name}:{space}\"\n        inval = None\n        if par.init_value is not None:\n            inval = par.init_value\n        model_val = None\n        if self.modelpars is not None and name in self.modelpars:  # type: ignore\n            model_val = self.modelpars[name].value  # type: ignore\n        try:\n            sval = gformat(par.value)\n        except (TypeError, ValueError):  # pragma: no cover\n            sval = None\n        serr = None\n        spercent = None\n        if par.stderr is not None:\n            serr = gformat(par.stderr)\n            try:\n                spercent = abs(par.stderr / par.value) * 100\n            except ZeroDivisionError:  # pragma: no cover\n                spercent = None\n\n        variable = {\n            \"name\": nout,\n            \"value\": sval,\n            \"stderr absolute\": serr,\n            \"stderr percent\": spercent,\n            \"expr\": par.expr,\n            \"init\": inval,\n            \"model_value\": model_val,\n            \"fixed\": par.vary,\n        }\n\n        variables.append(variable)\n    return pd.DataFrame(variables)\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults","title":"<code>PrintingResults</code>","text":"<p>Print the results of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>class PrintingResults:\n    \"\"\"Print the results of the fitting process.\"\"\"\n\n    def __init__(\n        self,\n        args: Dict[str, Any],\n        result: Any,\n        minimizer: Minimizer,\n    ) -&gt; None:\n        \"\"\"Initialize the PrintingResults class.\n\n        Args:\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                additional information beyond the command line arguments.\n            result (Any): The lmfit `results` as a kind of result based class.\n            minimizer (Minimizer): The lmfit `Minimizer`-class as a general\n                minimizer for curve fitting and optimization.\n        \"\"\"\n        self.args = args\n        self.result = result\n        self.minimizer = minimizer\n        self.correlation = pd.DataFrame.from_dict(args[\"linear_correlation\"])\n\n    def __call__(self) -&gt; None:\n        \"\"\"Print the results of the fitting process.\"\"\"\n        if self.args[\"verbose\"] == 1:\n            self.printing_regular_mode()\n        elif self.args[\"verbose\"] == 2:\n            self.printing_verbose_mode()\n\n    @staticmethod\n    def print_tabulate(args: Dict[str, Any]) -&gt; None:\n        \"\"\"Print the results of the fitting process.\n\n        Args:\n            args (Dict[str, Any]): The args to be printed as a dictionary.\n        \"\"\"\n        PrintingResults.print_tabulate_df(\n            df=pd.DataFrame(**args).T,\n        )\n\n    @staticmethod\n    def print_tabulate_df(df: pd.DataFrame, floatfmt: str = \".3f\") -&gt; None:\n        \"\"\"Print the results of the fitting process.\n\n        Args:\n            df (pd.DataFrame): The DataFrame to be printed.\n            floatfmt (str, optional): The format of the floating point numbers.\n                Defaults to \".3f\".\n        \"\"\"\n        print(\n            tabulate(\n                df,\n                headers=\"keys\",\n                tablefmt=\"fancy_grid\" if sys.platform != \"win32\" else \"grid\",\n                floatfmt=floatfmt,\n            )\n        )\n\n    def printing_regular_mode(self) -&gt; None:\n        \"\"\"Print the fitting results in the regular mode.\"\"\"\n        self.print_statistic()\n        self.print_fit_results()\n        self.print_confidence_interval()\n        self.print_linear_correlation()\n        self.print_regression_metrics()\n\n    def print_statistic(self) -&gt; None:\n        \"\"\"Print the statistic.\"\"\"\n        print(\"\\nStatistic:\\n\")\n        self.print_tabulate(args=self.args[\"data_statistic\"])\n\n    def print_fit_results(self) -&gt; None:\n        \"\"\"Print the fit results.\"\"\"\n        FitReport(self.result, modelpars=self.result.params, **self.args[\"report\"])()\n\n    def print_confidence_interval(self) -&gt; None:\n        \"\"\"Print the confidence interval.\"\"\"\n        print(\"\\nConfidence Interval:\\n\")\n        if self.args[\"conf_interval\"]:\n            try:\n                CIReport(self.args[\"confidence_interval\"][0])()\n            except (MinimizerException, ValueError, KeyError, TypeError) as exc:\n                warn(f\"Error: {exc} -&gt; No confidence interval could be calculated!\")\n                self.args[\"confidence_interval\"] = {}\n\n    def print_linear_correlation(self) -&gt; None:\n        \"\"\"Print the linear correlation.\"\"\"\n        print(\"\\nOverall Linear-Correlation:\\n\")\n        self.print_tabulate(args=self.args[\"linear_correlation\"])\n\n    def print_regression_metrics(self) -&gt; None:\n        \"\"\"Print the regression metrics.\"\"\"\n        print(\"\\nRegression Metrics:\\n\")\n        self.print_tabulate(args=self.args[\"regression_metrics\"])\n\n    def printing_verbose_mode(self) -&gt; None:\n        \"\"\"Print all results in verbose mode.\"\"\"\n        self.print_statistic_verbose()\n        self.print_input_parameters_verbose()\n        self.print_fit_results_verbose()\n        self.print_confidence_interval_verbose()\n        self.print_linear_correlation_verbose()\n        self.print_regression_metrics_verbose()\n\n    def print_statistic_verbose(self) -&gt; None:\n        \"\"\"Print the data statistic in verbose mode.\"\"\"\n        print(\"\\nStatistic:\\n\")\n        pp.pprint(self.args[\"data_statistic\"])\n\n    def print_input_parameters_verbose(self) -&gt; None:\n        \"\"\"Print input parameters in verbose mode.\"\"\"\n        print(\"Input Parameter:\\n\")\n        pp.pprint(self.args)\n\n    def print_fit_results_verbose(self) -&gt; None:\n        \"\"\"Print fit results in verbose mode.\"\"\"\n        print(\"\\nFit Results and Insights:\\n\")\n        pp.pprint(self.args[\"fit_insights\"])\n\n    def print_confidence_interval_verbose(self) -&gt; None:\n        \"\"\"Print confidence interval in verbose mode.\"\"\"\n        if self.args[\"conf_interval\"]:\n            print(\"\\nConfidence Interval:\\n\")\n            pp.pprint(self.args[\"confidence_interval\"])\n\n    def print_linear_correlation_verbose(self) -&gt; None:\n        \"\"\"Print overall linear-correlation in verbose mode.\"\"\"\n        print(\"\\nOverall Linear-Correlation:\\n\")\n        pp.pprint(self.args[\"linear_correlation\"])\n\n    def print_regression_metrics_verbose(self) -&gt; None:\n        \"\"\"Print regression metrics in verbose mode.\"\"\"\n        print(\"\\nRegression Metrics:\\n\")\n        pp.pprint(self.args[\"regression_metrics\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.__call__","title":"<code>__call__()</code>","text":"<p>Print the results of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Print the results of the fitting process.\"\"\"\n    if self.args[\"verbose\"] == 1:\n        self.printing_regular_mode()\n    elif self.args[\"verbose\"] == 2:\n        self.printing_verbose_mode()\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.__init__","title":"<code>__init__(args, result, minimizer)</code>","text":"<p>Initialize the PrintingResults class.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with additional information beyond the command line arguments.</p> required <code>result</code> <code>Any</code> <p>The lmfit <code>results</code> as a kind of result based class.</p> required <code>minimizer</code> <code>Minimizer</code> <p>The lmfit <code>Minimizer</code>-class as a general minimizer for curve fitting and optimization.</p> required Source code in <code>spectrafit/report.py</code> Python<pre><code>def __init__(\n    self,\n    args: Dict[str, Any],\n    result: Any,\n    minimizer: Minimizer,\n) -&gt; None:\n    \"\"\"Initialize the PrintingResults class.\n\n    Args:\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n            additional information beyond the command line arguments.\n        result (Any): The lmfit `results` as a kind of result based class.\n        minimizer (Minimizer): The lmfit `Minimizer`-class as a general\n            minimizer for curve fitting and optimization.\n    \"\"\"\n    self.args = args\n    self.result = result\n    self.minimizer = minimizer\n    self.correlation = pd.DataFrame.from_dict(args[\"linear_correlation\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_confidence_interval","title":"<code>print_confidence_interval()</code>","text":"<p>Print the confidence interval.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_confidence_interval(self) -&gt; None:\n    \"\"\"Print the confidence interval.\"\"\"\n    print(\"\\nConfidence Interval:\\n\")\n    if self.args[\"conf_interval\"]:\n        try:\n            CIReport(self.args[\"confidence_interval\"][0])()\n        except (MinimizerException, ValueError, KeyError, TypeError) as exc:\n            warn(f\"Error: {exc} -&gt; No confidence interval could be calculated!\")\n            self.args[\"confidence_interval\"] = {}\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_confidence_interval_verbose","title":"<code>print_confidence_interval_verbose()</code>","text":"<p>Print confidence interval in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_confidence_interval_verbose(self) -&gt; None:\n    \"\"\"Print confidence interval in verbose mode.\"\"\"\n    if self.args[\"conf_interval\"]:\n        print(\"\\nConfidence Interval:\\n\")\n        pp.pprint(self.args[\"confidence_interval\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_fit_results","title":"<code>print_fit_results()</code>","text":"<p>Print the fit results.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_fit_results(self) -&gt; None:\n    \"\"\"Print the fit results.\"\"\"\n    FitReport(self.result, modelpars=self.result.params, **self.args[\"report\"])()\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_fit_results_verbose","title":"<code>print_fit_results_verbose()</code>","text":"<p>Print fit results in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_fit_results_verbose(self) -&gt; None:\n    \"\"\"Print fit results in verbose mode.\"\"\"\n    print(\"\\nFit Results and Insights:\\n\")\n    pp.pprint(self.args[\"fit_insights\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_input_parameters_verbose","title":"<code>print_input_parameters_verbose()</code>","text":"<p>Print input parameters in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_input_parameters_verbose(self) -&gt; None:\n    \"\"\"Print input parameters in verbose mode.\"\"\"\n    print(\"Input Parameter:\\n\")\n    pp.pprint(self.args)\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_linear_correlation","title":"<code>print_linear_correlation()</code>","text":"<p>Print the linear correlation.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_linear_correlation(self) -&gt; None:\n    \"\"\"Print the linear correlation.\"\"\"\n    print(\"\\nOverall Linear-Correlation:\\n\")\n    self.print_tabulate(args=self.args[\"linear_correlation\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_linear_correlation_verbose","title":"<code>print_linear_correlation_verbose()</code>","text":"<p>Print overall linear-correlation in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_linear_correlation_verbose(self) -&gt; None:\n    \"\"\"Print overall linear-correlation in verbose mode.\"\"\"\n    print(\"\\nOverall Linear-Correlation:\\n\")\n    pp.pprint(self.args[\"linear_correlation\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_regression_metrics","title":"<code>print_regression_metrics()</code>","text":"<p>Print the regression metrics.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_regression_metrics(self) -&gt; None:\n    \"\"\"Print the regression metrics.\"\"\"\n    print(\"\\nRegression Metrics:\\n\")\n    self.print_tabulate(args=self.args[\"regression_metrics\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_regression_metrics_verbose","title":"<code>print_regression_metrics_verbose()</code>","text":"<p>Print regression metrics in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_regression_metrics_verbose(self) -&gt; None:\n    \"\"\"Print regression metrics in verbose mode.\"\"\"\n    print(\"\\nRegression Metrics:\\n\")\n    pp.pprint(self.args[\"regression_metrics\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_statistic","title":"<code>print_statistic()</code>","text":"<p>Print the statistic.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_statistic(self) -&gt; None:\n    \"\"\"Print the statistic.\"\"\"\n    print(\"\\nStatistic:\\n\")\n    self.print_tabulate(args=self.args[\"data_statistic\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_statistic_verbose","title":"<code>print_statistic_verbose()</code>","text":"<p>Print the data statistic in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def print_statistic_verbose(self) -&gt; None:\n    \"\"\"Print the data statistic in verbose mode.\"\"\"\n    print(\"\\nStatistic:\\n\")\n    pp.pprint(self.args[\"data_statistic\"])\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_tabulate","title":"<code>print_tabulate(args)</code>  <code>staticmethod</code>","text":"<p>Print the results of the fitting process.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, Any]</code> <p>The args to be printed as a dictionary.</p> required Source code in <code>spectrafit/report.py</code> Python<pre><code>@staticmethod\ndef print_tabulate(args: Dict[str, Any]) -&gt; None:\n    \"\"\"Print the results of the fitting process.\n\n    Args:\n        args (Dict[str, Any]): The args to be printed as a dictionary.\n    \"\"\"\n    PrintingResults.print_tabulate_df(\n        df=pd.DataFrame(**args).T,\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.print_tabulate_df","title":"<code>print_tabulate_df(df, floatfmt='.3f')</code>  <code>staticmethod</code>","text":"<p>Print the results of the fitting process.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The DataFrame to be printed.</p> required <code>floatfmt</code> <code>str</code> <p>The format of the floating point numbers. Defaults to \".3f\".</p> <code>'.3f'</code> Source code in <code>spectrafit/report.py</code> Python<pre><code>@staticmethod\ndef print_tabulate_df(df: pd.DataFrame, floatfmt: str = \".3f\") -&gt; None:\n    \"\"\"Print the results of the fitting process.\n\n    Args:\n        df (pd.DataFrame): The DataFrame to be printed.\n        floatfmt (str, optional): The format of the floating point numbers.\n            Defaults to \".3f\".\n    \"\"\"\n    print(\n        tabulate(\n            df,\n            headers=\"keys\",\n            tablefmt=\"fancy_grid\" if sys.platform != \"win32\" else \"grid\",\n            floatfmt=floatfmt,\n        )\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.printing_regular_mode","title":"<code>printing_regular_mode()</code>","text":"<p>Print the fitting results in the regular mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def printing_regular_mode(self) -&gt; None:\n    \"\"\"Print the fitting results in the regular mode.\"\"\"\n    self.print_statistic()\n    self.print_fit_results()\n    self.print_confidence_interval()\n    self.print_linear_correlation()\n    self.print_regression_metrics()\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingResults.printing_verbose_mode","title":"<code>printing_verbose_mode()</code>","text":"<p>Print all results in verbose mode.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def printing_verbose_mode(self) -&gt; None:\n    \"\"\"Print all results in verbose mode.\"\"\"\n    self.print_statistic_verbose()\n    self.print_input_parameters_verbose()\n    self.print_fit_results_verbose()\n    self.print_confidence_interval_verbose()\n    self.print_linear_correlation_verbose()\n    self.print_regression_metrics_verbose()\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus","title":"<code>PrintingStatus</code>","text":"<p>Print the status of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>class PrintingStatus:\n    \"\"\"Print the status of the fitting process.\"\"\"\n\n    def welcome(self) -&gt; None:\n        \"\"\"Print the welcome message.\"\"\"\n        tprint(\"SpectraFit\", font=\"3-d\")\n\n    def version(self) -&gt; str:\n        \"\"\"Print current version of the SpectraFit.\"\"\"\n        return f\"Currently used version is: {__version__}\"\n\n    def start(self) -&gt; None:\n        \"\"\"Print the start of the fitting process.\"\"\"\n        print(\"\\nStart of the fitting process:\\n\")\n\n    def end(self) -&gt; None:\n        \"\"\"Print the end of the fitting process.\"\"\"\n        print(\"\\nEnd of the fitting process:\\n\")\n\n    def thanks(self) -&gt; None:\n        \"\"\"Print the end of the fitting process.\"\"\"\n        print(\"\\nThanks for using SpectraFit!\")\n\n    def yes_no(self) -&gt; None:\n        \"\"\"Print the end of the fitting process.\"\"\"\n        print(\"\\nDo you want to continue? (y/n)\")\n\n    def credits(self) -&gt; None:\n        \"\"\"Print the credits of the fitting process.\"\"\"\n        tprint(\"\\nCredits:\\n\", font=\"3-d\")\n        print(\n            \"The fitting process is based on the following software:\"\n            \"\\n\\t- lmfit (https://lmfit.github.io/lmfit-py/index.html)\"\n            \"\\n\\t- statsmodel (https://www.statsmodels.org/stable/)\"\n            \"\\n\\t- scipy (https://docs.scipy.org/doc/scipy/reference/index.html)\"\n            \"\\n\\t- scikit-learn (https://scikit-learn.org/stable/)\"\n            \"\\n\\t- numpy (https://docs.scipy.org/doc/numpy/reference/index.html)\"\n            \"\\n\\t- pandas (https://pandas.pydata.org/pandas-docs/stable/index.html)\"\n            \"\\n\\t- matplotlib (https://matplotlib.org/index.html)\"\n            \"\\n\\t- seaborn (https://seaborn.pydata.org/index.html)\"\n            \"\\n\\t- tabulate (https://github.com/astanin/python-tabulate))\"\n            \"\\n\\t- argparse (https://docs.python.org/3/library/argparse.html)\"\n            \"\\n\\t- anymany more \"\n            \"(https://github.com/Anselmoo/spectrafit/network/dependencies)\"\n        )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.credits","title":"<code>credits()</code>","text":"<p>Print the credits of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def credits(self) -&gt; None:\n    \"\"\"Print the credits of the fitting process.\"\"\"\n    tprint(\"\\nCredits:\\n\", font=\"3-d\")\n    print(\n        \"The fitting process is based on the following software:\"\n        \"\\n\\t- lmfit (https://lmfit.github.io/lmfit-py/index.html)\"\n        \"\\n\\t- statsmodel (https://www.statsmodels.org/stable/)\"\n        \"\\n\\t- scipy (https://docs.scipy.org/doc/scipy/reference/index.html)\"\n        \"\\n\\t- scikit-learn (https://scikit-learn.org/stable/)\"\n        \"\\n\\t- numpy (https://docs.scipy.org/doc/numpy/reference/index.html)\"\n        \"\\n\\t- pandas (https://pandas.pydata.org/pandas-docs/stable/index.html)\"\n        \"\\n\\t- matplotlib (https://matplotlib.org/index.html)\"\n        \"\\n\\t- seaborn (https://seaborn.pydata.org/index.html)\"\n        \"\\n\\t- tabulate (https://github.com/astanin/python-tabulate))\"\n        \"\\n\\t- argparse (https://docs.python.org/3/library/argparse.html)\"\n        \"\\n\\t- anymany more \"\n        \"(https://github.com/Anselmoo/spectrafit/network/dependencies)\"\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.end","title":"<code>end()</code>","text":"<p>Print the end of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def end(self) -&gt; None:\n    \"\"\"Print the end of the fitting process.\"\"\"\n    print(\"\\nEnd of the fitting process:\\n\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.start","title":"<code>start()</code>","text":"<p>Print the start of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def start(self) -&gt; None:\n    \"\"\"Print the start of the fitting process.\"\"\"\n    print(\"\\nStart of the fitting process:\\n\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.thanks","title":"<code>thanks()</code>","text":"<p>Print the end of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def thanks(self) -&gt; None:\n    \"\"\"Print the end of the fitting process.\"\"\"\n    print(\"\\nThanks for using SpectraFit!\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.version","title":"<code>version()</code>","text":"<p>Print current version of the SpectraFit.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def version(self) -&gt; str:\n    \"\"\"Print current version of the SpectraFit.\"\"\"\n    return f\"Currently used version is: {__version__}\"\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.welcome","title":"<code>welcome()</code>","text":"<p>Print the welcome message.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def welcome(self) -&gt; None:\n    \"\"\"Print the welcome message.\"\"\"\n    tprint(\"SpectraFit\", font=\"3-d\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.PrintingStatus.yes_no","title":"<code>yes_no()</code>","text":"<p>Print the end of the fitting process.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def yes_no(self) -&gt; None:\n    \"\"\"Print the end of the fitting process.\"\"\"\n    print(\"\\nDo you want to continue? (y/n)\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.RegressionMetrics","title":"<code>RegressionMetrics</code>","text":"<p>Calculate the regression metrics of the Fit(s) for the post analysis.</p> <p>Regression Metrics for post analysis of the Fit(s)</p> <p><code>SpectraFit</code> provides the following regression metrics for post analysis of the regular and global fit(s) based on the metric functions of <code>sklearn.metrics</code>:</p> MySQL<pre><code>- `explained_variance_score`: Explained variance score.\n- `r2_score`: the coefficient of determination\n- `max_error`: Maximum error.\n- `mean_absolute_error`: the mean absolute error\n- `mean_squared_error`: the mean squared error\n- `mean_squared_log_error`: the mean squared log error\n- `median_absolute_error`: the median absolute error\n- `mean_absolute_percentage_error`: the mean absolute percentage error\n- `mean_poisson_deviance`: the mean Poisson deviance\n- `mean_gamma_deviance`: the mean Gamma deviance\n- `mean_tweedie_deviance`: the mean Tweedie deviance\n- `mean_pinball_loss`: the mean Pinball loss\n- `d2_tweedie_score`: the D2 Tweedie score\n- `d2_pinball_score`: the D2 Pinball score\n- `d2_absolute_error_score`: the D2 absolute error score\n</code></pre> <p>The regression fit metrics can be used to evaluate the quality of the fit by comparing the fit to the actual intensity.</p> <p>D2 Tweedie and D2 Pinball scores</p> <p><code>d2_pinball_score</code> and <code>d2_absolute_error_score</code> are only available for  <code>sklearn</code> versions &gt;= 1.1.2 and will be later implemented if the  End of support (2023-06-27) is reached for the <code>Python3.7</code>.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>class RegressionMetrics:\n    \"\"\"Calculate the regression metrics of the Fit(s) for the post analysis.\n\n    !!! note  \"Regression Metrics for post analysis of the Fit(s)\"\n\n        `SpectraFit` provides the following regression metrics for\n        post analysis of the regular and global fit(s) based on the\n        metric functions of `sklearn.metrics`:\n\n            - `explained_variance_score`: Explained variance score.\n            - `r2_score`: the coefficient of determination\n            - `max_error`: Maximum error.\n            - `mean_absolute_error`: the mean absolute error\n            - `mean_squared_error`: the mean squared error\n            - `mean_squared_log_error`: the mean squared log error\n            - `median_absolute_error`: the median absolute error\n            - `mean_absolute_percentage_error`: the mean absolute percentage error\n            - `mean_poisson_deviance`: the mean Poisson deviance\n            - `mean_gamma_deviance`: the mean Gamma deviance\n            - `mean_tweedie_deviance`: the mean Tweedie deviance\n            - `mean_pinball_loss`: the mean Pinball loss\n            - `d2_tweedie_score`: the D2 Tweedie score\n            - `d2_pinball_score`: the D2 Pinball score\n            - `d2_absolute_error_score`: the D2 absolute error score\n\n        The regression fit metrics can be used to evaluate the quality of the\n        fit by comparing the fit to the actual intensity.\n\n    !!! warning \"D2 Tweedie and D2 Pinball scores\"\n\n         `d2_pinball_score` and `d2_absolute_error_score` are only available for\n         `sklearn` versions &gt;= 1.1.2 and will be later implemented if the\n         __End of support (2023-06-27)__ is reached for the `Python3.7`.\n    \"\"\"\n\n    def __init__(\n        self, df: pd.DataFrame, name_true: str = \"intensity\", name_pred: str = \"fit\"\n    ) -&gt; None:\n        \"\"\"Initialize the regression metrics of the Fit(s) for the post analysis.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            name_true (str, optional): Name of the data. Defaults to \"intensity\".\n            name_pred (str, optional): Name of the fit data. Defaults to \"fit\".\n        \"\"\"\n        self.y_true, self.y_pred = self.initialize(\n            df=df, name_true=name_true, name_pred=name_pred\n        )\n\n    def initialize(\n        self, df: pd.DataFrame, name_true: str = \"intensity\", name_pred: str = \"fit\"\n    ) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]:\n        \"\"\"Initialize the regression metrics of the Fit(s) for the post analysis.\n\n        For this reason, the dataframe is split into two numpy array for true\n        (`intensity`) and predicted (`fit`) intensities. In terms of global fit,\n        the numpy array according to the order in the original dataframe.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence,\n                 it will be extended by the single contribution of the model.\n            name_true (str, optional): Name of the data. Defaults to \"intensity\".\n            name_pred (str, optional): Name of the fit data. Defaults to \"fit\".\n\n        Raises:\n            ValueError: In terms of global fit contains an unequal number of intial data\n                and fit data.\n\n        Returns:\n            Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of true and predicted\n                (fit) intensities.\n        \"\"\"\n        true = df[\n            [col_name for col_name in df.columns if name_true in col_name]\n        ].to_numpy()\n\n        pred = df[\n            [col_name for col_name in df.columns if name_pred in col_name]\n        ].to_numpy()\n\n        if pred.shape != true.shape:\n            raise ValueError(\"The shape of the real and fit data-values are not equal!\")\n\n        return (\n            (true, pred) if true.shape[1] &gt; 1 else (np.array([true]), np.array([pred]))\n        )\n\n    def __call__(self) -&gt; Dict[Hashable, Any]:\n        \"\"\"Calculate the regression metrics of the Fit(s) for the post analysis.\n\n        Returns:\n            Dict[Hashable, Any]: Dictionary containing the regression metrics.\n        \"\"\"\n        metrics_fnc = (\n            explained_variance_score,\n            r2_score,\n            max_error,\n            mean_absolute_error,\n            mean_squared_error,\n            mean_squared_log_error,\n            median_absolute_error,\n            mean_absolute_percentage_error,\n            mean_poisson_deviance,\n        )\n        metric_dict: Dict[Hashable, Any] = {}\n        for fnc in metrics_fnc:\n            metric_dict[fnc.__name__] = []\n            for y_true, y_pred in zip(self.y_true.T, self.y_pred.T):\n                try:\n                    metric_dict[fnc.__name__].append(fnc(y_true, y_pred))\n                except ValueError as err:\n                    warn(\n                        warn_meassage(\n                            msg=f\"Regression metric '{fnc.__name__}' could not  \"\n                            f\"be calculated due to: {err}\"\n                        )\n                    )\n                    metric_dict[fnc.__name__].append(np.nan)\n        return pd.DataFrame(metric_dict).T.to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.RegressionMetrics.__call__","title":"<code>__call__()</code>","text":"<p>Calculate the regression metrics of the Fit(s) for the post analysis.</p> <p>Returns:</p> Type Description <code>Dict[Hashable, Any]</code> <p>Dict[Hashable, Any]: Dictionary containing the regression metrics.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __call__(self) -&gt; Dict[Hashable, Any]:\n    \"\"\"Calculate the regression metrics of the Fit(s) for the post analysis.\n\n    Returns:\n        Dict[Hashable, Any]: Dictionary containing the regression metrics.\n    \"\"\"\n    metrics_fnc = (\n        explained_variance_score,\n        r2_score,\n        max_error,\n        mean_absolute_error,\n        mean_squared_error,\n        mean_squared_log_error,\n        median_absolute_error,\n        mean_absolute_percentage_error,\n        mean_poisson_deviance,\n    )\n    metric_dict: Dict[Hashable, Any] = {}\n    for fnc in metrics_fnc:\n        metric_dict[fnc.__name__] = []\n        for y_true, y_pred in zip(self.y_true.T, self.y_pred.T):\n            try:\n                metric_dict[fnc.__name__].append(fnc(y_true, y_pred))\n            except ValueError as err:\n                warn(\n                    warn_meassage(\n                        msg=f\"Regression metric '{fnc.__name__}' could not  \"\n                        f\"be calculated due to: {err}\"\n                    )\n                )\n                metric_dict[fnc.__name__].append(np.nan)\n    return pd.DataFrame(metric_dict).T.to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.RegressionMetrics.__init__","title":"<code>__init__(df, name_true='intensity', name_pred='fit')</code>","text":"<p>Initialize the regression metrics of the Fit(s) for the post analysis.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>name_true</code> <code>str</code> <p>Name of the data. Defaults to \"intensity\".</p> <code>'intensity'</code> <code>name_pred</code> <code>str</code> <p>Name of the fit data. Defaults to \"fit\".</p> <code>'fit'</code> Source code in <code>spectrafit/report.py</code> Python<pre><code>def __init__(\n    self, df: pd.DataFrame, name_true: str = \"intensity\", name_pred: str = \"fit\"\n) -&gt; None:\n    \"\"\"Initialize the regression metrics of the Fit(s) for the post analysis.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        name_true (str, optional): Name of the data. Defaults to \"intensity\".\n        name_pred (str, optional): Name of the fit data. Defaults to \"fit\".\n    \"\"\"\n    self.y_true, self.y_pred = self.initialize(\n        df=df, name_true=name_true, name_pred=name_pred\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.RegressionMetrics.initialize","title":"<code>initialize(df, name_true='intensity', name_pred='fit')</code>","text":"<p>Initialize the regression metrics of the Fit(s) for the post analysis.</p> <p>For this reason, the dataframe is split into two numpy array for true (<code>intensity</code>) and predicted (<code>fit</code>) intensities. In terms of global fit, the numpy array according to the order in the original dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence,  it will be extended by the single contribution of the model.</p> required <code>name_true</code> <code>str</code> <p>Name of the data. Defaults to \"intensity\".</p> <code>'intensity'</code> <code>name_pred</code> <code>str</code> <p>Name of the fit data. Defaults to \"fit\".</p> <code>'fit'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>In terms of global fit contains an unequal number of intial data and fit data.</p> <p>Returns:</p> Type Description <code>Tuple[NDArray[float64], NDArray[float64]]</code> <p>Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of true and predicted (fit) intensities.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def initialize(\n    self, df: pd.DataFrame, name_true: str = \"intensity\", name_pred: str = \"fit\"\n) -&gt; Tuple[NDArray[np.float64], NDArray[np.float64]]:\n    \"\"\"Initialize the regression metrics of the Fit(s) for the post analysis.\n\n    For this reason, the dataframe is split into two numpy array for true\n    (`intensity`) and predicted (`fit`) intensities. In terms of global fit,\n    the numpy array according to the order in the original dataframe.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence,\n             it will be extended by the single contribution of the model.\n        name_true (str, optional): Name of the data. Defaults to \"intensity\".\n        name_pred (str, optional): Name of the fit data. Defaults to \"fit\".\n\n    Raises:\n        ValueError: In terms of global fit contains an unequal number of intial data\n            and fit data.\n\n    Returns:\n        Tuple[NDArray[np.float64], NDArray[np.float64]]: Tuple of true and predicted\n            (fit) intensities.\n    \"\"\"\n    true = df[\n        [col_name for col_name in df.columns if name_true in col_name]\n    ].to_numpy()\n\n    pred = df[\n        [col_name for col_name in df.columns if name_pred in col_name]\n    ].to_numpy()\n\n    if pred.shape != true.shape:\n        raise ValueError(\"The shape of the real and fit data-values are not equal!\")\n\n    return (\n        (true, pred) if true.shape[1] &gt; 1 else (np.array([true]), np.array([pred]))\n    )\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.fit_report_as_dict","title":"<code>fit_report_as_dict(inpars, settings, modelpars=None)</code>","text":"<p>Generate the best fit report as dictionary.</p> <p>About <code>fit_report_as_dict</code></p> <p>The report contains the best-fit values for the parameters and their uncertainties and correlations. The report is generated as dictionary and consists of the following three main criteria:</p> CBM BASIC V2<pre><code>1. Fit Statistics\n2. Fit variables\n3. Fit correlations\n</code></pre> <p>About <code>Pydantic</code> for the report</p> <p>In a next release, the report will be generated as a <code>Pydantic</code> model.</p> <p>Parameters:</p> Name Type Description Default <code>inpars</code> <code>minimize</code> <p>Input Parameters from a fit or the  Minimizer results  returned from a fit.</p> required <code>settings</code> <code>Minimizer</code> <p>The lmfit <code>Minimizer</code>-class as a general minimizer     for curve fitting and optimization. It is required to extract the     initial settings of the fit.</p> required <code>modelpars</code> <code>Dict[str, Any]</code> <p>Known Model Parameters. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Dict[Any, Any]]</code> <p>Dict[str, Dict[Any, Any]]: The report as a dictionary.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def fit_report_as_dict(\n    inpars: minimize, settings: Minimizer, modelpars: Optional[Dict[str, Any]] = None\n) -&gt; Dict[str, Dict[Any, Any]]:\n    \"\"\"Generate the best fit report as dictionary.\n\n    !!! info \"About `fit_report_as_dict`\"\n\n        The report contains the best-fit values for the parameters and their\n        uncertainties and correlations. The report is generated as dictionary and\n        consists of the following three main criteria:\n\n            1. Fit Statistics\n            2. Fit variables\n            3. Fit correlations\n\n    !!! tip \"About `Pydantic` for the report\"\n\n        In a next release, the report will be generated as a `Pydantic` model.\n\n    Args:\n        inpars (minimize): Input Parameters from a fit or the  Minimizer results\n             returned from a fit.\n        settings (Minimizer): The lmfit `Minimizer`-class as a general minimizer\n                for curve fitting and optimization. It is required to extract the\n                initial settings of the fit.\n        modelpars (Dict[str,  Any], optional): Known Model Parameters.\n            Defaults to None.\n\n    Returns:\n         Dict[str, Dict[Any, Any]]: The report as a dictionary.\n    \"\"\"\n    result = inpars\n    params = inpars.params\n\n    parnames: List[str] = list(params.keys())\n\n    buffer: Dict[str, Dict[Any, Any]] = {\n        \"configurations\": {},\n        \"statistics\": {},\n        \"variables\": {},\n        \"errorbars\": {},\n        \"correlations\": {},\n        \"covariance_matrix\": {},\n        \"computional\": {},\n    }\n\n    result, buffer, params = _extracted_gof_from_results(\n        result=result, buffer=buffer, params=params\n    )\n    buffer = _extracted_computional_from_results(\n        result=result, settings=settings, buffer=buffer\n    )\n    for name in parnames:\n        par = params[name]\n        buffer[\"variables\"][name] = {\"init_value\": get_init_value(param=par)}\n\n        if modelpars is not None and name in modelpars:\n            buffer[\"variables\"][name][\"model_value\"] = modelpars[name].value\n        try:\n            buffer[\"variables\"][name][\"best_value\"] = par.value\n        except (TypeError, ValueError):  # pragma: no cover\n            buffer[\"variables\"][name][\"init_value\"] = \"NonNumericValue\"\n        if par.stderr is not None:\n            buffer[\"variables\"][name][\"error_relative\"] = par.stderr\n            try:\n                buffer[\"variables\"][name][\"error_absolute\"] = (\n                    abs(par.stderr / par.value) * 100\n                )\n            except ZeroDivisionError:  # pragma: no cover\n                buffer[\"variables\"][name][\"error_absolute\"] = np.inf\n\n    for i, name_1 in enumerate(parnames):\n        par = params[name_1]\n        buffer[\"correlations\"][name_1] = {}\n        if not par.vary:\n            continue\n        if hasattr(par, \"correl\") and par.correl is not None:\n            for name_2 in parnames[i + 1 :]:\n                if (\n                    name_1 != name_2\n                    and name_2 in par.correl\n                    and abs(par.correl[name_2]) &lt;= 1.0\n                ):\n                    buffer[\"correlations\"][name_1][name_2] = par.correl[name_2]\n\n    if result.covar is not None and result.covar.shape[0] == len(parnames):\n        for i, name_1 in enumerate(parnames):\n            buffer[\"covariance_matrix\"][name_1] = {\n                name_2: result.covar[i, j] for j, name_2 in enumerate(parnames)\n            }\n    return buffer\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.get_init_value","title":"<code>get_init_value(param, modelpars=None)</code>","text":"<p>Get the initial value of a parameter.</p> <p>Parameters:</p> Name Type Description Default <code>param</code> <code>Parameter</code> <p>The Parameter to extract the initial value from.</p> required <code>modelpars</code> <code>Parameter</code> <p>Known Model Parameters. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[float, str]</code> <p>Union[float, str]: The initial value.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def get_init_value(\n    param: Parameter, modelpars: Optional[Parameter] = None\n) -&gt; Union[float, str]:\n    \"\"\"Get the initial value of a parameter.\n\n    Args:\n        param (Parameter): The Parameter to extract the initial value from.\n        modelpars (Parameter, optional): Known Model Parameters. Defaults to None.\n\n    Returns:\n        Union[float, str]: The initial value.\n    \"\"\"\n    if param.init_value is not None:\n        return param.init_value\n    if param.expr is not None:\n        return f\"As expressed value: {param.expr}\"\n    if modelpars is not None and param.name in modelpars:\n        return modelpars[param.name].value\n    return f\"As fixed value: {param.value}\"\n</code></pre>"},{"location":"api/reporting_api/#spectrafit.report.warn_meassage","title":"<code>warn_meassage(msg)</code>","text":"<p>Generate a warning message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>The message to be printed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The warning message.</p> Source code in <code>spectrafit/report.py</code> Python<pre><code>def warn_meassage(msg: str) -&gt; str:\n    \"\"\"Generate a warning message.\n\n    Args:\n        msg (str): The message to be printed.\n\n    Returns:\n        str: The warning message.\n    \"\"\"\n    top = \"\\n\\n## WARNING \" + \"#\" * (len(msg) - len(\"## WARNING \")) + \"\\n\"\n    header = \"\\n\" + \"#\" * len(msg) + \"\\n\"\n    return top + msg + header\n</code></pre>"},{"location":"api/spectrafit_api/","title":"SpectraFit","text":"<p>SpectraFit, the command line tool for fitting.</p>"},{"location":"api/spectrafit_api/#spectrafit.spectrafit.command_line_runner","title":"<code>command_line_runner(args=None)</code>","text":"<p>Run spectrafit from the command line.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a  dictionary with additional information beyond the command line arguments.  Defaults to None.</p> <code>None</code> Source code in <code>spectrafit/spectrafit.py</code> Python<pre><code>def command_line_runner(args: Optional[Dict[str, Any]] = None) -&gt; None:\n    \"\"\"Run spectrafit from the command line.\n\n    Args:\n        args (Dict[str, Any], optional): The input file arguments as a\n             dictionary with additional information beyond the command line arguments.\n             Defaults to None.\n    \"\"\"\n    __status__.welcome()\n    while True:\n        if not args:\n            args = extracted_from_command_line_runner()\n        __status__.start()\n\n        df_result, args = fitting_routine(args=args)\n        PlotSpectra(df=df_result, args=args)()\n        SaveResult(df=df_result, args=args)()\n        args = None\n\n        __status__.end()\n\n        again = input(\"Would you like to fit again ...? Enter y/n: \").lower()\n        if again == \"n\":\n            __status__.thanks()\n            __status__.credits()\n            return\n        elif again == \"y\":  # pragma: no cover\n            continue\n        else:  # pragma: no cover\n            __status__.yes_no()\n</code></pre>"},{"location":"api/spectrafit_api/#spectrafit.spectrafit.extracted_from_command_line_runner","title":"<code>extracted_from_command_line_runner()</code>","text":"<p>Extract the input commands from the terminal.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>Missing key <code>minimizer</code> in <code>parameters</code>.</p> <code>KeyError</code> <p>Missing key <code>optimizer</code> in <code>parameters</code>.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The input file arguments as a dictionary with additional  information beyond the command line arguments.</p> Source code in <code>spectrafit/spectrafit.py</code> Python<pre><code>def extracted_from_command_line_runner() -&gt; Dict[str, Any]:\n    \"\"\"Extract the input commands from the terminal.\n\n    Raises:\n        KeyError: Missing key `minimizer` in `parameters`.\n        KeyError: Missing key `optimizer` in `parameters`.\n\n    Returns:\n        Dict[str, Any]: The input file arguments as a dictionary with additional\n             information beyond the command line arguments.\n    \"\"\"\n    result: Dict[str, Any] = get_args()\n    _args: MutableMapping[str, Any] = read_input_file(result[\"input\"])\n\n    if \"settings\" in _args.keys():\n        for key in _args[\"settings\"].keys():\n            result[key] = _args[\"settings\"][key]\n    result = CMDModelAPI(**result).model_dump()\n    if \"description\" in _args[\"fitting\"].keys():\n        result[\"description\"] = _args[\"fitting\"][\"description\"]\n    if \"parameters\" in _args[\"fitting\"].keys():\n        if \"minimizer\" in _args[\"fitting\"][\"parameters\"].keys():\n            result[\"minimizer\"] = _args[\"fitting\"][\"parameters\"][\"minimizer\"]\n        else:\n            raise KeyError(\"Missing 'minimizer' in 'parameters'!\")\n        if \"optimizer\" in _args[\"fitting\"][\"parameters\"].keys():\n            result[\"optimizer\"] = _args[\"fitting\"][\"parameters\"][\"optimizer\"]\n        else:\n            raise KeyError(\"Missing key 'optimizer' in 'parameters'!\")\n        if \"report\" in _args[\"fitting\"][\"parameters\"].keys():\n            result[\"report\"] = _args[\"fitting\"][\"parameters\"][\"report\"]\n        else:\n            result[\"report\"] = {\n                \"show_correl\": True,\n                \"min_correl\": 0.1,\n                \"sort_pars\": False,\n            }\n        if \"conf_interval\" in _args[\"fitting\"][\"parameters\"].keys():\n            result[\"conf_interval\"] = _args[\"fitting\"][\"parameters\"][\"conf_interval\"]\n        else:\n            result[\"conf_interval\"] = None\n\n    if \"peaks\" in _args[\"fitting\"].keys():\n        result[\"peaks\"] = _args[\"fitting\"][\"peaks\"]\n    return result\n</code></pre>"},{"location":"api/spectrafit_api/#spectrafit.spectrafit.fitting_routine","title":"<code>fitting_routine(args)</code>","text":"<p>Run the fitting algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>Tuple[DataFrame, Dict[str, Any]]</code> <p>Tuple[pd.DataFrame, Dict[str, Any]]: Returns a DataFrame and a dictionary,  which is containing the input data (<code>x</code> and <code>data</code>), as well as the best  fit, single contributions of each peak and the corresponding residuum. The  dictionary contains the raw input data, the best fit, the single  contributions and the corresponding residuum. Furthermore, the dictionary  is extended by advanced statistical information of the fit.</p> Source code in <code>spectrafit/spectrafit.py</code> Python<pre><code>def fitting_routine(args: Dict[str, Any]) -&gt; Tuple[pd.DataFrame, Dict[str, Any]]:\n    \"\"\"Run the fitting algorithm.\n\n    Args:\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        Tuple[pd.DataFrame, Dict[str, Any]]: Returns a DataFrame and a dictionary,\n             which is containing the input data (`x` and `data`), as well as the best\n             fit, single contributions of each peak and the corresponding residuum. The\n             dictionary contains the raw input data, the best fit, the single\n             contributions and the corresponding residuum. Furthermore, the dictionary\n             is extended by advanced statistical information of the fit.\n    \"\"\"\n    df: pd.DataFrame = load_data(args)\n    df, args = PreProcessing(df=df, args=args)()\n    minimizer, result = SolverModels(df=df, args=args)()\n    df, args = PostProcessing(df=df, args=args, minimizer=minimizer, result=result)()\n    PrintingResults(args=args, minimizer=minimizer, result=result)()\n\n    return df, args\n</code></pre>"},{"location":"api/spectrafit_api/#spectrafit.spectrafit.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without  additional information beyond the command line arguments.</p> Source code in <code>spectrafit/spectrafit.py</code> Python<pre><code>def get_args() -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n             additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Fast Fitting Program for ascii txt files.\",\n        usage=\"spectrafit [options] infile\",\n        epilog=\"For more information, visit https://anselmoo.github.io/spectrafit/\",\n        prog=\"spectrafit\",\n    )\n    parser.add_argument(\"infile\", type=str, help=\"Filename of the spectra data\")\n    parser.add_argument(\n        \"-o\",\n        \"--outfile\",\n        default=\"spectrafit_results\",\n        type=str,\n        help=\"Filename for the export, default to set to 'spectrafit_results'.\",\n    )\n    parser.add_argument(\n        \"-i\",\n        \"--input\",\n        type=str,\n        default=\"fitting_input.toml\",\n        help=(\n            \"Filename for the input parameter, default to set to 'fitting_input.toml'.\"\n            \"Supported fileformats are: '*.json', '*.yml', '*.yaml', and '*.toml'\"\n        ),\n    )\n    parser.add_argument(\n        \"-ov\",\n        \"--oversampling\",\n        action=\"store_true\",\n        default=False,\n        help=\"Oversampling the spectra by using factor of 5; default to False.\",\n    )\n    parser.add_argument(\n        \"-e0\",\n        \"--energy_start\",\n        type=float,\n        default=None,\n        help=\"Starting energy in eV; default to start of energy; default to None.\",\n    )\n    parser.add_argument(\n        \"-e1\",\n        \"--energy_stop\",\n        type=float,\n        default=None,\n        help=\"Ending energy in eV; default to end of energy; default to None.\",\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--smooth\",\n        type=int,\n        default=0,\n        help=\"Number of smooth points for lmfit; default to 0.\",\n    )\n    parser.add_argument(\n        \"-sh\",\n        \"--shift\",\n        type=float,\n        default=0,\n        help=\"Constant applied energy shift; default to 0.\",\n    )\n    parser.add_argument(\n        \"-c\",\n        \"--column\",\n        nargs=2,\n        default=[0, 1],\n        help=(\n            \"Selected columns for the energy- and intensity-values; default to '0' for\"\n            \" energy (x-axis) and '1' for intensity (y-axis). In case of working with\"\n            \" header, the column should be set to the column names as 'str'; default\"\n            \" to 0 and 1.\"\n        ),\n    )\n    parser.add_argument(\n        \"-sep\",\n        \"--separator\",\n        type=str,\n        default=\"\\t\",\n        choices=[\"\\t\", \",\", \";\", \":\", \"|\", \" \", \"s+\"],\n        help=\"Redefine the type of separator; default to '\\t'.\",\n    )\n    parser.add_argument(\n        \"-dec\",\n        \"--decimal\",\n        type=str,\n        default=\".\",\n        choices=[\".\", \",\"],\n        help=\"Type of decimal separator; default to '.'.\",\n    )\n    parser.add_argument(\n        \"-hd\",\n        \"--header\",\n        type=int,\n        default=None,\n        help=\"Selected the header for the dataframe; default to None.\",\n    )\n    parser.add_argument(\n        \"-cm\",\n        \"--comment\",\n        type=str,\n        default=None,\n        help=\"Lines with comment characters like '#' should not be parsed;\"\n        \" default to None.\",\n    )\n    parser.add_argument(\n        \"-g\",\n        \"--global_\",\n        type=int,\n        default=0,\n        choices=[0, 1, 2],\n        help=(\n            \"Perform a global fit over the complete dataframe. The options are '0' \"\n            \"for classic fit (default). The option '1' for global fitting with \"\n            \"auto-definition of the peaks depending on the column size and '2' for \"\n            \"self-defined global fitting routines.\"\n        ),\n    )\n    parser.add_argument(\n        \"-auto\",\n        \"--autopeak\",\n        help=(\n            \"Auto detection of peaks in the spectra based on `SciPy`. The position, \"\n            \"height, and width are used as estimation for the `Gaussian` models. \"\n            \"The default option is 'False' for manual peak definition.\"\n        ),\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"-np\",\n        \"--noplot\",\n        help=\"No plotting the spectra and the fit of `SpectraFit`.\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"-v\",\n        \"--version\",\n        help=\"Display the current version of `SpectraFit`.\",\n        action=\"version\",\n        version=__status__.version(),\n    )\n    parser.add_argument(\n        \"-vb\",\n        \"--verbose\",\n        help=(\n            \"Display the initial configuration parameters and fit results, as a table \"\n            \"'1', as a dictionary '2', or not in the terminal '0'. The default option \"\n            \"is set to 1 for table `printout`.\"\n        ),\n        type=int,\n        default=1,\n        choices=[0, 1, 2],\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"api/tools_api/","title":"Tools","text":"<p>Collection of essential tools for running SpectraFit.</p>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing","title":"<code>PostProcessing</code>","text":"<p>Post-processing of the dataframe.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>class PostProcessing:\n    \"\"\"Post-processing of the dataframe.\"\"\"\n\n    def __init__(\n        self, df: pd.DataFrame, args: Dict[str, Any], minimizer: Minimizer, result: Any\n    ) -&gt; None:\n        \"\"\"Initialize PostProcessing class.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str, Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n            minimizer (Minimizer): The minimizer class.\n            result (Any): The result of the minimization of the best fit.\n        \"\"\"\n        self.args = args\n        self.df = self.rename_columns(df=df)\n        self.minimizer = minimizer\n        self.result = result\n        self.data_size = self.check_global_fitting()\n\n    def __call__(self) -&gt; Tuple[pd.DataFrame, Dict[str, Any]]:\n        \"\"\"Call the post-processing.\"\"\"\n        self.make_insight_report()\n        self.make_residual_fit()\n        self.make_fit_contributions()\n        self.export_correlation2args()\n        self.export_results2args()\n        self.export_regression_metrics2args()\n        self.export_desprective_statistic2args()\n        return (self.df, self.args)\n\n    def check_global_fitting(self) -&gt; Optional[int]:\n        \"\"\"Check if the global fitting is performed.\n\n        !!! note \"About Global Fitting\"\n            In case of the global fitting, the data is extended by the single\n            contribution of the model.\n\n        Returns:\n            Optional[int]: The number of spectra of the global fitting.\n        \"\"\"\n        if self.args[\"global_\"]:\n            return max(\n                int(self.result.params[i].name.split(\"_\")[-1])\n                for i in self.result.params\n            )\n        return None\n\n    def rename_columns(self, df: pd.DataFrame) -&gt; pd.DataFrame:\n        \"\"\"Rename the columns of the dataframe.\n\n        Rename the columns of the dataframe to the names defined in the input file.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the original input data, which are\n                 individually pre-named.\n\n        Returns:\n            pd.DataFrame: DataFrame containing renamed columns. All column-names are\n                 lowered. In case of a regular fitting, the columns are named `energy`\n                 and `intensity`. In case of a global fitting, `energy` stays `energy`\n                 and `intensity` is extended by a `_`  and column index; like: `energy`\n                 and `intensity_1`, `intensity_2`, `intensity_...` depending on\n                 the dataset size.\n        \"\"\"\n        if self.args[\"global_\"]:\n            return df.rename(\n                columns={\n                    col: (\n                        ColumnNamesAPI().energy\n                        if i == 0\n                        else f\"{ColumnNamesAPI().intensity}_{i}\"\n                    )\n                    for i, col in enumerate(df.columns)\n                }\n            )\n        return df.rename(\n            columns={\n                df.columns[0]: ColumnNamesAPI().energy,\n                df.columns[1]: ColumnNamesAPI().intensity,\n            }\n        )\n\n    def make_insight_report(self) -&gt; None:\n        \"\"\"Make an insight-report of the fit statistic.\n\n        !!! note \"About Insight Report\"\n\n            The insight report based on:\n\n                1. Configurations\n                2. Statistics\n                3. Variables\n                4. Error-bars\n                5. Correlations\n                6. Covariance Matrix\n                7. _Optional_: Confidence Interval\n\n            All of the above are included in the report as dictionary in `args`.\n\n        \"\"\"\n        self.args[\"fit_insights\"] = fit_report_as_dict(\n            inpars=self.result, settings=self.minimizer, modelpars=self.result.params\n        )\n        if self.args[\"conf_interval\"]:\n            try:\n                _min_rel_change = self.args[\"conf_interval\"].pop(\"min_rel_change\", None)\n                ci = ConfidenceInterval(\n                    self.minimizer, self.result, **self.args[\"conf_interval\"]\n                )\n                if _min_rel_change is not None:\n                    ci.min_rel_change = _min_rel_change\n                    self.args[\"conf_interval\"][\"min_rel_change\"] = _min_rel_change\n\n                trace = self.args[\"conf_interval\"].get(\"trace\")\n\n                if trace is True:\n                    self.args[\"confidence_interval\"] = (ci.calc_all_ci(), ci.trace_dict)\n                else:\n                    self.args[\"confidence_interval\"] = ci.calc_all_ci()\n\n            except (MinimizerException, ValueError, KeyError) as exc:\n                print(f\"Error: {exc} -&gt; No confidence interval could be calculated!\")\n                self.args[\"confidence_interval\"] = {}\n\n    def make_residual_fit(self) -&gt; None:\n        r\"\"\"Make the residuals of the model and the fit.\n\n        !!! note \"About Residual and Fit\"\n\n            The residual is calculated by the difference of the best fit `model` and\n            the reference `data`. In case of a global fitting, the residuals are\n            calculated for each `spectra` separately plus an avaraged global residual.\n\n            $$\n            \\mathrm{residual} = \\mathrm{model} - \\mathrm{data}\n            $$\n            $$\n            \\mathrm{residual}_{i} = \\mathrm{model}_{i} - \\mathrm{data}_{i}\n            $$\n            $$\n            \\mathrm{residual}_{avg} = \\frac{ \\sum_{i}\n                \\mathrm{model}_{i} - \\mathrm{data}_{i}}{i}\n            $$\n\n            The fit is defined by the difference sum of fit and reference data. In case\n            of a global fitting, the residuals are calculated for each `spectra`\n            separately.\n        \"\"\"\n        df_copy: pd.DataFrame = self.df.copy()\n        if self.args[\"global_\"]:\n            residual = self.result.residual.reshape((-1, self.data_size)).T\n            for i, _residual in enumerate(residual, start=1):\n                df_copy[f\"{ColumnNamesAPI().residual}_{i}\"] = _residual\n                df_copy[f\"{ColumnNamesAPI().fit}_{i}\"] = (\n                    self.df[f\"{ColumnNamesAPI().intensity}_{i}\"].to_numpy() + _residual\n                )\n            df_copy[f\"{ColumnNamesAPI().residual}_avg\"] = np.mean(residual, axis=0)\n        else:\n            residual = self.result.residual\n            df_copy[ColumnNamesAPI().residual] = residual\n            df_copy[ColumnNamesAPI().fit] = (\n                self.df[ColumnNamesAPI().intensity].to_numpy() + residual\n            )\n        self.df = df_copy\n\n    def make_fit_contributions(self) -&gt; None:\n        \"\"\"Make the fit contributions of the best fit model.\n\n        !!! info \"About Fit Contributions\"\n            The fit contributions are made independently of the local or global fitting.\n        \"\"\"\n        self.df = calculated_model(\n            params=self.result.params,\n            x=self.df.iloc[:, 0].to_numpy(),\n            df=self.df,\n            global_fit=self.args[\"global_\"],\n        )\n\n    def export_correlation2args(self) -&gt; None:\n        \"\"\"Export the correlation matrix to the input file arguments.\n\n        !!! note \"About Correlation Matrix\"\n\n            The linear correlation matrix is calculated from and for the pandas\n            dataframe and divided into two parts:\n\n            1. Linear correlation matrix\n            2. Non-linear correlation matrix (coming later ...)\n\n        !!! note \"About reading the correlation matrix\"\n\n            The correlation matrix is stored in the `args` as a dictionary with the\n            following keys:\n\n            * `index`\n            * `columns`\n            * `data`\n\n            For re-reading the data, it is important to use the following code:\n\n            &gt;&gt;&gt; import pandas as pd\n            &gt;&gt;&gt; pd.DataFrame(**args[\"linear_correlation\"])\n\n            Important is to use the generator function for access the three keys and\n            their values.\n        \"\"\"\n        self.args[\"linear_correlation\"] = self.df.corr().to_dict(orient=\"split\")\n\n    def export_results2args(self) -&gt; None:\n        \"\"\"Export the results of the fit to the input file arguments.\"\"\"\n        self.args[\"fit_result\"] = self.df.to_dict(orient=\"split\")\n\n    def export_regression_metrics2args(self) -&gt; None:\n        \"\"\"Export the regression metrics of the fit to the input file arguments.\n\n        !!! note \"About Regression Metrics\"\n            The regression metrics are calculated by the `statsmodels.stats.diagnostic`\n            module.\n        \"\"\"\n        self.args[\"regression_metrics\"] = RegressionMetrics(self.df)()\n\n    def export_desprective_statistic2args(self) -&gt; None:\n        \"\"\"Export the descriptive statistic of the spectra, fit, and contributions.\"\"\"\n        self.args[\"descriptive_statistic\"] = self.df.describe(\n            percentiles=np.arange(0.1, 1, 0.1).tolist()\n        ).to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.__call__","title":"<code>__call__()</code>","text":"<p>Call the post-processing.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __call__(self) -&gt; Tuple[pd.DataFrame, Dict[str, Any]]:\n    \"\"\"Call the post-processing.\"\"\"\n    self.make_insight_report()\n    self.make_residual_fit()\n    self.make_fit_contributions()\n    self.export_correlation2args()\n    self.export_results2args()\n    self.export_regression_metrics2args()\n    self.export_desprective_statistic2args()\n    return (self.df, self.args)\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.__init__","title":"<code>__init__(df, args, minimizer, result)</code>","text":"<p>Initialize PostProcessing class.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <code>minimizer</code> <code>Minimizer</code> <p>The minimizer class.</p> required <code>result</code> <code>Any</code> <p>The result of the minimization of the best fit.</p> required Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __init__(\n    self, df: pd.DataFrame, args: Dict[str, Any], minimizer: Minimizer, result: Any\n) -&gt; None:\n    \"\"\"Initialize PostProcessing class.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str, Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n        minimizer (Minimizer): The minimizer class.\n        result (Any): The result of the minimization of the best fit.\n    \"\"\"\n    self.args = args\n    self.df = self.rename_columns(df=df)\n    self.minimizer = minimizer\n    self.result = result\n    self.data_size = self.check_global_fitting()\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.check_global_fitting","title":"<code>check_global_fitting()</code>","text":"<p>Check if the global fitting is performed.</p> <p>About Global Fitting</p> <p>In case of the global fitting, the data is extended by the single contribution of the model.</p> <p>Returns:</p> Type Description <code>Optional[int]</code> <p>Optional[int]: The number of spectra of the global fitting.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def check_global_fitting(self) -&gt; Optional[int]:\n    \"\"\"Check if the global fitting is performed.\n\n    !!! note \"About Global Fitting\"\n        In case of the global fitting, the data is extended by the single\n        contribution of the model.\n\n    Returns:\n        Optional[int]: The number of spectra of the global fitting.\n    \"\"\"\n    if self.args[\"global_\"]:\n        return max(\n            int(self.result.params[i].name.split(\"_\")[-1])\n            for i in self.result.params\n        )\n    return None\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.export_correlation2args","title":"<code>export_correlation2args()</code>","text":"<p>Export the correlation matrix to the input file arguments.</p> <p>About Correlation Matrix</p> <p>The linear correlation matrix is calculated from and for the pandas dataframe and divided into two parts:</p> <ol> <li>Linear correlation matrix</li> <li>Non-linear correlation matrix (coming later ...)</li> </ol> <p>About reading the correlation matrix</p> <p>The correlation matrix is stored in the <code>args</code> as a dictionary with the following keys:</p> <ul> <li><code>index</code></li> <li><code>columns</code></li> <li><code>data</code></li> </ul> <p>For re-reading the data, it is important to use the following code:</p> <p>import pandas as pd pd.DataFrame(**args[\"linear_correlation\"])</p> <p>Important is to use the generator function for access the three keys and their values.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def export_correlation2args(self) -&gt; None:\n    \"\"\"Export the correlation matrix to the input file arguments.\n\n    !!! note \"About Correlation Matrix\"\n\n        The linear correlation matrix is calculated from and for the pandas\n        dataframe and divided into two parts:\n\n        1. Linear correlation matrix\n        2. Non-linear correlation matrix (coming later ...)\n\n    !!! note \"About reading the correlation matrix\"\n\n        The correlation matrix is stored in the `args` as a dictionary with the\n        following keys:\n\n        * `index`\n        * `columns`\n        * `data`\n\n        For re-reading the data, it is important to use the following code:\n\n        &gt;&gt;&gt; import pandas as pd\n        &gt;&gt;&gt; pd.DataFrame(**args[\"linear_correlation\"])\n\n        Important is to use the generator function for access the three keys and\n        their values.\n    \"\"\"\n    self.args[\"linear_correlation\"] = self.df.corr().to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.export_desprective_statistic2args","title":"<code>export_desprective_statistic2args()</code>","text":"<p>Export the descriptive statistic of the spectra, fit, and contributions.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def export_desprective_statistic2args(self) -&gt; None:\n    \"\"\"Export the descriptive statistic of the spectra, fit, and contributions.\"\"\"\n    self.args[\"descriptive_statistic\"] = self.df.describe(\n        percentiles=np.arange(0.1, 1, 0.1).tolist()\n    ).to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.export_regression_metrics2args","title":"<code>export_regression_metrics2args()</code>","text":"<p>Export the regression metrics of the fit to the input file arguments.</p> <p>About Regression Metrics</p> <p>The regression metrics are calculated by the <code>statsmodels.stats.diagnostic</code> module.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def export_regression_metrics2args(self) -&gt; None:\n    \"\"\"Export the regression metrics of the fit to the input file arguments.\n\n    !!! note \"About Regression Metrics\"\n        The regression metrics are calculated by the `statsmodels.stats.diagnostic`\n        module.\n    \"\"\"\n    self.args[\"regression_metrics\"] = RegressionMetrics(self.df)()\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.export_results2args","title":"<code>export_results2args()</code>","text":"<p>Export the results of the fit to the input file arguments.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def export_results2args(self) -&gt; None:\n    \"\"\"Export the results of the fit to the input file arguments.\"\"\"\n    self.args[\"fit_result\"] = self.df.to_dict(orient=\"split\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.make_fit_contributions","title":"<code>make_fit_contributions()</code>","text":"<p>Make the fit contributions of the best fit model.</p> <p>About Fit Contributions</p> <p>The fit contributions are made independently of the local or global fitting.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def make_fit_contributions(self) -&gt; None:\n    \"\"\"Make the fit contributions of the best fit model.\n\n    !!! info \"About Fit Contributions\"\n        The fit contributions are made independently of the local or global fitting.\n    \"\"\"\n    self.df = calculated_model(\n        params=self.result.params,\n        x=self.df.iloc[:, 0].to_numpy(),\n        df=self.df,\n        global_fit=self.args[\"global_\"],\n    )\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.make_insight_report","title":"<code>make_insight_report()</code>","text":"<p>Make an insight-report of the fit statistic.</p> <p>About Insight Report</p> <p>The insight report based on:</p> CBM BASIC V2<pre><code>1. Configurations\n2. Statistics\n3. Variables\n4. Error-bars\n5. Correlations\n6. Covariance Matrix\n7. _Optional_: Confidence Interval\n</code></pre> <p>All of the above are included in the report as dictionary in <code>args</code>.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def make_insight_report(self) -&gt; None:\n    \"\"\"Make an insight-report of the fit statistic.\n\n    !!! note \"About Insight Report\"\n\n        The insight report based on:\n\n            1. Configurations\n            2. Statistics\n            3. Variables\n            4. Error-bars\n            5. Correlations\n            6. Covariance Matrix\n            7. _Optional_: Confidence Interval\n\n        All of the above are included in the report as dictionary in `args`.\n\n    \"\"\"\n    self.args[\"fit_insights\"] = fit_report_as_dict(\n        inpars=self.result, settings=self.minimizer, modelpars=self.result.params\n    )\n    if self.args[\"conf_interval\"]:\n        try:\n            _min_rel_change = self.args[\"conf_interval\"].pop(\"min_rel_change\", None)\n            ci = ConfidenceInterval(\n                self.minimizer, self.result, **self.args[\"conf_interval\"]\n            )\n            if _min_rel_change is not None:\n                ci.min_rel_change = _min_rel_change\n                self.args[\"conf_interval\"][\"min_rel_change\"] = _min_rel_change\n\n            trace = self.args[\"conf_interval\"].get(\"trace\")\n\n            if trace is True:\n                self.args[\"confidence_interval\"] = (ci.calc_all_ci(), ci.trace_dict)\n            else:\n                self.args[\"confidence_interval\"] = ci.calc_all_ci()\n\n        except (MinimizerException, ValueError, KeyError) as exc:\n            print(f\"Error: {exc} -&gt; No confidence interval could be calculated!\")\n            self.args[\"confidence_interval\"] = {}\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.make_residual_fit","title":"<code>make_residual_fit()</code>","text":"<p>Make the residuals of the model and the fit.</p> <p>About Residual and Fit</p> <p>The residual is calculated by the difference of the best fit <code>model</code> and the reference <code>data</code>. In case of a global fitting, the residuals are calculated for each <code>spectra</code> separately plus an avaraged global residual.</p> <pre>\\[\n\\mathrm{residual} = \\mathrm{model} - \\mathrm{data}\n$$\n$$\n\\mathrm{residual}_{i} = \\mathrm{model}_{i} - \\mathrm{data}_{i}\n$$\n$$\n\\mathrm{residual}_{avg} = \\frac{ \\sum_{i}\n    \\mathrm{model}_{i} - \\mathrm{data}_{i}}{i}\n\\]</pre> <p>The fit is defined by the difference sum of fit and reference data. In case of a global fitting, the residuals are calculated for each <code>spectra</code> separately.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def make_residual_fit(self) -&gt; None:\n    r\"\"\"Make the residuals of the model and the fit.\n\n    !!! note \"About Residual and Fit\"\n\n        The residual is calculated by the difference of the best fit `model` and\n        the reference `data`. In case of a global fitting, the residuals are\n        calculated for each `spectra` separately plus an avaraged global residual.\n\n        $$\n        \\mathrm{residual} = \\mathrm{model} - \\mathrm{data}\n        $$\n        $$\n        \\mathrm{residual}_{i} = \\mathrm{model}_{i} - \\mathrm{data}_{i}\n        $$\n        $$\n        \\mathrm{residual}_{avg} = \\frac{ \\sum_{i}\n            \\mathrm{model}_{i} - \\mathrm{data}_{i}}{i}\n        $$\n\n        The fit is defined by the difference sum of fit and reference data. In case\n        of a global fitting, the residuals are calculated for each `spectra`\n        separately.\n    \"\"\"\n    df_copy: pd.DataFrame = self.df.copy()\n    if self.args[\"global_\"]:\n        residual = self.result.residual.reshape((-1, self.data_size)).T\n        for i, _residual in enumerate(residual, start=1):\n            df_copy[f\"{ColumnNamesAPI().residual}_{i}\"] = _residual\n            df_copy[f\"{ColumnNamesAPI().fit}_{i}\"] = (\n                self.df[f\"{ColumnNamesAPI().intensity}_{i}\"].to_numpy() + _residual\n            )\n        df_copy[f\"{ColumnNamesAPI().residual}_avg\"] = np.mean(residual, axis=0)\n    else:\n        residual = self.result.residual\n        df_copy[ColumnNamesAPI().residual] = residual\n        df_copy[ColumnNamesAPI().fit] = (\n            self.df[ColumnNamesAPI().intensity].to_numpy() + residual\n        )\n    self.df = df_copy\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PostProcessing.rename_columns","title":"<code>rename_columns(df)</code>","text":"<p>Rename the columns of the dataframe.</p> <p>Rename the columns of the dataframe to the names defined in the input file.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the original input data, which are  individually pre-named.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing renamed columns. All column-names are  lowered. In case of a regular fitting, the columns are named <code>energy</code>  and <code>intensity</code>. In case of a global fitting, <code>energy</code> stays <code>energy</code>  and <code>intensity</code> is extended by a <code>_</code>  and column index; like: <code>energy</code>  and <code>intensity_1</code>, <code>intensity_2</code>, <code>intensity_...</code> depending on  the dataset size.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def rename_columns(self, df: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Rename the columns of the dataframe.\n\n    Rename the columns of the dataframe to the names defined in the input file.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the original input data, which are\n             individually pre-named.\n\n    Returns:\n        pd.DataFrame: DataFrame containing renamed columns. All column-names are\n             lowered. In case of a regular fitting, the columns are named `energy`\n             and `intensity`. In case of a global fitting, `energy` stays `energy`\n             and `intensity` is extended by a `_`  and column index; like: `energy`\n             and `intensity_1`, `intensity_2`, `intensity_...` depending on\n             the dataset size.\n    \"\"\"\n    if self.args[\"global_\"]:\n        return df.rename(\n            columns={\n                col: (\n                    ColumnNamesAPI().energy\n                    if i == 0\n                    else f\"{ColumnNamesAPI().intensity}_{i}\"\n                )\n                for i, col in enumerate(df.columns)\n            }\n        )\n    return df.rename(\n        columns={\n            df.columns[0]: ColumnNamesAPI().energy,\n            df.columns[1]: ColumnNamesAPI().intensity,\n        }\n    )\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing","title":"<code>PreProcessing</code>","text":"<p>Summarized all pre-processing-filters  together.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>class PreProcessing:\n    \"\"\"Summarized all pre-processing-filters  together.\"\"\"\n\n    def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n        \"\"\"Initialize PreProcessing class.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n        \"\"\"\n        self.df = df\n        self.args = args\n\n    def __call__(self) -&gt; Tuple[pd.DataFrame, Dict[str, Any]]:\n        \"\"\"Apply all pre-processing-filters.\n\n        Returns:\n            pd.DataFrame: DataFrame containing the input data (`x` and `data`), which\n                 are optionally:\n\n                    1. shrinked to a given range\n                    2. shifted\n                    3. linear oversampled\n                    4. smoothed\n            Dict[str,Any]: Adding a descriptive statistics to the input dictionary.\n        \"\"\"\n        df_copy: pd.DataFrame = self.df.copy()\n        self.args[\"data_statistic\"] = df_copy.describe(\n            percentiles=np.arange(0.1, 1.0, 0.1).tolist()\n        ).to_dict(orient=\"split\")\n        try:\n            if isinstance(self.args[\"energy_start\"], (int, float)) or isinstance(\n                self.args[\"energy_stop\"], (int, float)\n            ):\n                df_copy = self.energy_range(df_copy, self.args)\n            if self.args[\"shift\"]:\n                df_copy = self.energy_shift(df_copy, self.args)\n            if self.args[\"oversampling\"]:\n                df_copy = self.oversampling(df_copy, self.args)\n            if self.args[\"smooth\"]:\n                df_copy = self.smooth_signal(df_copy, self.args)\n        except KeyError as exc:\n            print(f\"KeyError: {exc} is not part of the dataframe!\")\n            sys.exit(1)\n        return (df_copy, self.args)\n\n    @staticmethod\n    def energy_range(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n        \"\"\"Select the energy range for fitting.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Returns:\n            pd.DataFrame: DataFrame containing the `optimized` input data\n                 (`x` and `data`), which are shrinked according to the energy range.\n        \"\"\"\n        energy_start: Union[int, float] = args[\"energy_start\"]\n        energy_stop: Union[int, float] = args[\"energy_stop\"]\n\n        df_copy = df.copy()\n        if isinstance(energy_start, (int, float)) and isinstance(\n            energy_stop, (int, float)\n        ):\n            return df_copy.loc[\n                (df[args[\"column\"][0]] &gt;= energy_start)\n                &amp; (df[args[\"column\"][0]] &lt;= energy_stop)\n            ]\n        elif isinstance(energy_start, (int, float)):\n            return df_copy.loc[df[args[\"column\"][0]] &gt;= energy_start]\n        elif isinstance(energy_stop, (int, float)):\n            return df_copy.loc[df[args[\"column\"][0]] &lt;= energy_stop]\n\n    @staticmethod\n    def energy_shift(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n        \"\"\"Shift the energy axis by a given value.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Returns:\n            pd.DataFrame: DataFrame containing the `optimized` input data\n                 (`x` and `data`), which are energy-shifted by the given value.\n        \"\"\"\n        df_copy: pd.DataFrame = df.copy()\n        df_copy.loc[:, args[\"column\"][0]] = (\n            df[args[\"column\"][0]].to_numpy() + args[\"shift\"]\n        )\n        return df_copy\n\n    @staticmethod\n    def oversampling(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n        \"\"\"Oversampling the data to increase the resolution of the data.\n\n        !!! note \"About Oversampling\"\n            In this implementation of oversampling, the data is oversampled by the\n             factor of 5. In case of data with only a few points, the increased\n             resolution should allow to easier solve the optimization problem. The\n             oversampling based on a simple linear regression.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Returns:\n            pd.DataFrame: DataFrame containing the `optimized` input data\n                 (`x` and `data`), which are oversampled by the factor of 5.\n        \"\"\"\n        x_values = np.linspace(\n            df[args[\"column\"][0]].min(),\n            df[args[\"column\"][0]].max(),\n            5 * df.shape[0],\n        )\n        y_values = np.interp(\n            x_values,\n            df[args[\"column\"][0]].to_numpy(),\n            df[args[\"column\"][1]].to_numpy(),\n        )\n        return pd.DataFrame({args[\"column\"][0]: x_values, args[\"column\"][1]: y_values})\n\n    @staticmethod\n    def smooth_signal(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n        \"\"\"Smooth the intensity values.\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n\n        Returns:\n            pd.DataFrame: DataFrame containing the `optimized` input data\n                 (`x` and `data`), which are smoothed by the given value.\n        \"\"\"\n        box = np.ones(args[\"smooth\"]) / args[\"smooth\"]\n        df_copy: pd.DataFrame = df.copy()\n        df_copy.loc[:, args[\"column\"][1]] = np.convolve(\n            df[args[\"column\"][1]].to_numpy(), box, mode=\"same\"\n        )\n        return df_copy\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.__call__","title":"<code>__call__()</code>","text":"<p>Apply all pre-processing-filters.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the input data (<code>x</code> and <code>data</code>), which  are optionally:</p> CBM BASIC V2<pre><code>1. shrinked to a given range\n2. shifted\n3. linear oversampled\n4. smoothed\n</code></pre> <code>Dict[str, Any]</code> <p>Dict[str,Any]: Adding a descriptive statistics to the input dictionary.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __call__(self) -&gt; Tuple[pd.DataFrame, Dict[str, Any]]:\n    \"\"\"Apply all pre-processing-filters.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the input data (`x` and `data`), which\n             are optionally:\n\n                1. shrinked to a given range\n                2. shifted\n                3. linear oversampled\n                4. smoothed\n        Dict[str,Any]: Adding a descriptive statistics to the input dictionary.\n    \"\"\"\n    df_copy: pd.DataFrame = self.df.copy()\n    self.args[\"data_statistic\"] = df_copy.describe(\n        percentiles=np.arange(0.1, 1.0, 0.1).tolist()\n    ).to_dict(orient=\"split\")\n    try:\n        if isinstance(self.args[\"energy_start\"], (int, float)) or isinstance(\n            self.args[\"energy_stop\"], (int, float)\n        ):\n            df_copy = self.energy_range(df_copy, self.args)\n        if self.args[\"shift\"]:\n            df_copy = self.energy_shift(df_copy, self.args)\n        if self.args[\"oversampling\"]:\n            df_copy = self.oversampling(df_copy, self.args)\n        if self.args[\"smooth\"]:\n            df_copy = self.smooth_signal(df_copy, self.args)\n    except KeyError as exc:\n        print(f\"KeyError: {exc} is not part of the dataframe!\")\n        sys.exit(1)\n    return (df_copy, self.args)\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.__init__","title":"<code>__init__(df, args)</code>","text":"<p>Initialize PreProcessing class.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n    \"\"\"Initialize PreProcessing class.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n    \"\"\"\n    self.df = df\n    self.args = args\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.energy_range","title":"<code>energy_range(df, args)</code>  <code>staticmethod</code>","text":"<p>Select the energy range for fitting.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the <code>optimized</code> input data  (<code>x</code> and <code>data</code>), which are shrinked according to the energy range.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>@staticmethod\ndef energy_range(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n    \"\"\"Select the energy range for fitting.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the `optimized` input data\n             (`x` and `data`), which are shrinked according to the energy range.\n    \"\"\"\n    energy_start: Union[int, float] = args[\"energy_start\"]\n    energy_stop: Union[int, float] = args[\"energy_stop\"]\n\n    df_copy = df.copy()\n    if isinstance(energy_start, (int, float)) and isinstance(\n        energy_stop, (int, float)\n    ):\n        return df_copy.loc[\n            (df[args[\"column\"][0]] &gt;= energy_start)\n            &amp; (df[args[\"column\"][0]] &lt;= energy_stop)\n        ]\n    elif isinstance(energy_start, (int, float)):\n        return df_copy.loc[df[args[\"column\"][0]] &gt;= energy_start]\n    elif isinstance(energy_stop, (int, float)):\n        return df_copy.loc[df[args[\"column\"][0]] &lt;= energy_stop]\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.energy_shift","title":"<code>energy_shift(df, args)</code>  <code>staticmethod</code>","text":"<p>Shift the energy axis by a given value.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the <code>optimized</code> input data  (<code>x</code> and <code>data</code>), which are energy-shifted by the given value.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>@staticmethod\ndef energy_shift(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n    \"\"\"Shift the energy axis by a given value.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the `optimized` input data\n             (`x` and `data`), which are energy-shifted by the given value.\n    \"\"\"\n    df_copy: pd.DataFrame = df.copy()\n    df_copy.loc[:, args[\"column\"][0]] = (\n        df[args[\"column\"][0]].to_numpy() + args[\"shift\"]\n    )\n    return df_copy\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.oversampling","title":"<code>oversampling(df, args)</code>  <code>staticmethod</code>","text":"<p>Oversampling the data to increase the resolution of the data.</p> <p>About Oversampling</p> <p>In this implementation of oversampling, the data is oversampled by the  factor of 5. In case of data with only a few points, the increased  resolution should allow to easier solve the optimization problem. The  oversampling based on a simple linear regression.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the <code>optimized</code> input data  (<code>x</code> and <code>data</code>), which are oversampled by the factor of 5.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>@staticmethod\ndef oversampling(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n    \"\"\"Oversampling the data to increase the resolution of the data.\n\n    !!! note \"About Oversampling\"\n        In this implementation of oversampling, the data is oversampled by the\n         factor of 5. In case of data with only a few points, the increased\n         resolution should allow to easier solve the optimization problem. The\n         oversampling based on a simple linear regression.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the `optimized` input data\n             (`x` and `data`), which are oversampled by the factor of 5.\n    \"\"\"\n    x_values = np.linspace(\n        df[args[\"column\"][0]].min(),\n        df[args[\"column\"][0]].max(),\n        5 * df.shape[0],\n    )\n    y_values = np.interp(\n        x_values,\n        df[args[\"column\"][0]].to_numpy(),\n        df[args[\"column\"][1]].to_numpy(),\n    )\n    return pd.DataFrame({args[\"column\"][0]: x_values, args[\"column\"][1]: y_values})\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.PreProcessing.smooth_signal","title":"<code>smooth_signal(df, args)</code>  <code>staticmethod</code>","text":"<p>Smooth the intensity values.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>).</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the <code>optimized</code> input data  (<code>x</code> and <code>data</code>), which are smoothed by the given value.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>@staticmethod\ndef smooth_signal(df: pd.DataFrame, args: Dict[str, Any]) -&gt; pd.DataFrame:\n    \"\"\"Smooth the intensity values.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`).\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the `optimized` input data\n             (`x` and `data`), which are smoothed by the given value.\n    \"\"\"\n    box = np.ones(args[\"smooth\"]) / args[\"smooth\"]\n    df_copy: pd.DataFrame = df.copy()\n    df_copy.loc[:, args[\"column\"][1]] = np.convolve(\n        df[args[\"column\"][1]].to_numpy(), box, mode=\"same\"\n    )\n    return df_copy\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.SaveResult","title":"<code>SaveResult</code>","text":"<p>Saving the result of the fitting process.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>class SaveResult:\n    \"\"\"Saving the result of the fitting process.\"\"\"\n\n    def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n        \"\"\"Initialize SaveResult class.\n\n        !!! note \"About SaveResult\"\n\n            The SaveResult class is responsible for saving the results of the\n            optimization process. The results are saved in the following formats:\n\n            1. JSON (default) for all results and meta data of the fitting process.\n            2. CSV for the results of the optimization process.\n\n        !!! note \"About the output `CSV`-file\"\n\n            The output files are seperated into three classes:\n\n                1. The `results` of the optimization process.\n                2. The `correlation analysis` of the optimization process.\n                3. The `error analysis` of the optimization process.\n\n            The result outputfile contains the following information:\n\n                1. The column names of the energy axis (`x`) and the intensity values\n                (`data`)\n                2. The name of the column containing the energy axis (`x`)\n                3. The name of the column containing the intensity values (`data`)\n                4. The name of the column containing the best fit (`best_fit`)\n                5. The name of the column containing the residuum (`residuum`)\n                6. The name of the column containing the model contribution (`model`)\n                7. The name of the column containing the error of the model\n                    contribution (`model_error`)\n                8. The name of the column containing the error of the best fit\n                    (`best_fit_error`)\n                9. The name of the column containing the error of the residuum\n                    (`residuum_error`)\n\n            The `correlation analysis` file contains the following information about all\n            attributes of the model:\n\n                1. Energy\n                2. Intensity or Intensities (global fitting)\n                3. Residuum\n                4. Best fit\n                5. Model contribution(s)\n\n            The `error analysis` file contains the following information about all model\n            attributes vs:\n\n                1. Initial model values\n                2. Current model values\n                3. Best model values\n                4. Residuum / error relative to the best fit\n                5. Residuum / error relative to the absolute fit\n\n        Args:\n            df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n                 as well as the best fit and the corresponding residuum. Hence, it will\n                 be extended by the single contribution of the model.\n            args (Dict[str,Any]): The input file arguments as a dictionary with\n                 additional information beyond the command line arguments.\n        \"\"\"\n        self.df = df\n        self.args = transform_nested_types(args)\n\n    def __call__(self) -&gt; None:\n        \"\"\"Call the SaveResult class.\"\"\"\n        self.save_as_json()\n        self.save_as_csv()\n\n    def save_as_csv(self) -&gt; None:\n        \"\"\"Save the the fit results to csv files.\n\n        !!! note \"About saving the fit results\"\n            The fit results are saved to csv files and are divided into three different\n            categories:\n\n                1. The `results` of the optimization process.\n                2. The `correlation analysis` of the optimization process.\n                3. The `error analysis` of the optimization process.\n        \"\"\"\n        _fname = Path(f\"{self.args['outfile']}_fit.csv\")\n        self.df.to_csv(_fname, index=False)\n        pd.DataFrame(**self.args[\"linear_correlation\"]).to_csv(\n            Path(f\"{self.args['outfile']}_correlation.csv\"),\n            index=True,\n            index_label=\"attributes\",\n        )\n        pd.DataFrame.from_dict(self.args[\"fit_insights\"][\"variables\"]).to_csv(\n            Path(f\"{self.args['outfile']}_components.csv\"),\n            index=True,\n            index_label=\"attributes\",\n        )\n\n    def save_as_json(self) -&gt; None:\n        \"\"\"Save the fitting result as json file.\"\"\"\n        if self.args[\"outfile\"]:\n            with open(\n                Path(f\"{self.args['outfile']}_summary.json\"), \"w\", encoding=\"utf-8\"\n            ) as f:\n                json.dump(transform_nested_types(self.args), f, indent=4)\n        else:\n            raise FileNotFoundError(\"No output file provided!\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.SaveResult.__call__","title":"<code>__call__()</code>","text":"<p>Call the SaveResult class.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Call the SaveResult class.\"\"\"\n    self.save_as_json()\n    self.save_as_csv()\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.SaveResult.__init__","title":"<code>__init__(df, args)</code>","text":"<p>Initialize SaveResult class.</p> <p>About SaveResult</p> <p>The SaveResult class is responsible for saving the results of the optimization process. The results are saved in the following formats:</p> <ol> <li>JSON (default) for all results and meta data of the fitting process.</li> <li>CSV for the results of the optimization process.</li> </ol> <p>About the output <code>CSV</code>-file</p> <p>The output files are seperated into three classes:</p> MySQL<pre><code>1. The `results` of the optimization process.\n2. The `correlation analysis` of the optimization process.\n3. The `error analysis` of the optimization process.\n</code></pre> <p>The result outputfile contains the following information:</p> MySQL<pre><code>1. The column names of the energy axis (`x`) and the intensity values\n(`data`)\n2. The name of the column containing the energy axis (`x`)\n3. The name of the column containing the intensity values (`data`)\n4. The name of the column containing the best fit (`best_fit`)\n5. The name of the column containing the residuum (`residuum`)\n6. The name of the column containing the model contribution (`model`)\n7. The name of the column containing the error of the model\n    contribution (`model_error`)\n8. The name of the column containing the error of the best fit\n    (`best_fit_error`)\n9. The name of the column containing the error of the residuum\n    (`residuum_error`)\n</code></pre> <p>The <code>correlation analysis</code> file contains the following information about all attributes of the model:</p> CBM BASIC V2<pre><code>1. Energy\n2. Intensity or Intensities (global fitting)\n3. Residuum\n4. Best fit\n5. Model contribution(s)\n</code></pre> <p>The <code>error analysis</code> file contains the following information about all model attributes vs:</p> CBM BASIC V2<pre><code>1. Initial model values\n2. Current model values\n3. Best model values\n4. Residuum / error relative to the best fit\n5. Residuum / error relative to the absolute fit\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will  be extended by the single contribution of the model.</p> required <code>args</code> <code>Dict[str, Any]</code> <p>The input file arguments as a dictionary with  additional information beyond the command line arguments.</p> required Source code in <code>spectrafit/tools.py</code> Python<pre><code>def __init__(self, df: pd.DataFrame, args: Dict[str, Any]) -&gt; None:\n    \"\"\"Initialize SaveResult class.\n\n    !!! note \"About SaveResult\"\n\n        The SaveResult class is responsible for saving the results of the\n        optimization process. The results are saved in the following formats:\n\n        1. JSON (default) for all results and meta data of the fitting process.\n        2. CSV for the results of the optimization process.\n\n    !!! note \"About the output `CSV`-file\"\n\n        The output files are seperated into three classes:\n\n            1. The `results` of the optimization process.\n            2. The `correlation analysis` of the optimization process.\n            3. The `error analysis` of the optimization process.\n\n        The result outputfile contains the following information:\n\n            1. The column names of the energy axis (`x`) and the intensity values\n            (`data`)\n            2. The name of the column containing the energy axis (`x`)\n            3. The name of the column containing the intensity values (`data`)\n            4. The name of the column containing the best fit (`best_fit`)\n            5. The name of the column containing the residuum (`residuum`)\n            6. The name of the column containing the model contribution (`model`)\n            7. The name of the column containing the error of the model\n                contribution (`model_error`)\n            8. The name of the column containing the error of the best fit\n                (`best_fit_error`)\n            9. The name of the column containing the error of the residuum\n                (`residuum_error`)\n\n        The `correlation analysis` file contains the following information about all\n        attributes of the model:\n\n            1. Energy\n            2. Intensity or Intensities (global fitting)\n            3. Residuum\n            4. Best fit\n            5. Model contribution(s)\n\n        The `error analysis` file contains the following information about all model\n        attributes vs:\n\n            1. Initial model values\n            2. Current model values\n            3. Best model values\n            4. Residuum / error relative to the best fit\n            5. Residuum / error relative to the absolute fit\n\n    Args:\n        df (pd.DataFrame): DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will\n             be extended by the single contribution of the model.\n        args (Dict[str,Any]): The input file arguments as a dictionary with\n             additional information beyond the command line arguments.\n    \"\"\"\n    self.df = df\n    self.args = transform_nested_types(args)\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.SaveResult.save_as_csv","title":"<code>save_as_csv()</code>","text":"<p>Save the the fit results to csv files.</p> <p>About saving the fit results</p> <p>The fit results are saved to csv files and are divided into three different categories:</p> MySQL<pre><code>1. The `results` of the optimization process.\n2. The `correlation analysis` of the optimization process.\n3. The `error analysis` of the optimization process.\n</code></pre> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def save_as_csv(self) -&gt; None:\n    \"\"\"Save the the fit results to csv files.\n\n    !!! note \"About saving the fit results\"\n        The fit results are saved to csv files and are divided into three different\n        categories:\n\n            1. The `results` of the optimization process.\n            2. The `correlation analysis` of the optimization process.\n            3. The `error analysis` of the optimization process.\n    \"\"\"\n    _fname = Path(f\"{self.args['outfile']}_fit.csv\")\n    self.df.to_csv(_fname, index=False)\n    pd.DataFrame(**self.args[\"linear_correlation\"]).to_csv(\n        Path(f\"{self.args['outfile']}_correlation.csv\"),\n        index=True,\n        index_label=\"attributes\",\n    )\n    pd.DataFrame.from_dict(self.args[\"fit_insights\"][\"variables\"]).to_csv(\n        Path(f\"{self.args['outfile']}_components.csv\"),\n        index=True,\n        index_label=\"attributes\",\n    )\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.SaveResult.save_as_json","title":"<code>save_as_json()</code>","text":"<p>Save the fitting result as json file.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def save_as_json(self) -&gt; None:\n    \"\"\"Save the fitting result as json file.\"\"\"\n    if self.args[\"outfile\"]:\n        with open(\n            Path(f\"{self.args['outfile']}_summary.json\"), \"w\", encoding=\"utf-8\"\n        ) as f:\n            json.dump(transform_nested_types(self.args), f, indent=4)\n    else:\n        raise FileNotFoundError(\"No output file provided!\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.check_keywords_consistency","title":"<code>check_keywords_consistency(check_args, ref_args)</code>","text":"<p>Check if the keywords are consistent.</p> <p>Check if the keywords are consistent between two dictionaries. The two dictionaries are reference keywords of the <code>cmd_line_args</code> and the <code>args</code> of the <code>input_file</code>.</p> <p>Parameters:</p> Name Type Description Default <code>check_args</code> <code>MutableMapping[str, Any]</code> <p>First dictionary to be checked.</p> required <code>ref_args</code> <code>Dict[str, Any]</code> <p>Second dictionary to be checked.</p> required <p>Raises:</p> Type Description <code>KeyError</code> <p>If the keywords are not consistent.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def check_keywords_consistency(\n    check_args: MutableMapping[str, Any], ref_args: Dict[str, Any]\n) -&gt; None:\n    \"\"\"Check if the keywords are consistent.\n\n    Check if the keywords are consistent between two dictionaries. The two dictionaries\n    are reference keywords of the `cmd_line_args` and the `args` of the `input_file`.\n\n    Args:\n        check_args (MutableMapping[str, Any]): First dictionary to be checked.\n        ref_args (Dict[str,Any]): Second dictionary to be checked.\n\n    Raises:\n        KeyError: If the keywords are not consistent.\n    \"\"\"\n    for key in check_args:\n        if key not in ref_args.keys():\n            raise KeyError(f\"ERROR: The {key} is not parameter of the `cmd-input`!\")\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.exclude_none_dictionary","title":"<code>exclude_none_dictionary(value)</code>","text":"<p>Exclude <code>None</code> values from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Dict[str, Any]</code> <p>Dictionary to be processed to exclude <code>None</code> values.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Dictionary without <code>None</code> values.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def exclude_none_dictionary(value: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Exclude `None` values from the dictionary.\n\n    Args:\n        value (Dict[str, Any]): Dictionary to be processed to\n            exclude `None` values.\n\n    Returns:\n        Dict[str, Any]: Dictionary without `None` values.\n    \"\"\"\n    if isinstance(value, list):\n        return [exclude_none_dictionary(v) for v in value if v is not None]\n    elif isinstance(value, dict):\n        return {\n            k: exclude_none_dictionary(v) for k, v in value.items() if v is not None\n        }\n    else:\n        return value\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.load_data","title":"<code>load_data(args)</code>","text":"<p>Load the data from a txt file.</p> <p>About the data format</p> <p>Load data from a txt file, which can be an ASCII file as txt, csv, or user-specific but rational file. The file can be separated by a delimiter.</p> <p>In case of 2d data, the columns has to be defined. In case of 3D data, all columns are considered as data.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Dict[str, str]</code> <p>The input file arguments as a dictionary with additional  information beyond the command line arguments.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the input data (<code>x</code> and <code>data</code>),  as well as the best fit and the corresponding residuum. Hence, it will be  extended by the single contribution of the model.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def load_data(args: Dict[str, str]) -&gt; pd.DataFrame:\n    \"\"\"Load the data from a txt file.\n\n    !!! note \"About the data format\"\n\n        Load data from a txt file, which can be an ASCII file as txt, csv, or\n        user-specific but rational file. The file can be separated by a delimiter.\n\n        In case of 2d data, the columns has to be defined. In case of 3D data, all\n        columns are considered as data.\n\n    Args:\n        args (Dict[str,str]): The input file arguments as a dictionary with additional\n             information beyond the command line arguments.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the input data (`x` and `data`),\n             as well as the best fit and the corresponding residuum. Hence, it will be\n             extended by the single contribution of the model.\n    \"\"\"\n    try:\n        if args[\"global_\"]:\n            return pd.read_csv(\n                args[\"infile\"],\n                sep=args[\"separator\"],\n                header=args[\"header\"],\n                dtype=np.float64,\n                decimal=args[\"decimal\"],\n                comment=args[\"comment\"],\n            )\n        return pd.read_csv(\n            args[\"infile\"],\n            sep=args[\"separator\"],\n            header=args[\"header\"],\n            usecols=args[\"column\"],\n            dtype=np.float64,\n            decimal=args[\"decimal\"],\n            comment=args[\"comment\"],\n        )\n    except ValueError as exc:\n        print(f\"Error: {exc} -&gt; Dataframe contains non numeric data!\")\n        sys.exit(1)\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.pkl2any","title":"<code>pkl2any(pkl_fname, encoding='latin1')</code>","text":"<p>Load a pkl file and return the data as a any type of data or object.</p> <p>Parameters:</p> Name Type Description Default <code>pkl_fname</code> <code>Path</code> <p>The pkl file to load.</p> required <code>encoding</code> <code>str</code> <p>The encoding to use. Defaults to \"latin1\".</p> <code>'latin1'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the file format is not supported.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Data or objects, which can contain various data types supported by pickle.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def pkl2any(pkl_fname: Path, encoding: str = \"latin1\") -&gt; Any:\n    \"\"\"Load a pkl file and return the data as a any type of data or object.\n\n    Args:\n        pkl_fname (Path): The pkl file to load.\n        encoding (str, optional): The encoding to use. Defaults to \"latin1\".\n\n    Raises:\n        ValueError: If the file format is not supported.\n\n    Returns:\n        Any: Data or objects, which can contain various data types supported by pickle.\n    \"\"\"\n    if pkl_fname.suffix == \".gz\":\n        with gzip.open(pkl_fname, \"rb\") as f:\n            return unicode_check(f, encoding=encoding)\n    elif pkl_fname.suffix == \".pkl\":\n        with open(pkl_fname, \"rb\") as f:\n            return unicode_check(f, encoding=encoding)\n    else:\n        choices = [\".pkl\", \".pkl.gz\"]\n        raise ValueError(\n            f\"File format '{pkl_fname.suffix}' is not supported. \"\n            f\"Supported file formats are: {choices}\"\n        )\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.pure_fname","title":"<code>pure_fname(fname)</code>","text":"<p>Return the filename without the suffix.</p> <p>Pure filename without the suffix is implemented to avoid the problem with multiple dots in the filename like <code>test.pkl.gz</code> or <code>test.tar.gz</code>. The <code>stem</code> attribute of the <code>Path</code> class returns the filename without the suffix, but it also removes only the last suffix. Hence, the <code>test.pkl.gz</code> will be returned as <code>test.pkl</code> and not as <code>test</code>. This function returns the filename without the suffix. It is implemented recursively to remove all suffixes.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>Path</code> <p>The filename to be processed.</p> required <p>Returns:</p> Name Type Description <code>Path</code> <code>Path</code> <p>The filename without the suffix.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def pure_fname(fname: Path) -&gt; Path:\n    \"\"\"Return the filename without the suffix.\n\n    Pure filename without the suffix is implemented to avoid the problem with\n    multiple dots in the filename like `test.pkl.gz` or `test.tar.gz`.\n    The `stem` attribute of the `Path` class returns the filename without the\n    suffix, but it also removes only the last suffix. Hence, the `test.pkl.gz`\n    will be returned as `test.pkl` and not as `test`. This function returns\n    the filename without the suffix. It is implemented recursively to remove\n    all suffixes.\n\n    Args:\n        fname (Path): The filename to be processed.\n\n    Returns:\n        Path: The filename without the suffix.\n    \"\"\"\n    _fname = fname.parent / fname.stem\n    return pure_fname(_fname) if _fname.suffix else _fname\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.read_input_file","title":"<code>read_input_file(fname)</code>","text":"<p>Read the input file.</p> <p>Read the input file as <code>toml</code>, <code>json</code>, or <code>yaml</code> files and return as a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>fname</code> <code>str</code> <p>Name of the input file.</p> required <p>Raises:</p> Type Description <code>OSError</code> <p>If the input file is not supported.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>MutableMapping[str, Any]</code> <p>Return the input file arguments as a dictionary with additional  information beyond the command line arguments.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def read_input_file(fname: Path) -&gt; MutableMapping[str, Any]:\n    \"\"\"Read the input file.\n\n    Read the input file as `toml`, `json`, or `yaml` files and return as a dictionary.\n\n    Args:\n        fname (str): Name of the input file.\n\n    Raises:\n        OSError: If the input file is not supported.\n\n    Returns:\n        dict: Return the input file arguments as a dictionary with additional\n             information beyond the command line arguments.\n\n    \"\"\"\n    fname = Path(fname)\n\n    if fname.suffix == \".toml\":\n        with open(fname, \"rb\") as f:\n            args = tomli.load(f)\n    elif fname.suffix == \".json\":\n        with open(fname, encoding=\"utf-8\") as f:\n            args = json.load(f)\n    elif fname.suffix in {\".yaml\", \".yml\"}:\n        with open(fname, encoding=\"utf-8\") as f:\n            args = yaml.load(f, Loader=yaml.FullLoader)\n    else:\n        raise OSError(\n            f\"ERROR: Input file {fname} has not supported file format.\\n\"\n            \"Supported fileformats are: '*.json', '*.yaml', and '*.toml'\"\n        )\n    return args\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.transform_nested_types","title":"<code>transform_nested_types(value)</code>","text":"<p>Transform nested types numpy values to python values.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Dict[str, Any]</code> <p>Dictionary to be processed to transform numpy values to python values.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Dictionary with python values.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def transform_nested_types(value: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Transform nested types numpy values to python values.\n\n    Args:\n        value (Dict[str, Any]): Dictionary to be processed to\n            transform numpy values to python values.\n\n    Returns:\n        Dict[str, Any]: Dictionary with python values.\n    \"\"\"\n    if isinstance(value, list):\n        return [transform_nested_types(v) for v in value]\n    elif isinstance(value, tuple):\n        return tuple(transform_nested_types(v) for v in value)\n    elif isinstance(value, dict):\n        return {k: transform_nested_types(v) for k, v in value.items()}\n    elif isinstance(value, np.ndarray):\n        return transform_nested_types(value.tolist())\n    elif isinstance(value, np.int32):\n        return int(value)\n    elif isinstance(value, np.int64):\n        return int(value)\n    elif isinstance(value, np.bool_):\n        return bool(value)\n    elif isinstance(value, np.float64):\n        return float(value)\n    else:\n        return value\n</code></pre>"},{"location":"api/tools_api/#spectrafit.tools.unicode_check","title":"<code>unicode_check(f, encoding='latin1')</code>","text":"<p>Check if the pkl file is encoded in unicode.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>Any</code> <p>The pkl file to load.</p> required <code>encoding</code> <code>str</code> <p>The encoding to use. Defaults to \"latin1\".</p> <code>'latin1'</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The pkl file, which can be a nested dictionary containing raw data, metadata, and other information.</p> Source code in <code>spectrafit/tools.py</code> Python<pre><code>def unicode_check(f: Any, encoding: str = \"latin1\") -&gt; Any:\n    \"\"\"Check if the pkl file is encoded in unicode.\n\n    Args:\n        f (Any): The pkl file to load.\n        encoding (str, optional): The encoding to use. Defaults to \"latin1\".\n\n    Returns:\n        Any: The pkl file, which can be a nested dictionary containing raw data,\n            metadata, and other information.\n    \"\"\"\n    try:\n        data_dict = pickle.load(f)\n    except UnicodeDecodeError:  # pragma: no cover\n        data_dict = pickle.load(f, encoding=encoding)\n    return data_dict\n</code></pre>"},{"location":"changelogs/v0.x.x/","title":"Change Log for SpectraFit package for 0.x.x","text":""},{"location":"changelogs/v0.x.x/#v0229-2023-09-30","title":"v0.22.9 \ud83c\udf08 - 2023-09-30","text":""},{"location":"changelogs/v0.x.x/#whats-changed","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance","title":"Maintenance","text":"<ul> <li>build: \ud83c\udff7\ufe0f <code>v0.22.9</code> (#1037) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python","title":"Python","text":"<ul> <li>build: \ud83c\udff7\ufe0f <code>v0.22.9</code> (#1037) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions","title":":octocat: Github Actions","text":"<ul> <li>ci:  Add <code>--push</code> to apply the delete (#1035) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates","title":"Dependency Updates","text":"<ul> <li>build: \ud83c\udff7\ufe0f <code>v0.22.9</code> (#1037) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.8 (#1034)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.8...v0.22.9</p>"},{"location":"changelogs/v0.x.x/#who-contributes","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0228-2023-09-27","title":"v0.22.8 \ud83c\udf08 - 2023-09-27","text":""},{"location":"changelogs/v0.x.x/#whats-changed_1","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_1","title":"Maintenance","text":"<ul> <li>fix:  Update <code>ci</code> workflow for auto-release (#1033)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_1","title":"Python","text":"<ul> <li>fix:  Update <code>ci</code> workflow for auto-release (#1033)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_1","title":":octocat: Github Actions","text":"<ul> <li>fix:  Update <code>ci</code> workflow for auto-release (#1033)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_1","title":"Dependency Updates","text":"<ul> <li>fix:  Update <code>ci</code> workflow for auto-release (#1033)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_1","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.7 (#1032)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_1","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.7...v0.22.8</p>"},{"location":"changelogs/v0.x.x/#who-contributes_1","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0227-2023-09-27","title":"v0.22.7 \ud83c\udf08 - 2023-09-27","text":""},{"location":"changelogs/v0.x.x/#whats-changed_2","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_2","title":"Maintenance","text":"<ul> <li>ci: \ud83d\udc77 Add <code>gh</code> workflow for auto-release (#1029) @Anselmoo</li> <li>ci: \u2b06\ufe0f pre-commit autoupdate (#1024) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_2","title":"Python","text":"<ul> <li>ci: \ud83d\udc77 Add <code>gh</code> workflow for auto-release (#1029) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_2","title":":octocat: Github Actions","text":"<ul> <li>ci: \ud83d\udc77 Add <code>gh</code> workflow for auto-release (#1029) @Anselmoo</li> <li>fix:  Update release and changelog cd (#1025) @Anselmoo</li> <li>docs: \ud83d\udcdd <code>Release/v0.22.6</code> (#1021) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation","title":"Documentation","text":"<ul> <li>style:  Update the color scheme (#1022) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_2","title":"Dependency Updates","text":"<ul> <li>ci: \ud83d\udc77 Add <code>gh</code> workflow for auto-release (#1029) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_2","title":"Changelog","text":"<ul> <li>docs: \ud83d\udcdd <code>Release/v0.22.6</code> (#1021) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_2","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.6...v0.22.7</p>"},{"location":"changelogs/v0.x.x/#who-contributes_2","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0226-2023-09-22","title":"v0.22.6 \ud83c\udf08 - 2023-09-22","text":""},{"location":"changelogs/v0.x.x/#whats-changed_3","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_3","title":"Maintenance","text":"<ul> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> <li>build(deps-dev): \u2b06\ufe0f Bump bump-pydantic from 0.6.1 to 0.7.0 (#1014) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#1013) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_3","title":"Python","text":"<ul> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_3","title":":octocat: Github Actions","text":"<ul> <li>ci: \u267b\ufe0f Update linting CI files (#1010) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_1","title":"Documentation","text":"<ul> <li>revert:  Switch back to previous definitions (#1020) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> <li>build(deps-dev): \u2b06\ufe0f Bump bump-pydantic from 0.6.1 to 0.7.0 (#1014) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_3","title":"Dependency Updates","text":"<ul> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> <li>build(deps-dev): \u2b06\ufe0f Bump bump-pydantic from 0.6.1 to 0.7.0 (#1014) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#security","title":"Security","text":"<ul> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_3","title":"Changelog","text":"<ul> <li>build(deps-dev): Bump mkdocs-material from 9.3.1 to 9.4.0 (#1019) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_3","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.5...v0.22.6</p>"},{"location":"changelogs/v0.x.x/#who-contributes_3","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#whats-changed_4","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_4","title":"Maintenance","text":"<ul> <li>build: \u2b06\ufe0f <code>v0.22.5</code> (#1008) @Anselmoo</li> <li>ci: \u2b06\ufe0f pre-commit autoupdate (#990) @pre-commit-ci</li> <li>docs:  Update color schema (#986) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump mkdocs-material from 9.1.21 to 9.2.1 (#974)   @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#973) @pre-commit-ci</li> <li>build:  Upgrade dependencies (#968) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#960) @pre-commit-ci</li> <li>[pre-commit.ci] \u2b06\ufe0f pre-commit autoupdate (#951) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_4","title":"Python","text":"<ul> <li>build: \u2b06\ufe0f <code>v0.22.5</code> (#1008) @Anselmoo</li> <li>build: \u2b06\ufe0f Update dependencies &amp; tests (#1005) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_4","title":":octocat: Github Actions","text":"<ul> <li>build: \u2b06\ufe0f <code>v0.22.5</code> (#1008) @Anselmoo</li> <li>build: \u2b06\ufe0f Bump codecov/codecov-action from 3 to 4 (#1006) @dependabot</li> <li>build: \u2b06\ufe0f Update dependencies &amp; tests (#1005) @Anselmoo</li> <li>docs:  Update color schema (#986) @Anselmoo</li> <li>build(deps): Bump actions/checkout from 3 to 4 (#991) @dependabot</li> <li>build(deps): Bump docker/setup-buildx-action from   7703e82 to   885d146 (#980) @dependabot</li> <li>ci:  Remove outdated CI (#977) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.8 to 1.8.10 (#956)   @dependabot</li> <li>build(deps): Bump docker/setup-buildx-action from   79abd3f to   7703e82 (#952) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_2","title":"Documentation","text":"<ul> <li>docs:  Update color schema (#986) @Anselmoo</li> <li>docs:  Split licenses into License and Third Party (#971) @Anselmoo</li> <li>Update usage.md (#970) @Anselmoo</li> <li>docs:  Update <code>mkdocs</code> workflow (#969) @Anselmoo</li> <li>doc:  Update LICENSE (#948) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_4","title":"Dependency Updates","text":"<ul> <li>build: \u2b06\ufe0f <code>v0.22.5</code> (#1008) @Anselmoo</li> <li>build: \u2b06\ufe0f Update dependencies &amp; tests (#1005) @Anselmoo</li> <li>docs:  Update color schema (#986) @Anselmoo</li> <li>bump mkdocs-material from 9.2.3 to 9.2.5 (#978) @dependabot</li> <li>build(deps): Bump pydantic from 2.2.1 to 2.3.0 (#976) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.2.1 to 9.2.3 (#975) @dependabot</li> <li>build(deps-dev): \u2b06\ufe0f Bump mkdocs-material from 9.1.21 to 9.2.1 (#974)   @dependabot</li> <li>build(deps): Bump itables from 1.5.3 to 1.5.4 (#972) @dependabot</li> <li>build:  Upgrade dependencies (#968) @Anselmoo</li> <li>build(deps): Bump pydantic from 2.1.1 to 2.2.0 (#967) @dependabot</li> <li>build(deps-dev): Bump dash from 2.11.1 to 2.12.1 (#963) @dependabot</li> <li>build(deps-dev): Bump mypy from 1.5.0 to 1.5.1 (#962) @dependabot</li> <li>build(deps): Bump jupyterlab from 4.0.4 to 4.0.5 (#958) @dependabot</li> <li>build(deps-dev): Bump mypy from 1.4.1 to 1.5.0 (#955) @dependabot</li> <li>build(deps): Bump tqdm from 4.66.0 to 4.66.1 (#957) @dependabot</li> <li>build(deps): \u2b06\ufe0f Bump tqdm from 4.65.0 to 4.66.0 (#954) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage","title":"Testing &amp; Coverage","text":"<ul> <li>build: \u2b06\ufe0f Update dependencies &amp; tests (#1005) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_4","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.4 (#950)   @Anselmoo</li> <li>docs:  Update CHANGELOG for release/v0.22.3 (#949)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_4","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.4...v0.22.5</p>"},{"location":"changelogs/v0.x.x/#who-contributes_4","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0224-2023-08-05","title":"v0.22.4 \ud83c\udf08 - 2023-08-05","text":""},{"location":"changelogs/v0.x.x/#whats-changed_5","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#codesspaces","title":"Codesspaces","text":"<ul> <li>build:  Update dependencies (#946) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_5","title":"Maintenance","text":"<ul> <li>fix:  Correct path to logo (#947) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump mkdocs-autorefs from 0.4.1 to 0.5.0 (#943)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#python_5","title":"Python","text":"<ul> <li>fix:  Correct path to logo (#947) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_5","title":":octocat: Github Actions","text":"<ul> <li>build(deps): \u2b06\ufe0f Bump docker/metadata-action from 3.3.0 to 4.6.0 (#944)   @dependabot</li> <li>build:  Update dependencies (#946) @Anselmoo</li> <li>build(deps): \u2b06\ufe0f Bump docker/build-push-action from 2.10.0 to 4.1.1 (#942)   @dependabot</li> <li>build(deps): \u2b06\ufe0f Bump docker/metadata-action from 3.3.0 to 4.6.0 (#940)   @dependabot</li> <li>fix:  Add outputs (#939) @Anselmoo</li> <li>feat:  Using <code>docker-ci</code> as workflow for publishing   (#938) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_3","title":"Documentation","text":"<ul> <li>build:  Update dependencies (#946) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_5","title":"Dependency Updates","text":"<ul> <li>fix:  Correct path to logo (#947) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump mkdocs-autorefs from 0.4.1 to 0.5.0 (#943)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_1","title":"Testing &amp; Coverage","text":"<ul> <li>fix:  Correct path to logo (#947) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#docker","title":"Docker","text":"<ul> <li>build:  Update dependencies (#946) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_5","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.3...v0.22.4</p>"},{"location":"changelogs/v0.x.x/#v0223-2023-08-01","title":"v0.22.3 \ud83c\udf08 - 2023-08-01","text":""},{"location":"changelogs/v0.x.x/#whats-changed_6","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_6","title":"Maintenance","text":"<ul> <li>build:  Update release of docker image (#937) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_6","title":"Python","text":"<ul> <li>build:  Update release of docker image (#937) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_6","title":":octocat: Github Actions","text":"<ul> <li>build:  Update release of docker image (#937) @Anselmoo</li> <li>ci: \ud83d\udc77 Change to a different registry (#935) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_4","title":"Documentation","text":"<ul> <li>build:  Update release of docker image (#937) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_6","title":"Dependency Updates","text":"<ul> <li>build:  Update release of docker image (#937) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_6","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.2...v0.22.3</p>"},{"location":"changelogs/v0.x.x/#who-contributes_5","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0222-2023-07-31","title":"v0.22.2 \ud83c\udf08 - 2023-07-31","text":""},{"location":"changelogs/v0.x.x/#whats-changed_7","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_7","title":"Maintenance","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_7","title":"Python","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_7","title":":octocat: Github Actions","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_7","title":"Dependency Updates","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_2","title":"Testing &amp; Coverage","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_5","title":"Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.22.1 (#933)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_7","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.1...v0.22.2</p>"},{"location":"changelogs/v0.x.x/#who-contributes_6","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0221-2023-07-31","title":"v0.22.1 \ud83c\udf08 - 2023-07-31","text":""},{"location":"changelogs/v0.x.x/#whats-changed_8","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_8","title":"Maintenance","text":"<ul> <li>build: \u2728 Introducing ARM64 support (#932) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_8","title":"Python","text":"<ul> <li>build: \u2728 Introducing ARM64 support (#932) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_8","title":":octocat: Github Actions","text":"<ul> <li>build: \u2728 Introducing ARM64 support (#932) @Anselmoo</li> <li>ci:  Update docker build (#929) @Anselmoo</li> <li>Cleanup (#927) @Anselmoo</li> <li>ci:  Testing of Multi-Dockerimages (#926) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_5","title":"Documentation","text":"<ul> <li>[ImgBot] Optimize images (#925) @imgbot</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_8","title":"Dependency Updates","text":"<ul> <li>build: \u2728 Introducing ARM64 support (#932) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_6","title":"Changelog","text":"<ul> <li>docs:  Update changelog manually (#928) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_8","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.22.0...v0.22.1</p>"},{"location":"changelogs/v0.x.x/#who-contributes_7","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0220-2023-07-29","title":"v0.22.0 \ud83c\udf08 - 2023-07-29","text":""},{"location":"changelogs/v0.x.x/#whats-changed_9","title":"What's Changed","text":""},{"location":"changelogs/v0.x.x/#new","title":"New","text":"<ul> <li>feat: \ud83d\udc77 Add arm64 support (#921) @Anselmoo</li> <li>feat:  Add more font and color themes (#920) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_9","title":"Maintenance","text":"<ul> <li>ci: \ud83d\udd8c\ufe0f Update style (#924) @Anselmoo</li> <li>build:  v0.22.0 (#922) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_9","title":":octocat: Github Actions","text":"<ul> <li>feat: \ud83d\udc77 Add arm64 support (#921) @Anselmoo</li> <li>ci:  Update <code>create-pull-request</code> (#916) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_6","title":"Documentation","text":"<ul> <li>ci: \ud83d\udd8c\ufe0f Update style (#924) @Anselmoo</li> <li>feat: \ud83d\udc77 Add arm64 support (#921) @Anselmoo</li> <li>feat:  Add more font and color themes (#920) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_9","title":"Dependency Updates","text":"<ul> <li>build:  v0.22.0 (#922) @Anselmoo</li> <li>build(deps-dev):  Bump mkdocs-material from 9.1.20 to 9.1.21 (#917)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_3","title":"Testing &amp; Coverage","text":"<ul> <li>feat:  Add more font and color themes (#920) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_7","title":"Changelog","text":"<ul> <li>ci: \ud83d\udd8c\ufe0f Update style (#924) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_9","title":"Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.21.1...v0.22.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_8","title":"Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0211-2023-07-26","title":"v0.21.1 \ud83c\udf08 - 2023-07-26","text":""},{"location":"changelogs/v0.x.x/#whats-changed_10","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_10","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>docs: \u270f\ufe0f Update docs (#915) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-minify-plugin from 0.6.4 to 0.7.0 (#913)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_10","title":":octocat: Github Actions","text":"<ul> <li>docs: \u270f\ufe0f Update docs (#915) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_7","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>docs: \u270f\ufe0f Update docs (#915) @Anselmoo</li> <li>doc:  Add edit buttons to homepage (#914) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_10","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>docs: \u270f\ufe0f Update docs (#915) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-minify-plugin from 0.6.4 to 0.7.0 (#913)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_8","title":"\ud83d\udcdd Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.21.0 (#912)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_10","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.21.0...v0.21.1</p>"},{"location":"changelogs/v0.x.x/#who-contributes_9","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0210-2023-07-26","title":"v0.21.0 \ud83c\udf08 - 2023-07-26","text":""},{"location":"changelogs/v0.x.x/#whats-changed_11","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#new_1","title":"\ud83d\ude80 New","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_11","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>build(deps-dev): Bump bump-pydantic from 0.3.0 to 0.4.0 (#900) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#896) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_9","title":"\ud83d\udc0d Python","text":"<ul> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>fix:  Add polynomial-functions to <code>ModelsAPI</code> (#899) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_11","title":":octocat: Github Actions","text":"<ul> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.7 to 1.8.8 (#890)   @dependabot</li> <li>build(deps): Bump peter-evans/create-pull-request from 3 to 5 (#889)   @dependabot</li> <li>fix:  try new pr-auto (#887) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_8","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_11","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>build(deps-dev): Bump bump-pydantic from 0.6.0 to 0.6.1 (#909) @dependabot</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>build(deps): Bump pyyaml from 6.0 to 6.0.1 (#901) @dependabot</li> <li>build(deps-dev): Bump bump-pydantic from 0.3.0 to 0.4.0 (#900) @dependabot</li> <li>build(deps): Bump dash-bootstrap-components from 1.4.1 to 1.4.2 (#894)   @dependabot</li> <li>build(deps): Bump lmfit from 1.2.1 to 1.2.2 (#893) @dependabot</li> <li>build(deps): Bump pydantic from 2.0.2 to 2.0.3 (#895) @dependabot</li> <li>build(deps): Bump jupyterlab from 4.0.2 to 4.0.3 (#891) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_4","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>fix:  Add polynomial-functions to <code>ModelsAPI</code> (#899) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#security_1","title":"\ud83d\udd12 Security","text":"<ul> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_9","title":"\ud83d\udcdd Changelog","text":"<ul> <li>docs:  Update CHANGELOG for release/v0.20.1 (#888)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#docker_1","title":"\ud83d\udc33 Docker","text":"<ul> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#vendor","title":"\ud83d\udce6 Vendor","text":"<ul> <li>feat:  Add <code>pearson</code> functions from type I to IV (#911) @Anselmoo</li> <li>feat: \ud83d\ude80 Add PPTX Converter (#904) @Anselmoo</li> <li>Updated submodule vendor/docker-stacks (#892) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_11","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.20.1...v0.21.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_10","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0201-2023-07-11","title":"v0.20.1 \ud83c\udf08 - 2023-07-11","text":""},{"location":"changelogs/v0.x.x/#whats-changed_12","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_12","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>fix: \ud83d\udc1b URL export as str (#886) @Anselmoo</li> <li>build(deps-dev): Bump bump-pydantic from 0.1.0 to 0.3.0 (#884) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#883) @pre-commit-ci</li> <li>[pre-commit.ci] pre-commit autoupdate (#874) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_12","title":":octocat: Github Actions","text":"<ul> <li>build(deps): Bump actions/github-script from 4 to 6 (#873) @dependabot</li> <li>fix:  Change workflow to github-script (#872) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_12","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>fix: \ud83d\udc1b URL export as str (#886) @Anselmoo</li> <li>build(deps-dev): Bump bump-pydantic from 0.1.0 to 0.3.0 (#884) @dependabot</li> <li>build(deps-dev): Bump blacken-docs from 1.14.0 to 1.15.0 (#882) @dependabot</li> <li>build(deps): Bump pydantic from 2.0 to 2.0.2 (#879) @dependabot</li> <li>build(deps): Bump ipywidgets from 8.0.6 to 8.0.7 (#876) @dependabot</li> <li>build(deps-dev): Bump mkdocs-jupyter from 0.24.1 to 0.24.2 (#878) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.17 to 9.1.18 (#875) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_5","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>fix: \ud83d\udc1b URL export as str (#886) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#security_2","title":"\ud83d\udd12 Security","text":"<ul> <li>docs:  Update SECURITY.md (#880) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_10","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#871) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#vendor_1","title":"\ud83d\udce6 Vendor","text":"<ul> <li>docs:  Update vendor dependencies (#881) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_12","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.20.0...v0.20.1</p>"},{"location":"changelogs/v0.x.x/#who-contributes_11","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0200-2023-07-02","title":"v0.20.0 \ud83c\udf08 - 2023-07-02","text":""},{"location":"changelogs/v0.x.x/#whats-changed_13","title":"\ud83e\udded What's Changed","text":"<ul> <li>fix:  Update spectra_generator.py (#870) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#new_2","title":"\ud83d\ude80 New","text":"<ul> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_13","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>fix: \ud83c\udfd7\ufe0f Fix building docs and changelog (#867) @Anselmoo</li> <li>build:  v0.20.0 (#866) @Anselmoo</li> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_10","title":"\ud83d\udc0d Python","text":"<ul> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> <li>chore:  Change from <code>errors</code> to <code>components</code> (#860) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_13","title":":octocat: Github Actions","text":"<ul> <li>fix:  Update update-changelog.yaml (#868) @Anselmoo</li> <li>fix: \ud83c\udfd7\ufe0f Fix building docs and changelog (#867) @Anselmoo</li> <li>ci:  Update Doc-Release (#865) @Anselmoo</li> <li>ci:  Remove duplicated CI-check (#864) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.6 to 1.8.7 (#856)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_9","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_13","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>fix: \ud83c\udfd7\ufe0f Fix building docs and changelog (#867) @Anselmoo</li> <li>build:  v0.20.0 (#866) @Anselmoo</li> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> <li>build(deps-dev): Bump dash from 2.11.0 to 2.11.1 (#859) @dependabot</li> <li>build(deps): Bump pandas from 2.0.2 to 2.0.3 (#858) @dependabot</li> <li>build(deps): Bump numpy from 1.24.3 to 1.24.4 (#857) @dependabot</li> <li>build(deps-dev): Bump mypy from 1.4.0 to 1.4.1 (#852) @dependabot</li> <li>build(deps-dev): Bump pytest from 7.3.2 to 7.4.0 (#853) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.16 to 9.1.17 (#851) @dependabot</li> <li>build(deps-dev): Bump dash from 2.10.2 to 2.11.0 (#854) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_6","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>build:  Updating to <code>pydantic v2.0.0</code> (#863) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_11","title":"\ud83d\udcdd Changelog","text":"<ul> <li>fix: \u270d\ufe0f Add missing CHANGELOG of <code>0.18.1</code> (#850) @Anselmoo</li> <li>Update CHANGELOG (#849) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_13","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.19.0...v0.20.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_12","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0190-2023-06-21","title":"v0.19.0 \ud83c\udf08 - 2023-06-21","text":""},{"location":"changelogs/v0.x.x/#whats-changed_14","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#new_3","title":"\ud83d\ude80 New","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_14","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> <li>[pre-commit.ci] pre-commit autoupdate (#843) @pre-commit-ci</li> <li>build:  Minor dependency updates (#845) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#python_11","title":"\ud83d\udc0d Python","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_14","title":":octocat: Github Actions","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_14","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> <li>build:  Minor dependency updates (#845) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_7","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>feat:  added 2. and 3. order polynomial model (#847) @josephzsombor</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_12","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#844) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_14","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.18.3...v0.19.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_13","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo and @josephzsombor</p>"},{"location":"changelogs/v0.x.x/#v0183-2023-06-18","title":"v0.18.3 \ud83c\udf08 - 2023-06-18","text":""},{"location":"changelogs/v0.x.x/#whats-changed_15","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#codesspaces_1","title":"\ud83d\udcbb Codesspaces","text":"<ul> <li>0.18.3-release (#842) @Anselmoo</li> <li>perf:  Update <code>devcontainer.json</code> (#841) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_15","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>0.18.3-release (#842) @Anselmoo</li> <li>build(deps): Bump art from 5.9 to 6.0 (#833) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#828) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_15","title":":octocat: Github Actions","text":"<ul> <li>ci:  Create codeql.yml (#839) @Anselmoo</li> <li>build(deps): Bump docker/build-push-action from 4.1.0 to 4.1.1 (#830)   @dependabot</li> <li>build(deps): Bump docker/metadata-action from 4.5.0 to 4.6.0 (#829)   @dependabot</li> <li>build(deps): Bump docker/build-push-action from 4.0.0 to 4.1.0 (#824)   @dependabot</li> <li>build(deps): Bump docker/metadata-action from 4.4.0 to 4.5.0 (#820)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_15","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>0.18.3-release (#842) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.15 to 9.1.16 (#835) @dependabot</li> <li>build(deps-dev): Bump pytest-mock from 3.10.0 to 3.11.1 (#834) @dependabot</li> <li>build(deps-dev): Bump pre-commit from 3.3.2 to 3.3.3 (#831) @dependabot</li> <li>build(deps): Bump art from 5.9 to 6.0 (#833) @dependabot</li> <li>build(deps-dev): Bump blacken-docs from 1.13.0 to 1.14.0 (#832) @dependabot</li> <li>build(deps-dev): Bump pytest from 7.3.1 to 7.3.2 (#826) @dependabot</li> <li>build(deps-dev): Bump mkdocs-table-reader-plugin from 2.0 to 2.0.1 (#825)   @dependabot</li> <li>build(deps): Bump itables from 1.5.2 to 1.5.3 (#827) @dependabot</li> <li>build(deps): Bump jupyterlab from 4.0.1 to 4.0.2 (#823) @dependabot</li> <li>build(deps): Bump pydantic from 1.10.8 to 1.10.9 (#821) @dependabot</li> <li>build(deps): Bump plotly from 5.14.1 to 5.15.0 (#822) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_13","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#819) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#docker_2","title":"\ud83d\udc33 Docker","text":"<ul> <li>0.18.3-release (#842) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_15","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.18.2...v0.18.3</p>"},{"location":"changelogs/v0.x.x/#who-contributes_14","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0182-2023-06-05","title":"v0.18.2 \ud83c\udf08 - 2023-06-05","text":""},{"location":"changelogs/v0.x.x/#whats-changed_16","title":"\ud83e\udded What's Changed","text":"<ul> <li>ci: : Update sonar-scanner.properties (#816) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_16","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>fix:  Re-Write misleading formulation (#815) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_10","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>docs:  Update README.md (#817) @Anselmoo</li> <li>fix:  Re-Write misleading formulation (#815) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_16","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>docs:  Update README.md (#817) @Anselmoo</li> <li>build(deps-dev): Bump jupytext from 1.14.5 to 1.14.6 (#818) @dependabot</li> <li>fix:  Re-Write misleading formulation (#815) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_16","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.18.1...v0.18.2</p>"},{"location":"changelogs/v0.x.x/#who-contributes_15","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0181-2023-06-02","title":"v0.18.1 \ud83c\udf08 - 2023-06-02","text":""},{"location":"changelogs/v0.x.x/#whats-changed_17","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_17","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>chore:  Update to <code>0.18.1</code> (#814) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_17","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>chore:  Update to <code>0.18.1</code> (#814) @Anselmoo</li> <li>build(deps-dev): Bump pytest-console-scripts from 1.4.0 to 1.4.1 (#813)   @dependabot</li> <li>build(deps-dev): Bump dash from 2.9.3 to 2.10.2 (#812) @dependabot</li> <li>build(deps): Bump flask from 2.2.3 to 2.2.5 (#809) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_14","title":"\ud83d\udcdd Changelog","text":"<ul> <li>chore:  Update to <code>0.18.1</code> (#814) @Anselmoo</li> <li>Update CHANGELOG (#810) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_17","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.18.0...v0.18.1</p>"},{"location":"changelogs/v0.x.x/#who-contributes_16","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0180-2023-05-30","title":"v0.18.0 \ud83c\udf08 - 2023-05-30","text":""},{"location":"changelogs/v0.x.x/#whats-changed_18","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#new_4","title":"\ud83d\ude80 New","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_18","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> <li>build(deps-dev): Bump mkdocstrings from 0.21.2 to 0.22.0 (#805) @dependabot</li> <li>build(deps-dev): Bump pytest-cov from 3.0.0 to 4.1.0 (#802) @dependabot</li> <li>ci: \u2795 Update .pre-commit-config.yaml (#795) @Anselmoo</li> <li>build(deps): Bump jupyterlab from 3.6.3 to 4.0.0 (#792) @dependabot</li> <li>per: \u267b\ufe0f Apply refactors (#791) @Anselmoo</li> <li>docs: \ud83d\udd27 Add more functionality to docs (#785) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#781) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_12","title":"\ud83d\udc0d Python","text":"<ul> <li>per: \u267b\ufe0f Apply refactors (#791) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_11","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> <li>docs:  Apply back <code>Overall Correlation Analysis</code> (#786) @Anselmoo</li> <li>docs: \ud83d\udd27 Add more functionality to docs (#785) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_18","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.14 to 9.1.15 (#807) @dependabot</li> <li>build(deps): Bump pandas from 2.0.1 to 2.0.2 (#808) @dependabot</li> <li>build(deps-dev): Bump mkdocstrings from 0.21.2 to 0.22.0 (#805) @dependabot</li> <li>build(deps-dev): Bump types-pyyaml from 6.0.12.9 to 6.0.12.10 (#799)   @dependabot</li> <li>build(deps-dev): Bump pytest-cov from 3.0.0 to 4.1.0 (#802) @dependabot</li> <li>build(deps): Bump pydantic from 1.10.7 to 1.10.8 (#801) @dependabot</li> <li>build(deps): Bump requests from 2.30.0 to 2.31.0 (#800) @dependabot</li> <li>build(deps-dev): Bump pytest-console-scripts from 1.3.1 to 1.4.0 (#798)   @dependabot</li> <li>build(deps-dev): Bump pytest-xdist from 3.3.0 to 3.3.1 (#796) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.13 to 9.1.14 (#797) @dependabot</li> <li>build(deps-dev): Bump pre-commit from 3.3.1 to 3.3.2 (#794) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.12 to 9.1.13 (#793) @dependabot</li> <li>build(deps): Bump jupyterlab from 3.6.3 to 4.0.0 (#792) @dependabot</li> <li>per: \u267b\ufe0f Apply refactors (#791) @Anselmoo</li> <li>build(deps-dev): Bump pytest-xdist from 3.2.1 to 3.3.0 (#787) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.11 to 9.1.12 (#788) @dependabot</li> <li>docs: \ud83d\udd27 Add more functionality to docs (#785) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump mkdocs-material from 9.1.9 to 9.1.11 (#782)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_8","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#security_3","title":"\ud83d\udd12 Security","text":"<ul> <li>feat:  Extend the export functionalty (#806) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_15","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#780) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_18","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.17.2...v0.18.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_17","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0172-2023-05-07","title":"v0.17.2 \ud83c\udf08 - 2023-05-07","text":""},{"location":"changelogs/v0.x.x/#whats-changed_19","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_19","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>fix:  Allow return of <code>dtale</code> dataframe (#779) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_19","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>fix:  Allow return of <code>dtale</code> dataframe (#779) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_16","title":"\ud83d\udcdd Changelog","text":"<ul> <li>[doc]: \ud83d\udcdd Update CHANGELOG (#777) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_19","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.17.1...v0.17.2</p>"},{"location":"changelogs/v0.x.x/#who-contributes_18","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0171-2023-05-07","title":"v0.17.1 \ud83c\udf08 - 2023-05-07","text":""},{"location":"changelogs/v0.x.x/#whats-changed_20","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_20","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat:  Increase the image resolution (#776) @Anselmoo</li> <li>fix:  Allow using solver settings in notebook module (#774) @Anselmoo</li> <li>ci:  Update the <code>release drafter</code> and <code>labeler</code> (#772)   @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#761) @pre-commit-ci</li> </ul>"},{"location":"changelogs/v0.x.x/#python_13","title":"\ud83d\udc0d Python","text":"<ul> <li>feat:  Increase the image resolution (#776) @Anselmoo</li> <li>fix:  Allow using solver settings in notebook module (#774) @Anselmoo</li> <li>ci:  Update the <code>release drafter</code> and <code>labeler</code> (#772)   @Anselmoo</li> <li>fix:  Change from<code>projectNames</code> to <code>projectName</code> (#770) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_16","title":":octocat: Github Actions","text":"<ul> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.5 to 1.8.6 (#764)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_20","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>ci:  Update the <code>release drafter</code> and <code>labeler</code> (#772)   @Anselmoo</li> <li>build(deps-dev): Bump pre-commit from 3.3.0 to 3.3.1 (#765) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.8 to 9.1.9 (#766) @dependabot</li> <li>build(deps): Bump lmfit from 1.2.0 to 1.2.1 (#767) @dependabot</li> <li>build(deps-dev): Bump pre-commit from 3.2.2 to 3.3.0 (#763) @dependabot</li> <li>build(deps): Bump flask from 2.3.1 to 2.3.2 (#762) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#testing-coverage_9","title":"\ud83d\udd2c Testing &amp; Coverage","text":"<ul> <li>fix:  Allow using solver settings in notebook module (#774) @Anselmoo</li> <li>ci:  Update the <code>release drafter</code> and <code>labeler</code> (#772)   @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_17","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#760) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_20","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.17.0...v0.17.1</p>"},{"location":"changelogs/v0.x.x/#who-contributes_19","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0170-2023-05-01","title":"v0.17.0 \ud83c\udf08 - 2023-05-01","text":""},{"location":"changelogs/v0.x.x/#whats-changed_21","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#new_5","title":"\ud83d\ude80 New","text":"<ul> <li>feat: \u26a1 Improve meta-data handling in report (#759) @Anselmoo</li> <li>chore:  Update shell interface (#757) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_21","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat: \u26a1 Improve meta-data handling in report (#759) @Anselmoo</li> <li>chore:  Update shell interface (#757) @Anselmoo</li> <li>[pre-commit.ci] pre-commit autoupdate (#752) @pre-commit-ci</li> <li>[pre-commit.ci] pre-commit autoupdate (#746) @pre-commit-ci</li> <li>build(deps-dev): Bump mkdocstrings from 0.20.0 to 0.21.1 (#739) @dependabot</li> <li>build(deps): Bump pandas from 1.5.3 to 2.0.0 (#735) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#733) @pre-commit-ci</li> <li>docs:  Improve RIXS map example (#731) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump black from 23.1.0 to 23.3.0 (#725) @dependabot</li> <li>[pre-commit.ci] pre-commit autoupdate (#720) @pre-commit-ci</li> <li>chore:  Vendor Packages (#717) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_17","title":":octocat: Github Actions","text":"<ul> <li>feat: \u26a1 Improve meta-data handling in report (#759) @Anselmoo</li> <li>build(deps): Bump docker/metadata-action from 4.3.0 to 4.4.0 (#749)   @dependabot</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.4 to 1.8.5 (#734)   @dependabot</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.3 to 1.8.4 (#732)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_12","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>chore:  Update shell interface (#757) @Anselmoo</li> <li>docs:  Improve RIXS map example (#731) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_21","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>chore:  Update shell interface (#757) @Anselmoo</li> <li>build(deps): Bump pandas from 2.0.0 to 2.0.1 (#755) @dependabot</li> <li>build(deps-dev): Bump pylint from 2.17.1 to 2.17.3 (#754) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.6 to 9.1.8 (#753) @dependabot</li> <li>build(deps): Bump numpy from 1.24.2 to 1.24.3 (#750) @dependabot</li> <li>build(deps-dev): Bump pytest from 7.3.0 to 7.3.1 (#748) @dependabot</li> <li>build(deps-dev): Bump dash from 2.9.2 to 2.9.3 (#747) @dependabot</li> <li>build(deps-dev): Bump pytest from 7.2.2 to 7.3.0 (#743) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.5 to 9.1.6 (#744) @dependabot</li> <li>build(deps): Bump lmfit from 1.1.0 to 1.2.0 (#745) @dependabot</li> <li>build(deps): Bump plotly from 5.14.0 to 5.14.1 (#740) @dependabot</li> <li>build(deps-dev): Bump mypy from 1.1.1 to 1.2.0 (#741) @dependabot</li> <li>build(deps-dev): Bump mkdocstrings from 0.21.1 to 0.21.2 (#742) @dependabot</li> <li>build(deps-dev): Bump mkdocstrings from 0.20.0 to 0.21.1 (#739) @dependabot</li> <li>build(deps): Bump pandas from 1.5.3 to 2.0.0 (#735) @dependabot</li> <li>docs:  Improve RIXS map example (#731) @Anselmoo</li> <li>build(deps-dev): \u2b06\ufe0f Bump black from 23.1.0 to 23.3.0 (#725) @dependabot</li> <li>build(deps): Bump ipywidgets from 8.0.5 to 8.0.6 (#727) @dependabot</li> <li>build(deps-dev): Bump dash from 2.9.1 to 2.9.2 (#729) @dependabot</li> <li>build(deps-dev): Bump types-tabulate from 0.9.0.1 to 0.9.0.2 (#724)   @dependabot</li> <li>build(deps-dev): Bump types-toml from 0.10.8.5 to 0.10.8.6 (#726) @dependabot</li> <li>build(deps-dev): Bump types-pyyaml from 6.0.12.8 to 6.0.12.9 (#723)   @dependabot</li> <li>build(deps-dev): Bump types-mock from 5.0.0.5 to 5.0.0.6 (#722) @dependabot</li> <li>build(deps): Bump itables from 1.5.1 to 1.5.2 (#721) @dependabot</li> <li>build(deps-dev): Bump pre-commit from 3.2.0 to 3.2.1 (#719) @dependabot</li> <li>build(deps-dev): Bump mkdocs-material from 9.1.3 to 9.1.4 (#718) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#changelog_18","title":"\ud83d\udcdd Changelog","text":"<ul> <li>Update CHANGELOG (#716) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#vendor_2","title":"\ud83d\udce6 Vendor","text":"<ul> <li>chore:  Vendor Packages (#717) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_21","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.16.7...v0.17.0</p>"},{"location":"changelogs/v0.x.x/#who-contributes_20","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0167-2023-03-23","title":"v0.16.7 \ud83c\udf08 - 2023-03-23","text":""},{"location":"changelogs/v0.x.x/#whats-changed_22","title":"\ud83e\udded What's Changed","text":"<ul> <li>Update CHANGELOG (#708) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#maintenance_22","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>feat:  Add support for <code>3.11</code> (#715) @Anselmoo</li> <li>fix: \ud83d\udcc3 Update labeler.yml (#709) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_18","title":":octocat: Github Actions","text":"<ul> <li>feat:  Add support for <code>3.11</code> (#715) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.8.1 to 1.8.3 (#710)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_22","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>feat:  Add support for <code>3.11</code> (#715) @Anselmoo</li> <li>build(deps): Bump pydantic from 1.10.6 to 1.10.7 (#711) @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_22","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.16.6...v0.16.7</p>"},{"location":"changelogs/v0.x.x/#who-contributes_21","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p>"},{"location":"changelogs/v0.x.x/#v0166-2023-03-22","title":"v0.16.6 \ud83c\udf08 - 2023-03-22","text":""},{"location":"changelogs/v0.x.x/#whats-changed_23","title":"\ud83e\udded What's Changed","text":""},{"location":"changelogs/v0.x.x/#maintenance_23","title":"\ud83e\uddf0 Maintenance","text":"<ul> <li>fix:  Support of <code>bool</code> and <code>{}</code> for confidence (#705) @Anselmoo</li> <li>fix:  Change from <code>release_name</code> to <code>release_tag</code> (#701)   @Anselmoo</li> <li>fix:  Fix changelogger (#699) @Anselmoo</li> <li>build:  Start with beta release (#697) @Anselmoo</li> <li>feat:  Add latest <code>mkdocs-jupyter</code> (#666) @Anselmoo</li> <li>docs:  Update labeled criteria for <code>CHANGELOG</code> (#695) @Anselmoo</li> <li>fix:  Update docs by <code>mike</code> (#680) @Anselmoo</li> <li>fix:  Update <code>deps</code> and <code>CD</code> (#679) @Anselmoo</li> <li>ci: \ud83d\ude9a Update update-changelog.yaml (#676) @Anselmoo</li> <li>[pre-commit.ci]  pre-commit autoupdate (#670) @pre-commit-ci</li> <li>docs:  Extend versionized docs via <code>mike</code> (#674) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#octocat-github-actions_19","title":":octocat: Github Actions","text":"<ul> <li>build(deps): Bump ipywidgets from 8.0.4 to 8.0.5 (#707) @dependabot</li> <li>fix:  Change from <code>release_name</code> to <code>release_tag</code> (#701)   @Anselmoo</li> <li>fix:  Fix changelogger (#699) @Anselmoo</li> <li>feat:  Add latest <code>mkdocs-jupyter</code> (#666) @Anselmoo</li> <li>build(deps): Bump actions/checkout from 2 to 3 (#691) @dependabot</li> <li>ci: \ud83d\udcd6 Update update-changelog.yaml (#689) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.7.1 to 1.8.1 (#690)   @dependabot</li> <li>fix:  Update settings for creating branch (#688) @Anselmoo</li> <li>fix:  Build of <code>auto-changelog</code> (#686) @Anselmoo</li> <li>docs:  Docs building (#684) @Anselmoo</li> <li>ci: \ud83d\udd27 release-cd.yml (#681) @Anselmoo</li> <li>fix:  Update docs by <code>mike</code> (#680) @Anselmoo</li> <li>fix:  Update <code>deps</code> and <code>CD</code> (#679) @Anselmoo</li> <li>ci: \ud83d\ude9a Update update-changelog.yaml (#676) @Anselmoo</li> <li>fix:  Avoid double creating docs in <code>main</code> (#675) @Anselmoo</li> <li>docs:  Extend versionized docs via <code>mike</code> (#674) @Anselmoo</li> <li>ci: \u23ee\ufe0f removed <code>--force</code> (#672) @Anselmoo</li> <li>ci: \ud83d\udd12 update-changelog.yaml (#671) @Anselmoo</li> <li>fix:  Update deploy name (#667) @Anselmoo</li> <li>build(deps): Bump pypa/gh-action-pypi-publish from 1.6.4 to 1.7.1 (#668)   @dependabot</li> </ul>"},{"location":"changelogs/v0.x.x/#documentation_13","title":"\ud83d\uddc2 Documentation","text":"<ul> <li>feat:  Add latest <code>mkdocs-jupyter</code> (#666) @Anselmoo</li> <li>docs: \ud83d\udcd4 Update mkdocs.yml (#669) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#dependency-updates_23","title":"\ud83d\udd17 Dependency Updates","text":"<ul> <li>fix:  Support of <code>bool</code> and <code>{}</code> for confidence (#705) @Anselmoo</li> <li>build(deps): Bump ipywidgets from 8.0.4 to 8.0.5 (#707) @dependabot</li> <li>fix:  Fix changelogger (#699) @Anselmoo</li> <li>build:  Start with beta release (#697) @Anselmoo</li> <li>feat:  Add latest <code>mkdocs-jupyter</code> (#666) @Anselmoo</li> <li>docs:  Update labeled criteria for <code>CHANGELOG</code> (#695) @Anselmoo</li> <li>fix:  Update <code>deps</code> and <code>CD</code> (#679) @Anselmoo</li> <li>ci: \ud83d\ude9a Update update-changelog.yaml (#676) @Anselmoo</li> <li>[pre-commit.ci]  pre-commit autoupdate (#670) @pre-commit-ci</li> <li>docs:  Extend versionized docs via <code>mike</code> (#674) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#security_4","title":"\ud83d\udd12 Security","text":"<ul> <li>docs:  Update labeled criteria for <code>CHANGELOG</code> (#695) @Anselmoo</li> <li>fix:  Update <code>deps</code> and <code>CD</code> (#679) @Anselmoo</li> <li>ci: \ud83d\ude9a Update update-changelog.yaml (#676) @Anselmoo</li> <li>[pre-commit.ci]  pre-commit autoupdate (#670) @pre-commit-ci</li> <li>docs:  Extend versionized docs via <code>mike</code> (#674) @Anselmoo</li> </ul>"},{"location":"changelogs/v0.x.x/#full-changelog_23","title":"\ud83d\udce6 Full Changelog","text":"<p>Full Changelog: github.com/Anselmoo/spectrafit/compare/v0.16.5...v0.16.6</p>"},{"location":"changelogs/v0.x.x/#who-contributes_22","title":"\u2699\ufe0f Who Contributes","text":"<p>@Anselmoo</p> <p>Starting using Auto-Changelogs</p> <p>With <code>v0.16.6</code>, the changelog is automatically generated.</p>"},{"location":"changelogs/v0.x.x/#v0160","title":"v0.16.0","text":"<ul> <li>Add Cumulative Distribution Function to the <code>SpectraFit</code> package</li> <li>Refactor the <code>model.py</code> of <code>SpectraFit</code> package</li> </ul>"},{"location":"changelogs/v0.x.x/#v0151","title":"v0.15.1","text":"<ul> <li>Maintenance of the <code>SpectraFit</code> package</li> </ul>"},{"location":"changelogs/v0.x.x/#v0150","title":"v0.15.0","text":"<ul> <li>Add <code>plugins</code> to the <code>SpectraFit</code> package for working with RIXS data</li> <li><code>pikle</code>-file converter and visualizer for RIXS data</li> <li>Simplify the <code>SpectraFit</code> continous deployment by using build</li> </ul>"},{"location":"changelogs/v0.x.x/#v0140","title":"v0.14.0","text":"<ul> <li>Add <code>SpectraFit</code> to Conda-Forge as spectrafit package.</li> <li>Extend <code>SpectraFit</code> to print current peak values as <code>dataframe</code> in   Jupyter-Notebook.</li> <li>Add converters for input-, output-, and data-files.</li> <li>Add extended output-print for <code>SpectraFit</code> in Jupyter-Notebook.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0131","title":"v0.13.1","text":"<ul> <li>Fix crashed regression analysis due to negative values in the <code>y</code>-data.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0130","title":"v0.13.0","text":"<ul> <li>Update <code>devcontainer</code> to use <code>VScode</code>.</li> <li>Removed <code>fish-shell</code> from <code>devcontainer</code>.</li> <li>Applied code refactoring performed by Copilot Labs</li> </ul>"},{"location":"changelogs/v0.x.x/#v0125","title":"v0.12.5","text":"<ul> <li>Updating <code>spectrafit</code>-installer in <code>Dockerfile</code>.</li> <li>Adding images to <code>Jupyter-Notebook-Examples</code>.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0124","title":"v0.12.4","text":"<ul> <li>Include metric plots into the jupyter-notebook interface.</li> <li>Removed <code>dash</code> dependency from <code>pyproject.toml</code>.</li> <li>Removed <code>spectrafit</code>-dependency from <code>Dockerfile</code>.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0123","title":"v0.12.3","text":"<ul> <li>Update <code>Dockerimage</code> to the previous version of the Conda-Forge-Recipe.</li> <li>Reformat license in the docs.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0122","title":"v0.12.2.","text":"<ul> <li>Update <code>Dockerimage</code> to use <code>SpectraFit</code> in the Jupyter Notebook.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0121","title":"v0.12.1","text":"<ul> <li>New release for triggering <code>Conda-Forge</code> build</li> </ul>"},{"location":"changelogs/v0.x.x/#v0120","title":"v0.12.0","text":"<ul> <li>Adding metrics for regression analysis as part of the post analysis; see also   sklearn-metrics-regression</li> <li>Add art for generating ASCII Decor in the terminal / output.</li> <li>Using transposed dataframes for the tabulated output to the terminal.</li> <li>Change <code>global</code> to <code>global_</code> to avoid keyword clash.</li> <li>Add plugin for jupyter-notebook integration in VSCode; see also   jupyter-notebook-VSCode</li> <li>Change <code>Dockerimage</code> to use jupyter/scipy as base image, see also   SpectraFit-Dockerfile</li> <li>Adding devcontainer for VSCode; see also devcontainer</li> <li>Change from <code>to_dict(orient=\"list\")</code> to <code>to_dict(orient=\"split\")</code> for the   <code>json</code> output for including the index.</li> <li>Add link to the GitHub Advisory Database for security issues in the   <code>Security nodes</code>.</li> <li>Add CI-Test for <code>devcontainer</code> in VSCode; see also devcontainer-ci.</li> <li>Add <code>pyupgrade</code> to pre-commit hooks.</li> </ul>"},{"location":"changelogs/v0.x.x/#v0110","title":"v0.11.0","text":"<ul> <li>Focus on maintenance fixed for the <code>spectrafit</code> package:</li> <li>Synk security vulnerabilities fixed</li> <li>SonarCloud code quality fixed</li> </ul>"},{"location":"changelogs/v0.x.x/#v0104","title":"v0.10.4","text":"<ul> <li>Update docs with topics: <code>`Changelog</code>, <code>README</code>, <code>Security</code>, <code>Licencse</code></li> <li>Add docs for <code>conda</code> installation</li> </ul>"},{"location":"changelogs/v0.x.x/#v0101-v103","title":"v0.10.1 - v.10.3","text":"<ul> <li>Downgrading <code>numdifftools</code> and <code>openpyxl</code> for compatibility with the   conda-forge-formula</li> </ul>"},{"location":"changelogs/v0.x.x/#v0100","title":"v0.10.0","text":"<ul> <li>Refactor the <code>pyproject.toml</code> file for getting it working with <code>conda</code>.</li> </ul>"},{"location":"changelogs/v0.x.x/#v090","title":"v0.9.0","text":"<ul> <li>Adding Python 3.10 support</li> <li>Adding Athena file support</li> <li>Increasing code quality by using <code>pylint</code></li> <li>Adding plugin support for <code>SpectraFit</code></li> <li>Starting with input file converter</li> </ul>"},{"location":"changelogs/v0.x.x/#v086","title":"v0.8.6","text":"<ul> <li>Updating the way of poetry caching</li> <li>Update docker actions</li> <li>Fixed typo in README.md</li> </ul>"},{"location":"changelogs/v0.x.x/#v083-v085","title":"v0.8.3 - v0.8.5","text":"<ul> <li>Dependency and GitHub Action Updates</li> </ul>"},{"location":"changelogs/v0.x.x/#v082","title":"v0.8.2","text":"<ul> <li>Refactor buffer of the covariance matrix</li> </ul>"},{"location":"changelogs/v0.x.x/#v081","title":"v0.8.1","text":"<ul> <li>Updating all <code>raise</code> statements</li> <li>Add prettier to CI/CD workflow</li> </ul>"},{"location":"changelogs/v0.x.x/#v080","title":"v0.8.0","text":"<ul> <li>Introduced smaller enhancement:</li> <li>Printout of the fit parameters in the output file: True/False \u2192 [0, 1,     2]</li> <li>Keyword check for <code>SpectraFit</code></li> <li>Fix smaller bugs:</li> <li><code>Pseudo-Voigt</code> power factor from 0.25 \u2192 0.2</li> <li>Correct type-definitions for <code>SpectraFit</code></li> </ul>"},{"location":"changelogs/v0.x.x/#v071","title":"v0.7.1","text":"<ul> <li>Maintenance of the <code>SpectraFit</code> package</li> </ul>"},{"location":"changelogs/v0.x.x/#v070","title":"v0.7.0","text":"<ul> <li>Introducing automatic peak detection for spectra fitting; see also SciPy's   <code>find_peaks</code></li> </ul>"},{"location":"changelogs/v0.x.x/#v061","title":"v0.6.1","text":"<ul> <li>Reformat the README.md for PyPi - SpectraFit</li> </ul>"},{"location":"changelogs/v0.x.x/#v060","title":"v0.6.0","text":"<ul> <li>Introduce the Global-Fitting option, which allows to fit the several   spectra with a single model.</li> <li>Changed the input for Pseudo-Voigt:</li> <li><code>fwhm_g</code> \u2192 <code>fwhmg</code></li> <li><code>fwhm_l</code> \u2192 <code>fwhml</code></li> <li>Changed the input for Gaussian-FWHM and Lorentzian-FWHM:</li> <li><code>fwhm</code> \u2192 <code>fwhmg</code></li> <li><code>fwhm</code> \u2192 <code>fwhml</code></li> <li>Changed the input for Voigt-FWHM:</li> <li><code>fwhm</code> \u2192 <code>fwhmv</code></li> <li>Adding error-handling for not determatination of Confiden Interval.</li> </ul>"},{"location":"changelogs/v0.x.x/#v056","title":"v0.5.6","text":"<ul> <li>CI/CD pipeline is now token-protected.</li> </ul>"},{"location":"changelogs/v0.x.x/#v055","title":"v0.5.5","text":"<ul> <li>Removed the <code>setuptools==57.5.0</code> limitation due to formally <code>Python2.7</code>.</li> </ul>"},{"location":"changelogs/v0.x.x/#v054","title":"v0.5.4","text":"<ul> <li>Adding a stale boot for keeping the issue and PRs up-to-date.</li> </ul>"},{"location":"changelogs/v0.x.x/#v053","title":"v0.5.3","text":"<ul> <li>Extending unit tests to the <code>SpectraFit</code> package.</li> </ul>"},{"location":"changelogs/v0.x.x/#v052","title":"v0.5.2","text":"<ul> <li>Adding maintainer to the <code>pyproject.yml</code> file.</li> </ul>"},{"location":"changelogs/v0.x.x/#v051","title":"v0.5.1","text":"<ul> <li>Minor fix of broken links in docs.</li> </ul>"},{"location":"changelogs/v0.x.x/#v050","title":"v0.5.0","text":"<ul> <li>Rewrite <code>SpectraFit</code> main to become a more object-oriented approach.</li> <li>Increase the coverage quality of the tests.</li> </ul>"},{"location":"changelogs/v0.x.x/#v042","title":"v0.4.2","text":"<ul> <li>Removed the <code>GIT LFS</code> integration for avoiding trouble with broken   images.</li> <li>Adding <code>YAML</code>-Forms as pull request template.</li> </ul>"},{"location":"changelogs/v0.x.x/#v041","title":"v0.4.1","text":"<ul> <li>Change from <code>MarkDown</code> based issue templates to <code>YAML</code>-Forms by GitHub   as issue and feature request templates.</li> </ul>"},{"location":"changelogs/v0.x.x/#v040","title":"v0.4.0","text":"<ul> <li>Create SECURITY policy for the <code>spectrafit</code> application.</li> <li>Adding dependabot for updating <code>poetry.lock</code>, <code>pyproject.toml</code> and GitHub   Action workflow.</li> <li>Adding a codeql-analysis</li> <li>Increasing the coverage level</li> </ul>"},{"location":"changelogs/v0.x.x/#v032","title":"v0.3.2","text":"<ul> <li>Replaced poetry hosted <code>pre-commit</code> hook with pre-commit action.</li> <li>Extend <code>pre-commit</code> hook MyPy.</li> <li>Fixed a bug for the energy range separation.</li> <li>Removed the <code>--display</code> option.</li> </ul>"},{"location":"changelogs/v0.x.x/#v031","title":"v0.3.1","text":"<ul> <li>Introducing <code>pytest</code> and <code>coverage</code> for increasing code quality.</li> <li>Adding <code>codecov.io</code> into the GitHub actions workflow.</li> <li>Updating the contribution guideline with inside milestones.</li> </ul>"},{"location":"changelogs/v0.x.x/#v024","title":"v0.2.4","text":"<ul> <li>Adding a Docker Workflow via https://ghcr.io/anselmoo/spectrafit:latest.</li> <li>Poetry for PyPi release via https://pypi.org/project/spectrafit/.</li> </ul>"},{"location":"changelogs/v0.x.x/#v020","title":"v0.2.0","text":"<ul> <li>Changed from text file based input to object based input.</li> <li>Extended <code>matplotlib</code> with <code>seaborn</code> for the plotting.</li> <li>Start outsourcing code into submodules.</li> </ul>"},{"location":"changelogs/v0.x.x/#v010","title":"v0.1.0","text":"<ul> <li>The orginal program <code>fastfit</code> is now running as <code>spectrafit</code> with an own   installer besed on POETRY.</li> </ul> <p>See also: https://github.com/Anselmoo/spectrafit/releases</p>"},{"location":"doc/expression/","title":"Expression","text":"<p><code>lmfit</code> also provides an expression parser for use in fitting models. Consequently, the expression parser can be also used in SpectraFit for generating fits with constraint conditions or global fits.</p> JSON<pre><code>\"peaks\": {\n    \"1\": {\n        \"pseudovoigt\": {\n            \"amplitude\": {\n                \"max\": 2,\n                \"min\": 0,\n                \"vary\": true,\n                \"value\": 1\n            },\n            \"center\": {\n                \"max\": 2,\n                \"min\": -2,\n                \"vary\": true,\n                \"value\": 0\n            },\n    },\n    \"2\": {\n        \"pseudovoigt\": {\n            \"amplitude\": {\n                \"expr\": \"pseudovoigt_amplitude_1\"\n            },\n            \"center\": {\n                \"expr\": \"pseudovoigt_center_1 + 1.68\"\n            }\n        }\n    }\n}\n</code></pre> <p>In this particular use case, the amplitude of the second peak is set to the amplitude of the first peak; the center of the second peak is set to the center of the first peak plus 1.68.</p> <p></p> <p>In this example, the expression parser is used to set the amplitude of the peak 1 and 2 to equally, as well as the center of peak 2 to the center of peak 1 plus 1.68.</p> <p>The right notation of peaks</p> <p>In contrast to the <code>json</code>, <code>yaml</code>, or <code>toml</code> file, the peaks are written in the following way, that number of the peak is the last number.</p> <code>toml</code> Definition number.function.attribute function_attribute_number"},{"location":"doc/fitting/","title":"Fitting","text":"<p>The fitting in <code>SpectraFit</code> is realized by <code>lmifit</code> and diveded into two parts:</p> <ol> <li>Minimizer is the class for defining the fitting problem. The    sub-dictionary <code>**args[\"minimizer\"]</code> can contains all kinds of <code>key</code> and    <code>value</code> pairs for setup the Minimizer.</li> <li>minimizer is the the function of the class Minimizer to perform the    optimization. The sub-dictionary <code>**args[\"optimizer\"]</code> can contains all kinds    of <code>key</code> and <code>value</code> pairs for setup the minimizer.</li> </ol> Python<pre><code>mini = Minimizer(\n    solver_model,\n    params,\n    fcn_args=(df[args[\"column\"][0]].values, df[args[\"column\"][1]].values),\n    **args[\"minimizer\"],\n)\nresult = mini.minimize(**args[\"optimizer\"])\n</code></pre> <p>About **kwargs</p> <p>By making use of the ** operator in <code>python</code>, key-value pairs of a dictionary can be unpacked it into keyword arguments of a function call.</p> <p>About implemented solvers by LMFIT</p> <p>All the implemented solvers by LMFIT are listed in the table below:</p> <ul> <li> <code>leastsq</code>: Levenberg-Marquardt (default)</li> <li> <code>least_squares</code>: Least-Squares minimization, using Trust Region Reflective method</li> <li> <code>differential_evolution</code>: differential evolution</li> <li> <code>brute</code>: brute force method</li> <li> <code>basinhopping</code>: basinhopping</li> <li> <code>ampgo</code>: Adaptive Memory Programming for Global Optimization</li> <li> <code>nelder</code>: Nelder-Mead</li> <li> <code>lbfgsb</code>: L-BFGS-B</li> <li> <code>powell</code>: Powell</li> <li> <code>cg</code>: Conjugate-Gradient</li> <li> <code>newton</code>: Newton-CG</li> <li> <code>cobyla</code>: Cobyla</li> <li> <code>bfgs</code>: BFGS</li> <li> <code>tnc</code>: Truncated Newton</li> <li> <code>trust-ncg</code>: Newton-CG trust-region</li> <li> <code>trust-exact</code>: nearly exact trust-region</li> <li> <code>trust-krylov</code>: Newton GLTR trust-region</li> <li> <code>trust-constr</code>: trust-region for constrained optimization</li> <li> <code>dogleg</code>: Dog-leg trust-region</li> <li> <code>slsqp</code>: Sequential Linear Squares Programming</li> <li> <code>emcee</code>: Maximum likelihood via Monte-Carlo Markov Chain</li> <li> <code>shgo</code>: Simplicial Homology Global Optimization</li> <li> <code>dual_annealing</code>: Dual Annealing optimization</li> </ul> <p>Especially, the <code>differential_evolution</code> is an interesting alternative for solving numerically challenging fitting problems. The method based on this SciPy implementation is implemented in <code>SpectraFit</code> and can be used by setting the <code>minimizer</code> parameter to <code>\"differential_evolution\"</code>.</p>"},{"location":"doc/models/","title":"Models","text":"<p>About implemented models</p> <p>In principle, every model can be implemented in <code>spectrafit</code> by extending the module <code>spectrafit.models</code> by a new functions. It is important to know that the <code>raise</code> check have to be extend by the new function name in the <code>solver_model</code> and <code>calculated_model</code>.</p> <p>Python<pre><code>__implemented_models__ = [\n    \"gaussian\",\n    \"lorentzian\",\n    \"voigt\",\n    \"pseudovoigt\",\n    \"exponential\",\n    \"power\",\n    \"linear\",\n    \"constant\",\n    \"erf\",\n    \"atan\",\n    \"log\",\n    \"heaviside\",\n    \"my_new_model\",\n]\n...\nfor model in params:\n    model = model.lower()\n    if model.split(\"_\")[0] not in __implemented_models__:\n        raise KeyError(f\"{model} is not supported\")\n    peak_kwargs[(model.split(\"_\")[-1], model.split(\"_\")[0])][model.split(\"_\")[1]] = (\n        params[model]\n    )\n\nfor key, _kwarg in peak_kwargs.items():\n    if key[1] == \"my_new_model\":\n        val += my_new_model(x, **_kwarg)\n    ...\n\n\ndef my_new_model(\n    x: np.array, amplitude: float = 1.0, center: float = 0.0, fwhmg: float = 1.0\n) -&gt; np.array:\n    r\"\"\"Return a 1-dimensional `m`y_new_model` distribution.\"\"\"\n\n\n...\n</code></pre> Further information about implemented own models in <code>lmfit</code> can be found in this example. So far, the built-in models of lmfit are not supported, yet.</p> <p>Change in notation for the Full Maximum Half Widht (FWHM)</p> <p>The notation for the Full Maximum Half Widht (FWHM) is adapted due to changes in the <code>**kwargs</code>-handling in the models; see also API and CHANGELOG. The notation becomes:</p> Method Old Notation New Notation Gaussian-FWHM <code>fwhm</code> <code>fwhmg</code> Lorentzian-FWHM <code>fwhm</code> <code>fwhml</code> Pseudo-Voigt <code>fwhm_g</code> <code>fwhmg</code> Pseudo-Voigt <code>fwhm_l</code> <code>fwhml</code> Voigt <code>fwhm</code> <code>fwhmv</code>"},{"location":"doc/models/#implemented-models","title":"Implemented models","text":"<p>Here is a list of implemented models of <code>spectrafit</code>:</p> <p>Return a 1-dimensional Gaussian distribution.</p> <pre>\\[\n{\\displaystyle g(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\n(  -{\\frac {1}{2}}{\\frac {(x-\\mu )^{2}}{\\sigma ^{2}}} ) }\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Gaussian distribution.  Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Gaussian distribution.  Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Gaussian distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Gaussian distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef gaussian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Gaussian distribution.\n\n    $$\n    {\\displaystyle g(x)={\\frac {1}{\\sigma {\\sqrt {2\\pi }}}}\\exp\n    (  -{\\frac {1}{2}}{\\frac {(x-\\mu )^{2}}{\\sigma ^{2}}} ) }\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Gaussian distribution.\n             Defaults to 1.0.\n        center (float, optional): Center of the Gaussian distribution.\n             Defaults to 0.0.\n        fwhmg (float, optional): Full width at half maximum (FWHM) of the Gaussian\n            distribution. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Gaussian distribution of `x` given.\n    \"\"\"\n    sigma = fwhmg * Constants.fwhmg2sig\n    return np.array(amplitude / (Constants.sq2pi * sigma)) * np.exp(\n        -((1.0 * x - center) ** 2) / (2 * sigma**2)\n    )\n</code></pre> <p>Return a 1-dimensional Lorentzian distribution.</p> <pre>\\[\nf(x;x_{0},\\gamma )={\\frac  {1}{\\pi \\gamma\n[ 1+ ( {\\frac  {x-x_{0}}{\\gamma }})^{2} ]\n}} ={1 \\over \\pi \\gamma } [ {\\gamma ^{2} \\over (x-x_{0})^{2}+\\gamma ^{2}} ]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Lorentzian distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhml</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>Union[NDArray[np.float64], float]: Lorentzian distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef lorentzian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Lorentzian distribution.\n\n    $$\n    f(x;x_{0},\\gamma )={\\frac  {1}{\\pi \\gamma\n    [ 1+ ( {\\frac  {x-x_{0}}{\\gamma }})^{2} ]\n    }} ={1 \\over \\pi \\gamma } [ {\\gamma ^{2} \\over (x-x_{0})^{2}+\\gamma ^{2}} ]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Lorentzian distribution.\n            Defaults to 1.0.\n        center (float, optional): Center of the Lorentzian distribution. Defaults to\n            0.0.\n        fwhml (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n            distribution. Defaults to 1.0.\n\n    Returns:\n        Union[NDArray[np.float64], float]: Lorentzian distribution of `x` given.\n    \"\"\"\n    sigma = fwhml * Constants.fwhml2sig\n    return np.array(amplitude / (1 + ((1.0 * x - center) / sigma) ** 2)) / (\n        pi * sigma\n    )\n</code></pre> <p>Return a 1-dimensional Pseudo-Voigt distribution.</p> <p>See also:</p> <p>J. Appl. Cryst. (2000). 33, 1311-1316 doi.org/10.1107/S0021889800010219</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pseudo-Voigt distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width half maximum of the Gaussian distribution in the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <code>fwhml</code> <code>float</code> <p>Full width half maximum of the Lorentzian distribution in the Pseudo-Voigt distribution. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pseudo-Voigt distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pseudovoigt(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional Pseudo-Voigt distribution.\n\n    !!! note \"See also:\"\n\n        J. Appl. Cryst. (2000). 33, 1311-1316\n        https://doi.org/10.1107/S0021889800010219\n\n    Args:\n        x (NDArray[np.float64]):  `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pseudo-Voigt distribution.\n            Defaults to 1.0.\n        center (float, optional): Center of the Pseudo-Voigt distribution.\n            Defaults to 0.0.\n        fwhmg (float, optional): Full width half maximum of the Gaussian\n            distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n        fwhml (float, optional): Full width half maximum of the Lorentzian\n            distribution in the Pseudo-Voigt distribution. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pseudo-Voigt distribution of `x` given.\n    \"\"\"\n    f = np.power(\n        fwhmg**5\n        + 2.69269 * fwhmg**4 * fwhml\n        + 2.42843 * fwhmg**3 * fwhml**2\n        + 4.47163 * fwhmg**2 * fwhml**3\n        + 0.07842 * fwhmg * fwhml**4\n        + fwhml**5,\n        0.2,\n    )\n    n = (\n        1.36603 * (fwhml / f)\n        - 0.47719 * (fwhml / f) ** 2\n        + 0.11116 * (fwhml / f) ** 3\n    )\n    return np.array(\n        n\n        * DistributionModels.lorentzian(\n            x=x, amplitude=amplitude, center=center, fwhml=fwhml\n        )\n        + (1 - n)\n        * DistributionModels.gaussian(\n            x=x, amplitude=amplitude, center=center, fwhmg=fwhmg\n        )\n    )\n</code></pre> <p>Return a 1-dimensional Voigt distribution.</p> <pre>\\[\n{\\displaystyle V(x;\\sigma ,\\gamma )\\equiv\n\\int_{-\\infty }^{\\infty }G(x';\\sigma )\nL(x-x';\\gamma )\\,dx'}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>center</code> <code>float</code> <p>Center of the Voigt distribution. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmv</code> <code>float</code> <p>Full width at half maximum (FWHM) of the Lorentzian distribution. Defaults to 1.0.</p> <code>1.0</code> <code>gamma</code> <code>float</code> <p>Scaling factor of the complex part of the Faddeeva Function. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Voigt distribution of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef voigt(\n    x: NDArray[np.float64],\n    center: float = 0.0,\n    fwhmv: float = 1.0,\n    gamma: Optional[float] = None,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Voigt distribution.\n\n    $$\n    {\\displaystyle V(x;\\sigma ,\\gamma )\\equiv\n    \\int_{-\\infty }^{\\infty }G(x';\\sigma )\n    L(x-x';\\gamma )\\,dx'}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        center (float, optional): Center of the Voigt distribution. Defaults to 0.0.\n        fwhmv (float, optional): Full width at half maximum (FWHM) of the Lorentzian\n            distribution. Defaults to 1.0.\n        gamma (float, optional): Scaling factor of the complex part of the\n            [Faddeeva Function](https://en.wikipedia.org/wiki/Faddeeva_function).\n            Defaults to None.\n\n    Returns:\n        NDArray[np.float64]: Voigt distribution of `x` given.\n    \"\"\"\n    sigma = fwhmv * Constants.fwhmv2sig\n    if gamma is None:\n        gamma = sigma\n    z = (x - center + 1j * gamma) / (sigma * Constants.sq2)\n    return np.array(wofz(z).real / (sigma * Constants.sq2pi))\n</code></pre> <p>Return a 1-dimensional exponential decay.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the exponential function.  Defaults to 1.0.</p> <code>1.0</code> <code>decay</code> <code>float</code> <p>Decay of the exponential function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the exponential function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Exponential decay of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef exponential(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    decay: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional exponential decay.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the exponential function.\n             Defaults to 1.0.\n        decay (float, optional): Decay of the exponential function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the exponential function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Exponential decay of `x` given.\n    \"\"\"\n    return np.array(amplitude * np.exp(-x / decay) + intercept)\n</code></pre> <p>Return a 1-dimensional power function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the power function. Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the power function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the power function. Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: power function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef power(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    exponent: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional power function.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the power function. Defaults to\n            1.0.\n        exponent (float, optional): Exponent of the power function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the power function. Defaults to\n            0.0.\n\n    Returns:\n        NDArray[np.float64]: power function of `x` given.\n    \"\"\"\n    return np.array(amplitude * np.power(x, exponent) + intercept)\n</code></pre> <p>Return a 1-dimensional linear function.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>slope</code> <code>float</code> <p>Slope of the linear function. Defaults to 1.0.</p> <code>1.0</code> <code>intercept</code> <code>float</code> <p>Intercept of the linear function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Linear function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef linear(\n    x: NDArray[np.float64],\n    slope: float = 1.0,\n    intercept: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional linear function.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        slope (float, optional): Slope of the linear function. Defaults to 1.0.\n        intercept (float, optional): Intercept of the linear function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Linear function of `x` given.\n    \"\"\"\n    return np.array(slope * x + intercept)\n</code></pre> <p>Return a 1-dimensional constant value.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the constant. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Constant value of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef constant(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional constant value.\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the constant. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Constant value of `x` given.\n    \"\"\"\n    return np.array(np.linspace(amplitude, amplitude, len(x)))\n</code></pre> <p>Return a 1-dimensional error function.</p> <pre>\\[\nf(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the error function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the error function. Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the error function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Error function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef erf(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional error function.\n\n    $$\n    f(x) = \\frac{2}{\\sqrt{\\pi}} \\int_{0}^{x} e^{-t^2} dt\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the error function.\n                Defaults to 1.0.\n        center (float, optional): Center of the error function. Defaults to 0.0.\n        sigma (float, optional): Sigma of the error function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Error function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude * 0.5 * (1 + erf(DistributionModels._norm(x, center, sigma)))\n    )\n</code></pre> <p>Return a 1-dimensional Heaviside step function.</p> <p>$$ f(x) = begin{cases} 0 &amp; x &lt; 0 \\ 0.5 &amp; x = 0 \\ 1 &amp; x &gt; 0 end{cases} $$ Args:     x (NDArray[np.float64]): <code>x</code>-values of the data.     amplitude (float, optional): Amplitude of the Heaviside step function.             Defaults to 1.0.     center (float, optional): Center of the Heaviside step function.          Defaults to 0.0.     sigma (float, optional): Sigma of the Heaviside step function.          Defaults to 1.0.</p> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Heaviside step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef heaviside(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Heaviside step function.\n\n    $$\n    f(x) = \\begin{cases}\n    0 &amp; x &lt; 0 \\\\\n    0.5 &amp; x = 0 \\\\\n    1 &amp; x &gt; 0\n    \\end{cases}\n    $$\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Heaviside step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Heaviside step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Heaviside step function.\n             Defaults to 1.0.\n\n\n    Returns:\n        NDArray[np.float64]: Heaviside step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude * 0.5 * (1 + np.sign(DistributionModels._norm(x, center, sigma)))\n    )\n</code></pre> <p>Return a 1-dimensional arctan step function.</p> <pre>\\[\nf(x) = \\frac{1}{\\pi} \\arctan(\\frac{x - c}{s})\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the arctan step function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the arctan step function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the arctan step function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Arctan step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef atan(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional arctan step function.\n\n    $$\n    f(x) = \\frac{1}{\\pi} \\arctan(\\frac{x - c}{s})\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the arctan step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the arctan step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the arctan step function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Arctan step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + np.arctan(DistributionModels._norm(x, center, sigma)) / pi)\n    )\n</code></pre> <p>Return a 1-dimensional logarithmic step function.</p> <pre>\\[\nf(x) = \\frac{1}{1 + e^{-\\frac{x - c}{s}}}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the logarithmic step function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the logarithmic step function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the logarithmic step function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Logarithmic step function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef log(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional logarithmic step function.\n\n    $$\n    f(x) = \\frac{1}{1 + e^{-\\frac{x - c}{s}}}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the logarithmic step function.\n                Defaults to 1.0.\n        center (float, optional): Center of the logarithmic step function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the logarithmic step function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Logarithmic step function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + np.log(DistributionModels._norm(x, center, sigma)) / pi)\n    )\n</code></pre> <p>Return a 1-dimensional cumulative Gaussian function.</p> <pre>\\[\nf(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Gaussian function. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Gaussian function. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmg</code> <code>float</code> <p>Full width at half maximum of the Gaussian  function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Gaussian function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef cgaussian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmg: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Gaussian function.\n\n    $$\n    f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Gaussian function. Defaults to\n            1.0.\n        center (float, optional): Center of the Gaussian function. Defaults to 0.0.\n        fwhmg (float, optional): Full width at half maximum of the Gaussian\n             function. Defaults to 1.0.\n\n\n    Returns:\n        NDArray[np.float64]: Cumulative Gaussian function of `x` given.\n    \"\"\"\n    sigma = fwhmg * Constants.fwhmg2sig\n    return np.array(\n        amplitude * 0.5 * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n    )\n</code></pre> <p>Return a 1-dimensional cumulative Lorentzian function.</p> <pre>\\[\nf(x) = \\frac{1}{\\pi} \\arctan\\left(\\frac{x - c}{s}\\right) + \\frac{1}{2}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Lorentzian function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Lorentzian function.  Defaults to 0.0.</p> <code>0.0</code> <code>fwhml</code> <code>float</code> <p>Full width at half maximum of the Lorentzian function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Lorentzian function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef clorentzian(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhml: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Lorentzian function.\n\n    $$\n    f(x) = \\frac{1}{\\pi} \\arctan\\left(\\frac{x - c}{s}\\right) + \\frac{1}{2}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Lorentzian function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Lorentzian function.\n             Defaults to 0.0.\n        fwhml (float, optional): Full width at half maximum of the Lorentzian\n            function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Cumulative Lorentzian function of `x` given.\n    \"\"\"\n    sigma = fwhml * Constants.fwhml2sig\n    return np.array(amplitude * (np.arctan((x - center) / sigma) / pi) + 0.5)\n</code></pre> <p>Return a 1-dimensional cumulative Voigt function.</p> <pre>\\[\nf(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Voigt function. Defaults to 0.0.</p> <code>0.0</code> <code>fwhmv</code> <code>float</code> <p>Full width at half maximum of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <code>gamma</code> <code>float</code> <p>Gamma of the Voigt function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Cumulative Voigt function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef cvoigt(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    fwhmv: float = 1.0,\n    gamma: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional cumulative Voigt function.\n\n    $$\n    f(x) = \\frac{1}{2} \\left[1 + erf\\left(\\frac{x - c}{s \\sqrt{2}}\\right)\\right]\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Voigt function. Defaults to\n            1.0.\n        center (float, optional): Center of the Voigt function. Defaults to 0.0.\n        fwhmv (float, optional): Full width at half maximum of the Voigt function.\n            Defaults to 1.0.\n        gamma (float, optional): Gamma of the Voigt function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Cumulative Voigt function of `x` given.\n    \"\"\"\n    sigma = fwhmv * Constants.fwhmv2sig\n    return np.array(\n        amplitude\n        * 0.5\n        * (1 + erf((x - center) / (sigma * np.sqrt(2.0))))\n        * np.exp(-(((x - center) / gamma) ** 2))\n    )\n</code></pre> <p>Return a 1-dimensional second order polynomial function.</p> <pre>\\[\nf(x) = c_2 x^2 + c_1 x + c_0\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data</p> required <code>coefficient0</code> <code>float</code> <p>Zeroth coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient1</code> <code>float</code> <p>First coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient2</code> <code>float</code> <p>Second coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Third order polynomial function of <code>x</code></p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef polynom2(\n    x: NDArray[np.float64],\n    coefficient0: float = 1.0,\n    coefficient1: float = 1.0,\n    coefficient2: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional second order polynomial function.\n\n    $$\n    f(x) = c_2 x^2 + c_1 x + c_0\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data\n        coefficient0 (float, optional): Zeroth coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient1 (float, optional): First coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient2 (float, optional): Second coefficient of the\n             polynomial function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Third order polynomial function of `x`\n    \"\"\"\n    return np.array(coefficient0 + coefficient1 * x + coefficient2 * x**2)\n</code></pre> <p>Return a 1-dimensional third order polynomial function.</p> <pre>\\[\nf(x) = c_3 x^3 + c_2 x^2 + c_1 x + c_0\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data</p> required <code>coefficient0</code> <code>float</code> <p>Zeroth coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient1</code> <code>float</code> <p>First coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient2</code> <code>float</code> <p>Second coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <code>coefficient3</code> <code>float</code> <p>Third coefficient of the  polynomial function. Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Third order polynomial function of <code>x</code></p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef polynom3(\n    x: NDArray[np.float64],\n    coefficient0: float = 1.0,\n    coefficient1: float = 1.0,\n    coefficient2: float = 1.0,\n    coefficient3: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    \"\"\"Return a 1-dimensional third order polynomial function.\n\n    $$\n    f(x) = c_3 x^3 + c_2 x^2 + c_1 x + c_0\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data\n        coefficient0 (float, optional): Zeroth coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient1 (float, optional): First coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient2 (float, optional): Second coefficient of the\n             polynomial function. Defaults to 1.0.\n        coefficient3 (float, optional): Third coefficient of the\n             polynomial function. Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Third order polynomial function of `x`\n    \"\"\"\n    return np.array(\n        coefficient0 + coefficient1 * x + coefficient2 * x**2 + coefficient3 * x**3\n    )\n</code></pre> <p>Return a 1-dimensional Pearson type I distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{\\sigma^2}\n\\right]^{-\\frac{1}{\\nu}}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type I function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type I function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type I function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type I function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type I function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson1(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type I distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{\\sigma^2}\n    \\right]^{-\\frac{1}{\\nu}}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type I function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type I function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type I function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type I function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type I function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * np.pi))\n        * np.power(1 + ((x - center) / sigma) ** 2, -1 / exponent)\n    )\n</code></pre> <p>Return a 1-dimensional Pearson type II distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type II function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type II function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type II function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type II function.  Defaults to 1.0.</p> <code>1.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type II function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson2(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type II distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type II function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type II function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type II function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type II function.\n             Defaults to 1.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type II function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n    )\n</code></pre> <p>Return a 1-dimensional Pearson type III distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n\\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type III function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type III function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type III function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type III function.  Defaults to 1.0.</p> <code>1.0</code> <code>skewness</code> <code>float</code> <p>Skewness of the Pearson type III function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type III function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson3(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n    skewness: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type III distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n    \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type III function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type III function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type III function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type III function.\n             Defaults to 1.0.\n        skewness (float, optional): Skewness of the Pearson type III function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type III function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n        * np.power(\n            1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n        )\n    )\n</code></pre> <p>Return a 1-dimensional Pearson type IV distribution.</p> <pre>\\[\nf(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n\\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n\\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n\\left[1 + \\frac{\\delta}{\\nu}\n\\left(\\frac{x - c}{\\sigma}\\right)^2 \\right]^{-\\nu - 1/2}\n\\]</pre> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>NDArray[float64]</code> <p><code>x</code>-values of the data.</p> required <code>amplitude</code> <code>float</code> <p>Amplitude of the Pearson type IV function.     Defaults to 1.0.</p> <code>1.0</code> <code>center</code> <code>float</code> <p>Center of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <code>sigma</code> <code>float</code> <p>Sigma of the Pearson type IV function.  Defaults to 1.0.</p> <code>1.0</code> <code>exponent</code> <code>float</code> <p>Exponent of the Pearson type IV function.  Defaults to 1.0.</p> <code>1.0</code> <code>skewness</code> <code>float</code> <p>Skewness of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <code>kurtosis</code> <code>float</code> <p>Kurtosis of the Pearson type IV function.  Defaults to 0.0.</p> <code>0.0</code> <p>Returns:</p> Type Description <code>NDArray[float64]</code> <p>NDArray[np.float64]: Pearson type IV function of <code>x</code> given.</p> Source code in <code>spectrafit/models.py</code> Python<pre><code>@staticmethod\ndef pearson4(\n    x: NDArray[np.float64],\n    amplitude: float = 1.0,\n    center: float = 0.0,\n    sigma: float = 1.0,\n    exponent: float = 1.0,\n    skewness: float = 0.0,\n    kurtosis: float = 0.0,\n) -&gt; NDArray[np.float64]:\n    r\"\"\"Return a 1-dimensional Pearson type IV distribution.\n\n    $$\n    f(x) = \\frac{A}{\\sigma \\sqrt{2 \\pi}} \\left[1 + \\frac{(x - c)^2}{2 \\sigma^2}\n    \\right]^{-\\nu} \\left[1 + \\frac{\\gamma}{\\nu}\n    \\frac{x - c}{\\sigma} \\right]^{-\\nu - 1}\n    \\left[1 + \\frac{\\delta}{\\nu}\n    \\left(\\frac{x - c}{\\sigma}\\right)^2 \\right]^{-\\nu - 1/2}\n    $$\n\n    Args:\n        x (NDArray[np.float64]): `x`-values of the data.\n        amplitude (float, optional): Amplitude of the Pearson type IV function.\n                Defaults to 1.0.\n        center (float, optional): Center of the Pearson type IV function.\n             Defaults to 0.0.\n        sigma (float, optional): Sigma of the Pearson type IV function.\n             Defaults to 1.0.\n        exponent (float, optional): Exponent of the Pearson type IV function.\n             Defaults to 1.0.\n        skewness (float, optional): Skewness of the Pearson type IV function.\n             Defaults to 0.0.\n        kurtosis (float, optional): Kurtosis of the Pearson type IV function.\n             Defaults to 0.0.\n\n    Returns:\n        NDArray[np.float64]: Pearson type IV function of `x` given.\n    \"\"\"\n    return np.array(\n        amplitude\n        / (sigma * np.sqrt(2 * pi))\n        * np.power(1 + ((x - center) / (2 * sigma)) ** 2, -exponent)\n        * np.power(\n            1 + (skewness / exponent) * ((x - center) / sigma), -exponent - 1\n        )\n        * np.power(\n            1 + (kurtosis / exponent) * ((x - center) / sigma) ** 2,\n            -exponent - 1 / 2,\n        )\n    )\n</code></pre>"},{"location":"doc/models/#important-constants-for-the-models","title":"Important constants for the models","text":"<p>For calculating the models a few math constants are needed, which are implemented in the <code>constants</code> module.</p> <p>Mathematical constants for the curve models.</p> <p>Constants</p> <ol> <li> <p>Natural logarithm of 2</p> <pre>\\[\nln2 = \\log{2}\n\\]</pre> </li> <li> <p>Square root of 2 times pi</p> <pre>\\[\nsq2pi = \\sqrt{2 \\pi}\n\\]</pre> </li> <li> <p>Square root of pi</p> <pre>\\[\nsqpi = \\sqrt{ \\pi}\n\\]</pre> </li> <li> <p>Square root of 2</p> <pre>\\[\nsq2 = \\sqrt{2}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Gaussian</p> <pre>\\[\nfwhmg2sig = \\frac{1}{ 2 \\sqrt{2\\log{2}}}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Lorentzian</p> <pre>\\[\nfwhml2sig = \\frac{1}{2}\n\\]</pre> </li> <li> <p>Full width at half maximum to sigma for Voigt according to the article by     Olivero and Longbothum<sup>1</sup>, check also     XPSLibary website.</p> <p>$$ fwhm_{text{Voigt}} approx 0.5346 cdot fwhm_{text{Gaussian}} +   sqrt{ 0.2166 fwhm_{text{Lorentzian}}^2  + fwhm_{text{Gaussian}}^2 }</p> <p>$$</p> <p>In case of equal FWHM for Gaussian and Lorentzian, the Voigt FWHM can be defined as:</p> <pre>\\[\nfwhm_{\\text{Voigt}} \\approx 1.0692 + 2 \\sqrt{0.2166 + 2 \\ln{2}} \\cdot \\sigma\n\\]</pre> <pre>\\[\nfwhmv2sig = \\frac{1}{fwhm_{\\text{Voigt}}}\n\\]</pre> </li> </ol> <ol> <li> <p>J.J. Olivero, R.L. Longbothum, Empirical fits to the Voigt line width: A brief review, Journal of Quantitative Spectroscopy and Radiative Transfer, Volume 17, Issue 2, 1977, Pages 233-236, ISSN 0022-4073, doi.org/10.1016/0022-4073(77)90161-3.\u00a0\u21a9</p> </li> </ol> Source code in <code>spectrafit/models.py</code> Python<pre><code>@dataclass(frozen=True)\nclass Constants:\n    r\"\"\"Mathematical constants for the curve models.\n\n    !!! info \"Constants\"\n\n        1. Natural logarithm of 2\n\n            $$\n            ln2 = \\log{2}\n            $$\n\n        2. Square root of 2 times pi\n\n            $$\n            sq2pi = \\sqrt{2 \\pi}\n            $$\n\n        3. Square root of pi\n\n            $$\n            sqpi = \\sqrt{ \\pi}\n            $$\n\n        4. Square root of 2\n\n            $$\n            sq2 = \\sqrt{2}\n            $$\n\n        5. Full width at half maximum to sigma for Gaussian\n\n            $$\n            fwhmg2sig = \\frac{1}{ 2 \\sqrt{2\\log{2}}}\n            $$\n\n        6. Full width at half maximum to sigma for Lorentzian\n\n            $$\n            fwhml2sig = \\frac{1}{2}\n            $$\n\n        7. Full width at half maximum to sigma for Voigt according to the article by\n            Olivero and Longbothum[^1], check also\n            [XPSLibary website](https://xpslibrary.com/voigt-peak-shape/).\n\n            $$\n            fwhm_{\\text{Voigt}} \\approx 0.5346 \\cdot fwhm_{\\text{Gaussian}} +\n              \\sqrt{ 0.2166 fwhm_{\\text{Lorentzian}}^2  + fwhm_{\\text{Gaussian}}^2 }\n\n            $$\n\n            In case of equal FWHM for Gaussian and Lorentzian, the Voigt FWHM can be\n            defined as:\n\n            $$\n            fwhm_{\\text{Voigt}} \\approx 1.0692 + 2 \\sqrt{0.2166 + 2 \\ln{2}} \\cdot \\sigma\n            $$\n\n            $$\n            fwhmv2sig = \\frac{1}{fwhm_{\\text{Voigt}}}\n            $$\n\n        [^1]:\n            J.J. Olivero, R.L. Longbothum,\n            _Empirical fits to the Voigt line width: A brief review_,\n            **Journal of Quantitative Spectroscopy and Radiative Transfer**,\n            Volume 17, Issue 2, 1977, Pages 233-236, ISSN 0022-4073,\n            https://doi.org/10.1016/0022-4073(77)90161-3.\n    \"\"\"\n\n    ln2 = log(2.0)\n    sq2pi = sqrt(2.0 * pi)\n    sqpi = sqrt(pi)\n    sq2 = sqrt(2.0)\n    fwhmg2sig = 1 / (2.0 * sqrt(2.0 * log(2.0)))\n    fwhml2sig = 1 / 2.0\n    fwhmv2sig = 1 / (2 * 0.5346 + 2 * sqrt(0.2166 + log(2) * 2))\n</code></pre>"},{"location":"doc/models/#visualization-of-the-models-as-a-function-of-the-parameters","title":"Visualization of the models as a function of the parameters","text":"<p>About Peaks' Components</p> <p>Comparing components of the peaks in a table is important because it allows for a quick and easy comparison of the different parameters that describe each peak. This can be useful for identifying trends or patterns in the data, as well as for identifying outliers or anomalies.</p> <p>Additionally, having this information in a table format can make it easier to visualize and interpret the data, as well as to communicate the results to others. This can be also seen in example9_3.ipny</p> Python<pre><code>from spectrafit.plugins import notebook as nb\n\n...\n\nspn.solver_model(initial_model=initial_model, show_peaks=True)\n</code></pre> <p>This will provide an interactive table as well as allows to export the iterative results as a <code>csv</code>-file.</p> About Peak's Components as <code>*.csv</code> Scdoc<pre><code>    pseudovoigt_amplitude_1,pseudovoigt_amplitude_1,pseudovoigt_amplitude_1,pseudovoigt_center_1,pseudovoigt_center_1,pseudovoigt_center_1,pseudovoigt_fwhmg_1,pseudovoigt_fwhmg_1,pseudovoigt_fwhmg_1,pseudovoigt_fwhml_1,pseudovoigt_fwhml_1,pseudovoigt_fwhml_1,gaussian_amplitude_2,gaussian_amplitude_2,gaussian_amplitude_2,gaussian_center_2,gaussian_center_2,gaussian_center_2,gaussian_fwhmg_2,gaussian_fwhmg_2,gaussian_fwhmg_2,gaussian_amplitude_3,gaussian_amplitude_3,gaussian_amplitude_3,gaussian_center_3,gaussian_center_3,gaussian_center_3,gaussian_fwhmg_3,gaussian_fwhmg_3,gaussian_fwhmg_3,gaussian_amplitude_4,gaussian_amplitude_4,gaussian_amplitude_4,gaussian_center_4,gaussian_center_4,gaussian_center_4,gaussian_fwhmg_4,gaussian_fwhmg_4,gaussian_fwhmg_4,gaussian_amplitude_5,gaussian_amplitude_5,gaussian_amplitude_5,gaussian_center_5,gaussian_center_5,gaussian_center_5,gaussian_fwhmg_5,gaussian_fwhmg_5,gaussian_fwhmg_5,gaussian_amplitude_6,gaussian_amplitude_6,gaussian_amplitude_6,gaussian_center_6,gaussian_center_6,gaussian_center_6,gaussian_fwhmg_6,gaussian_fwhmg_6,gaussian_fwhmg_6\n    init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value,init_value,model_value,best_value\n    1.0,0.33834723012149714,0.33834723012149714,0.0,0.017248125260695968,0.017248125260695968,0.1,0.020000000004318036,0.020000000004318036,0.1,0.1999999999970698,0.1999999999970698,0.3,0.04935454783731008,0.04935454783731008,2.0,1.6275712126681712,1.6275712126681712,0.1,0.2999853736750539,0.2999853736750539,0.3,0.08603886973285346,0.08603886973285346,2.5,2.447935058411735,2.447935058411735,0.2,0.3999999771273954,0.3999999771273954,0.3,0.07288548037982234,0.07288548037982234,2.5,2.031809677600558,2.031809677600558,0.3,0.399999999994134,0.399999999994134,0.3,0.0806454229648127,0.0806454229648127,3.0,3.0955581713143245,3.0955581713143245,0.3,0.39999999989892293,0.39999999989892293,0.3,0.09759693340603837,0.09759693340603837,3.8,3.7000000000154216,3.7000000000154216,0.3,0.39999931341337847,0.39999931341337847\n    1.0,0.33834723012149714,0.33834723012149714,0.0,0.017248125260695968,0.017248125260695968,0.1,0.020000000004318036,0.020000000004318036,0.1,0.1999999999970698,0.1999999999970698,0.3,0.04935454783731008,0.04935454783731008,2.0,1.6275712126681712,1.6275712126681712,0.1,0.2999853736750539,0.2999853736750539,0.3,0.08603886973285346,0.08603886973285346,2.5,2.447935058411735,2.447935058411735,0.2,0.3999999771273954,0.3999999771273954,0.3,0.07288548037982234,0.07288548037982234,2.5,2.031809677600558,2.031809677600558,0.3,0.399999999994134,0.399999999994134,0.3,0.0806454229648127,0.0806454229648127,3.0,3.0955581713143245,3.0955581713143245,0.3,0.39999999989892293,0.39999999989892293,0.3,0.09759693340603837,0.09759693340603837,3.8,3.7000000000154216,3.7000000000154216,0.3,0.39999931341337847,0.39999931341337847\n    1.0,0.3384902152130924,0.3384902152130924,0.0,0.017262089305238426,0.017262089305238426,0.1,0.02000000000431808,0.02000000000431808,0.1,0.19999999999707,0.19999999999707,0.3,0.06390170759703961,0.06390170759703961,2.0,1.7470034358646442,1.7470034358646442,0.1,0.29999999999595617,0.29999999999595617,0.3,0.10843271104545171,0.10843271104545171,2.5,2.318373021191109,2.318373021191109,0.2,0.39999999999414,0.39999999999414,0.3,0.0828004001712187,0.0828004001712187,2.5,3.0506627778035975,3.0506627778035975,0.3,0.3999825114407111,0.3999825114407111,0.3,0.039900814326592204,0.039900814326592204,3.0,4.379956884593627,4.379956884593627,0.3,0.3999999999941403,0.3999999999941403,0.3,0.09812726904670366,0.09812726904670366,3.8,3.7000000000154216,3.7000000000154216,0.2,0.39999999999413927,0.39999999999413927\n    1.0,0.3383768308405881,0.3383768308405881,0.0,0.017249155005218952,0.017249155005218952,0.1,0.020000223602285063,0.020000223602285063,0.1,0.19999665144901568,0.19999665144901568,0.3,0.05316047862491946,0.05316047862491946,2.0,1.6591127700194552,1.6591127700194552,0.1,0.29999262582163666,0.29999262582163666,0.3,0.08210748667320089,0.08210748667320089,2.5,2.424765205447216,2.424765205447216,0.2,0.39949761254017074,0.39949761254017074,0.3,0.06636980111213131,0.06636980111213131,2.5,2.0669028672740284,2.0669028672740284,0.3,0.39999998671625336,0.39999998671625336,0.3,0.08125492663466871,0.08125492663466871,3.0,3.0662131700347164,3.0662131700347164,0.3,0.39999999999414,0.39999999999414,0.3,0.09830451265206608,0.09830451265206608,3.7,3.700483502444169,3.700483502444169,0.2,0.39999999997262314,0.39999999997262314\n</code></pre>"},{"location":"doc/solver/","title":"Solvers","text":"<p>The solving process of <code>SpectraFit</code> is based on the following three steps:</p> <ol> <li>Defining the defining the model parameters: The proposed peak is translated    into a <code>lmfit</code>-type dictionary based on the object-type input    parameters. The proposed peak can be manual or automatically    generated. In the case of manual parameters, the fitting procedure can also    be applied to a global or hybrid global-fitting routine. For more information    check please in API-section ModelParameters</li> <li>Solving of the curve models: Next, SolverModels will solve the    <code>lmfit</code>-compatible model for a 2D- or 3D-fitting problem. All parameters,    boundaries, and conditions will pass to the proposed models. In the case    of global fitting, the spectra have to be flattened.</li> <li>Calculating the model parameters Independent of a 2D- or 3D-fitting    problem, the calculated/optimized spectra will always be created in a    two-dimensional fashion; for more information, please check the API-Section    about calculated model.</li> </ol>"},{"location":"doc/statistics/","title":"Statistics","text":""},{"location":"doc/statistics/#standard-statistics","title":"Standard Statistics","text":"<p>Standard statistics will be performed according to the <code>Goodness of Fit</code>, which is implemented by default through <code>lmfit</code>. The <code>Goodness of Fit</code> contains:</p> <ul> <li> \\(N_{vars}\\): the number of degrees of variables</li> <li> \\(N_{free}\\): the number of degrees of freedom</li> <li> \\(N_{func}\\): the number of degrees of functions</li> <li> \\(N_{data}\\): the number of data points</li> <li> \\(residuals\\): residuals</li> <li> \\(\\chi^2\\): the sum of the squares of the residuals</li> <li> \\(\\textbf{red}\\chi^2\\): the reduced \\(\\chi^2\\)</li> <li> \\(\\textnormal{AIC}\\): the Akaike Information Criterion</li> <li> \\(\\textnormal{BIC}\\): the Bayesian Information Criterion</li> <li> \\(covariance\\): the Covariance Matrix (optional)</li> </ul> <p>According to the provided data below, two types of fits will be compared according to the <code>Goodness of fit</code>. In example 1, five Gaussian-distributions are used to fit the data; in example 2, three Gaussian-distributions are used to fit the data. The fitted spectra are shown in the figures below.</p> Reference Data Text Only<pre><code>Energy,Intensity\n291.80443675550987,0.11771793109307316\n291.5690317863643,0.12724843410900621\n291.3122900238649,0.14061739741579737\n291.0766791011155,0.14053244155422917\n290.7770989890252,0.15388595834073504\n290.52056318012956,0.17687038052502746\n290.3283260863409,0.2018010642652478\n290.1146698177568,0.22672402474532583\n289.81599590152325,0.2823855605928377\n289.5602015256013,0.33998563473613497\n289.389383606608,0.36492404173649806\n289.0898446852385,0.38020065029850414\n288.70417596675907,0.374292356289437\n288.48973707448056,0.3626765730350098\n288.2963878312313,0.33568377883672285\n288.14703027775414,0.36255300087272857\n287.8477385007092,0.38936816008773656\n287.63535914446874,0.4739069656083228\n287.3586398824005,0.5545764177974809\n287.0818382388907,0.6313996864356385\n286.8691293568841,0.7005537577522226\n286.5914627082384,0.7369920991048744\n286.35630488341735,0.7580611527738091\n286.1211058678756,0.7772071146672436\n285.8225143330836,0.8367148340657561\n285.39483107942857,0.8692529290464093\n285.0089152166246,0.8518060843843406\n284.8785877761387,0.767143706701473\n284.59750229766985,0.6439654306876021\n284.42277126020434,0.486210119015439\n284.14193292606006,0.3745703936545697\n283.83942827279583,0.25138439438055615\n283.6027875820274,0.2032221441314811\n283.34472771646364,0.15505217062226317\n283.0229046151628,0.12993612863862114\n282.4226322415218,0.10471968427312561\n281.88711168091606,0.10260351099406106\n281.2445776277749,0.10429490496528415\n280.6662187175784,0.10216328516593454\n</code></pre> Example 1: five peaks TOML<pre><code>  [fitting.peaks.1.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.1.gaussian.center]\n  max = 286\n  min = 284\n  vary = true\n  value = 285\n\n  [fitting.peaks.1.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.2.gaussian.amplitude]\n  expr = \"gaussian_amplitude_1 / 3\"\n\n  [fitting.peaks.2.gaussian.center]\n  expr = \"gaussian_center_1 + 0.8\"\n\n  [fitting.peaks.2.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.3.gaussian.amplitude]\n  max = 4\n  min = 0.1\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.3.gaussian.center]\n  expr = \"gaussian_center_1 + 1.7\"\n\n  [fitting.peaks.3.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.4.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.4.gaussian.center]\n  expr = \"gaussian_center_1 + 1.9\"\n\n  [fitting.peaks.4.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.5.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.5.gaussian.center]\n  max = 288.6\n  min = 292.2\n  vary = true\n  value = 289\n\n  [fitting.peaks.5.gaussian.fwhmg]\n  max = 2.0\n  min = 1.8\n  vary = true\n  value = 1.9\n</code></pre> Example 2: three peaks TOML<pre><code>  [fitting.peaks.1.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.1.gaussian.center]\n  max = 286\n  min = 285\n  vary = true\n  value = 285.39\n\n  [fitting.peaks.1.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.2.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.2.gaussian.center]\n  max = 287\n  min = 286.4\n  vary = true\n  value = 286.6\n\n  [fitting.peaks.2.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n\n  [fitting.peaks.3.gaussian.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 0.5\n\n  [fitting.peaks.3.gaussian.center]\n  max = 288\n  min = 290\n  vary = true\n  value = 288.4\n\n  [fitting.peaks.3.gaussian.fwhmg]\n  max = 1.9\n  min = 1.7\n  vary = true\n  value = 1.8\n</code></pre> <p>Fitting Results</p> parameter Example 1 Example 2 \\(\\chi^2\\) 0.15365078580492708 0.17338375921457175 \\(\\textbf{red}\\chi^2\\) 0.005487528064461682 0.005779458640485725 \\(\\textnormal{AIC}\\) -193.9287463695311 -193.21657151272893 \\(\\textnormal{BIC}\\) -175.62956826210498 -178.24451669756212"},{"location":"doc/statistics/#linear-correlation","title":"Linear Correlation","text":"<p>The linear correlation between the the fitting results is calculated using the Pearson's correlation coefficient. The Pearson's correlation coefficient is a measure of the linear dependence between two variables.</p> <p>Correlation Results</p> <p>Example 1:</p> Peak 1 Peak 2 Peak 3 Peak 4 Peak 5 Peak 1 1.0 0.6284 0.000 -0.091 -0.376 Peak 2 0.628 1.0 0.620 0.477 -0.371 Peak 3 0.000 0.620 1.0 0.978 -0.274 Peak 4 -0.091 0.477 0.978 1.0, -0.225 Peak 5 -0.376 -0.371 -0.274 -0.225 1.0 <p>Example 2:</p> Peak 1 Peak 2 Peak 3 Peak 1 1.0 -0.021 -0.364 Peak 2 -0.021 1.0 -0.241 Peak 3 -0.364 -0.241 1.0 <p></p> <p>Five peak fit of the <code>Reference Data</code> above.</p> <p></p> <p>Three peak fit of the <code>Reference Data</code> above.</p>"},{"location":"doc/statistics/#regression-metrics","title":"Regression Metrics","text":"<p>For the regression metrics, the fitting results are compared to the reference data. The metrics are calculated for each fit individually and based on the <code>sklearn.metrics</code> module. Currently, the following metrics are implemented:</p> <ul> <li> <code>Explained Variance Score</code></li> <li> <code>R\u00b2</code></li> <li> <code>Max Error</code></li> <li> <code>Mean Absolute Error</code></li> <li> <code>Mean Squared Error</code></li> <li> <code>Mean Squared Log Error</code></li> <li> <code>Median Absolute Error</code></li> <li> <code>Mean Absolute Percentage Error</code></li> </ul> <p>The metrics should provide a better overview of the individual fitting results and the used model then just using the <code>Goodness of Fit</code> metrics. However, the following metrics are not implemented yet:</p> <ul> <li> <code>Mean Percentage Error</code><sup>1</sup></li> <li> <code>Mean Gamma Deviance</code><sup>1</sup></li> <li> <code>Mean Tweedie Deviance</code><sup>1</sup></li> <li> <code>Mean Pinball Loss</code><sup>1</sup></li> <li> <code>D\u00b2 tweedie score</code><sup>2</sup></li> <li> <code>D\u00b2 pinball score</code><sup>2</sup></li> <li> <code>D\u00b2 absolute error score</code><sup>2</sup></li> </ul> <p>Regression Metrics For Example 6</p> Metric Spectra 1 Spectra 2 Spectra 3 <code>explained variance score</code> 0.97 0.88 0.98 <code>r2 score</code> 0.97 0.86 0.98 <code>max error</code> 0.05 0.14 0.05 <code>mean absolute error</code> 0.02 0.04 0.02 <code>mean squared error</code> 0.00 0.00 0.00 <code>mean squared log error</code> 0.00 0.00 0.00 <code>median absolute error</code> 0.02 0.04 0.02 <code>mean absolute percentage error</code> 441.19 0.25 0.62 <code>mean poisson deviance</code> 0.02 0.02 0.01"},{"location":"doc/statistics/#metric-plots","title":"Metric Plots","text":"<p>In the case of using the Jupyter Notebook interface of the <code>SpectraFit</code> package, the metrics will be plotted automatically. It uses the</p> <ol> <li>Goodness of Fit Metrics</li> <li>Regression-Metrics</li> </ol> <p>to plot the results for each run and can be also exported as <code>.csv</code>. The idea is to use multiple runs and metrics together to get a better overview of the fitting performance.</p> <p></p> <p></p> <p>Example 3 and Example 4 show the fit abd metric plots for the fitting results of four runs of the <code>Reference Data</code> above.</p> <p>The user can select any of the metrics 1 and 2 by using the keywords <code>bar_criteria</code> and <code>line_criteria</code>.</p> Python<pre><code>sp.solver_model(\n    initial_model=initial_model,\n    bar_criteria=[\"reduced_chi_square\"],\n    line_criteria=[\"explained_variance_score\", \"r2_score\", \"max_error\"],\n)\n</code></pre> <ol> <li> <p>requires a strictly postive <code>y_true</code> and <code>y_pred</code> array\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>requires <code>sklearn &gt;= 1.1.2</code> \u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"examples/example1/","title":"Fitting of a Single Feature via Command-Line","text":"<p>In this example, the command-line interface of <code>SpectraFit</code> is used to fit a single peak of the spectrum, as shown below.</p> Bash<pre><code>spectrafit data.txt -i example_1.json -o example_1\n</code></pre> <p></p> <p>In case of using the energy ranges, the spectra will be limited to the defined energy ranges of <code>-e0</code> and <code>-e1</code>.</p> Bash<pre><code>spectrafit data.txt -i example_1.json -o example_1 -e0 -1 -e1 +1\n</code></pre> <p></p> <p>The input file has to look like the following:</p> JSON<pre><code>{\n  \"fitting\": {\n    \"description\": {\n      \"project_name\": \"Example1\",\n      \"project_details\": \"Example 1\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    },\n\n    \"parameters\": {\n      \"minimizer\": { \"nan_policy\": \"propagate\", \"calc_covar\": true },\n      \"optimizer\": { \"max_nfev\": 1000, \"method\": \"leastsq\" },\n      \"report\": { \"min_correl\": 0.0 }\n    },\n    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.5,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.1\n          },\n          \"fwhml\": {\n            \"max\": 0.5,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.1\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/example2/","title":"JSON, TOML, YAML Inputs","text":"<p>As already mentioned in section Input Files, <code>SpectraFit</code> can read input files in different formats. The input file format is specified by the file extension, which can be <code>*.json</code>, <code>*.yaml</code>, <code>*.yml</code>, or <code>*.toml</code>.</p> <p>fitting_input.toml</p> <p>The standard input file for <code>SpectraFit</code> is called <code>fitting_input.toml</code>; other specific inpute files has to be explicitly defined by <code>-i</code> or <code>--input</code>.</p> Bash<pre><code>spectrafit data.txt\n</code></pre> <p>The command above is enough if <code>fitting_input.toml</code> is provided in the same folder.</p>"},{"location":"examples/example2/#json-input","title":"JSON-Input","text":"Bash<pre><code>spectrafit data.txt -i example_1.json\n</code></pre> JSON<pre><code>{\n  \"fitting\": {\n    \"description\": {\n      \"project_name\": \"Example1\",\n      \"project_details\": \"Example 1\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    },\n    \"parameters\": {\n      \"minimizer\": {\n        \"nan_policy\": \"propagate\",\n        \"calc_covar\": true\n      },\n      \"optimizer\": {\n        \"max_nfev\": 1000,\n        \"method\": \"leastsq\"\n      },\n      \"report\": {\n        \"min_correl\": 0.0\n      }\n    },\n    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.5,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.1\n          },\n          \"fwhml\": {\n            \"max\": 0.5,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.1\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/example2/#yaml-or-yml-input","title":"YAML- or YML-Input","text":"Bash<pre><code>spectrafit data.txt -i example_1.yaml\n</code></pre> YAML<pre><code>---\nfitting:\n  description:\n    project_name: Example1\n    project_details: Example 1\n    keywords:\n      - 2D-Spectra\n      - fitting\n      - curve-fitting\n      - peak-fitting\n      - spectrum\n  parameters:\n    minimizer:\n      nan_policy: propagate\n      calc_covar: true\n    optimizer:\n      max_nfev: 1000\n      method: leastsq\n    report:\n      min_correl: 0\n  peaks:\n    \"1\":\n      pseudovoigt:\n        amplitude:\n          max: 2\n          min: 0\n          vary: true\n          value: 1\n        center:\n          max: 2\n          min: -2\n          vary: true\n          value: 0\n        fwhmg:\n          max: 0.5\n          min: 0.02\n          vary: true\n          value: 0.1\n        fwhml:\n          max: 0.5\n          min: 0.01\n          vary: true\n          value: 0.1\n</code></pre>"},{"location":"examples/example2/#toml-input","title":"TOML-Input","text":"Bash<pre><code>spectrafit data.txt -i example_1.toml\n</code></pre> TOML<pre><code>[fitting.description]\nproject_name = \"Example1\"\nproject_details = \"Example 1\"\nkeywords = [\n  \"2D-Spectra\",\n  \"fitting\",\n  \"curve-fitting\",\n  \"peak-fitting\",\n  \"spectrum\"\n]\n\n[fitting.parameters.minimizer]\nnan_policy = \"propagate\"\ncalc_covar = true\n\n[fitting.parameters.optimizer]\nmax_nfev = 1_000\nmethod = \"leastsq\"\n\n[fitting.parameters.report]\nmin_correl = 0\n\n[fitting.peaks.1.pseudovoigt.amplitude]\nmax = 2\nmin = 0\nvary = true\nvalue = 1\n\n[fitting.peaks.1.pseudovoigt.center]\nmax = 2\nmin = -2\nvary = true\nvalue = 0\n\n[fitting.peaks.1.pseudovoigt.fwhmg]\nmax = 0.5\nmin = 0.02\nvary = true\nvalue = 0.1\n\n[fitting.peaks.1.pseudovoigt.fwhml]\nmax = 0.5\nmin = 0.01\nvary = true\nvalue = 0.1\n</code></pre>"},{"location":"examples/example3/","title":"Multi Peak Fitting","text":"<p>In this example, the the input-file of <code>SpectraFit</code> is used to perform a multi peak fitting, shown in the figure below.</p> <p></p> <p>Mulit peak fitting example by using 6 different pseudovoigt functions. The energy range is limited from -1 to 2.4 eV.</p> <p>All required settings are defined in the input-file in the section <code>settings</code>.</p> <p>settings</p> <p>If the data source, named <code>infile</code> is defined in the input-file, any filename can be used, like the undersocore _.</p> Bash<pre><code>spectrafit _ -i example_2.json\n</code></pre> <p>In this particular example, some of the pre-defined peaks are fixed. This is also printed in the terminal output:</p> Bash<pre><code>[[Variables]]\n    pseudovoigt_amplitude_1:  0.31188533 (init = 1), model_value = 0.3118853\n    pseudovoigt_center_1:     0.01664784 (init = 0), model_value = 0.01664784\n    pseudovoigt_fwhmg_1:     0.14329487 (init = 0.01), model_value = 0.1432949\n    pseudovoigt_fwhml_1:     0.19995302 (init = 0.01), model_value = 0.199953\n    pseudovoigt_amplitude_2:  0.01669370 (init = 1), model_value = 0.0166937\n    pseudovoigt_center_2:     1.662 (fixed)\n    pseudovoigt_fwhmg_2:     0.28628541 (init = 0.02), model_value = 0.2862854\n    pseudovoigt_fwhml_2:     0.12531854 (init = 0.01), model_value = 0.1253185\n    pseudovoigt_amplitude_3:  0.02456846 (init = 1), model_value = 0.02456846\n    pseudovoigt_center_3:     1.924 (fixed)\n    pseudovoigt_fwhmg_3:     0.43336697 (init = 0.01), model_value = 0.433367\n    pseudovoigt_fwhml_3:     0.10962934 (init = 0.01), model_value = 0.1096293\n    pseudovoigt_amplitude_4:  4.1999e-05 (init = 1), model_value = 4.199897e-05\n    pseudovoigt_center_4:     2 (fixed)\n    pseudovoigt_fwhmg_4:     0.01376736 (init = 0.01), model_value = 0.01376736\n    pseudovoigt_fwhml_4:     0.08425184 (init = 0.01), model_value = 0.08425184\n    pseudovoigt_amplitude_5:  0.14042084 (init = 1), model_value = 0.1404208\n    pseudovoigt_center_5:     2.345 (fixed)\n    pseudovoigt_fwhmg_5:     0.20598429 (init = 0.01), model_value = 0.2059843\n    pseudovoigt_fwhml_5:     0.53558371 (init = 0.01), model_value = 0.5355837\n</code></pre> example_2.json JSON<pre><code>{\n\"settings\": {\n    \"column\": [0, 1],\n    \"decimal\": \".\",\n    \"energy_start\": -1,\n    \"energy_stop\": 2.4,\n    \"header\": null,\n    \"infile\": \"data.txt\",\n    \"outfile\": \"example_2_results\",\n    \"oversampling\": false,\n    \"separator\": \"\\t\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"verbose\": 1\n},\n\"fitting\": {\n    \"description\": {\n    \"project_name\": \"Template\",\n    \"project_details\": \"Template for testing\",\n    \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n    ]\n    },\n\n    \"parameters\": {\n    \"minimizer\": { \"nan_policy\": \"propagate\", \"calc_covar\": true },\n    \"optimizer\": { \"max_nfev\": 1000, \"method\": \"leastsq\" },\n    \"report\": { \"min_correl\": 0.0 }\n    },\n    \"peaks\": {\n    \"1\": {\n        \"pseudovoigt\": {\n        \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n        },\n        \"center\": {\n            \"max\": 0.5,\n            \"min\": -0.5,\n            \"vary\": true,\n            \"value\": 0\n        },\n        \"fwhmg\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        },\n        \"fwhml\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        }\n        }\n    },\n    \"2\": {\n        \"pseudovoigt\": {\n        \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n        },\n        \"center\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": false,\n            \"value\": 1.662\n        },\n        \"fwhmg\": {\n            \"max\": 0.5,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n        },\n        \"fwhml\": {\n            \"max\": 0.5,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.01\n        }\n        }\n    },\n    \"3\": {\n        \"pseudovoigt\": {\n        \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n        },\n        \"center\": {\n            \"max\": 2,\n            \"min\": 1.8,\n            \"vary\": false,\n            \"value\": 1.924\n        },\n        \"fwhmg\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        },\n        \"fwhml\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        }\n        }\n    },\n    \"4\": {\n        \"pseudovoigt\": {\n        \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n        },\n        \"center\": {\n            \"max\": 2,\n            \"min\": 1,\n            \"vary\": false,\n            \"value\": 2.157\n        },\n        \"fwhmg\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        },\n        \"fwhml\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        }\n        }\n    },\n    \"5\": {\n        \"pseudovoigt\": {\n        \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n        },\n        \"center\": {\n            \"max\": 2.5,\n            \"min\": 2,\n            \"vary\": false,\n            \"value\": 2.345\n        },\n        \"fwhmg\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        },\n        \"fwhml\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n        }\n        }\n    }\n    }\n}\n}\n</code></pre>"},{"location":"examples/example4/","title":"Working with Real Life Data","text":"<p>In this particular example, the data are flavored with some random-noise generated by np.random and the data are saved in the <code>*.csv</code> file format including a header.</p> data.csv Scdoc<pre><code>_index,Energy,Intensity,Noisy\n0,-1.6,0.0,0.04008584898760459\n1,-1.5833333333333335,0.003891050583657596,0.04750414409524225\n2,-1.5666666666666669,0.003973071404922201,0.03510399915254631\n3,-1.5500000000000003,0.00405770964833183,0.05632172083076319\n4,-1.5333333333333337,0.0041450777202072485,0.01232860798641571\n5,-1.516666666666667,0.004235294117647068,0.05302472496914309\n6,-1.5000000000000004,0.0043284838283034685,0.07525857347111906\n7,-1.4833333333333338,0.004424778761061949,0.026283276349644155\n8,-1.4666666666666672,0.004524318210380788,0.011585214896062204\n9,-1.4500000000000006,0.0046272493573264635,0.0915722853744314\n10,-1.433333333333334,0.004733727810650881,0.04465407821401557\n11,-1.4166666666666674,0.004843918191603862,0.06827239306435148\n12,-1.4000000000000008,0.004957994766561084,0.05586439899783531\n13,-1.383333333333334,0.005076142131979685,0.0519569913045801\n14,-1.3666666666666676,0.005198555956678712,0.04529476745152189\n15,-1.3500000000000008,0.0053254437869822225,0.046140549452885406\n16,-1.3333333333333344,0.005457025920873108,0.023525144931402578\n17,-1.3166666666666675,0.005593536357986327,0.09585723752299317\n18,-1.3000000000000012,0.0057352238330412595,0.07127922424213151\n19,-1.2833333333333343,0.005882352941176454,0.10508559185076881\n20,-1.266666666666668,0.006035205364626978,0.08420060928031715\n21,-1.250000000000001,0.006194081211286973,0.017085686334549988\n22,-1.2333333333333347,0.006359300476947529,0.03344672102794343\n23,-1.216666666666668,0.00653120464441218,0.00830761072647146\n24,-1.2000000000000015,0.006710158434296354,0.0691372440712335\n25,-1.183333333333335,0.006896551724137925,0.08700263994353065\n26,-1.1666666666666683,0.007090801654520351,0.08565019188726043\n27,-1.1500000000000017,0.0072933549432738845,0.018466410525855743\n28,-1.133333333333335,0.007504690431519682,0.10126968931392635\n29,-1.1166666666666685,0.0077253218884119875,0.09002669232719052\n30,-1.1000000000000019,0.007955801104972366,0.06492669387530689\n31,-1.0833333333333353,0.008196721311475363,0.012283949013776264\n32,-1.0666666666666687,0.008448720957521673,0.051160376096648155\n33,-1.050000000000002,0.008712487899322318,0.10076720629983352\n34,-1.0333333333333354,0.00898876404494378,0.06455063829584042\n35,-1.0166666666666688,0.009278350515463833,0.085381815664481\n36,-1.0000000000000022,0.009582113388341695,0.10165223781514847\n37,-0.9833333333333357,0.009900990099009844,0.025570057103461108\n38,-0.966666666666669,0.010235996588001109,0.02228295793177043\n39,-0.9500000000000025,0.010588235294117582,0.017739377314671997\n40,-0.9333333333333358,0.010958904109588984,0.04422978316861217\n41,-0.9166666666666691,0.011349306431273604,0.019761263525689472\n42,-0.9000000000000026,0.011760862463247207,0.04629885183574297\n43,-0.8833333333333359,0.012195121951219443,0.053064400715557736\n44,-0.8666666666666692,0.012653778558875128,0.08947490450789104\n45,-0.8500000000000028,0.013138686131386808,0.06483319245975283\n46,-0.8333333333333361,0.013651877133105715,0.04409090800604787\n47,-0.8166666666666694,0.014195583596214404,0.09857042115474708\n48,-0.8000000000000029,0.014772260976610463,0.022608811796422504\n49,-0.7833333333333363,0.015384615384615235,0.10076241702814402\n50,-0.7666666666666697,0.01603563474387513,0.028729376733513383\n51,-0.750000000000003,0.016728624535315855,0.0870234230693911\n52,-0.7333333333333365,0.01746724890829681,0.0676497631364179\n53,-0.7166666666666699,0.018255578093306146,0.028544877331387865\n54,-0.7000000000000033,0.01909814323607401,0.10175610090705829\n55,-0.6833333333333367,0.019999999999999855,0.027299661470373895\n56,-0.6666666666666701,0.02096680256260904,0.1131043218039902\n57,-0.6500000000000035,0.02200488997554988,0.05118797301708643\n58,-0.6333333333333369,0.02312138728323678,0.03441361033656606\n59,-0.6166666666666702,0.02432432432432412,0.05285021270123045\n60,-0.6000000000000036,0.02562277580071142,0.10660843091638031\n61,-0.5833333333333369,0.02702702702702668,0.11737509073867693\n62,-0.5666666666666704,0.028548770816811748,0.12134799195481201\n63,-0.5500000000000038,0.030201342281878873,0.04041597381074299\n64,-0.5333333333333372,0.03199999999999956,0.12293189388817057\n65,-0.5166666666666706,0.03396226415094291,0.05556963189399414\n66,-0.500000000000004,0.03610832497492419,0.08828987053748896\n67,-0.48333333333333733,0.0384615384615379,0.13299541447675434\n68,-0.4666666666666708,0.04104903078677245,0.1368883871498967\n69,-0.4500000000000042,0.04390243902438932,0.12557018387213875\n70,-0.4333333333333376,0.04705882352941089,0.10858972370468452\n71,-0.41666666666667096,0.05056179775280797,0.14038099626448797\n72,-0.4000000000000044,0.054462934947048874,0.14696995552122566\n73,-0.38333333333333774,0.058823529411763525,0.11827481099647273\n74,-0.36666666666667114,0.0637168141592905,0.12310013634836614\n75,-0.3500000000000045,0.06923076923076783,0.12389921713852828\n76,-0.3333333333333379,0.07547169811320567,0.12541817310963077\n77,-0.31666666666667126,0.08256880733944734,0.08913053803943821\n78,-0.3000000000000047,0.09068010075566536,0.158725588571065\n79,-0.2833333333333381,0.09999999999999735,0.12271184899825521\n80,-0.2666666666666715,0.11076923076922764,0.11988078158746927\n81,-0.2500000000000049,0.12328767123287268,0.19089360574178527\n82,-0.23333333333333828,0.137931034482754,0.19399955030212906\n83,-0.21666666666667167,0.15517241379309754,0.18670514823813245\n84,-0.20000000000000503,0.1756097560975534,0.20809899253733338\n85,-0.18333333333333843,0.19999999999999216,0.23171652798758308\n86,-0.16666666666667185,0.22929936305731488,0.2484093442785573\n87,-0.15000000000000524,0.2647058823529294,0.3310743928003237\n88,-0.13333333333333863,0.3076923076922934,0.36684994465354487\n89,-0.11666666666667203,0.35999999999998283,0.3891363703418967\n90,-0.1000000000000054,0.42352941176468273,0.46941956893213543\n91,-0.08333333333333881,0.49999999999997286,0.5580343781043237\n92,-0.0666666666666722,0.590163934426198,0.5954783032481118\n93,-0.0500000000000056,0.6923076923076551,0.741052184253777\n94,-0.03333333333333899,0.7999999999999646,0.838197602601856\n95,-0.01666666666667238,0.8999999999999696,0.9513897921608991\n96,-5.773159728050815e-15,0.972972972972956,0.9991456688422116\n97,0.016666666666660834,1.0,1.0900891532152457\n98,0.03333333333332744,0.9729729729729932,0.9973225325465217\n99,0.04999999999999405,0.9000684869288876,0.906261276926932\n100,0.06666666666666066,0.8003319898391893,0.8241812742665023\n101,0.08333333333332726,0.6926622009062817,0.7832498289548987\n102,0.09999999999999389,0.5905260079579859,0.6185705157749193\n103,0.11666666666666048,0.5003698828803956,0.5147752382697125\n104,0.1333333333333271,0.423907359037742,0.4950946246505369\n105,0.14999999999999367,0.36038627792143624,0.42632631143218236\n106,0.1666666666666603,0.3080871943516519,0.3960140991859387\n107,0.18333333333332688,0.26510966833725974,0.29118083146951984\n108,0.19999999999999352,0.229712352160166,0.2944689348278017\n109,0.21666666666666007,0.200422509979045,0.2741346452275327\n110,0.23333333333332676,0.17604211948496107,0.23555118065288444\n111,0.2499999999999933,0.15561497876280292,0.19611365068308828\n112,0.26666666666665995,0.1383841657795379,0.22837404698823588\n113,0.2833333333333265,0.12375175116828944,0.13640801157284446\n114,0.2999999999999932,0.11124466029010888,0.16703332815641658\n115,0.31666666666665977,0.1008615472585792,0.11178903951413714\n116,0.3333333333333264,0.09156616328472589,0.1112347183283852\n117,0.349999999999993,0.08347578183738227,0.13157636117103375\n118,0.3666666666666596,0.07640033803343374,0.09334455581051235\n119,0.38333333333332614,0.07018186486213082,0.10827469912745401\n120,0.3999999999999928,0.06469119491649024,0.16107569440222647\n121,0.41666666666665936,0.05982206629964605,0.1474982352074414\n122,0.433333333333326,0.05548654321439518,0.14326598821917524\n123,0.44999999999999263,0.05161143975291705,0.13149136546810222\n124,0.4666666666666592,0.04813551180660481,0.1244863052388569\n125,0.4833333333333258,0.04500723964762217,0.11840749611563044\n126,0.4999999999999925,0.042183066953828376,0.060512417201576546\n127,0.5166666666666592,0.03962599439990947,0.05089691387743661\n128,0.5333333333333257,0.03762979151803755,0.08591736551599109\n129,0.5499999999999923,0.0355235772582584,0.06527515557301339\n130,0.5666666666666589,0.033602772665341465,0.10263523116034959\n131,0.5833333333333255,0.03184727712998013,0.050326502266943594\n132,0.5999999999999921,0.0302396665048004,0.12757165389086006\n133,0.6166666666666587,0.028764785209156422,0.09875162663963871\n134,0.6333333333333253,0.02740940871559529,0.04595424837701159\n135,0.6499999999999919,0.026161963071215155,0.06868725856446313\n136,0.6666666666666585,0.025055460720915503,0.033624006514590146\n137,0.6833333333333251,0.02399553502734928,0.10388950642747008\n138,0.6999999999999916,0.02310851127639354,0.030981017827682047\n139,0.7166666666666583,0.022205528543641218,0.07266624688472662\n140,0.733333333333325,0.021575947349213472,0.11181618425781512\n141,0.7499999999999916,0.020807671274259663,0.05541161570195061\n142,0.7666666666666581,0.020262538639031612,0.08950539107569572\n143,0.7833333333333247,0.019608943762035314,0.023378000215751638\n144,0.7999999999999914,0.01900508918247521,0.11575968330990377\n145,0.8166666666666581,0.01844758920101576,0.06288914585924078\n146,0.8333333333333246,0.017933441506014527,0.025958714742173865\n147,0.8499999999999912,0.017459988802825416,0.061836613074917474\n148,0.8666666666666578,0.017116223909357433,0.08669454240171902\n149,0.8833333333333245,0.01700109250482449,0.10765282431740325\n150,0.899999999999991,0.016644697110745524,0.033282136165272536\n151,0.9166666666666576,0.016321490303453878,0.08663344505231867\n152,0.9333333333333241,0.016030153287369217,0.03933086234094735\n153,0.9499999999999907,0.015769582084074696,0.06873146814288243\n154,0.9666666666666575,0.01553887828303456,0.026067525652166298\n155,0.983333333333324,0.015337342770190972,0.10149349763531684\n156,0.9999999999999906,0.015164472389002764,0.04544611853949536\n157,1.0166666666666573,0.015019959565844851,0.09398865195658686\n158,1.033333333333324,0.014903695013669643,0.032942941505132536\n159,1.0499999999999905,0.014815773718070222,0.016909937678527786\n160,1.066666666666657,0.014756504512647603,0.03833415978914015\n161,1.0833333333333235,0.01472642367105966,0.07038943793886053\n162,1.0999999999999903,0.014726313087813518,0.07115226691186685\n163,1.1166666666666567,0.014762833800814612,0.11306827133077327\n164,1.1333333333333235,0.014828824980555134,0.04662696507791899\n165,1.14999999999999,0.014936297382658363,0.026231560872918128\n166,1.1666666666666567,0.015092709661536039,0.03491896913865691\n167,1.1833333333333231,0.015265693132420408,0.11436028146419884\n168,1.19999999999999,0.015480363766871183,0.03892269934030934\n169,1.2166666666666563,0.01574034597789587,0.02915320223436095\n170,1.2333333333333232,0.016049975876225163,0.04636767780072558\n171,1.2499999999999896,0.016445001617509163,0.08707288930534204\n172,1.2666666666666564,0.016871150941466195,0.0852459458774799\n173,1.283333333333323,0.017365810966736703,0.10961009441709282\n174,1.2999999999999896,0.01793794637067392,0.0365951371906682\n175,1.3166666666666562,0.018598387284889623,0.024412837387149493\n176,1.3333333333333228,0.019360276650060192,0.05541705235363853\n177,1.3499999999999894,0.02027741539926165,0.049321115028945414\n178,1.366666666666656,0.02139506330100348,0.08076752865412337\n179,1.3833333333333226,0.02265340564781228,0.06723594652708242\n180,1.3999999999999893,0.024215964657596928,0.06673711988042441\n181,1.4166666666666559,0.02582307680845409,0.12478872326635204\n182,1.4333333333333225,0.02770646393851211,0.060965602790654876\n183,1.449999999999989,0.029925276941982052,0.03770325553334422\n184,1.4666666666666557,0.03255400371914528,0.0698887458754342\n185,1.4833333333333223,0.03568618792266998,0.12352285506264171\n186,1.499999999999989,0.039438183003851726,0.0891652911931678\n187,1.5166666666666555,0.04395161588318507,0.044848923579617665\n188,1.533333333333322,0.049396347905066126,0.07997288513623901\n189,1.5499999999999887,0.05593774572615727,0.14514166034193227\n190,1.566666666666655,0.06372917556163323,0.15860749312341846\n191,1.583333333333322,0.07281235769968086,0.14756888843535604\n192,1.5999999999999883,0.08297912055122572,0.14632662580377548\n193,1.6166666666666551,0.08968666903582638,0.1628523411311102\n194,1.6333333333333215,0.09956504877300416,0.14713538295135836\n195,1.6499999999999884,0.106985658129584,0.20622148484383954\n196,1.6666666666666548,0.1105553529287392,0.1630654132822926\n197,1.6833333333333216,0.10976166283155749,0.17589287777461948\n198,1.699999999999988,0.10550302268599474,0.17521269502277753\n199,1.7166666666666548,0.09954066028792553,0.15028352636441972\n200,1.7333333333333214,0.09359971188053476,0.1843213781833252\n201,1.749999999999988,0.08894698680154246,0.09841014382507488\n202,1.7666666666666546,0.08611776697261757,0.09610253643878759\n203,1.7833333333333212,0.08549802656897262,0.11788290136818833\n204,1.7999999999999878,0.08714704444740207,0.12472961578779661\n205,1.8166666666666544,0.09114323548348285,0.18007095347304625\n206,1.8333333333333208,0.09741566916226682,0.1968062748513115\n207,1.849999999999988,0.10570299682241792,0.16035958814590698\n208,1.8666666666666545,0.11534606210318205,0.172274567609071\n209,1.8833333333333209,0.12489566539676876,0.14044806277828398\n210,1.8999999999999877,0.1324663709406456,0.1562904952289987\n211,1.916666666666654,0.1361582465387924,0.18085568772226798\n212,1.9333333333333207,0.13517303448186327,0.1505590037511287\n213,1.9499999999999873,0.13039310047924793,0.14249147251965252\n214,1.9666666666666537,0.12373011438496852,0.1941605795924947\n215,1.9833333333333203,0.1172246633030924,0.14329761858493295\n216,1.9999999999999871,0.11223132336840552,0.13831206974487778\n217,2.0166666666666537,0.10964438113207683,0.13611277529075594\n218,2.0333333333333203,0.10970848399307127,0.20400949606791344\n219,2.049999999999987,0.11247749074012411,0.14231494223174615\n220,2.066666666666653,0.11768922280751624,0.20175062459858167\n221,2.08333333333332,0.12473707754788672,0.1881887731426838\n222,2.0999999999999868,0.13233632676821225,0.1510163447133285\n223,2.1166666666666534,0.1388812549798811,0.15368696710215354\n224,2.13333333333332,0.1427420541018731,0.20593486954988302\n225,2.1499999999999866,0.14319471281865284,0.2178817592243142\n226,2.1666666666666528,0.14110364763997182,0.19073949371894608\n227,2.18333333333332,0.13826829089995027,0.21316543180419148\n228,2.1999999999999864,0.1363279334870925,0.2002379289667135\n229,2.216666666666653,0.13652200547175272,0.17437301933725857\n230,2.23333333333332,0.13932494130255624,0.18464291881130807\n231,2.2499999999999862,0.14470822166638303,0.184363304689532\n232,2.266666666666653,0.1521105848946017,0.16658405391777775\n233,2.2833333333333194,0.16061207756974027,0.1750426369830076\n234,2.299999999999986,0.16897722924770694,0.19308836593654144\n235,2.3166666666666527,0.1759261828247377,0.17837906563374148\n236,2.3333333333333193,0.18029139969025185,0.20142144462654596\n237,2.3499999999999854,0.18149515421662843,0.20508934969418857\n238,2.3666666666666525,0.1797830536574096,0.20834286269816094\n239,2.383333333333319,0.1762170482718902,0.18837766203667497\n240,2.3999999999999857,0.17226873288254063,0.24183572752354615\n241,2.4166666666666523,0.1691475675474199,0.2522185226050003\n242,2.433333333333319,0.1671686571423933,0.17205734074527076\n243,2.449999999999985,0.16548924618092917,0.20721226255184488\n244,2.466666666666652,0.16242034016088563,0.21279455158297994\n245,2.4833333333333187,0.15633214078963112,0.24736846285340425\n246,2.4999999999999853,0.14661349398571155,0.20852196502274695\n247,2.516666666666652,0.13410546069691992,0.1806391973424074\n248,2.5333333333333186,0.12044536220806938,0.20434972488407763\n249,2.5499999999999847,0.10718928699229796,0.1075183763618777\n250,2.566666666666652,0.09532586355221329,0.1401827543414672\n251,2.5833333333333184,0.08529339317605522,0.11386166424719965\n252,2.599999999999985,0.07709066119281836,0.11724446084028642\n253,2.6166666666666516,0.07063904745880455,0.07117402788645898\n254,2.633333333333318,0.06568665577483854,0.0974309131763187\n255,2.649999999999985,0.062078991816957016,0.14200265323946532\n256,2.6666666666666514,0.059617904082309055,0.09492562447501623\n257,2.683333333333318,0.058164564233077025,0.1421389824321976\n258,2.6999999999999846,0.05756091921572554,0.07605573367039961\n259,2.7166666666666512,0.057635772916898795,0.10382729572114666\n260,2.7333333333333174,0.058225327937197355,0.07481798050713573\n261,2.7499999999999845,0.05915096685973496,0.1264037121723935\n262,2.766666666666651,0.06033003213293948,0.10581307933760058\n263,2.7833333333333177,0.06181828855366552,0.1106167472108448\n264,2.799999999999984,0.06374490759060672,0.15659158429270092\n265,2.816666666666651,0.06628981889926785,0.10674697136895686\n266,2.833333333333317,0.06958414097301331,0.08445310220152942\n267,2.849999999999984,0.07372846515462701,0.07480467594810104\n268,2.8666666666666507,0.07885975952308069,0.09644847248292192\n269,2.8833333333333173,0.0851664178607698,0.1643175269165928\n270,2.899999999999984,0.09277070516830589,0.18361495115480642\n271,2.9166666666666505,0.10151164911253709,0.11690115144577215\n272,2.9333333333333167,0.11073487266572096,0.1711131370404347\n273,2.949999999999984,0.11922007584730741,0.20348762745712848\n274,2.9666666666666504,0.12537987745324689,0.22167682817990864\n275,2.983333333333317,0.1277625583305999,0.16000379093788122\n276,2.9999999999999836,0.1256732739092848,0.14392645244441782\n277,3.01666666666665,0.11955130788860958,0.1883469785660102\n278,3.033333333333317,0.11079566712510833,0.1642068181738013\n279,3.0499999999999834,0.10112180177353332,0.18857514521029167\n280,3.0666666666666496,0.09192926638695936,0.17280868069402422\n281,3.0833333333333166,0.08404615436832302,0.134628467314825\n282,3.099999999999983,0.07780751134483174,0.13386285210569976\n283,3.11666666666665,0.07325039227702294,0.08396487835561066\n284,3.1333333333333164,0.0702860388364263,0.15877267050322696\n285,3.149999999999983,0.06882118316423944,0.0920283209332163\n286,3.1666666666666496,0.06876812106173276,0.10778820921143908\n287,3.183333333333316,0.07010374023997071,0.13466527491494734\n288,3.199999999999983,0.07279255164035678,0.07999524634761879\n289,3.216666666666649,0.07675045397804342,0.16873263562642749\n290,3.233333333333316,0.08174717338281955,0.09754650689452425\n291,3.2499999999999822,0.08735955311363625,0.11661013840164032\n292,3.266666666666649,0.09306179365964579,0.15084497345549153\n293,3.283333333333316,0.09900498124429352,0.14459687384949413\n294,3.2999999999999825,0.10487737930796168,0.20408957183781884\n295,3.3166666666666487,0.11069291597185596,0.16758006884720617\n296,3.333333333333316,0.11639708496367848,0.11708318142150356\n297,3.3499999999999823,0.1217273908908785,0.18798478150218473\n298,3.366666666666649,0.1265996020457453,0.160148183476634\n299,3.3833333333333155,0.13116896447439702,0.13471980746139514\n300,3.399999999999982,0.135966288673545,0.22079258394641407\n301,3.4166666666666488,0.14142025008083,0.2303159665558857\n302,3.433333333333316,0.14751975109442883,0.14908577630358896\n303,3.4499999999999815,0.15352737719387624,0.15682817454394934\n304,3.4666666666666486,0.15816409853225305,0.2123752443590348\n305,3.483333333333315,0.1601857154835972,0.25100925805522\n306,3.499999999999982,0.1589545566775944,0.23146153039900652\n307,3.5166666666666484,0.1544852206038986,0.18805464416779438\n308,3.533333333333315,0.14869755741153032,0.24784553663840392\n309,3.5499999999999816,0.14263605104698895,0.19902371751685077\n310,3.566666666666648,0.13741146743857324,0.1825510191735316\n311,3.583333333333315,0.133595436797124,0.1999701568195698\n312,3.599999999999981,0.1313273368739534,0.16357087271097392\n313,3.616666666666648,0.13056686253320388,0.1791463340532458\n314,3.633333333333314,0.1312641333278097,0.15526631424132473\n315,3.649999999999981,0.1332797358903959,0.22416864012296855\n316,3.666666666666648,0.13628483366420036,0.22393455210254365\n317,3.6833333333333136,0.13952422967709147,0.23017608797405567\n318,3.6999999999999806,0.14204112486636356,0.18809178241849328\n319,3.716666666666648,0.14294294009596903,0.22115679272094563\n320,3.7333333333333134,0.1414293792565008,0.20291350655903914\n321,3.749999999999981,0.13818933933035218,0.19773219069821507\n322,3.766666666666648,0.1331860419733018,0.16300076946436381\n323,3.7833333333333137,0.12665222914930274,0.15126271662184865\n324,3.7999999999999807,0.1187286978126514,0.13961062608773714\n325,3.8166666666666473,0.10961484592424504,0.12235089260036777\n326,3.8333333333333135,0.09984258973974126,0.10554020646174972\n327,3.849999999999981,0.09008223810188593,0.09630778963814783\n328,3.866666666666647,0.08085685620230627,0.14855024097349467\n329,3.8833333333333138,0.07256316222572513,0.12141840174758514\n330,3.89999999999998,0.06510214772133885,0.06602912108625893\n331,3.916666666666647,0.058610921444190896,0.08376982793359086\n332,3.9333333333333136,0.05272378319996645,0.06843031329554922\n333,3.94999999999998,0.04782334744197015,0.09705561814390548\n334,3.9666666666666472,0.04352307002441606,0.14312207204289723\n335,3.9833333333333134,0.04013926610201627,0.05774696382831518\n336,3.99999999999998,0.03746459966304642,0.12531161632300958\n337,4.016666666666646,0.03544048418519373,0.03719059938882738\n338,4.033333333333314,0.033991331387312106,0.06165896300764242\n339,4.049999999999979,0.03302552570019131,0.12500450709332628\n340,4.066666666666647,0.03235083401139447,0.07273157129922342\n341,4.083333333333313,0.03178395118237268,0.07712593001301667\n342,4.09999999999998,0.031763311390900446,0.08850652658374072\n343,4.116666666666646,0.03201973702619608,0.04903651204949093\n344,4.133333333333312,0.03258483891250205,0.06661071159646981\n345,4.149999999999979,0.033434036826116544,0.09203290898258842\n346,4.166666666666647,0.03443820935102124,0.05381618065791931\n347,4.183333333333312,0.03536756518157945,0.06412169642428014\n348,4.19999999999998,0.0359505047177961,0.039351377786521244\n349,4.216666666666645,0.03596231076319577,0.09214743776977893\n350,4.233333333333313,0.035307682507203744,0.05902830650368873\n351,4.249999999999979,0.03406049881290491,0.11097026296574036\n352,4.266666666666646,0.032431453015792665,0.07352334818051853\n353,4.283333333333312,0.030672135044579777,0.07846761570546937\n354,4.299999999999979,0.028966334931621377,0.060235010726177374\n355,4.316666666666645,0.027363343807303785,0.08793754203291271\n356,4.333333333333313,0.025815923983005612,0.07769771511981848\n357,4.349999999999977,0.024223887688296343,0.0733482193458991\n358,4.366666666666646,0.022534439228242227,0.11403931281846502\n359,4.383333333333312,0.02080220500592597,0.026186032187608368\n360,4.399999999999979,0.01906966307887128,0.028696470510765328\n361,4.416666666666645,0.017415702302007743,0.11560451392475005\n362,4.433333333333312,0.015905951446525034,0.08581308791192593\n363,4.449999999999978,0.014547887882829291,0.084196098613148\n364,4.466666666666645,0.013426539109273928,0.044018123254219756\n365,4.483333333333311,0.012476164752763268,0.09386402308953444\n366,4.499999999999979,0.01169175984669532,0.05843994054930919\n367,4.516666666666644,0.0110536908237312,0.05323752793775819\n368,4.533333333333312,0.010544300517995238,0.07633644202070033\n369,4.549999999999978,0.010111764810362156,0.01523921363378955\n370,4.566666666666645,0.00972206784273088,0.047475356691962824\n371,4.583333333333311,0.009455938247878402,0.07105681947336706\n372,4.599999999999977,0.00917693218891364,0.033881874747251406\n373,4.616666666666644,0.009188422430469106,0.09591096712239372\n374,4.633333333333312,0.009302694296132702,0.03847623068718831\n375,4.649999999999976,0.009526867750149264,0.02423022582990563\n376,4.666666666666645,0.00986838204117474,0.10400510950996868\n377,4.6833333333333105,0.010331111121827347,0.07024737294809552\n378,4.699999999999978,0.01090924976026132,0.09163193539944313\n379,4.716666666666644,0.011580885210842348,0.012784458166140263\n380,4.733333333333311,0.012302396425264627,0.05029867848734215\n381,4.749999999999977,0.013040057798095108,0.019932744610301346\n382,4.766666666666644,0.01375875631275779,0.07763335953298252\n383,4.78333333333331,0.014446891702747667,0.1007212709496305\n384,4.799999999999978,0.015096153108483168,0.0586915218872376\n385,4.816666666666643,0.0156940023344889,0.02216950701004027\n386,4.833333333333311,0.016245522651620947,0.0385195289077894\n387,4.8499999999999766,0.01679928445342448,0.06703778909040885\n388,4.866666666666644,0.01737505498767164,0.05054984529095409\n389,4.88333333333331,0.0181204113718608,0.03236973327205601\n390,4.899999999999976,0.019033587276818326,0.03709918094532241\n391,4.916666666666642,0.019970639491295936,0.03906122719821302\n392,4.9333333333333105,0.02074138628625168,0.08385912851781094\n393,4.949999999999976,0.021111052848654666,0.11592162902280766\n394,4.966666666666644,0.021112069193101986,0.11375775911546941\n395,4.9833333333333085,0.020665350292444727,0.02918050940719069\n396,4.999999999999977,0.019932856436185555,0.1032523989896635\n397,5.016666666666643,0.01901540556743102,0.026127275818096277\n398,5.03333333333331,0.018058869882539637,0.11350301538085514\n399,5.049999999999976,0.017125363876573842,0.0906419645653427\n400,5.066666666666643,0.016172326663091947,0.10283789514537561\n401,5.083333333333309,0.015272093379256828,0.042386297551869505\n402,5.0999999999999766,0.014377044247257916,0.10593588197511383\n403,5.116666666666641,0.013569579387075379,0.04237772570149551\n404,5.13333333333331,0.012938043359667311,0.07108850793229546\n405,5.149999999999976,0.012491246058805286,0.10963642327936736\n406,5.166666666666642,0.01227021526391276,0.05252390088650753\n407,5.183333333333309,0.012229573379522967,0.04574070796370117\n408,5.199999999999976,0.012411790448933363,0.09220529615083256\n409,5.216666666666642,0.012631955771594887,0.0816785225494727\n410,5.2333333333333085,0.012861890526208767,0.07188229485121816\n411,5.249999999999975,0.012952664129169731,0.02409502154099854\n412,5.266666666666643,0.012832477224745792,0.08337890489259249\n413,5.283333333333308,0.012455702351086588,0.02080144275609425\n414,5.299999999999976,0.01199385158593986,0.08429739184168439\n415,5.316666666666642,0.011501102142697736,0.10776647432227095\n416,5.333333333333309,0.011128819379458171,0.051264321726549794\n417,5.349999999999975,0.01097831551997038,0.08154179372979696\n418,5.366666666666641,0.010927316390904133,0.08943273396775268\n419,5.383333333333308,0.010806211169280888,0.039265954765806375\n420,5.399999999999976,0.010614974257290192,0.04758947025979246\n421,5.416666666666641,0.010271581326610123,0.026110149094807876\n422,5.433333333333309,0.009834131065227129,0.031241968192985508\n423,5.449999999999974,0.009297598301658177,0.06702955051376791\n424,5.466666666666642,0.008697139372068055,0.04104820967065601\n425,5.483333333333308,0.008024116887538398,0.051299642764440004\n426,5.499999999999975,0.007315731922365474,0.020382663198439007\n427,5.516666666666641,0.006565652453779356,0.09678895757674429\n428,5.533333333333308,0.005844794880350924,0.059759725345220525\n429,5.549999999999974,0.005177767365665529,0.024650537178989816\n430,5.566666666666642,0.004587412844911594,0.04972397406604411\n431,5.583333333333307,0.0040798944721002,0.04099962650614641\n432,5.599999999999975,0.0036506665421485577,0.10364486796293348\n433,5.61666666666664,0.00329037815035334,0.07087849639919612\n434,5.633333333333308,0.0029886090930426146,0.08939116579903277\n435,5.649999999999974,0.002735690107776864,0.023752795280553657\n436,5.666666666666641,0.002523366843905612,0.07271133554887105\n437,5.683333333333306,0.0023300631942332127,0.05737877312847629\n438,5.699999999999974,0.002180374898760963,0.009108552783666846\n439,5.71666666666664,0.002054958204967324,0.07030854971015259\n440,5.733333333333308,0.0019505886000300875,0.02742925544908511\n441,5.7499999999999725,0.0018648527274811324,0.08657362296315117\n442,5.766666666666641,0.0017960239663209377,0.09429140025272574\n443,5.783333333333307,0.001720481626512626,0.05803455152053702\n444,5.799999999999974,0.0016830996415389443,0.0362323260556584\n445,5.81666666666664,0.0016262300718450644,0.02642125372844058\n446,5.833333333333307,0.001611919732637923,0.08347999814639187\n447,5.849999999999973,0.0016048014922694148,0.06401208946896393\n448,5.86666666666664,0.0016347432507004985,0.0638634796791788\n449,5.883333333333305,0.0016857628276620254,0.028740443554091905\n450,5.899999999999974,0.001761334740481444,0.028556548170348257\n451,5.91666666666664,0.001865932288006437,0.0368212595215135\n452,5.933333333333306,0.001989512518215736,0.011432613570233936\n453,5.949999999999973,0.0021607489243893377,0.02252610142287861\n454,5.96666666666664,0.002386736856454915,0.06384511167211483\n455,5.983333333333306,0.0026530571609377643,0.0699097058166323\n456,5.9999999999999725,0.002969667659174261,0.04508418178508705\n457,6.016666666666639,0.0033068140847257966,0.013770139061926978\n458,6.033333333333307,0.003620015633850385,0.07954653208314325\n459,6.049999999999972,0.0038444166455045207,0.020214807395928736\n460,6.06666666666664,0.003916571185462839,0.03398607889134341\n461,6.0833333333333055,0.0038092320327282624,0.07152472457079527\n462,6.099999999999973,0.0035494402458889464,0.08788744108101931\n463,6.11666666666664,0.00320043214610638,0.004978651141980639\n464,6.133333333333305,0.0028268467668079366,0.07248147824052714\n465,6.149999999999972,0.002472937473226955,0.025983969958468845\n466,6.16666666666664,0.002160175622001572,0.08452943691844837\n467,6.183333333333305,0.001894251048772865,0.04933810055449538\n468,6.199999999999973,0.001672608969388938,0.041572913540058154\n469,6.216666666666638,0.0014894646029960984,0.06331665872830984\n470,6.233333333333306,0.0013384345380275796,0.06963299084369011\n471,6.249999999999972,0.0012136748094292323,0.08889908591433758\n472,6.266666666666639,0.0011102474053009976,0.03232907775171962\n473,6.283333333333305,0.0010241407634558619,0.059539744691306816\n474,6.299999999999972,0.0009521598820936355,0.05993299903153821\n475,6.316666666666638,0.0008917842772384375,0.02182859852791141\n476,6.3333333333333055,0.0008410336313034932,0.0748450273972514\n477,6.349999999999971,0.0007882098897912334,0.06686474187219103\n478,6.36666666666664,0.0007525906554877921,0.036263341804205894\n479,6.383333333333304,0.0007228641949372934,0.04608648852016809\n480,6.399999999999972,0.0006982868399087982,0.06920000913455861\n481,6.416666666666638,0.0006671157541095356,0.017672684434735905\n482,6.433333333333305,0.000645005379493612,0.011133562115067497\n483,6.449999999999973,0.0006333058086720105,0.09428115599799881\n484,6.466666666666638,0.000625184442884534,0.030471966952502656\n485,6.483333333333304,0.0006205035025779992,0.05841094966074938\n486,6.499999999999972,0.0006192046745116873,0.09311383370730295\n487,6.516666666666639,0.0006213057378856704,0.04252882297527014\n488,6.533333333333305,0.0006039945868221229,0.03734071613869019\n489,6.5499999999999705,0.0006137252238044462,0.08300628603097364\n490,6.566666666666638,0.0006047776936573755,0.008004442575358517\n491,6.5833333333333055,0.0006231581830360969,0.07248163505213108\n492,6.599999999999971,0.0006337680871982241,0.07125755115374183\n493,6.616666666666637,0.0006624848892488697,0.0880849632020957\n494,6.633333333333304,0.0006973192371910539,0.009615494133953663\n495,6.649999999999972,0.0007392569480711444,0.06186006279233216\n496,6.666666666666638,0.0007895426603224253,0.01910356536312838\n497,6.683333333333303,0.0008330084196076873,0.029427767131208597\n498,6.69999999999997,0.0009054639619342336,0.022238123333011287\n499,6.716666666666638,0.0009923357464075885,0.044836789186418806\n500,6.733333333333304,0.0010968178118700965,0.024202650240627285\n501,6.74999999999997,0.0012229540649686605,0.05136859630153404\n502,6.766666666666636,0.0013758345184867965,0.04127156374099452\n503,6.783333333333305,0.0015617780277680387,0.02174097522562799\n504,6.7999999999999705,0.0017884101805828436,0.013803589262814598\n505,6.816666666666636,0.002064429183181777,0.04683060174888396\n506,6.833333333333304,0.002387968244156822,0.07867549497431205\n507,6.849999999999971,0.002787075005635288,0.09915796322478466\n508,6.866666666666637,0.0032330643719318663,0.0773416168548849\n509,6.8833333333333035,0.0037448433409505576,0.006039375681516537\n510,6.899999999999969,0.004266115855053602,0.046097461457942274\n511,6.916666666666638,0.004733392359982105,0.07806769389441762\n512,6.933333333333303,0.0050731049261991245,0.027670987768509604\n513,6.949999999999969,0.005228483226228465,0.07482363580224312\n514,6.966666666666637,0.005177871012632568,0.08123899111254584\n515,6.983333333333304,0.004933801139556769,0.08763959802273057\n516,6.99999999999997,0.004516681615965384,0.02142238280732058\n517,7.016666666666636,0.004025914623300037,0.08773817440529472\n518,7.033333333333303,0.0035069432009657746,0.05283304691948566\n519,7.0499999999999705,0.003011562010941419,0.0464327252824427\n520,7.066666666666636,0.0025693287122871486,0.021087520756170056\n521,7.083333333333302,0.002180151797621449,0.005518639162491096\n522,7.0999999999999694,0.0018631067214146704,0.03511065385599154\n523,7.116666666666637,0.0016005279884154326,0.06263558203247062\n524,7.1333333333333035,0.001383752803081267,0.024837384168368077\n525,7.149999999999968,0.0012045262550681973,0.09911590878992671\n526,7.166666666666636,0.0010557189196281143,0.019012342292723305\n527,7.183333333333303,0.0009314598629566572,0.027824538713341913\n528,7.199999999999969,0.0008270276372756256,0.041870985321227086\n529,7.216666666666634,0.0007386662934833399,0.06728799294346474\n530,7.233333333333302,0.000663398632862216,0.07616328639071791\n531,7.249999999999972,0.0005988630824781945,0.09224236782975401\n532,7.2666666666666355,0.0005431803012114177,0.045985709437151356\n533,7.283333333333301,0.0004948475983603272,0.03880545173268148\n534,7.299999999999968,0.00045265671581789455,0.039522778444956025\n535,7.316666666666637,0.00041563027155241765,0.036557418349147525\n536,7.333333333333303,0.0003829727316072356,0.008801725918456283\n537,7.349999999999967,0.0003540325485166859,0.08684465089327713\n538,7.366666666666635,0.0003282728337111797,0.030877967719610395\n539,7.383333333333303,0.00030524854341540544,0.00456254467743439\n540,7.399999999999968,0.0002845886426487827,0.08782395531127031\n541,7.416666666666633,0.0002659820854651423,0.007910879386425715\n542,7.433333333333301,0.00024916673278896844,0.07940114797356139\n543,7.44999999999997,0.00023392054231395035,0.010778728770944471\n544,7.466666666666634,0.0002200545248037094,0.09634394533190835\n545,7.4833333333333,0.00020740708106580888,0.005982378568712616\n546,7.499999999999968,0.00019583942400428853,0.0056958633095433074\n547,7.5166666666666355,0.00018523185810550465,0.031061579059935174\n548,7.533333333333301,0.0001754807401376867,0.08292270487080648\n549,7.549999999999968,0.00016649598393723487,0.060577443984111794\n550,7.566666666666634,0.00015819900201364986,0.05726689159531049\n551,7.583333333333303,0.00015052099962416344,0.09626332562644373\n552,7.599999999999967,0.00014340155465021373,0.08111515346418312\n553,7.616666666666633,0.000136787430317109,0.04569290750956551\n554,7.633333333333299,0.0001306315784814117,0.09106755646970781\n555,7.649999999999968,0.00012489229957700896,0.019803021333298393\n556,7.666666666666633,0.00010650950352080627,0.06579719703911381\n557,7.683333333333299,0.00010176233346638824,0.08038186630171122\n558,7.699999999999966,9.732407586281645e-05,0.09090506624221892\n559,7.716666666666634,9.316862596969085e-05,0.04897089723751216\n560,7.7333333333333,8.927256629278886e-05,0.022935319963214386\n561,7.749999999999966,8.56148429229433e-05,0.04636224144789152\n562,7.766666666666634,8.217648623838878e-05,0.007280443731825942\n563,7.783333333333301,7.894036918914812e-05,0.008495599258638261\n564,7.799999999999968,7.589099752037563e-05,0.05644568432413881\n565,7.816666666666632,7.301432722262195e-05,0.04120697849113344\n566,7.833333333333299,7.029760526128519e-05,0.030512176351782654\n567,7.849999999999967,6.772923026716017e-05,0.0778464398803931\n568,7.866666666666633,6.529863039051561e-05,0.0015680766565689575\n569,7.883333333333299,6.299615595285945e-05,0.05332633581903208\n570,7.899999999999967,6.0812984889811416e-05,0.08482273453171654\n571,7.916666666666633,5.874103927838362e-05,0.0032446273762019107\n572,7.933333333333299,5.677291149306076e-05,0.062116292943274226\n573,7.949999999999965,5.490179874591324e-05,0.08442040506820496\n574,7.966666666666634,5.312144494355774e-05,0.07516689349499696\n575,7.9833333333333,5.1426088943718254e-05,0.027338756537680576\n576,7.999999999999966,4.98104184211338e-05,0.016426973781625862\n577,8.016666666666632,4.826952866034603e-05,0.05563780062926791\n578,8.0333333333333,4.6798885684662046e-05,0.013486897435698596\n579,8.049999999999969,4.53942932088713e-05,0.0069111592467258325\n580,8.066666666666633,4.4051862970251115e-05,0.04549838779349733\n581,8.083333333333298,4.2767988049800565e-05,0.012534499314918205\n582,8.099999999999964,4.1539318844953935e-05,0.06481783181791115\n583,8.116666666666633,4.036274139750162e-05,0.03999314798336396\n584,8.133333333333299,3.9235357817086094e-05,0.06561250403964072\n585,8.149999999999965,3.815446857233749e-05,0.09278489572488863\n586,8.166666666666632,3.711755644916656e-05,0.07149030091853995\n587,8.1833333333333,3.61222719995814e-05,0.0999902449823203\n588,8.199999999999966,3.516642032512129e-05,0.07827493663038784\n589,8.216666666666631,3.424794905708405e-05,0.020378032608375004\n590,8.233333333333297,3.3364937411496084e-05,0.011812664901281102\n591,8.249999999999966,3.2515586210577025e-05,0.07046309982581693\n592,8.266666666666632,3.169820877454257e-05,0.09157882479314909\n593,8.283333333333298,3.091122259820148e-05,0.04193416658757385\n594,8.299999999999965,3.0153141736128785e-05,0.009790890411524585\n595,8.316666666666633,2.9422569828415296e-05,0.0003137504328578474\n596,8.333333333333298,2.871819370623216e-05,0.07076679873929936\n597,8.349999999999964,2.8038777522851057e-05,0.0456701092227214\n598,8.36666666666663,2.7383157361414957e-05,0.010454728339419204\n599,8.383333333333299,2.6750236275772788e-05,0.0011284051960105607\n600,8.399999999999965,2.6138979725131995e-05,0.0866336965739858\n601,8.41666666666663,2.554841136723832e-05,0.07646460030576208\n602,8.433333333333298,2.4977609178303214e-05,0.04744358893910104\n603,8.449999999999966,2.442570187103044e-05,0.0831461690088301\n604,8.466666666666631,2.3891865584884343e-05,0.07086347134430489\n605,8.483333333333297,2.3375320825236138e-05,0.07801307162535605\n606,8.499999999999964,2.287532963025233e-05,0.09658577087462375\n607,8.516666666666632,2.2391192946387017e-05,0.08257142023998251\n608,8.533333333333298,9.977292417469016e-06,0.08746372845026505\n609,8.549999999999963,9.766995564215325e-06,0.09089118609650658\n610,8.566666666666633,9.563269467577353e-06,0.023187631388885382\n</code></pre> <p>For this reason, the input file has to be modified so that the pandas csv reader can understand the data structure right and transform it into a dataframe. In contrast to the previous example Multi Peak Fitting, the following changes between previous</p> JSON<pre><code>{\n  \"settings\": {\n    \"column\": [0, 1],\n    \"decimal\": \".\",\n    \"energy_start\": -1,\n    \"energy_stop\": 2.4,\n    \"header\": null,\n    \"infile\": \"data.txt\",\n    \"outfile\": \"example_2\",\n    \"oversampling\": false,\n    \"separator\": \"\\t\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"verbose\": 1\n  },\n</code></pre> <p>and actually</p> JSON<pre><code>{\n  \"settings\": {\n    \"column\": [\"Energy\", \"Noisy\"],\n    \"decimal\": \".\",\n    \"energy_start\": 0,\n    \"energy_stop\": 8,\n    \"header\": 0,\n    \"infile\": \"data.csv\",\n    \"outfile\": \"example_4_results\",\n    \"oversampling\": true,\n    \"separator\": \",\",\n    \"shift\": 0.2,\n    \"smooth\": 4,\n    \"verbose\": 2,\n\n    \"noplot\": true\n  },\n</code></pre> <p>have to be performed.</p> <ol> <li>Column: <code>int</code> (index of the column) \u2192 <code>str</code> (name of the column)</li> <li>header: <code>null</code> (no header at all) \u2192 <code>0</code> (header start at row-number 0)</li> <li>separator: <code>\\t</code> (columns are separated by tab character) \u2192 <code>,</code> (columns    are separated by comma character)</li> </ol> Bash<pre><code>spectrafit _ -i example_3.json\n</code></pre> <p></p> <p>Elastic-line of a pseudo 2p3d-RIXS spectra.</p>"},{"location":"examples/example5/","title":"Working with Expressions","text":"<p>In this particular example, the concept of expression is introduced. The expression modul of <code>lmfit</code> allows to evalute expressions in the form of strings. This allows to link properties of peaks together. Furthermore, mathematical operations can be performed on the result of the expression.</p> data.csv Scdoc<pre><code>_index,Energy,Intensity,Noisy\n0,-1.6,0.0,0.04008584898760459\n1,-1.5833333333333335,0.003891050583657596,0.04750414409524225\n2,-1.5666666666666669,0.003973071404922201,0.03510399915254631\n3,-1.5500000000000003,0.00405770964833183,0.05632172083076319\n4,-1.5333333333333337,0.0041450777202072485,0.01232860798641571\n5,-1.516666666666667,0.004235294117647068,0.05302472496914309\n6,-1.5000000000000004,0.0043284838283034685,0.07525857347111906\n7,-1.4833333333333338,0.004424778761061949,0.026283276349644155\n8,-1.4666666666666672,0.004524318210380788,0.011585214896062204\n9,-1.4500000000000006,0.0046272493573264635,0.0915722853744314\n10,-1.433333333333334,0.004733727810650881,0.04465407821401557\n11,-1.4166666666666674,0.004843918191603862,0.06827239306435148\n12,-1.4000000000000008,0.004957994766561084,0.05586439899783531\n13,-1.383333333333334,0.005076142131979685,0.0519569913045801\n14,-1.3666666666666676,0.005198555956678712,0.04529476745152189\n15,-1.3500000000000008,0.0053254437869822225,0.046140549452885406\n16,-1.3333333333333344,0.005457025920873108,0.023525144931402578\n17,-1.3166666666666675,0.005593536357986327,0.09585723752299317\n18,-1.3000000000000012,0.0057352238330412595,0.07127922424213151\n19,-1.2833333333333343,0.005882352941176454,0.10508559185076881\n20,-1.266666666666668,0.006035205364626978,0.08420060928031715\n21,-1.250000000000001,0.006194081211286973,0.017085686334549988\n22,-1.2333333333333347,0.006359300476947529,0.03344672102794343\n23,-1.216666666666668,0.00653120464441218,0.00830761072647146\n24,-1.2000000000000015,0.006710158434296354,0.0691372440712335\n25,-1.183333333333335,0.006896551724137925,0.08700263994353065\n26,-1.1666666666666683,0.007090801654520351,0.08565019188726043\n27,-1.1500000000000017,0.0072933549432738845,0.018466410525855743\n28,-1.133333333333335,0.007504690431519682,0.10126968931392635\n29,-1.1166666666666685,0.0077253218884119875,0.09002669232719052\n30,-1.1000000000000019,0.007955801104972366,0.06492669387530689\n31,-1.0833333333333353,0.008196721311475363,0.012283949013776264\n32,-1.0666666666666687,0.008448720957521673,0.051160376096648155\n33,-1.050000000000002,0.008712487899322318,0.10076720629983352\n34,-1.0333333333333354,0.00898876404494378,0.06455063829584042\n35,-1.0166666666666688,0.009278350515463833,0.085381815664481\n36,-1.0000000000000022,0.009582113388341695,0.10165223781514847\n37,-0.9833333333333357,0.009900990099009844,0.025570057103461108\n38,-0.966666666666669,0.010235996588001109,0.02228295793177043\n39,-0.9500000000000025,0.010588235294117582,0.017739377314671997\n40,-0.9333333333333358,0.010958904109588984,0.04422978316861217\n41,-0.9166666666666691,0.011349306431273604,0.019761263525689472\n42,-0.9000000000000026,0.011760862463247207,0.04629885183574297\n43,-0.8833333333333359,0.012195121951219443,0.053064400715557736\n44,-0.8666666666666692,0.012653778558875128,0.08947490450789104\n45,-0.8500000000000028,0.013138686131386808,0.06483319245975283\n46,-0.8333333333333361,0.013651877133105715,0.04409090800604787\n47,-0.8166666666666694,0.014195583596214404,0.09857042115474708\n48,-0.8000000000000029,0.014772260976610463,0.022608811796422504\n49,-0.7833333333333363,0.015384615384615235,0.10076241702814402\n50,-0.7666666666666697,0.01603563474387513,0.028729376733513383\n51,-0.750000000000003,0.016728624535315855,0.0870234230693911\n52,-0.7333333333333365,0.01746724890829681,0.0676497631364179\n53,-0.7166666666666699,0.018255578093306146,0.028544877331387865\n54,-0.7000000000000033,0.01909814323607401,0.10175610090705829\n55,-0.6833333333333367,0.019999999999999855,0.027299661470373895\n56,-0.6666666666666701,0.02096680256260904,0.1131043218039902\n57,-0.6500000000000035,0.02200488997554988,0.05118797301708643\n58,-0.6333333333333369,0.02312138728323678,0.03441361033656606\n59,-0.6166666666666702,0.02432432432432412,0.05285021270123045\n60,-0.6000000000000036,0.02562277580071142,0.10660843091638031\n61,-0.5833333333333369,0.02702702702702668,0.11737509073867693\n62,-0.5666666666666704,0.028548770816811748,0.12134799195481201\n63,-0.5500000000000038,0.030201342281878873,0.04041597381074299\n64,-0.5333333333333372,0.03199999999999956,0.12293189388817057\n65,-0.5166666666666706,0.03396226415094291,0.05556963189399414\n66,-0.500000000000004,0.03610832497492419,0.08828987053748896\n67,-0.48333333333333733,0.0384615384615379,0.13299541447675434\n68,-0.4666666666666708,0.04104903078677245,0.1368883871498967\n69,-0.4500000000000042,0.04390243902438932,0.12557018387213875\n70,-0.4333333333333376,0.04705882352941089,0.10858972370468452\n71,-0.41666666666667096,0.05056179775280797,0.14038099626448797\n72,-0.4000000000000044,0.054462934947048874,0.14696995552122566\n73,-0.38333333333333774,0.058823529411763525,0.11827481099647273\n74,-0.36666666666667114,0.0637168141592905,0.12310013634836614\n75,-0.3500000000000045,0.06923076923076783,0.12389921713852828\n76,-0.3333333333333379,0.07547169811320567,0.12541817310963077\n77,-0.31666666666667126,0.08256880733944734,0.08913053803943821\n78,-0.3000000000000047,0.09068010075566536,0.158725588571065\n79,-0.2833333333333381,0.09999999999999735,0.12271184899825521\n80,-0.2666666666666715,0.11076923076922764,0.11988078158746927\n81,-0.2500000000000049,0.12328767123287268,0.19089360574178527\n82,-0.23333333333333828,0.137931034482754,0.19399955030212906\n83,-0.21666666666667167,0.15517241379309754,0.18670514823813245\n84,-0.20000000000000503,0.1756097560975534,0.20809899253733338\n85,-0.18333333333333843,0.19999999999999216,0.23171652798758308\n86,-0.16666666666667185,0.22929936305731488,0.2484093442785573\n87,-0.15000000000000524,0.2647058823529294,0.3310743928003237\n88,-0.13333333333333863,0.3076923076922934,0.36684994465354487\n89,-0.11666666666667203,0.35999999999998283,0.3891363703418967\n90,-0.1000000000000054,0.42352941176468273,0.46941956893213543\n91,-0.08333333333333881,0.49999999999997286,0.5580343781043237\n92,-0.0666666666666722,0.590163934426198,0.5954783032481118\n93,-0.0500000000000056,0.6923076923076551,0.741052184253777\n94,-0.03333333333333899,0.7999999999999646,0.838197602601856\n95,-0.01666666666667238,0.8999999999999696,0.9513897921608991\n96,-5.773159728050815e-15,0.972972972972956,0.9991456688422116\n97,0.016666666666660834,1.0,1.0900891532152457\n98,0.03333333333332744,0.9729729729729932,0.9973225325465217\n99,0.04999999999999405,0.9000684869288876,0.906261276926932\n100,0.06666666666666066,0.8003319898391893,0.8241812742665023\n101,0.08333333333332726,0.6926622009062817,0.7832498289548987\n102,0.09999999999999389,0.5905260079579859,0.6185705157749193\n103,0.11666666666666048,0.5003698828803956,0.5147752382697125\n104,0.1333333333333271,0.423907359037742,0.4950946246505369\n105,0.14999999999999367,0.36038627792143624,0.42632631143218236\n106,0.1666666666666603,0.3080871943516519,0.3960140991859387\n107,0.18333333333332688,0.26510966833725974,0.29118083146951984\n108,0.19999999999999352,0.229712352160166,0.2944689348278017\n109,0.21666666666666007,0.200422509979045,0.2741346452275327\n110,0.23333333333332676,0.17604211948496107,0.23555118065288444\n111,0.2499999999999933,0.15561497876280292,0.19611365068308828\n112,0.26666666666665995,0.1383841657795379,0.22837404698823588\n113,0.2833333333333265,0.12375175116828944,0.13640801157284446\n114,0.2999999999999932,0.11124466029010888,0.16703332815641658\n115,0.31666666666665977,0.1008615472585792,0.11178903951413714\n116,0.3333333333333264,0.09156616328472589,0.1112347183283852\n117,0.349999999999993,0.08347578183738227,0.13157636117103375\n118,0.3666666666666596,0.07640033803343374,0.09334455581051235\n119,0.38333333333332614,0.07018186486213082,0.10827469912745401\n120,0.3999999999999928,0.06469119491649024,0.16107569440222647\n121,0.41666666666665936,0.05982206629964605,0.1474982352074414\n122,0.433333333333326,0.05548654321439518,0.14326598821917524\n123,0.44999999999999263,0.05161143975291705,0.13149136546810222\n124,0.4666666666666592,0.04813551180660481,0.1244863052388569\n125,0.4833333333333258,0.04500723964762217,0.11840749611563044\n126,0.4999999999999925,0.042183066953828376,0.060512417201576546\n127,0.5166666666666592,0.03962599439990947,0.05089691387743661\n128,0.5333333333333257,0.03762979151803755,0.08591736551599109\n129,0.5499999999999923,0.0355235772582584,0.06527515557301339\n130,0.5666666666666589,0.033602772665341465,0.10263523116034959\n131,0.5833333333333255,0.03184727712998013,0.050326502266943594\n132,0.5999999999999921,0.0302396665048004,0.12757165389086006\n133,0.6166666666666587,0.028764785209156422,0.09875162663963871\n134,0.6333333333333253,0.02740940871559529,0.04595424837701159\n135,0.6499999999999919,0.026161963071215155,0.06868725856446313\n136,0.6666666666666585,0.025055460720915503,0.033624006514590146\n137,0.6833333333333251,0.02399553502734928,0.10388950642747008\n138,0.6999999999999916,0.02310851127639354,0.030981017827682047\n139,0.7166666666666583,0.022205528543641218,0.07266624688472662\n140,0.733333333333325,0.021575947349213472,0.11181618425781512\n141,0.7499999999999916,0.020807671274259663,0.05541161570195061\n142,0.7666666666666581,0.020262538639031612,0.08950539107569572\n143,0.7833333333333247,0.019608943762035314,0.023378000215751638\n144,0.7999999999999914,0.01900508918247521,0.11575968330990377\n145,0.8166666666666581,0.01844758920101576,0.06288914585924078\n146,0.8333333333333246,0.017933441506014527,0.025958714742173865\n147,0.8499999999999912,0.017459988802825416,0.061836613074917474\n148,0.8666666666666578,0.017116223909357433,0.08669454240171902\n149,0.8833333333333245,0.01700109250482449,0.10765282431740325\n150,0.899999999999991,0.016644697110745524,0.033282136165272536\n151,0.9166666666666576,0.016321490303453878,0.08663344505231867\n152,0.9333333333333241,0.016030153287369217,0.03933086234094735\n153,0.9499999999999907,0.015769582084074696,0.06873146814288243\n154,0.9666666666666575,0.01553887828303456,0.026067525652166298\n155,0.983333333333324,0.015337342770190972,0.10149349763531684\n156,0.9999999999999906,0.015164472389002764,0.04544611853949536\n157,1.0166666666666573,0.015019959565844851,0.09398865195658686\n158,1.033333333333324,0.014903695013669643,0.032942941505132536\n159,1.0499999999999905,0.014815773718070222,0.016909937678527786\n160,1.066666666666657,0.014756504512647603,0.03833415978914015\n161,1.0833333333333235,0.01472642367105966,0.07038943793886053\n162,1.0999999999999903,0.014726313087813518,0.07115226691186685\n163,1.1166666666666567,0.014762833800814612,0.11306827133077327\n164,1.1333333333333235,0.014828824980555134,0.04662696507791899\n165,1.14999999999999,0.014936297382658363,0.026231560872918128\n166,1.1666666666666567,0.015092709661536039,0.03491896913865691\n167,1.1833333333333231,0.015265693132420408,0.11436028146419884\n168,1.19999999999999,0.015480363766871183,0.03892269934030934\n169,1.2166666666666563,0.01574034597789587,0.02915320223436095\n170,1.2333333333333232,0.016049975876225163,0.04636767780072558\n171,1.2499999999999896,0.016445001617509163,0.08707288930534204\n172,1.2666666666666564,0.016871150941466195,0.0852459458774799\n173,1.283333333333323,0.017365810966736703,0.10961009441709282\n174,1.2999999999999896,0.01793794637067392,0.0365951371906682\n175,1.3166666666666562,0.018598387284889623,0.024412837387149493\n176,1.3333333333333228,0.019360276650060192,0.05541705235363853\n177,1.3499999999999894,0.02027741539926165,0.049321115028945414\n178,1.366666666666656,0.02139506330100348,0.08076752865412337\n179,1.3833333333333226,0.02265340564781228,0.06723594652708242\n180,1.3999999999999893,0.024215964657596928,0.06673711988042441\n181,1.4166666666666559,0.02582307680845409,0.12478872326635204\n182,1.4333333333333225,0.02770646393851211,0.060965602790654876\n183,1.449999999999989,0.029925276941982052,0.03770325553334422\n184,1.4666666666666557,0.03255400371914528,0.0698887458754342\n185,1.4833333333333223,0.03568618792266998,0.12352285506264171\n186,1.499999999999989,0.039438183003851726,0.0891652911931678\n187,1.5166666666666555,0.04395161588318507,0.044848923579617665\n188,1.533333333333322,0.049396347905066126,0.07997288513623901\n189,1.5499999999999887,0.05593774572615727,0.14514166034193227\n190,1.566666666666655,0.06372917556163323,0.15860749312341846\n191,1.583333333333322,0.07281235769968086,0.14756888843535604\n192,1.5999999999999883,0.08297912055122572,0.14632662580377548\n193,1.6166666666666551,0.08968666903582638,0.1628523411311102\n194,1.6333333333333215,0.09956504877300416,0.14713538295135836\n195,1.6499999999999884,0.106985658129584,0.20622148484383954\n196,1.6666666666666548,0.1105553529287392,0.1630654132822926\n197,1.6833333333333216,0.10976166283155749,0.17589287777461948\n198,1.699999999999988,0.10550302268599474,0.17521269502277753\n199,1.7166666666666548,0.09954066028792553,0.15028352636441972\n200,1.7333333333333214,0.09359971188053476,0.1843213781833252\n201,1.749999999999988,0.08894698680154246,0.09841014382507488\n202,1.7666666666666546,0.08611776697261757,0.09610253643878759\n203,1.7833333333333212,0.08549802656897262,0.11788290136818833\n204,1.7999999999999878,0.08714704444740207,0.12472961578779661\n205,1.8166666666666544,0.09114323548348285,0.18007095347304625\n206,1.8333333333333208,0.09741566916226682,0.1968062748513115\n207,1.849999999999988,0.10570299682241792,0.16035958814590698\n208,1.8666666666666545,0.11534606210318205,0.172274567609071\n209,1.8833333333333209,0.12489566539676876,0.14044806277828398\n210,1.8999999999999877,0.1324663709406456,0.1562904952289987\n211,1.916666666666654,0.1361582465387924,0.18085568772226798\n212,1.9333333333333207,0.13517303448186327,0.1505590037511287\n213,1.9499999999999873,0.13039310047924793,0.14249147251965252\n214,1.9666666666666537,0.12373011438496852,0.1941605795924947\n215,1.9833333333333203,0.1172246633030924,0.14329761858493295\n216,1.9999999999999871,0.11223132336840552,0.13831206974487778\n217,2.0166666666666537,0.10964438113207683,0.13611277529075594\n218,2.0333333333333203,0.10970848399307127,0.20400949606791344\n219,2.049999999999987,0.11247749074012411,0.14231494223174615\n220,2.066666666666653,0.11768922280751624,0.20175062459858167\n221,2.08333333333332,0.12473707754788672,0.1881887731426838\n222,2.0999999999999868,0.13233632676821225,0.1510163447133285\n223,2.1166666666666534,0.1388812549798811,0.15368696710215354\n224,2.13333333333332,0.1427420541018731,0.20593486954988302\n225,2.1499999999999866,0.14319471281865284,0.2178817592243142\n226,2.1666666666666528,0.14110364763997182,0.19073949371894608\n227,2.18333333333332,0.13826829089995027,0.21316543180419148\n228,2.1999999999999864,0.1363279334870925,0.2002379289667135\n229,2.216666666666653,0.13652200547175272,0.17437301933725857\n230,2.23333333333332,0.13932494130255624,0.18464291881130807\n231,2.2499999999999862,0.14470822166638303,0.184363304689532\n232,2.266666666666653,0.1521105848946017,0.16658405391777775\n233,2.2833333333333194,0.16061207756974027,0.1750426369830076\n234,2.299999999999986,0.16897722924770694,0.19308836593654144\n235,2.3166666666666527,0.1759261828247377,0.17837906563374148\n236,2.3333333333333193,0.18029139969025185,0.20142144462654596\n237,2.3499999999999854,0.18149515421662843,0.20508934969418857\n238,2.3666666666666525,0.1797830536574096,0.20834286269816094\n239,2.383333333333319,0.1762170482718902,0.18837766203667497\n240,2.3999999999999857,0.17226873288254063,0.24183572752354615\n241,2.4166666666666523,0.1691475675474199,0.2522185226050003\n242,2.433333333333319,0.1671686571423933,0.17205734074527076\n243,2.449999999999985,0.16548924618092917,0.20721226255184488\n244,2.466666666666652,0.16242034016088563,0.21279455158297994\n245,2.4833333333333187,0.15633214078963112,0.24736846285340425\n246,2.4999999999999853,0.14661349398571155,0.20852196502274695\n247,2.516666666666652,0.13410546069691992,0.1806391973424074\n248,2.5333333333333186,0.12044536220806938,0.20434972488407763\n249,2.5499999999999847,0.10718928699229796,0.1075183763618777\n250,2.566666666666652,0.09532586355221329,0.1401827543414672\n251,2.5833333333333184,0.08529339317605522,0.11386166424719965\n252,2.599999999999985,0.07709066119281836,0.11724446084028642\n253,2.6166666666666516,0.07063904745880455,0.07117402788645898\n254,2.633333333333318,0.06568665577483854,0.0974309131763187\n255,2.649999999999985,0.062078991816957016,0.14200265323946532\n256,2.6666666666666514,0.059617904082309055,0.09492562447501623\n257,2.683333333333318,0.058164564233077025,0.1421389824321976\n258,2.6999999999999846,0.05756091921572554,0.07605573367039961\n259,2.7166666666666512,0.057635772916898795,0.10382729572114666\n260,2.7333333333333174,0.058225327937197355,0.07481798050713573\n261,2.7499999999999845,0.05915096685973496,0.1264037121723935\n262,2.766666666666651,0.06033003213293948,0.10581307933760058\n263,2.7833333333333177,0.06181828855366552,0.1106167472108448\n264,2.799999999999984,0.06374490759060672,0.15659158429270092\n265,2.816666666666651,0.06628981889926785,0.10674697136895686\n266,2.833333333333317,0.06958414097301331,0.08445310220152942\n267,2.849999999999984,0.07372846515462701,0.07480467594810104\n268,2.8666666666666507,0.07885975952308069,0.09644847248292192\n269,2.8833333333333173,0.0851664178607698,0.1643175269165928\n270,2.899999999999984,0.09277070516830589,0.18361495115480642\n271,2.9166666666666505,0.10151164911253709,0.11690115144577215\n272,2.9333333333333167,0.11073487266572096,0.1711131370404347\n273,2.949999999999984,0.11922007584730741,0.20348762745712848\n274,2.9666666666666504,0.12537987745324689,0.22167682817990864\n275,2.983333333333317,0.1277625583305999,0.16000379093788122\n276,2.9999999999999836,0.1256732739092848,0.14392645244441782\n277,3.01666666666665,0.11955130788860958,0.1883469785660102\n278,3.033333333333317,0.11079566712510833,0.1642068181738013\n279,3.0499999999999834,0.10112180177353332,0.18857514521029167\n280,3.0666666666666496,0.09192926638695936,0.17280868069402422\n281,3.0833333333333166,0.08404615436832302,0.134628467314825\n282,3.099999999999983,0.07780751134483174,0.13386285210569976\n283,3.11666666666665,0.07325039227702294,0.08396487835561066\n284,3.1333333333333164,0.0702860388364263,0.15877267050322696\n285,3.149999999999983,0.06882118316423944,0.0920283209332163\n286,3.1666666666666496,0.06876812106173276,0.10778820921143908\n287,3.183333333333316,0.07010374023997071,0.13466527491494734\n288,3.199999999999983,0.07279255164035678,0.07999524634761879\n289,3.216666666666649,0.07675045397804342,0.16873263562642749\n290,3.233333333333316,0.08174717338281955,0.09754650689452425\n291,3.2499999999999822,0.08735955311363625,0.11661013840164032\n292,3.266666666666649,0.09306179365964579,0.15084497345549153\n293,3.283333333333316,0.09900498124429352,0.14459687384949413\n294,3.2999999999999825,0.10487737930796168,0.20408957183781884\n295,3.3166666666666487,0.11069291597185596,0.16758006884720617\n296,3.333333333333316,0.11639708496367848,0.11708318142150356\n297,3.3499999999999823,0.1217273908908785,0.18798478150218473\n298,3.366666666666649,0.1265996020457453,0.160148183476634\n299,3.3833333333333155,0.13116896447439702,0.13471980746139514\n300,3.399999999999982,0.135966288673545,0.22079258394641407\n301,3.4166666666666488,0.14142025008083,0.2303159665558857\n302,3.433333333333316,0.14751975109442883,0.14908577630358896\n303,3.4499999999999815,0.15352737719387624,0.15682817454394934\n304,3.4666666666666486,0.15816409853225305,0.2123752443590348\n305,3.483333333333315,0.1601857154835972,0.25100925805522\n306,3.499999999999982,0.1589545566775944,0.23146153039900652\n307,3.5166666666666484,0.1544852206038986,0.18805464416779438\n308,3.533333333333315,0.14869755741153032,0.24784553663840392\n309,3.5499999999999816,0.14263605104698895,0.19902371751685077\n310,3.566666666666648,0.13741146743857324,0.1825510191735316\n311,3.583333333333315,0.133595436797124,0.1999701568195698\n312,3.599999999999981,0.1313273368739534,0.16357087271097392\n313,3.616666666666648,0.13056686253320388,0.1791463340532458\n314,3.633333333333314,0.1312641333278097,0.15526631424132473\n315,3.649999999999981,0.1332797358903959,0.22416864012296855\n316,3.666666666666648,0.13628483366420036,0.22393455210254365\n317,3.6833333333333136,0.13952422967709147,0.23017608797405567\n318,3.6999999999999806,0.14204112486636356,0.18809178241849328\n319,3.716666666666648,0.14294294009596903,0.22115679272094563\n320,3.7333333333333134,0.1414293792565008,0.20291350655903914\n321,3.749999999999981,0.13818933933035218,0.19773219069821507\n322,3.766666666666648,0.1331860419733018,0.16300076946436381\n323,3.7833333333333137,0.12665222914930274,0.15126271662184865\n324,3.7999999999999807,0.1187286978126514,0.13961062608773714\n325,3.8166666666666473,0.10961484592424504,0.12235089260036777\n326,3.8333333333333135,0.09984258973974126,0.10554020646174972\n327,3.849999999999981,0.09008223810188593,0.09630778963814783\n328,3.866666666666647,0.08085685620230627,0.14855024097349467\n329,3.8833333333333138,0.07256316222572513,0.12141840174758514\n330,3.89999999999998,0.06510214772133885,0.06602912108625893\n331,3.916666666666647,0.058610921444190896,0.08376982793359086\n332,3.9333333333333136,0.05272378319996645,0.06843031329554922\n333,3.94999999999998,0.04782334744197015,0.09705561814390548\n334,3.9666666666666472,0.04352307002441606,0.14312207204289723\n335,3.9833333333333134,0.04013926610201627,0.05774696382831518\n336,3.99999999999998,0.03746459966304642,0.12531161632300958\n337,4.016666666666646,0.03544048418519373,0.03719059938882738\n338,4.033333333333314,0.033991331387312106,0.06165896300764242\n339,4.049999999999979,0.03302552570019131,0.12500450709332628\n340,4.066666666666647,0.03235083401139447,0.07273157129922342\n341,4.083333333333313,0.03178395118237268,0.07712593001301667\n342,4.09999999999998,0.031763311390900446,0.08850652658374072\n343,4.116666666666646,0.03201973702619608,0.04903651204949093\n344,4.133333333333312,0.03258483891250205,0.06661071159646981\n345,4.149999999999979,0.033434036826116544,0.09203290898258842\n346,4.166666666666647,0.03443820935102124,0.05381618065791931\n347,4.183333333333312,0.03536756518157945,0.06412169642428014\n348,4.19999999999998,0.0359505047177961,0.039351377786521244\n349,4.216666666666645,0.03596231076319577,0.09214743776977893\n350,4.233333333333313,0.035307682507203744,0.05902830650368873\n351,4.249999999999979,0.03406049881290491,0.11097026296574036\n352,4.266666666666646,0.032431453015792665,0.07352334818051853\n353,4.283333333333312,0.030672135044579777,0.07846761570546937\n354,4.299999999999979,0.028966334931621377,0.060235010726177374\n355,4.316666666666645,0.027363343807303785,0.08793754203291271\n356,4.333333333333313,0.025815923983005612,0.07769771511981848\n357,4.349999999999977,0.024223887688296343,0.0733482193458991\n358,4.366666666666646,0.022534439228242227,0.11403931281846502\n359,4.383333333333312,0.02080220500592597,0.026186032187608368\n360,4.399999999999979,0.01906966307887128,0.028696470510765328\n361,4.416666666666645,0.017415702302007743,0.11560451392475005\n362,4.433333333333312,0.015905951446525034,0.08581308791192593\n363,4.449999999999978,0.014547887882829291,0.084196098613148\n364,4.466666666666645,0.013426539109273928,0.044018123254219756\n365,4.483333333333311,0.012476164752763268,0.09386402308953444\n366,4.499999999999979,0.01169175984669532,0.05843994054930919\n367,4.516666666666644,0.0110536908237312,0.05323752793775819\n368,4.533333333333312,0.010544300517995238,0.07633644202070033\n369,4.549999999999978,0.010111764810362156,0.01523921363378955\n370,4.566666666666645,0.00972206784273088,0.047475356691962824\n371,4.583333333333311,0.009455938247878402,0.07105681947336706\n372,4.599999999999977,0.00917693218891364,0.033881874747251406\n373,4.616666666666644,0.009188422430469106,0.09591096712239372\n374,4.633333333333312,0.009302694296132702,0.03847623068718831\n375,4.649999999999976,0.009526867750149264,0.02423022582990563\n376,4.666666666666645,0.00986838204117474,0.10400510950996868\n377,4.6833333333333105,0.010331111121827347,0.07024737294809552\n378,4.699999999999978,0.01090924976026132,0.09163193539944313\n379,4.716666666666644,0.011580885210842348,0.012784458166140263\n380,4.733333333333311,0.012302396425264627,0.05029867848734215\n381,4.749999999999977,0.013040057798095108,0.019932744610301346\n382,4.766666666666644,0.01375875631275779,0.07763335953298252\n383,4.78333333333331,0.014446891702747667,0.1007212709496305\n384,4.799999999999978,0.015096153108483168,0.0586915218872376\n385,4.816666666666643,0.0156940023344889,0.02216950701004027\n386,4.833333333333311,0.016245522651620947,0.0385195289077894\n387,4.8499999999999766,0.01679928445342448,0.06703778909040885\n388,4.866666666666644,0.01737505498767164,0.05054984529095409\n389,4.88333333333331,0.0181204113718608,0.03236973327205601\n390,4.899999999999976,0.019033587276818326,0.03709918094532241\n391,4.916666666666642,0.019970639491295936,0.03906122719821302\n392,4.9333333333333105,0.02074138628625168,0.08385912851781094\n393,4.949999999999976,0.021111052848654666,0.11592162902280766\n394,4.966666666666644,0.021112069193101986,0.11375775911546941\n395,4.9833333333333085,0.020665350292444727,0.02918050940719069\n396,4.999999999999977,0.019932856436185555,0.1032523989896635\n397,5.016666666666643,0.01901540556743102,0.026127275818096277\n398,5.03333333333331,0.018058869882539637,0.11350301538085514\n399,5.049999999999976,0.017125363876573842,0.0906419645653427\n400,5.066666666666643,0.016172326663091947,0.10283789514537561\n401,5.083333333333309,0.015272093379256828,0.042386297551869505\n402,5.0999999999999766,0.014377044247257916,0.10593588197511383\n403,5.116666666666641,0.013569579387075379,0.04237772570149551\n404,5.13333333333331,0.012938043359667311,0.07108850793229546\n405,5.149999999999976,0.012491246058805286,0.10963642327936736\n406,5.166666666666642,0.01227021526391276,0.05252390088650753\n407,5.183333333333309,0.012229573379522967,0.04574070796370117\n408,5.199999999999976,0.012411790448933363,0.09220529615083256\n409,5.216666666666642,0.012631955771594887,0.0816785225494727\n410,5.2333333333333085,0.012861890526208767,0.07188229485121816\n411,5.249999999999975,0.012952664129169731,0.02409502154099854\n412,5.266666666666643,0.012832477224745792,0.08337890489259249\n413,5.283333333333308,0.012455702351086588,0.02080144275609425\n414,5.299999999999976,0.01199385158593986,0.08429739184168439\n415,5.316666666666642,0.011501102142697736,0.10776647432227095\n416,5.333333333333309,0.011128819379458171,0.051264321726549794\n417,5.349999999999975,0.01097831551997038,0.08154179372979696\n418,5.366666666666641,0.010927316390904133,0.08943273396775268\n419,5.383333333333308,0.010806211169280888,0.039265954765806375\n420,5.399999999999976,0.010614974257290192,0.04758947025979246\n421,5.416666666666641,0.010271581326610123,0.026110149094807876\n422,5.433333333333309,0.009834131065227129,0.031241968192985508\n423,5.449999999999974,0.009297598301658177,0.06702955051376791\n424,5.466666666666642,0.008697139372068055,0.04104820967065601\n425,5.483333333333308,0.008024116887538398,0.051299642764440004\n426,5.499999999999975,0.007315731922365474,0.020382663198439007\n427,5.516666666666641,0.006565652453779356,0.09678895757674429\n428,5.533333333333308,0.005844794880350924,0.059759725345220525\n429,5.549999999999974,0.005177767365665529,0.024650537178989816\n430,5.566666666666642,0.004587412844911594,0.04972397406604411\n431,5.583333333333307,0.0040798944721002,0.04099962650614641\n432,5.599999999999975,0.0036506665421485577,0.10364486796293348\n433,5.61666666666664,0.00329037815035334,0.07087849639919612\n434,5.633333333333308,0.0029886090930426146,0.08939116579903277\n435,5.649999999999974,0.002735690107776864,0.023752795280553657\n436,5.666666666666641,0.002523366843905612,0.07271133554887105\n437,5.683333333333306,0.0023300631942332127,0.05737877312847629\n438,5.699999999999974,0.002180374898760963,0.009108552783666846\n439,5.71666666666664,0.002054958204967324,0.07030854971015259\n440,5.733333333333308,0.0019505886000300875,0.02742925544908511\n441,5.7499999999999725,0.0018648527274811324,0.08657362296315117\n442,5.766666666666641,0.0017960239663209377,0.09429140025272574\n443,5.783333333333307,0.001720481626512626,0.05803455152053702\n444,5.799999999999974,0.0016830996415389443,0.0362323260556584\n445,5.81666666666664,0.0016262300718450644,0.02642125372844058\n446,5.833333333333307,0.001611919732637923,0.08347999814639187\n447,5.849999999999973,0.0016048014922694148,0.06401208946896393\n448,5.86666666666664,0.0016347432507004985,0.0638634796791788\n449,5.883333333333305,0.0016857628276620254,0.028740443554091905\n450,5.899999999999974,0.001761334740481444,0.028556548170348257\n451,5.91666666666664,0.001865932288006437,0.0368212595215135\n452,5.933333333333306,0.001989512518215736,0.011432613570233936\n453,5.949999999999973,0.0021607489243893377,0.02252610142287861\n454,5.96666666666664,0.002386736856454915,0.06384511167211483\n455,5.983333333333306,0.0026530571609377643,0.0699097058166323\n456,5.9999999999999725,0.002969667659174261,0.04508418178508705\n457,6.016666666666639,0.0033068140847257966,0.013770139061926978\n458,6.033333333333307,0.003620015633850385,0.07954653208314325\n459,6.049999999999972,0.0038444166455045207,0.020214807395928736\n460,6.06666666666664,0.003916571185462839,0.03398607889134341\n461,6.0833333333333055,0.0038092320327282624,0.07152472457079527\n462,6.099999999999973,0.0035494402458889464,0.08788744108101931\n463,6.11666666666664,0.00320043214610638,0.004978651141980639\n464,6.133333333333305,0.0028268467668079366,0.07248147824052714\n465,6.149999999999972,0.002472937473226955,0.025983969958468845\n466,6.16666666666664,0.002160175622001572,0.08452943691844837\n467,6.183333333333305,0.001894251048772865,0.04933810055449538\n468,6.199999999999973,0.001672608969388938,0.041572913540058154\n469,6.216666666666638,0.0014894646029960984,0.06331665872830984\n470,6.233333333333306,0.0013384345380275796,0.06963299084369011\n471,6.249999999999972,0.0012136748094292323,0.08889908591433758\n472,6.266666666666639,0.0011102474053009976,0.03232907775171962\n473,6.283333333333305,0.0010241407634558619,0.059539744691306816\n474,6.299999999999972,0.0009521598820936355,0.05993299903153821\n475,6.316666666666638,0.0008917842772384375,0.02182859852791141\n476,6.3333333333333055,0.0008410336313034932,0.0748450273972514\n477,6.349999999999971,0.0007882098897912334,0.06686474187219103\n478,6.36666666666664,0.0007525906554877921,0.036263341804205894\n479,6.383333333333304,0.0007228641949372934,0.04608648852016809\n480,6.399999999999972,0.0006982868399087982,0.06920000913455861\n481,6.416666666666638,0.0006671157541095356,0.017672684434735905\n482,6.433333333333305,0.000645005379493612,0.011133562115067497\n483,6.449999999999973,0.0006333058086720105,0.09428115599799881\n484,6.466666666666638,0.000625184442884534,0.030471966952502656\n485,6.483333333333304,0.0006205035025779992,0.05841094966074938\n486,6.499999999999972,0.0006192046745116873,0.09311383370730295\n487,6.516666666666639,0.0006213057378856704,0.04252882297527014\n488,6.533333333333305,0.0006039945868221229,0.03734071613869019\n489,6.5499999999999705,0.0006137252238044462,0.08300628603097364\n490,6.566666666666638,0.0006047776936573755,0.008004442575358517\n491,6.5833333333333055,0.0006231581830360969,0.07248163505213108\n492,6.599999999999971,0.0006337680871982241,0.07125755115374183\n493,6.616666666666637,0.0006624848892488697,0.0880849632020957\n494,6.633333333333304,0.0006973192371910539,0.009615494133953663\n495,6.649999999999972,0.0007392569480711444,0.06186006279233216\n496,6.666666666666638,0.0007895426603224253,0.01910356536312838\n497,6.683333333333303,0.0008330084196076873,0.029427767131208597\n498,6.69999999999997,0.0009054639619342336,0.022238123333011287\n499,6.716666666666638,0.0009923357464075885,0.044836789186418806\n500,6.733333333333304,0.0010968178118700965,0.024202650240627285\n501,6.74999999999997,0.0012229540649686605,0.05136859630153404\n502,6.766666666666636,0.0013758345184867965,0.04127156374099452\n503,6.783333333333305,0.0015617780277680387,0.02174097522562799\n504,6.7999999999999705,0.0017884101805828436,0.013803589262814598\n505,6.816666666666636,0.002064429183181777,0.04683060174888396\n506,6.833333333333304,0.002387968244156822,0.07867549497431205\n507,6.849999999999971,0.002787075005635288,0.09915796322478466\n508,6.866666666666637,0.0032330643719318663,0.0773416168548849\n509,6.8833333333333035,0.0037448433409505576,0.006039375681516537\n510,6.899999999999969,0.004266115855053602,0.046097461457942274\n511,6.916666666666638,0.004733392359982105,0.07806769389441762\n512,6.933333333333303,0.0050731049261991245,0.027670987768509604\n513,6.949999999999969,0.005228483226228465,0.07482363580224312\n514,6.966666666666637,0.005177871012632568,0.08123899111254584\n515,6.983333333333304,0.004933801139556769,0.08763959802273057\n516,6.99999999999997,0.004516681615965384,0.02142238280732058\n517,7.016666666666636,0.004025914623300037,0.08773817440529472\n518,7.033333333333303,0.0035069432009657746,0.05283304691948566\n519,7.0499999999999705,0.003011562010941419,0.0464327252824427\n520,7.066666666666636,0.0025693287122871486,0.021087520756170056\n521,7.083333333333302,0.002180151797621449,0.005518639162491096\n522,7.0999999999999694,0.0018631067214146704,0.03511065385599154\n523,7.116666666666637,0.0016005279884154326,0.06263558203247062\n524,7.1333333333333035,0.001383752803081267,0.024837384168368077\n525,7.149999999999968,0.0012045262550681973,0.09911590878992671\n526,7.166666666666636,0.0010557189196281143,0.019012342292723305\n527,7.183333333333303,0.0009314598629566572,0.027824538713341913\n528,7.199999999999969,0.0008270276372756256,0.041870985321227086\n529,7.216666666666634,0.0007386662934833399,0.06728799294346474\n530,7.233333333333302,0.000663398632862216,0.07616328639071791\n531,7.249999999999972,0.0005988630824781945,0.09224236782975401\n532,7.2666666666666355,0.0005431803012114177,0.045985709437151356\n533,7.283333333333301,0.0004948475983603272,0.03880545173268148\n534,7.299999999999968,0.00045265671581789455,0.039522778444956025\n535,7.316666666666637,0.00041563027155241765,0.036557418349147525\n536,7.333333333333303,0.0003829727316072356,0.008801725918456283\n537,7.349999999999967,0.0003540325485166859,0.08684465089327713\n538,7.366666666666635,0.0003282728337111797,0.030877967719610395\n539,7.383333333333303,0.00030524854341540544,0.00456254467743439\n540,7.399999999999968,0.0002845886426487827,0.08782395531127031\n541,7.416666666666633,0.0002659820854651423,0.007910879386425715\n542,7.433333333333301,0.00024916673278896844,0.07940114797356139\n543,7.44999999999997,0.00023392054231395035,0.010778728770944471\n544,7.466666666666634,0.0002200545248037094,0.09634394533190835\n545,7.4833333333333,0.00020740708106580888,0.005982378568712616\n546,7.499999999999968,0.00019583942400428853,0.0056958633095433074\n547,7.5166666666666355,0.00018523185810550465,0.031061579059935174\n548,7.533333333333301,0.0001754807401376867,0.08292270487080648\n549,7.549999999999968,0.00016649598393723487,0.060577443984111794\n550,7.566666666666634,0.00015819900201364986,0.05726689159531049\n551,7.583333333333303,0.00015052099962416344,0.09626332562644373\n552,7.599999999999967,0.00014340155465021373,0.08111515346418312\n553,7.616666666666633,0.000136787430317109,0.04569290750956551\n554,7.633333333333299,0.0001306315784814117,0.09106755646970781\n555,7.649999999999968,0.00012489229957700896,0.019803021333298393\n556,7.666666666666633,0.00010650950352080627,0.06579719703911381\n557,7.683333333333299,0.00010176233346638824,0.08038186630171122\n558,7.699999999999966,9.732407586281645e-05,0.09090506624221892\n559,7.716666666666634,9.316862596969085e-05,0.04897089723751216\n560,7.7333333333333,8.927256629278886e-05,0.022935319963214386\n561,7.749999999999966,8.56148429229433e-05,0.04636224144789152\n562,7.766666666666634,8.217648623838878e-05,0.007280443731825942\n563,7.783333333333301,7.894036918914812e-05,0.008495599258638261\n564,7.799999999999968,7.589099752037563e-05,0.05644568432413881\n565,7.816666666666632,7.301432722262195e-05,0.04120697849113344\n566,7.833333333333299,7.029760526128519e-05,0.030512176351782654\n567,7.849999999999967,6.772923026716017e-05,0.0778464398803931\n568,7.866666666666633,6.529863039051561e-05,0.0015680766565689575\n569,7.883333333333299,6.299615595285945e-05,0.05332633581903208\n570,7.899999999999967,6.0812984889811416e-05,0.08482273453171654\n571,7.916666666666633,5.874103927838362e-05,0.0032446273762019107\n572,7.933333333333299,5.677291149306076e-05,0.062116292943274226\n573,7.949999999999965,5.490179874591324e-05,0.08442040506820496\n574,7.966666666666634,5.312144494355774e-05,0.07516689349499696\n575,7.9833333333333,5.1426088943718254e-05,0.027338756537680576\n576,7.999999999999966,4.98104184211338e-05,0.016426973781625862\n577,8.016666666666632,4.826952866034603e-05,0.05563780062926791\n578,8.0333333333333,4.6798885684662046e-05,0.013486897435698596\n579,8.049999999999969,4.53942932088713e-05,0.0069111592467258325\n580,8.066666666666633,4.4051862970251115e-05,0.04549838779349733\n581,8.083333333333298,4.2767988049800565e-05,0.012534499314918205\n582,8.099999999999964,4.1539318844953935e-05,0.06481783181791115\n583,8.116666666666633,4.036274139750162e-05,0.03999314798336396\n584,8.133333333333299,3.9235357817086094e-05,0.06561250403964072\n585,8.149999999999965,3.815446857233749e-05,0.09278489572488863\n586,8.166666666666632,3.711755644916656e-05,0.07149030091853995\n587,8.1833333333333,3.61222719995814e-05,0.0999902449823203\n588,8.199999999999966,3.516642032512129e-05,0.07827493663038784\n589,8.216666666666631,3.424794905708405e-05,0.020378032608375004\n590,8.233333333333297,3.3364937411496084e-05,0.011812664901281102\n591,8.249999999999966,3.2515586210577025e-05,0.07046309982581693\n592,8.266666666666632,3.169820877454257e-05,0.09157882479314909\n593,8.283333333333298,3.091122259820148e-05,0.04193416658757385\n594,8.299999999999965,3.0153141736128785e-05,0.009790890411524585\n595,8.316666666666633,2.9422569828415296e-05,0.0003137504328578474\n596,8.333333333333298,2.871819370623216e-05,0.07076679873929936\n597,8.349999999999964,2.8038777522851057e-05,0.0456701092227214\n598,8.36666666666663,2.7383157361414957e-05,0.010454728339419204\n599,8.383333333333299,2.6750236275772788e-05,0.0011284051960105607\n600,8.399999999999965,2.6138979725131995e-05,0.0866336965739858\n601,8.41666666666663,2.554841136723832e-05,0.07646460030576208\n602,8.433333333333298,2.4977609178303214e-05,0.04744358893910104\n603,8.449999999999966,2.442570187103044e-05,0.0831461690088301\n604,8.466666666666631,2.3891865584884343e-05,0.07086347134430489\n605,8.483333333333297,2.3375320825236138e-05,0.07801307162535605\n606,8.499999999999964,2.287532963025233e-05,0.09658577087462375\n607,8.516666666666632,2.2391192946387017e-05,0.08257142023998251\n608,8.533333333333298,9.977292417469016e-06,0.08746372845026505\n609,8.549999999999963,9.766995564215325e-06,0.09089118609650658\n610,8.566666666666633,9.563269467577353e-06,0.023187631388885382\n</code></pre> <p>How to define <code>expressions</code></p> <p>For this reason, the input file has to be modified so that the expression can be evalutated and linked to the main peak. Peak 1 is the main peak, and all parameters (<code>amplitude</code>, <code>center</code>, <code>fwhmg</code>, <code>fwhml</code>) can be optimized.</p> JSON<pre><code>\"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.4,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          },\n          \"fwhml\": {\n            \"max\": 0.4,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      },\n</code></pre> <p>The attributes <code>amplitude</code> and <code>center</code> of Peak 2 are linked to Peak 1. The keyword <code>expr</code> is enough, but has to follow the correct notation:</p> <ol> <li>Name of the peak type like: <code>pseudovoigt</code> or <code>gaussian</code> or ...</li> <li>Name of the peak attribute like: <code>amplitude</code> or <code>center</code> or ...</li> <li>Number of the peak like: <code>1</code> or <code>2</code> or ...</li> <li>Optional, the attribute can be further extended by mathematical expression.</li> </ol> <p>Peak 2 is linked to Peak 1 by the keyword <code>expr</code> plus the mathematical operations:</p> <ol> <li><code>\\</code>: Division by factor of <code>3</code>.</li> <li><code>+</code>: Addition by the value of <code>1.73</code>.</li> </ol> JSON<pre><code>    \"2\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"expr\": \"pseudovoigt_amplitude_1 / 3\"\n          },\n          \"center\": {\n            \"expr\": \"pseudovoigt_center_1 + 1.73\"\n          },\n          \"fwhmg\": {\n            \"max\": 0.5,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          },\n          \"fwhml\": {\n            \"max\": 0.5,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      },\n</code></pre> <p>And peak 4 is linked to peak 2, which is actually linked to peak 1, by the value of <code>0.35</code>.</p> JSON<pre><code>      \"4\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"expr\": \"pseudovoigt_center_2 + 0.35\"\n          },\n          \"fwhmg\": {\n            \"max\": 0.4,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      }\n    }\n  }\n</code></pre> <p></p> <p>Fit of a pseudo 2p3d-RIXS spectra with fixed conditions of the amplitude and center for peak-2.</p>"},{"location":"examples/example6/","title":"Global Fitting","text":"<p>In this example, the global fitting routine is introduced. The routine allows the fitting of several spectra based on one initial model. The routine is based on the <code>lmfit</code> approach for Fit Multiple Data Sets. In this case of <code>SpectraFit</code> the following parameter are set global and local:</p> <ul> <li><code>global_parameters</code>: The global parameters are the parameters that are fitted   for all spectra: <code>center</code>, <code>width</code>, <code>offset</code>.</li> <li><code>local_parameters</code>: The local parameters are the parameters that are fitted   for each spectrum: <code>amplitude</code></li> </ul> global_data.csv <p>Correct Data Format for Global Fits</p> <p>For the correct fitting the data file has to contain only spectra data; meaning <code>energy</code> and <code>intensity</code> columns. No other columns are allowed!!</p> Scdoc<pre><code>energy,y_1,y_2,y_3\n0.0,0.2419718395587794,0.35036325018282816,0.2512212899764966\n0.10101010101010101,0.26632895799481815,0.3502175834343554,0.28006135290389794\n0.20202020202020202,0.29016252748280824,0.3688802798218712,0.30229415962900624\n0.30303030303030304,0.3129204023527142,0.35590273389466653,0.31880069003423034\n0.40404040404040403,0.3340384218160627,0.4079933177466349,0.336761909067558\n0.5050505050505051,0.3529632658317558,0.41643148980037836,0.35539945022604585\n0.6060606060606061,0.3691764316805938,0.46375789383451615,0.37271770008458227\n0.7070707070707071,0.3822179175787332,0.5222843189540483,0.3860967111690663\n0.8080808080808081,0.3917081371880747,0.4153968013642272,0.4013122337333337\n0.9090909090909091,0.397366645658234,0.5063128037564405,0.4093568810547312\n1.0101010101010102,0.3990264346416763,0.5189243778487673,0.41093627737932836\n1.1111111111111112,0.3966428389866639,0.4723987120004229,0.40264135720513744\n1.2121212121212122,0.3902964683703953,0.523373089149355,0.40479369100416324\n1.3131313131313131,0.38019000044460144,0.5004826262922106,0.3858795084933437\n1.4141414141414141,0.36663910960570206,0.437478027495442,0.3831990083425011\n1.5151515151515151,0.35005821694987166,0.46115202813417366,0.3649819458319575\n1.6161616161616161,0.33094209463941376,0.48825084507172944,0.33130913571620707\n1.7171717171717171,0.3098446108459917,0.37885952432959014,0.31748366332749206\n1.8181818181818181,0.287356038731983,0.4059277305681741,0.29259472917496165\n1.9191919191919191,0.2640803657495641,0.37375331255000677,0.27314767477281415\n2.0202020202020203,0.24061393173411683,0.28595557660589094,0.2580392464764451\n2.121212121212121,0.21752651153225627,0.365690892871207,0.2277438249619412\n2.2222222222222223,0.19534566560640101,0.35264473499692367,0.20521034856723713\n2.323232323232323,0.17454484214240149,0.2941591260029418,0.18671320449947262\n2.4242424242424243,0.15553536153197817,0.19544175985914733,0.16001844132350285\n2.525252525252525,0.1386620828033239,0.17611240410628526,0.14454635034071794\n2.6262626262626263,0.12420227157981423,0.21647111918646172,0.13311287088664925\n2.727272727272727,0.11236698357892479,0.20923638404829742,0.12298637732616499\n2.8282828282828283,0.10330416103067669,0.24301214839783356,0.1141890415115003\n2.929292929292929,0.0971026167947168,0.1846390705598982,0.10285485971267169\n3.0303030303030303,0.09379614821941375,0.17417527833709784,0.10050867917308377\n3.131313131313131,0.09336716745011825,0.15440776056953087,0.10069244637808268\n3.2323232323232323,0.09574943780385352,0.1614710310818758,0.10920472448510052\n3.3333333333333335,0.10082974318827102,0.23917063086821988,0.11113979445013676\n3.4343434343434343,0.10844856319827069,0.23906519657442696,0.11964554423637763\n3.5353535353535355,0.11840005430305738,0.185137492297554,0.13382467129696818\n3.6363636363636362,0.13043182350565388,0.21178124555631211,0.1342855248182133\n3.7373737373737375,0.14424510535201246,0.16143234568542197,0.1560526436789465\n3.8383838383838382,0.15949600249002968,0.20933015208380787,0.1683435892119578\n3.9393939393939394,0.17579841764880832,0.25019527891171345,0.1784696397037549\n4.040404040404041,0.19272919236172995,0.32552581942798375,0.20615239344598849\n4.141414141414141,0.20983578440772235,0.2932708677541437,0.22194355270855873\n4.242424242424242,0.22664657854430872,0.3081215629135999,0.23530374144895616\n4.343434343434343,0.24268365638392028,0.38520056536274083,0.2452834351104565\n4.444444444444445,0.2574775779153426,0.4036517972055121,0.2734912799066593\n4.545454545454545,0.2705834773153452,0.36523358566038555,0.2827626322195374\n4.646464646464646,0.2815975760415347,0.4038570079917979,0.2983007893094095\n4.747474747474747,0.29017308919843954,0.38568444109761335,0.3032663221822144\n4.848484848484849,0.2960344624877284,0.3728118956346913,0.3101873787210576\n4.94949494949495,0.2989889336697853,0.38606631982800826,0.311033627204741\n5.05050505050505,0.2989345616844333,0.46599952623182306,0.30890775906787193\n5.151515151515151,0.29586409612082076,0.41720009712347705,0.31446405506941183\n5.252525252525253,0.2898643489097391,0.3978805373834097,0.29598603855889627\n5.353535353535354,0.28111105204361964,0.39825962134996457,0.28686237466767855\n5.454545454545454,0.2698595096365714,0.33923478930509804,0.28012202957855487\n5.555555555555555,0.25643164957939424,0.32397898668915726,0.2661958444768996\n5.656565656565657,0.24120032260087373,0.29482429157056955,0.2528426126583375\n5.757575757575758,0.2245718640529986,0.34440618635570847,0.23528514295626335\n5.858585858585858,0.20696801373394533,0.321043737549401,0.2225829393766783\n5.959595959595959,0.18880827830906066,0.22982453226120228,0.19541682400166696\n6.0606060606060606,0.17049372526515405,0.3524689792639276,0.17633235416182982\n6.161616161616162,0.15239303067775103,0.2916758060392339,0.15754756928059752\n6.262626262626262,0.13483138518048135,0.1701532093125915,0.14588505862135276\n6.363636363636363,0.1180826165999828,0.25486367153484046,0.1280652681440698\n6.4646464646464645,0.1023646376222611,0.22609431802203062,0.10864517025852855\n6.565656565656566,0.08783809454258623,0.1827569415348753,0.09215509779192388\n6.666666666666667,0.07460789656344895,0.2578564973920618,0.07797855687466268\n6.767676767676767,0.06272715674885718,0.1681908664576616,0.08069974587228344\n6.8686868686868685,0.05220298203877285,0.1439421621017304,0.06184815934481232\n6.96969696969697,0.04300351112765476,0.18915960212382008,0.06092207828108523\n7.070707070707071,0.03506561077034345,0.11924863750148582,0.04219088166179979\n7.171717171717171,0.028302694492219067,0.1899023278636362,0.04320449878330073\n7.2727272727272725,0.02261221157731021,0.16987745012151412,0.02870127060116931\n7.373737373737374,0.017882456478267986,0.11920741950473637,0.028317322454312833\n7.474747474747475,0.013998457765025014,0.10525464615149546,0.019351481239332922\n7.575757575757575,0.010846811260906253,0.09710457629794428,0.019610610074285557\n7.6767676767676765,0.008319416212832886,0.11226703986573822,0.01787005836621023\n7.777777777777778,0.006316150905310992,0.14858385560327475,0.016018189152513816\n7.878787878787879,0.004746582342620543,0.10826397760767079,0.012281358555432859\n7.979797979797979,0.0035308430828626595,0.09626654714870186,0.01691507822920174\n8.080808080808081,0.002599828444403308,0.10801343336430928,0.0158984153824461\n8.181818181818182,0.0018948718360943435,0.08312078984411232,0.015356442053566066\n8.282828282828282,0.0013670483232129816,0.0800649227546427,0.01020942150687729\n8.383838383838384,0.0009762403818145284,0.047820231796681156,0.01142454441107308\n8.484848484848484,0.000690078577489922,0.09445547295854599,0.007485526347581316\n8.585858585858587,0.0004828466235725318,0.07606281824881235,0.01146403478705961\n8.686868686868687,0.00033441729366460055,0.09578053378172673,0.01263455963109994\n8.787878787878787,0.00022926466913550123,0.09118251265798016,0.013146056664029184\n8.88888888888889,0.00015558023158815387,0.0751349614928704,0.008979428550340542\n8.98989898989899,0.00010450584235670396,0.10306972998885719,0.00656350219728153\n9.09090909090909,6.948572649469218e-05,0.1298194212311276,0.0025187244137908613\n9.191919191919192,4.573192796581058e-05,0.12557640592551106,0.013055941245999134\n9.292929292929292,2.9792866786525854e-05,0.17756855532180232,0.009447900246448688\n9.393939393939394,1.921206089655364e-05,0.10472988345894148,0.008516838659603503\n9.494949494949495,1.226321917195423e-05,0.05128980491588907,0.010542137767284956\n9.595959595959595,7.748254936027263e-06,0.07522248420973705,0.007639600090337453\n9.696969696969697,4.845874794501611e-06,0.12426871691096668,0.005829177868155318\n9.797979797979798,2.9999177793186746e-06,0.14884376088021908,0.018783274063962605\n9.8989898989899,1.8382957822092802e-06,0.1084150307608363,0.015388290419153256\n10.0,1.1150396360517513e-06,0.007827194075870354,0.016627220257220902\n</code></pre> <p>How to use <code>Global Fit</code></p> <p>Global fit can be used in two ways:</p> <ol> <li>Automatic global fit via option 1 via Input File:       JSON<pre><code>{\n\"settings\": {\n  \"column\": [\"energy\"],\n  \"decimal\": \".\",\n  \"header\": 0,\n  \"infile\": \"data_global.csv\",\n  \"outfile\": \"example_6\",\n  \"oversampling\": false,\n  \"separator\": \",\",\n  \"shift\": 0.2,\n  \"smooth\": false,\n  \"verbose\": 1,\n\n  \"noplot\": false,\n  \"global\": 1\n},\n</code></pre>    or via Command Line.         Bash<pre><code>spectrafit global_data.csv -i input.json -g 1\n</code></pre></li> <li>Hand defined global fit via option 2 via Input File or Command Line.         Bash<pre><code>spectrafit global_data.csv -i input.json -g 2\n</code></pre></li> <li>Similiar to classic local fits, the global fits only requires the peak    definition for the first spectra, and the global fit will be    automatically generate the corresponding peaks for the other spectra.   JSON<pre><code>    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 200,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          ...\n        }\n      },\n      \"2\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 200,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          ...\n        }\n      }\n    }\n</code></pre></li> </ol> <p>In case of using hand defined peaks for global fit, the input has to look like: JSON<pre><code>  \"peaks\": {\n     \"1\": {\n         \"1\": {\n             \"pseudovoigt\": {\n                 \"amplitude\": {\n                     \"max\": 200,\n                     \"min\": 0,\n                     \"vary\": True,\n                     \"value\": 1,\n                 },\n                 \"center\": {\n                     \"max\": 200,\n                     \"min\": -200,\n                     \"vary\": True,\n                     \"value\": 0,\n                 },\n                 \"fwhmg\": {\n                     \"max\": 2.5,\n                     \"min\": 0.00002,\n                     \"vary\": True,\n                     \"value\": 0.1,\n                 },\n                 \"fwhml\": {\n                     \"max\": 2.5,\n                     \"min\": 0.00001,\n                     \"vary\": True,\n                     \"value\": 1,\n                 },\n             }\n         }\n     }\n</code></pre> This will allow separating between globally defined peaks and locally defined peaks in between the spectra. Important is that the first number corresponds to the spectra, the second number corresponds to the peak.</p> <p></p> <p>The global fit of two peaks for three independent spectra is shown. The position of the peaks and the broadening is dependently optimized for all three spectra, but the amplitude is optimized independently.</p>"},{"location":"examples/example7/","title":"Automatic Fitting","text":"<p>In this example, the auto-peak-detection is introduced. The auto-peak-detection is a feature that automatically detects the peaks in the spectra. The routine is based on SciPy's <code>find_peaks</code> routine. As described in section advanced usage, the auto-peak-detection can be used via command line or explicit definitions of attributes in the section block of the input file.</p> <p>In the following example the in example the section block looks like:</p> JSON<pre><code>{\n  \"settings\": {\n    \"column\": [\"Energy\", \"Intensity\"],\n    \"decimal\": \".\",\n    \"energy_start\": -1,\n    \"energy_stop\": 4,\n    \"header\": 0,\n    \"infile\": \"data.csv\",\n    \"outfile\": \"example_7\",\n    \"oversampling\": false,\n    \"separator\": \",\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"autopeak\": {\n      \"modeltype\": \"gaussian\",\n      \"height\": [0.0, 16],\n      \"threshold\": [0.0, 16],\n      \"distance\": 2,\n      \"prominence\": [0.002, 12],\n      \"width\": [0.002, 12],\n      \"wlen\": 100\n    },\n    \"verbose\": 1\n  }\n}\n</code></pre> <p>This results in an automatic peak detection with the following results as shown in the figure shown below.</p> <p></p> <p>Automatic detection of peaks in the spectra. In summary, 8 Gaussian distributions are used to fit this spectra.</p> <p>No found peaks</p> <p>In case no peaks are found, the routine will return an error and <code>SpectraFit</code> will not be able to continue.</p> About the automatic peak detection proposed models <p>Based on the <code>find_peaks</code> routine, the auto-peak-detection suggests the following intial models:</p> JSON<pre><code>  \"auto_generated_models\": {\n        \"models\": {\n            \"gaussian_amplitude_1\": {\n                \"value\": 1.0,\n                \"min\": -1.25,\n                \"max\": 1.25,\n                \"vary\": true\n            },\n            \"gaussian_center_1\": {\n                \"value\": 0.0166666666666608,\n                \"min\": 0.0083333333333304,\n                \"max\": 0.0333333333333216,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_1\": {\n                \"value\": 0.5986279251394535,\n                \"min\": 0,\n                \"max\": 1.197255850278907,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_2\": {\n                \"value\": 0.1105553529287392,\n                \"min\": -0.13819419116092402,\n                \"max\": 0.13819419116092402,\n                \"vary\": true\n            },\n            \"gaussian_center_2\": {\n                \"value\": 1.6666666666666548,\n                \"min\": 0.8333333333333274,\n                \"max\": 3.3333333333333095,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_2\": {\n                \"value\": 0.31772487166969654,\n                \"min\": 0,\n                \"max\": 0.6354497433393931,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_3\": {\n                \"value\": 0.1361582465387924,\n                \"min\": -0.1701978081734905,\n                \"max\": 0.1701978081734905,\n                \"vary\": true\n            },\n            \"gaussian_center_3\": {\n                \"value\": 1.916666666666654,\n                \"min\": 0.958333333333327,\n                \"max\": 3.833333333333308,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_3\": {\n                \"value\": 0.2807028277094332,\n                \"min\": 0,\n                \"max\": 0.5614056554188664,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_4\": {\n                \"value\": 0.1431947128186528,\n                \"min\": -0.178993391023316,\n                \"max\": 0.178993391023316,\n                \"vary\": true\n            },\n            \"gaussian_center_4\": {\n                \"value\": 2.1499999999999866,\n                \"min\": 1.0749999999999933,\n                \"max\": 4.299999999999973,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_4\": {\n                \"value\": 0.1519356228913864,\n                \"min\": 0,\n                \"max\": 0.3038712457827728,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_5\": {\n                \"value\": 0.1814951542166284,\n                \"min\": -0.2268689427707855,\n                \"max\": 0.2268689427707855,\n                \"vary\": true\n            },\n            \"gaussian_center_5\": {\n                \"value\": 2.349999999999985,\n                \"min\": 1.1749999999999925,\n                \"max\": 4.69999999999997,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_5\": {\n                \"value\": 1.443660360679985,\n                \"min\": 0,\n                \"max\": 2.88732072135997,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_6\": {\n                \"value\": 0.1277625583305999,\n                \"min\": -0.15970319791324988,\n                \"max\": 0.15970319791324988,\n                \"vary\": true\n            },\n            \"gaussian_center_6\": {\n                \"value\": 2.983333333333317,\n                \"min\": 1.4916666666666585,\n                \"max\": 5.966666666666634,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_6\": {\n                \"value\": 0.4363360040696307,\n                \"min\": 0,\n                \"max\": 0.8726720081392614,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_7\": {\n                \"value\": 0.1601857154835972,\n                \"min\": -0.2002321443544965,\n                \"max\": 0.2002321443544965,\n                \"vary\": true\n            },\n            \"gaussian_center_7\": {\n                \"value\": 3.483333333333315,\n                \"min\": 1.7416666666666576,\n                \"max\": 6.96666666666663,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_7\": {\n                \"value\": 1.1042527611053288,\n                \"min\": 0,\n                \"max\": 2.2085055222106575,\n                \"vary\": true\n            },\n            \"gaussian_amplitude_8\": {\n                \"value\": 0.142942940095969,\n                \"min\": -0.17867867511996124,\n                \"max\": 0.17867867511996124,\n                \"vary\": true\n            },\n            \"gaussian_center_8\": {\n                \"value\": 3.716666666666648,\n                \"min\": 1.858333333333324,\n                \"max\": 7.433333333333296,\n                \"vary\": true\n            },\n            \"gaussian_fwhmg_8\": {\n                \"value\": 0.18031229508920887,\n                \"min\": 0,\n                \"max\": 0.36062459017841775,\n                \"vary\": true\n            }\n        },\n        \"positions\": [\n            60,\n            159,\n            174,\n            188,\n            200,\n            238,\n            268,\n            282\n        ],\n        \"properties\": {\n            \"plateau_sizes\": [\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1,\n                1\n            ],\n            \"left_edges\": [\n                60,\n                159,\n                174,\n                188,\n                200,\n                238,\n                268,\n                282\n            ],\n            \"right_edges\": [\n                60,\n                159,\n                174,\n                188,\n                200,\n                238,\n                268,\n                282\n            ],\n            \"peak_heights\": [\n                1.0,\n                0.1105553529287392,\n                0.1361582465387924,\n                0.1431947128186528,\n                0.1814951542166284,\n                0.1277625583305999,\n                0.1601857154835972,\n                0.142942940095969\n            ],\n            \"left_thresholds\": [\n                0.02702702702704396,\n                0.0035696947991552125,\n                0.003691875598146821,\n                0.00045265871677968583,\n                0.0012037545263766103,\n                0.002382680877353105,\n                0.0020216169513442017,\n                0.0009018152296055015\n            ],\n            \"right_thresholds\": [\n                0.027027027027006767,\n                0.0007936900971818039,\n                0.0009852120569291967,\n                0.0020910651786809897,\n                0.0017121005592188043,\n                0.0020892844213151185,\n                0.0012311588060028023,\n                0.0015135608394682143\n            ],\n            \"prominences\": [\n                0.9825400111971746,\n                0.02505732635976661,\n                0.026513865406715603,\n                0.0068667793315602965,\n                0.12393423500090289,\n                0.0589944372688672,\n                0.10262479626787169,\n                0.012376077562765209\n            ],\n            \"left_bases\": [\n                10,\n                125,\n                125,\n                138,\n                150,\n                221,\n                221,\n                276\n            ],\n            \"right_bases\": [\n                110,\n                166,\n                180,\n                191,\n                221,\n                249,\n                299,\n                299\n            ],\n            \"widths\": [\n                0.5986279251394535,\n                0.31772487166969654,\n                0.2807028277094332,\n                0.1519356228913864,\n                1.443660360679985,\n                0.4363360040696307,\n                1.1042527611053288,\n                0.18031229508920887\n            ],\n            \"width_heights\": [\n                0.9919104334440619,\n                0.11034904793658504,\n                0.13593994939422985,\n                0.1431381764254326,\n                0.18047476397177975,\n                0.12727683823647862,\n                0.15934077267186683,\n                0.1428410438861409\n            ],\n            \"left_ips\": [\n                59.70068603743048,\n                158.94220654600417,\n                173.9408709370727,\n                187.87510150335248,\n                199.1523269715794,\n                237.79614555237424,\n                267.58204603935053,\n                281.88700988131166\n            ],\n            \"right_ips\": [\n                60.29931396256993,\n                159.25993141767387,\n                174.22157376478214,\n                188.02703712624387,\n                200.5959873322594,\n                238.23248155644387,\n                268.68629880045586,\n                282.06732217640086\n            ]\n        }\n    },\n</code></pre>"},{"location":"examples/example8/","title":"Working with Athena Data","text":"<p>In this example, the working with Athena output files of type <code>.nor</code> is demonstrated.</p> <p>Workaround for the Athena output file</p> <ol> <li>Use of the <code>comment</code> option, which allows to remove the header of the    Athena-output file. Next, as separator</li> <li>Use the <code>\\\\s+</code> character, it is important to make use of the    <code>separator</code> option.</li> <li>The auto-rename function of <code>SpectraFit</code> change the first column to    <code>Energy</code> and the second column to <code>Intensity</code>.</li> </ol> <p>Please also check the official documentation, here. As well as, the GitHub repository, here.</p> About future plans for Athena <ul> <li>In future, automatic detection of the file type will be implemented.</li> <li>Currently, only Athena files with one column for energy and one column for   intensity are supported!</li> </ul> JSON<pre><code>\"settings\": {\n    \"decimal\": \".\",\n    \"energy_start\": 5440,\n    \"energy_stop\": 5520,\n    \"comment\": \"#\",\n    \"infile\": \"athena.nor\",\n    \"outfile\": \"example_8\",\n    \"oversampling\": false,\n    \"separator\": \"\\\\s+\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"verbose\": 0\n  },\n</code></pre> <p></p> <p>Fit of an Athena NOR file with three pseudovoigt, two gaussian, and one arcus_tanh function for edge jump. See also the model-section.</p> Results JSON<pre><code>    {\n  \"settings\": {\n    \"decimal\": \".\",\n    \"energy_start\": 5440,\n    \"energy_stop\": 5520,\n    \"comment\": \"#\",\n    \"infile\": \"athena.nor\",\n    \"outfile\": \"example_8\",\n    \"oversampling\": false,\n    \"separator\": \"\\\\s+\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"verbose\": 0\n  },\n  \"fitting\": {\n    \"description\": {\n      \"project_name\": \"Template\",\n      \"project_details\": \"Template for testing\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    },\n    \"parameters\": {\n      \"minimizer\": {\n        \"nan_policy\": \"propagate\",\n        \"calc_covar\": true\n      },\n      \"optimizer\": {\n        \"max_nfev\": 1000,\n        \"method\": \"leastsq\"\n      },\n      \"report\": {\n        \"min_correl\": 0.0\n      }\n    },\n    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5470,\n            \"min\": 5460,\n            \"vary\": true,\n            \"value\": 5468\n          },\n          \"fwhmg\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          },\n          \"fwhml\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          }\n        }\n      },\n      \"2\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5470,\n            \"min\": 5465,\n            \"vary\": true,\n            \"value\": 5469\n          },\n          \"fwhmg\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          },\n          \"fwhml\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          }\n        }\n      },\n      \"3\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5480,\n            \"min\": 5470,\n            \"vary\": true,\n            \"value\": 5473\n          },\n          \"fwhmg\": {\n            \"max\": 3.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"fwhml\": {\n            \"max\": 3.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          }\n        }\n      },\n      \"4\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          },\n          \"center\": {\n            \"max\": 5485,\n            \"min\": 5475,\n            \"vary\": true,\n            \"value\": 5478\n          },\n          \"fwhmg\": {\n            \"max\": 4,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          }\n        }\n      },\n      \"5\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 4\n          },\n          \"center\": {\n            \"max\": 5498,\n            \"min\": 5480,\n            \"vary\": true,\n            \"value\": 5483\n          },\n          \"fwhmg\": {\n            \"max\": 4.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          }\n        }\n      },\n      \"6\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 4\n          },\n          \"center\": {\n            \"max\": 5498,\n            \"min\": 5493,\n            \"vary\": true,\n            \"value\": 5494\n          },\n          \"fwhmg\": {\n            \"max\": 4.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          }\n        }\n      },\n      \"7\": {\n        \"atan\": {\n          \"amplitude\": {\n            \"max\": 5,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5500,\n            \"min\": 5483,\n            \"vary\": true,\n            \"value\": 5481\n          },\n          \"sigma\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"examples/example9_1/","title":"Default Plot","text":"In\u00a0[1]: Copied! <pre>from spectrafit.plugins import notebook as nb\n</pre> from spectrafit.plugins import notebook as nb <p>Other regular packages are already installed:</p> <ol> <li><code>numpy</code></li> <li><code>matplotlib</code></li> <li><code>scipy</code></li> <li><code>pandas</code></li> </ol> <p>So that the data / spectra can be loaded and plotted.</p> In\u00a0[2]: Copied! <pre>import pandas as pd\nimport matplotlib\n\n# %matplotlib inline\n</pre> import pandas as pd import matplotlib  # %matplotlib inline In\u00a0[3]: Copied! <pre>df = pd.read_csv(\n    \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\"\n)\ndf.plot(x=\"Energy\", y=\"Noisy\", kind=\"line\", label=\"Spectra\")\n</pre> df = pd.read_csv(     \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\" ) df.plot(x=\"Energy\", y=\"Noisy\", kind=\"line\", label=\"Spectra\") Out[3]: <pre>&lt;Axes: xlabel='Energy'&gt;</pre> <p>The <code>spectra</code> aboive shows a pseudo 2p3d spectrum, see also: https://doi.org/10.1021/acs.inorgchem.8b01550</p> In\u00a0[4]: Copied! <pre>spn = nb.SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\")\n</pre> spn = nb.SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\") In\u00a0[5]: Copied! <pre>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n            \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n]\n</pre> initial_model = [     {         \"pseudovoigt\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},             \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},             \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     }, ] In\u00a0[6]: Copied! <pre>spn.solver_model(initial_model=initial_model)\n</pre> spn.solver_model(initial_model=initial_model) <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> <p> </p> In\u00a0[7]: Copied! <pre>spn.display_fit_df(mode=\"interactive\")\n</pre> spn.display_fit_df(mode=\"interactive\") energy intensity residual fit pseudovoigt_1 gaussian_2 gaussian_3 gaussian_4 gaussian_5 gaussian_6  Loading ITables v2.0.1 from the internet... (need help?) In\u00a0[8]: Copied! <pre>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n            \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.25, \"min\": 1.8, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n]\nspn.solver_model(initial_model=initial_model, conf_interval=False)\n</pre> initial_model = [     {         \"pseudovoigt\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},             \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},             \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.25, \"min\": 1.8, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     }, ] spn.solver_model(initial_model=initial_model, conf_interval=False) <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_2' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:358: UserWarning:\n\n\n\n## WARNING #####################################################################################\nThe parameter 'gaussian_center_7' is at its initial value and uncertainties cannot be estimated!\n################################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_7' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_7' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_8' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_9' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre>"},{"location":"examples/example9_1/#regular-usage-of-the-jupyter-notebook-extension-for-spectrafit","title":"Regular Usage of the Jupyter-Notebook extension for <code>SpectraFit</code>\u00b6","text":"<p>This notebook shows how to use the Jupyter-Notebook extension for <code>SpectraFit</code> to fit a spectrum. In order to use the extension, you need to install the <code>SpectraFit</code> like the following:</p> <pre>pip install spectrafit[jupyter]\n</pre> <p>or straight in the notebook:</p> <pre>! pip install spectrafit[jupyter]\n</pre> <p>Then, you need to enable the extension by running the following command in the terminal:</p>"},{"location":"examples/example9_1/#load-the-data-into-the-notebook-plugin-of-spectrafit","title":"Load the data into the notebook-plugin of <code>SpectraFit</code>\u00b6","text":""},{"location":"examples/example9_1/#define-the-fitting-model","title":"Define the fitting model\u00b6","text":""},{"location":"examples/example9_1/#run-the-fitting-with-the-proposed-initial_model","title":"Run the fitting with the proposed <code>initial_model</code>\u00b6","text":""},{"location":"examples/example9_1/#show-the-dataframe-with-the-fitted-parameters","title":"Show the dataframe with the fitted parameters\u00b6","text":""},{"location":"examples/example9_1/#metric-plot-of-the-fitted-model","title":"Metric Plot of the fitted model\u00b6","text":"<p><code>SpectraFit</code> also shows the metric of the fitted model. The plot shows the metric of the fitted model for each run. The metric consits of the <code>goodness of fit</code> and the <code>regression metric</code> of the model. By default, the <code>Akaike Information Criterion</code> and <code>Bayesian Information Criteria</code> are used for the bar plot and the <code>Mean Squared Error</code> for the line plot.</p>"},{"location":"examples/example9_1/#fit-plot","title":"Fit Plot\u00b6","text":""},{"location":"examples/example9_1/#metric-blogs","title":"Metric Blogs\u00b6","text":""},{"location":"examples/example9_2/","title":"Themes","text":"In\u00a0[1]: Copied! <pre># Loading packages and default data\nfrom spectrafit.plugins import notebook as nb\nimport pandas as pd\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\"\n)\n</pre> # Loading packages and default data from spectrafit.plugins import notebook as nb import pandas as pd df = pd.read_csv(     \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\" )  In\u00a0[2]: Copied! <pre>from spectrafit.plugins import color_schemas as cs\n\nspn = nb.SpectraFitNotebook(\n    df=df,\n    x_column=\"Energy\",\n    y_column=\"Noisy\",\n    color=cs.DraculaColor(),\n    font=cs.DraculaFont(),\n)\n</pre> from spectrafit.plugins import color_schemas as cs  spn = nb.SpectraFitNotebook(     df=df,     x_column=\"Energy\",     y_column=\"Noisy\",     color=cs.DraculaColor(),     font=cs.DraculaFont(), ) In\u00a0[3]: Copied! <pre>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n            \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n]\n</pre> initial_model = [     {         \"pseudovoigt\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},             \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},             \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 2.0, \"min\": 0, \"vary\": True, \"value\": 2},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     }, ] In\u00a0[4]: Copied! <pre>spn.solver_model(initial_model=initial_model)\n</pre> spn.solver_model(initial_model=initial_model)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> In\u00a0[5]: Copied! <pre>from spectrafit.plugins import color_schemas as cs\n\nspn = nb.SpectraFitNotebook(\n    df=df,\n    x_column=\"Energy\",\n    y_column=\"Noisy\",\n    color=cs.MoonAkiColor(),\n    font=cs.MoonAkiFont(),\n)\nspn.solver_model(initial_model=initial_model)\n</pre> from spectrafit.plugins import color_schemas as cs  spn = nb.SpectraFitNotebook(     df=df,     x_column=\"Energy\",     y_column=\"Noisy\",     color=cs.MoonAkiColor(),     font=cs.MoonAkiFont(), ) spn.solver_model(initial_model=initial_model)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> In\u00a0[6]: Copied! <pre>from spectrafit.plugins import color_schemas as cs\n\nspn = nb.SpectraFitNotebook(\n    df=df,\n    x_column=\"Energy\",\n    y_column=\"Noisy\",\n    color=cs.DevOpsDarkColor(),\n    font=cs.DevOpsDarkFont(),\n)\nspn.solver_model(initial_model=initial_model)\n</pre> from spectrafit.plugins import color_schemas as cs  spn = nb.SpectraFitNotebook(     df=df,     x_column=\"Energy\",     y_column=\"Noisy\",     color=cs.DevOpsDarkColor(),     font=cs.DevOpsDarkFont(), ) spn.solver_model(initial_model=initial_model)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> In\u00a0[7]: Copied! <pre>from spectrafit.plugins import color_schemas as cs\n\nspn = nb.SpectraFitNotebook(\n    df=df,\n    x_column=\"Energy\",\n    y_column=\"Noisy\",\n    color=cs.ColorBlindColor(),\n    font=cs.ColorBlindFont(),\n)\nspn.solver_model(initial_model=initial_model)\n</pre> from spectrafit.plugins import color_schemas as cs  spn = nb.SpectraFitNotebook(     df=df,     x_column=\"Energy\",     y_column=\"Noisy\",     color=cs.ColorBlindColor(),     font=cs.ColorBlindFont(), ) spn.solver_model(initial_model=initial_model)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> In\u00a0[8]: Copied! <pre>from spectrafit.plugins import color_schemas as cs\n\nspn = nb.SpectraFitNotebook(\n    df=df,\n    x_column=\"Energy\",\n    y_column=\"Noisy\",\n    color=cs.DevOpsLightColor(),\n    font=cs.DevOpsLightFont(),\n)\nspn.solver_model(initial_model=initial_model)\n</pre> from spectrafit.plugins import color_schemas as cs  spn = nb.SpectraFitNotebook(     df=df,     x_column=\"Energy\",     y_column=\"Noisy\",     color=cs.DevOpsLightColor(),     font=cs.DevOpsLightFont(), ) spn.solver_model(initial_model=initial_model)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_3' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre>"},{"location":"examples/example9_2/#using-of-themes-for-the-plots","title":"Using of themes for the plots\u00b6","text":"<p>For working with different color themes, you can import <code>color_schemas</code> into the Notebook and overwrite the default theme.</p>"},{"location":"examples/example9_2/#color-themes","title":"Color Themes\u00b6","text":""},{"location":"examples/example9_2/#dracula-theme","title":"Dracula Theme\u00b6","text":""},{"location":"examples/example9_2/#loading-of-the-new-theme","title":"Loading of the new theme\u00b6","text":""},{"location":"examples/example9_2/#define-the-fitting-model-as-usual","title":"Define the fitting model as usual\u00b6","text":""},{"location":"examples/example9_2/#run-fitting-and-plot-the-results-in-the-dark-theme","title":"Run fitting and plot the results in the dark theme\u00b6","text":""},{"location":"examples/example9_2/#moonaki-theme","title":"MoonAki theme\u00b6","text":""},{"location":"examples/example9_2/#devops-dark-theme","title":"DevOps Dark Theme\u00b6","text":""},{"location":"examples/example9_2/#light-color-themes","title":"Light Color Themes\u00b6","text":""},{"location":"examples/example9_2/#color-blind-theme","title":"Color Blind Theme\u00b6","text":""},{"location":"examples/example9_2/#devops-light-theme","title":"DevOps Light Theme\u00b6","text":""},{"location":"examples/example9_3/","title":"Export Results","text":"In\u00a0[1]: Copied! <pre># Loading packages and default data\nfrom spectrafit.plugins import notebook as nb\nimport pandas as pd\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\"\n)\n</pre> # Loading packages and default data from spectrafit.plugins import notebook as nb import pandas as pd df = pd.read_csv(     \"https://raw.githubusercontent.com/Anselmoo/spectrafit/main/Examples/data.csv\" ) In\u00a0[2]: Copied! <pre>spn = nb.SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\", fname=\"example9_3\")\n</pre> spn = nb.SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\", fname=\"example9_3\") In\u00a0[3]: Copied! <pre>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n            \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 2., \"min\": 0, \"vary\": True, \"value\": 2},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n        }\n    },\n     {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.2},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n]\nspn.solver_model(initial_model=initial_model, show_plot=False)\n</pre> initial_model = [     {         \"pseudovoigt\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},             \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},             \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 2., \"min\": 0, \"vary\": True, \"value\": 2},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},         }     },      {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.2},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     }, ] spn.solver_model(initial_model=initial_model, show_plot=False) <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_2' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:358: UserWarning:\n\n\n\n## WARNING #####################################################################################\nThe parameter 'gaussian_center_6' is at its initial value and uncertainties cannot be estimated!\n################################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> In\u00a0[4]: Copied! <pre>spn.export_df_org\nspn.export_df_act\nspn.export_df_fit\nspn.export_df_peaks\n</pre> spn.export_df_org spn.export_df_act spn.export_df_fit spn.export_df_peaks In\u00a0[5]: Copied! <pre>from pathlib import Path\n\nlist(Path(\".\").glob(\"*.csv\"))\n</pre> from pathlib import Path  list(Path(\".\").glob(\"*.csv\")) Out[5]: <pre>[PosixPath('fit_example9_3.csv'),\n PosixPath('act_example9_3.csv'),\n PosixPath('org_example9_3.csv'),\n PosixPath('peaks_example9_3.csv')]</pre> <p>Finally, the results can be stored in a <code>.lock</code> file. This file contains all the information about the fit, the data, the model, the parameters, the covariance matrix, etc. The <code>.lock</code> file can be loaded back into the <code>SpectraFit</code> notebook-plugin via <code>tomli</code></p> In\u00a0[6]: Copied! <pre>spn.solver_model(initial_model=initial_model, show_plot=False, show_peaks=True)\n</pre> spn.solver_model(initial_model=initial_model, show_plot=False, show_peaks=True)  <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhmg_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'pseudovoigt_fwhml_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_2' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_4' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_5' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:358: UserWarning:\n\n\n\n## WARNING #####################################################################################\nThe parameter 'gaussian_center_6' is at its initial value and uncertainties cannot be estimated!\n################################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ################################################################################\nThe parameter 'gaussian_center_6' is at its boundary and uncertainties cannot be estimated!\n###########################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ###############################################################################\nThe parameter 'gaussian_fwhmg_6' is at its boundary and uncertainties cannot be estimated!\n##########################################################################################\n\n\n</pre> component pseudovoigt_amplitude_1 pseudovoigt_center_1 pseudovoigt_fwhmg_1 pseudovoigt_fwhml_1 gaussian_amplitude_2 gaussian_center_2 gaussian_fwhmg_2 gaussian_amplitude_3 gaussian_center_3 gaussian_fwhmg_3 gaussian_amplitude_4 gaussian_center_4 gaussian_fwhmg_4 gaussian_amplitude_5 gaussian_center_5 gaussian_fwhmg_5 gaussian_amplitude_6 gaussian_center_6 gaussian_fwhmg_6 parameter init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value init_value model_value best_value  Loading ITables v2.0.1 from the internet... (need help?) <p></p>"},{"location":"examples/example9_3/#saving-results","title":"Saving Results\u00b6","text":"<p>In general, there can be saved two types of data:</p> <ol> <li>DataFrames with information about data and fit</li> <li>All other data, such as fit results, covariance matrices, etc. plus <code>raw</code> and <code>fit</code> as <code>.lock</code> output file.</li> </ol>"},{"location":"examples/example9_3/#load-the-data-into-the-notebook-plugin-of-spectrafit","title":"Load the data into the notebook-plugin of <code>SpectraFit</code>\u00b6","text":"<p>In this particular name the default output name is <code>example9_3.lock</code> and the default output directory is <code>./result.*</code>. The default output directory can be changed via the keyword <code>fname</code>.</p>"},{"location":"examples/example9_3/#define-the-fitting-model-without-plotting-the-results","title":"Define the fitting model without plotting the results\u00b6","text":""},{"location":"examples/example9_3/#saving-the-results-as-dataframes","title":"Saving the results as dataframes\u00b6","text":"<p>Results of the dataframe can be saved as a <code>.csv</code> file. The original, the final fitted, current used optional pre processed data can be saved as a <code>.csv</code> file as well.</p> <p>Currently, the following dataframes can be saved:</p> <ul> <li><code>df_org</code>: The original data</li> <li><code>df_act</code>: The actually used data, which can be different from the original data, if the optional pre processing is used.</li> <li><code>df_fit</code>: The fitted data</li> <li><code>df_peaks</code>: The fit results of each peak component</li> </ul>"},{"location":"examples/example9_3/#showning-peak-components-as-a-table","title":"Showning peak components as a table\u00b6","text":"<p>For each peak component, the following information can be shown:</p>"},{"location":"examples/example9_4/","title":"RIXS Map Visualization","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nfrom spectrafit.plugins.rixs_visualizer import RIXSApp\nfrom spectrafit.api.rixs_model import SizeRatioAPI\n</pre> import numpy as np from spectrafit.plugins.rixs_visualizer import RIXSApp from spectrafit.api.rixs_model import SizeRatioAPI In\u00a0[2]: Copied! <pre>from typing import Tuple\n\n\ndef sin2_as_rixsmap() -&gt; Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Create a RIXS map with a sinusoidal intensity.\"\"\"\n    incident_energy = np.linspace(0, 10, 100)\n    emission_energy = np.linspace(0, 10, 100)\n    grid = np.meshgrid(incident_energy, emission_energy)\n    rixs_map = np.sin(grid[0]) * np.sin(grid[1])\n    return incident_energy, emission_energy, rixs_map\n</pre> from typing import Tuple   def sin2_as_rixsmap() -&gt; Tuple[np.ndarray, np.ndarray, np.ndarray]:     \"\"\"Create a RIXS map with a sinusoidal intensity.\"\"\"     incident_energy = np.linspace(0, 10, 100)     emission_energy = np.linspace(0, 10, 100)     grid = np.meshgrid(incident_energy, emission_energy)     rixs_map = np.sin(grid[0]) * np.sin(grid[1])     return incident_energy, emission_energy, rixs_map In\u00a0[3]: Copied! <pre>_app = RIXSApp(\n    incident_energy=sin2_as_rixsmap()[0],\n    emission_energy=sin2_as_rixsmap()[1],\n    rixs_map=sin2_as_rixsmap()[2],\n    # For avoiding issues with a too large inline visualization, please downsizing the RIXS map size\n    size=SizeRatioAPI(size=(200, 200)),\n    mode=\"inline\",\n    jupyter_dash=True,\n)\n</pre> _app = RIXSApp(     incident_energy=sin2_as_rixsmap()[0],     emission_energy=sin2_as_rixsmap()[1],     rixs_map=sin2_as_rixsmap()[2],     # For avoiding issues with a too large inline visualization, please downsizing the RIXS map size     size=SizeRatioAPI(size=(200, 200)),     mode=\"inline\",     jupyter_dash=True, ) In\u00a0[4]: Copied! <pre>_app.app_run()\n</pre> _app.app_run() <pre>/home/runner/work/spectrafit/spectrafit/.venv/lib/python3.10/site-packages/dash/dash.py:556: UserWarning:\n\nJupyterDash is deprecated, use Dash instead.\nSee https://dash.plotly.com/dash-in-jupyter for more details.\n\n</pre>"},{"location":"examples/example9_4/#test-of-the-rixs-map-visualization-tool","title":"Test of the RIXS Map visualization tool\u00b6","text":"<p>For visualization of the RIXS map, we use the <code>RixsMap</code> class. The class is initialized with the RIXS map data and the energy axis. The energy axis is a list of two elements: the first element is the energy axis of the RIXS map, the second element is the energy axis of the RIXS map after the energy loss correction. The energy axis is in units of eV.</p>"},{"location":"examples/example9_4/#initialization","title":"Initialization\u00b6","text":"<p>For visualization of a RIXS map, we use the <code>RIXSApp</code> class. The class only requires the incident and emission energy as 1D arrays. The RIXS map itself has to be stored as a 2D meshgrid of intensities. By default the RIXS map is assumed to be in units of eV.</p> <p>Information \"it is an early version of the RIXS map visualization tool\"</p> <p>Note:</p> <p>In this example, a reference function is defined, which returns all three required arrays for the <code>RixsMap</code> class. The first two arrays are the one-dimensional energy ranges of the incident and emission energies. The third array is the two-dimensional RIXS map.</p>"},{"location":"examples/example9_4/#what-is-needed-to-run-similiar-example","title":"What is needed to run similiar example?\u00b6","text":"<p>To run this example, you need to have the following three target arrays:</p> <ol> <li><code>incident_energy</code> axis as 1D array</li> <li><code>emission_energy</code> axis as 1D array</li> <li><code>rixs_map</code> as 2D array</li> </ol> <p>In the example above, <code>sin2_as_rixsmap</code> is used as reference function to generate all three arrays, but you can use any other function that returns the three arrays or load them from a file, like:</p> <pre>import pickle\nwith open('rixs_map.pickle', 'rb') as f:\n    incident_energy, emission_energy, rixs_map = pickle.load(f)\n\n_app = RIXSApp(incident_energy, emission_energy, rixs_map)\n</pre> <p>or:</p> <pre>import pandas as pd\n\n_app = RIXSApp(\n    incident_energy=pd.read_csv('incident_energy.csv', index_col=0).values,\n    emission_energy=pd.read_csv('emission_energy.csv', index_col=0).values,\n    # Loaded values has to be reshaped to 2D array\n    rixs_map=pd.read_csv('rixs_map.csv', index_col=0).values.reshape(100, 100)\n)\n</pre> <p>The example above assumes that the data is stored in the <code>csv</code> format and the first column is the index column. The <code>index_col=0</code> argument is used to skip the first column.</p>"},{"location":"examples/example9_5/","title":"Using Converters as Module","text":"In\u00a0[1]: Copied! <pre>from spectrafit.plugins.pkl_converter import PklConverter\nfrom spectrafit.plugins.pkl_visualizer import PklVisualizer\n</pre> from spectrafit.plugins.pkl_converter import PklConverter from spectrafit.plugins.pkl_visualizer import PklVisualizer In\u00a0[2]: Copied! <pre>from spectrafit.plugins.rixs_converter import RIXSConverter\nfrom spectrafit.plugins.rixs_visualizer import RIXSVisualizer\n</pre> from spectrafit.plugins.rixs_converter import RIXSConverter from spectrafit.plugins.rixs_visualizer import RIXSVisualizer"},{"location":"examples/example9_5/#about-rixs-plugins","title":"About RIXS Plugins\u00b6","text":""},{"location":"examples/example9_5/#about-pkl-converter-and-visualizer","title":"About PKL Converter and Visualizer\u00b6","text":""},{"location":"examples/example9_5/#about-rixs-converter-and-visualizer","title":"About RIXS Converter and Visualizer\u00b6","text":""},{"location":"examples/example9_5/#example-code-as-a-python-module","title":"Example code as a Python module:\u00b6","text":"<pre>from spectrafit.plugins.pkl_converter import PklConverter\n    from spectrafit.plugins.rixs_converter import RIXSConverter\n    from spectrafit.plugins.rixs_visualizer import RIXSApp\n\n    pkl_data = PklConverter.convert(\n        infile=\"test.pkl\",\n    )\n    PklConverter().save(\n        data=pkl_data,\n        outfile=\"test_rixs.npz\",\n        export_format=\"npz\",\n    )\n    rixs_data = RIXSConverter.convert(\n        infile=\"test_rixs.npz\",\n    )\n    RIXSApp(**rixs_data).app_run()\n</pre>"},{"location":"examples/example9_6/","title":"RIXS Global-Fitting in Jupyter","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nfrom spectrafit.plugins import notebook as nb\n</pre> import pandas as pd from spectrafit.plugins import notebook as nb In\u00a0[2]: Copied! <pre>df = pd.read_csv(\n    \"https://raw.githubusercontent.com/Anselmoo/spectrafit/1cda9e0d93f9d0536380075e75fac50459555b99/Examples/data_global.csv\"\n)\n</pre> df = pd.read_csv(     \"https://raw.githubusercontent.com/Anselmoo/spectrafit/1cda9e0d93f9d0536380075e75fac50459555b99/Examples/data_global.csv\" ) In\u00a0[3]: Copied! <pre>spn = nb.SpectraFitNotebook(\n    df=df, x_column=\"energy\", y_column=[\"y_1\", \"y_2\", \"y_3\"], fname=\"example9_6\"\n)\n</pre> spn = nb.SpectraFitNotebook(     df=df, x_column=\"energy\", y_column=[\"y_1\", \"y_2\", \"y_3\"], fname=\"example9_6\" ) In\u00a0[4]: Copied! <pre>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n            \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 2., \"min\": 0, \"vary\": True, \"value\": 2},\n            \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},\n        }\n    },\n     {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},\n            \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},\n        }\n    },\n]\nspn.solver_model(initial_model=initial_model, show_plot=True, show_metric=False)\n</pre> initial_model = [     {         \"pseudovoigt\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},             \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},             \"fwhml\": {\"max\": 0.2, \"min\": 0.01, \"vary\": True, \"value\": 0.1},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 2., \"min\": 0, \"vary\": True, \"value\": 2},             \"fwhmg\": {\"max\": 0.3, \"min\": 0.02, \"vary\": True, \"value\": 0.1},         }     },      {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 1.5, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.2},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 3.5, \"min\": 2, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.5, \"min\": 3, \"vary\": True, \"value\": 2.5},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     },     {         \"gaussian\": {             \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 0.3},             \"center\": {\"max\": 4.7, \"min\": 3.7, \"vary\": True, \"value\": 3.8},             \"fwhmg\": {\"max\": 0.4, \"min\": 0.02, \"vary\": True, \"value\": 0.3},         }     }, ] spn.solver_model(initial_model=initial_model, show_plot=True, show_metric=False) <pre>/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:342: UserWarning:\n\n\n\n## WARNING #########################\nUncertainties could not be estimated\n####################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ########################################################################################\nThe parameter 'pseudovoigt_amplitude_1_1' is at its boundary and uncertainties cannot be estimated!\n###################################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ####################################################################################\nThe parameter 'pseudovoigt_fwhmg_1_1' is at its boundary and uncertainties cannot be estimated!\n###############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ####################################################################################\nThe parameter 'pseudovoigt_fwhml_1_1' is at its boundary and uncertainties cannot be estimated!\n###############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING #################################################################################\nThe parameter 'gaussian_fwhmg_2_1' is at its boundary and uncertainties cannot be estimated!\n############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING #################################################################################\nThe parameter 'gaussian_fwhmg_3_1' is at its boundary and uncertainties cannot be estimated!\n############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'gaussian_center_4_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING #################################################################################\nThe parameter 'gaussian_fwhmg_4_1' is at its boundary and uncertainties cannot be estimated!\n############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING #################################################################################\nThe parameter 'gaussian_fwhmg_5_1' is at its boundary and uncertainties cannot be estimated!\n############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ##################################################################################\nThe parameter 'gaussian_center_6_1' is at its boundary and uncertainties cannot be estimated!\n#############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING #################################################################################\nThe parameter 'gaussian_fwhmg_6_1' is at its boundary and uncertainties cannot be estimated!\n############################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ########################################################################################\nThe parameter 'pseudovoigt_amplitude_1_2' is at its boundary and uncertainties cannot be estimated!\n###################################################################################################\n\n\n/home/runner/work/spectrafit/spectrafit/spectrafit/report.py:366: UserWarning:\n\n\n\n## WARNING ########################################################################################\nThe parameter 'pseudovoigt_amplitude_1_3' is at its boundary and uncertainties cannot be estimated!\n###################################################################################################\n\n\n</pre>"},{"location":"examples/example9_6/#global-fitting-of-a-series-of-spectra","title":"Global Fitting of a series of spectra\u00b6","text":""},{"location":"examples/example9_6/#this-example-shows-how-to-fit-a-series-of-spectra-with-a-common-model","title":"This example shows how to fit a series of spectra with a common model\u00b6","text":"<p>To activate the global fitting routine, <code>y_column</code> has to be defined to a list of column names and not a single column name. The list of column names will be selected for the fitting.</p>"},{"location":"examples/example9_6/#defining-the-model-as-a-function-of-the-parameters","title":"Defining the model as a function of the parameters\u00b6","text":"<p>The <code>initial model</code> is defined as a function of the parameters as for 2D fitting.</p>"},{"location":"examples/example9_6/#note","title":"Note:\u00b6","text":"<p>Currently, the global fitting routine provides each spectrum as its own. This also allows to use other color schemes.</p>"},{"location":"interface/features/","title":"Features","text":""},{"location":"interface/features/#statistic","title":"Statistic","text":""},{"location":"interface/features/#pre-analysis","title":"Pre-Analysis","text":"<p>As part of the fitting procedure in <code>SpectraFit</code>, the initial data will be first analyzed based on standard statistic. The standard statistics includes:</p> <ul> <li> Number of points in the data array</li> <li> The mean value of the data array</li> <li> The standard deviation of the data array</li> <li> The minimum value of the data array</li> <li> The maximum value of the data array</li> <li> The percentage based contribution of the data array</li> </ul> <p>The evaluation of the standard statistics is performed via pandas-describe; see also the Command Line Interface for more information in the API-section.</p> Pre-Analysis 0 1 count 611.00 611.00 mean 3.48 0.06 std 2.94 0.12 min -1.60 0.00 10% -0.58 0.00 20% 0.43 0.00 30% 1.45 0.00 40% 2.47 0.01 50% 3.48 0.02 60% 4.50 0.03 70% 5.52 0.06 80% 6.53 0.10 90% 7.55 0.14 max 8.57 1.00"},{"location":"interface/features/#fit-statistic","title":"Fit Statistic","text":"<p>The fit statistic provides standard statistics of the data based on the fit report module of lmfit. So following standard insights are provided by lmfit:</p> <ul> <li>used fitting method</li> <li>number of evaluated function</li> <li>number of data points</li> <li>number of variables</li> <li>chi-square</li> <li>reduced chi-square</li> <li>Akaike info criteria is an estimator of prediction error</li> <li>Bayesian info criteria is an estimator of model validity</li> </ul> <p>This information will be also saved and extended in the <code>json</code>-output.</p>"},{"location":"interface/features/#variable-analysis","title":"Variable Analysis","text":"<p>In addition to Fit Statistic, the variable analysis of <code>lmfit</code> provides a more detail look on the fitting result of each peak's attribute. In case of a pseudovoigt distribution, the attributes consists of:</p> <ol> <li>Amplitude</li> <li>Center</li> <li>Full Width at Half Maximum of the gaussian distribution</li> <li>Full Width at Half Maximum of the lorentzian distribution</li> </ol> <p>And every of these attributes has to be analyzed according to the:</p> <ol> <li>Best Value</li> <li>Initial Value</li> <li>Absolute Error</li> <li>Relative Error</li> </ol> Variable Analysis variable name value absolute error relative error init value model value pseudovoigt_amplitude_1 0.16403603 \u00b1 0.28617283 174.46% 1 0.164036 pseudovoigt_center_1 0.03500058 \u00b1 0.07534815 215.28% 0 0.03500058 pseudovoigt_fwhmg_1 0.06876795 \u00b1 0.04790400 69.66% 0.02 0.06876795 pseudovoigt_fwhml_1 0.09252389 \u00b1 0.03757126 40.61% 0.01 0.09252389 pseudovoigt_amplitude_2 0.09740402 \u00b1 0.12049276 123.70% 1 0.09740402 pseudovoigt_center_2 -0.01805236 \u00b1 0.02098358 116.24% 0 -0.01805236 pseudovoigt_fwhmg_2 0.04334471 \u00b1 0.03017987 69.63% 0.02 0.04334471 pseudovoigt_fwhml_2 0.09989511 \u00b1 0.07669355 76.77% 0.01 0.09989511 constant_amplitude_3 0.03676873 \u00b1 0.00277773 7.55% 1 0.03676873 gaussian_amplitude_4 0.01411288 \u00b1 0.18946470 1342.49% 1 0.01411288 gaussian_center_4 7.8507e-04 \u00b1 0.07239645 9221.69% 0 0.0007850674 gaussian_fwhmg_4 0.04893397 \u00b1 0.27055202 552.89% 0.02 0.04893397"},{"location":"interface/features/#correlation-analysis","title":"Correlation Analysis","text":"<p>The Variable Analysis will be completed by the two kinds of correlation analysis. In the first case, the correlation analysis of <code>lmfit</code> is used to analyze every peak's attributes against each other. In contrast to the default values of <code>lmfit</code>, the threshold of the correlation analysis is set to 0.0; please check also the Performing Fits and Analyzing Outputs in <code>lmfit</code></p> <p>In the second case, the linear correlation analysis of <code>pandas-module corr</code> is used to generally analyze the fit results in the concept of the dataframes. In more detail, a linear pearson correlation will be performed between each components in the dataframe, which normally consists of:</p> <ol> <li>Energy (1D-array)</li> <li>Intensity (1D-array)</li> <li>Residual (1D-array)</li> <li>Fit (1D-array)</li> <li>Single components of the fit as multiple variables (1D-array)</li> </ol> <p>This analysis should give insights, if the fit model can be further simplified as a result of a superposition of the components, see also the Wikipedia article about Correlation.</p> Overall Correlation Analysis energy intensity residual fit pseudovoigt_1 pseudovoigt_2 constant_3 gaussian_4 energy 1.00 -0.31 0.12 -0.23 -0.21 -0.25 nan -0.10 intensity -0.31 1.00 0.05 0.90 0.88 0.85 nan 0.61 residual 0.12 0.05 1.00 0.47 0.47 0.39 nan 0.39 fit -0.23 0.90 0.47 1.00 0.98 0.92 nan 0.71 pseudovoigt_1 -0.21 0.88 0.47 0.98 1.00 0.85 nan 0.65 pseudovoigt_2 -0.25 0.85 0.39 0.92 0.85 1.00 nan 0.56 constant_3 nan nan nan nan nan nan nan nan gaussian_4 -0.10 0.61 0.39 0.71 0.65 0.56 nan 1.00"},{"location":"interface/features/#confidence-intervals","title":"Confidence Intervals","text":"<p><code>SpectraFinder</code> provides the possibility to calculate the confidence intervals. This is an optional feature in <code>SpectraFinder</code> provided by the <code>lmfit</code> package to further investigated the statistical legality of the fit.</p> Confidence Intervals 99.73% 95.45% 68.27% BEST 68.27% 95.45% 99.73% pseudovoigt_amplitude_1 -inf -inf -inf 0.16404 +inf +inf +inf pseudovoigt_center_1 -inf -inf -inf 0.03500 +inf +inf +inf pseudovoigt_fwhmg_1 -inf -inf -inf 0.06877 +inf +inf +inf pseudovoigt_fwhml_1 -inf -inf -inf 0.09252 +inf +inf +inf pseudovoigt_amplitude_2 -inf -inf -inf 0.09740 +inf +inf +inf pseudovoigt_center_2 -inf -inf -inf -0.01805 +inf +inf +inf pseudovoigt_fwhmg_2 -inf -inf -inf 0.04334 +inf +inf +inf pseudovoigt_fwhml_2 -inf -inf -inf 0.09990 +inf +inf +inf constant_amplitude_3 -inf -inf -inf 0.03677 +inf +inf +inf gaussian_amplitude_4 -inf -inf -inf 0.01411 +inf +inf +inf gaussian_center_4 -inf -inf -inf 0.00079 +inf +inf +inf gaussian_fwhmg_4 -inf -inf -inf 0.04893 +inf +inf +inf <p>About the trace in confidence intervals</p> <p>The trace in the confidence intervals is the sum of the weights of the diagonal elements of the confidence matrix. lmfit allows calculating the trace of the confidence matrix. The export is a nested dictionary in a <code>dictionary</code>, where the arrays are saved as <code>array objects</code> and not as a <code>list</code>. The problem is that these <code>arrays</code> are not pickable, so they cannot be saved in a <code>json</code>-file. So please never use trace!=True in the input file.</p>"},{"location":"interface/features/#plotting","title":"Plotting","text":"<p>For the plotting of the results, the <code>SpectraFinder</code> provides the possibility to plot both the fit results and the residuals. A detail description of the plotting options is available in the API-section.</p>"},{"location":"interface/features/#saving-the-results-as-csv-and-json-files","title":"Saving the Results as CSV- and JSON-files","text":"<p><code>SpectraFinder</code> automatically saves the fit results and the statistics in file format. By default, the results starts with <code>fit_results_*.*</code>, but can be individually labeled via <code>-o</code> command or in the input file. Furthermore, four different types of output files will be generated</p> <ol> <li>Fit results as <code>*_fit.csv</code> file, which combines the original data with the     fit, residuals, and the single contribution.</li> <li>Fit errors as <code>*_errors.csv</code> file, which contains the value and fit errors     for each parameter. The saved report is identically to printed report of     Variable Analysis.</li> <li>Fit correlation as <code>*_correlation.csv</code> file, which contains the correlation     analysis of the dataframe. The saved report is identically to printed report     of Correlation Analysis.</li> <li> <p>Fit summary as <code>*_summary.json</code> file, which contains all results of the fit     project including the meta-data. The overall goal is to save the results     in a NoSQL-format, so that every fit becomes an unique fitting-project.</p> <p>A closer look on the output file format</p> <p>The fitting-project consists of the following parts:</p> <ol> <li>The input parameter including the file-name of the original data.      JSON<pre><code>\"infile\": \"reference_data.txt\",\n\"outfile\": \"fit_results\",\n\"input\": \"spectrafit/test/test_input_2.json\",\n\"oversampling\": false,\n\"energy_start\": 0,\n\"energy_stop\": 8,\n\"smooth\": 0,\n\"shift\": 0,\n\"column\": [\n    0,\n    1\n],\n\"separator\": \"\\t\",\n\"decimal\": \".\",\n\"header\": null,\n\"noplot\": true,\n\n\"verbose\": 1,\n</code></pre></li> <li>The project-specific meta-data.      JSON<pre><code>  \"description\": {\n  \"project_name\": \"Template\",\n  \"project_details\": \"Template for testing\",\n  \"keywords\": [\n      \"2D-Spectra\",\n      \"fitting\",\n      \"curve-fitting\",\n      \"peak-fitting\",\n      \"spectrum\"\n  ]\n},\n</code></pre>      The meta-data will be automatically extended by timestamp, name      of the user (username), name of system of the user      (system), and unique ID. For getting the username and the name      of the used system, the built-in function <code>getpass.getuser()</code>      and <code>socket.gethostname()</code> are used.      JSON<pre><code>{\n\"timestamp\": \"2021-08-22 12:33:26\",\n\"ID\": \"89b1a4ef-320a-4ac0-80da-e8d946b00e13\",\n\"host_info\": \"e74490816920d147adc2315b45c4c6ce05e99ae9e09e34d2a263e2e9da861ffd\",\n\"used_version\": \"0.3.0\",\n}\n</code></pre></li> <li>The <code>lmfit</code>-settings.      JSON<pre><code>  \"minimizer\": {\n        \"nan_policy\": \"propagate\",\n        \"calc_covar\": true\n    },\n  \"optimizer\": {\n        \"max_nfev\": 1,\n        \"method\": \"leastsq\"\n    },\n  \"report\": {\n        \"min_correl\": 0.0\n    },\n</code></pre></li> <li>The initial peak definitions.</li> <li>The results are saved as dictionary-list and can be imported by  pandas.DataFrame.from_dict. For example: JSON<pre><code>    \"data_statistic\": {\n    \"0\": {\n        \"count\": 611.0,\n        \"mean\": 3.483333333333315,\n        \"std\": 2.942079763251376,\n        \"min\": -1.6,\n        \"10%\": -0.5833333333333369,\n        \"20%\": 0.433333333333326,\n        \"30%\": 1.4499999999999895,\n        \"40%\": 2.466666666666652,\n        \"50%\": 3.483333333333315,\n        \"60%\": 4.499999999999979,\n        \"70%\": 5.516666666666641,\n        \"80%\": 6.533333333333305,\n        \"90%\": 7.549999999999968,\n        \"max\": 8.566666666666633\n    },\n    \"1\": {\n        \"count\": 611.0,\n        \"mean\": 0.0603440425183391,\n        \"std\": 0.12314108298811662,\n        \"min\": 0.0,\n        \"10%\": 0.00015819900201364986,\n        \"20%\": 0.0015617780277680387,\n        \"30%\": 0.0045243182103807894,\n        \"40%\": 0.010958904109588984,\n        \"50%\": 0.016245522651620947,\n        \"60%\": 0.02770646393851211,\n        \"70%\": 0.059617904082309055,\n        \"80%\": 0.10112180177353332,\n        \"90%\": 0.13932494130255624,\n        \"max\": 1.0\n    }\n},\n</code></pre> becomes again the result of pre-analysis:</li> </ol> 0 1 count 611.00 611.00 mean 3.48 0.06 std 2.94 0.12 min -1.60 0.00 10% -0.58 0.00 20% 0.43 0.00 30% 1.45 0.00 40% 2.47 0.01 50% 3.48 0.02 60% 4.50 0.03 70% 5.52 0.06 80% 6.53 0.10 90% 7.55 0.14 max 8.57 1.00 <p>This is the one of the universal concepts of <code>SpectraFit</code> to to keep the results of the fit in a universal format, so that it can be switch between dictionary representation and dataframe representation.</p> </li> </ol> Fit summary in JSON format <p>This is an extended example of the fit summary in JSON format to highlight the complexity of the fitting procedure. JSON<pre><code>{\n  \"infile\": \"spectrafit/test/rixs_fecl4.txt\",\n  \"outfile\": \"fit_results\",\n  \"input\": \"spectrafit/test/fitting_input.json\",\n  \"oversampling\": false,\n  \"energy_start\": 0,\n  \"energy_stop\": 8,\n  \"smooth\": 0,\n  \"shift\": 0,\n  \"column\": [0, 1],\n  \"separator\": \"\\t\",\n  \"decimal\": \".\",\n  \"header\": null,\n  \"noplot\": true,\n\n  \"verbose\": 1,\n  \"description\": {\n    \"project_name\": \"Template\",\n    \"project_details\": \"Template for testing\",\n    \"keywords\": [\n      \"2D-Spectra\",\n      \"fitting\",\n      \"curve-fitting\",\n      \"peak-fitting\",\n      \"spectrum\"\n    ]\n  },\n  \"minimizer\": {\n    \"nan_policy\": \"propagate\",\n    \"calc_covar\": true\n  },\n  \"optimizer\": {\n    \"max_nfev\": 1000,\n    \"method\": \"leastsq\"\n  },\n  \"report\": {\n    \"min_correl\": 0.0\n  },\n  \"conf_interval\": {\n    \"p_names\": null,\n    \"sigmas\": null,\n    \"trace\": false,\n    \"maxiter\": 200,\n    \"verbose\": 1,\n    \"prob_func\": null\n  },\n  \"peaks\": {\n    \"1\": {\n      \"pseudovoigt\": {\n        \"amplitude\": {\n          \"max\": 2,\n          \"min\": 0,\n          \"vary\": true,\n          \"value\": 1\n        },\n        \"center\": {\n          \"max\": 2,\n          \"min\": -2,\n          \"vary\": true,\n          \"value\": 0\n        },\n        \"fwhmg\": {\n          \"max\": 0.1,\n          \"min\": 0.02,\n          \"vary\": true,\n          \"value\": 0.01\n        },\n        \"fwhml\": {\n          \"max\": 0.1,\n          \"min\": 0.01,\n          \"vary\": true,\n          \"value\": 0.01\n        }\n      }\n    },\n    \"2\": {\n      \"pseudovoigt\": {\n        \"amplitude\": {\n          \"max\": 2,\n          \"min\": 0,\n          \"vary\": true,\n          \"value\": 1\n        },\n        \"center\": {\n          \"max\": 2,\n          \"min\": -2,\n          \"vary\": true,\n          \"value\": 0\n        },\n        \"fwhmg\": {\n          \"max\": 0.1,\n          \"min\": 0.02,\n          \"vary\": true,\n          \"value\": 0.01\n        },\n        \"fwhml\": {\n          \"max\": 0.1,\n          \"min\": 0.01,\n          \"vary\": true,\n          \"value\": 0.01\n        }\n      }\n    },\n    \"3\": {\n      \"constant\": {\n        \"amplitude\": {\n          \"max\": 2,\n          \"min\": 0.01,\n          \"vary\": true,\n          \"value\": 1\n        }\n      }\n    },\n    \"4\": {\n      \"gaussian\": {\n        \"amplitude\": {\n          \"max\": 2,\n          \"min\": 0,\n          \"vary\": true,\n          \"value\": 1\n        },\n        \"center\": {\n          \"max\": 2,\n          \"min\": -2,\n          \"vary\": true,\n          \"value\": 0\n        },\n        \"fwhmg\": {\n          \"max\": 0.1,\n          \"min\": 0.02,\n          \"vary\": true,\n          \"value\": 0.01\n        }\n      }\n    }\n  },\n  \"timestamp\": \"2021-08-19 21:08:57\",\n  \"ID\": \"ce43d306-43e4-4350-9f09-fd1b13064f39\",\n  \"host_info\": \"username\",\n  \"host_info\": \"e74490816920d147adc2315b45c4c6ce05e99ae9e09e34d2a263e2e9da861ffd\",\n  \"used_version\": \"0.2.0\",\n  \"data_statistic\": {\n    \"0\": {\n      \"count\": 611.0,\n      \"mean\": 3.483333333333315,\n      \"std\": 2.942079763251376,\n      \"min\": -1.6,\n      \"10%\": -0.5833333333333369,\n      \"20%\": 0.433333333333326,\n      \"30%\": 1.4499999999999895,\n      \"40%\": 2.466666666666652,\n      \"50%\": 3.483333333333315,\n      \"60%\": 4.499999999999979,\n      \"70%\": 5.516666666666641,\n      \"80%\": 6.533333333333305,\n      \"90%\": 7.549999999999968,\n      \"max\": 8.566666666666633\n    },\n    \"1\": {\n      \"count\": 611.0,\n      \"mean\": 0.0603440425183391,\n      \"std\": 0.12314108298811662,\n      \"min\": 0.0,\n      \"10%\": 0.00015819900201364986,\n      \"20%\": 0.0015617780277680387,\n      \"30%\": 0.0045243182103807894,\n      \"40%\": 0.010958904109588984,\n      \"50%\": 0.016245522651620947,\n      \"60%\": 0.02770646393851211,\n      \"70%\": 0.059617904082309055,\n      \"80%\": 0.10112180177353332,\n      \"90%\": 0.13932494130255624,\n      \"max\": 1.0\n    }\n  },\n  \"fit_insights\": {\n    \"configurations\": {\n      \"fitting_method\": \"leastsq\",\n      \"function_evals\": 92,\n      \"data_points\": 577,\n      \"variable_names\": [\n        \"pseudovoigt_amplitude_1\",\n        \"pseudovoigt_center_1\",\n        \"pseudovoigt_fwhmg_1\",\n        \"pseudovoigt_fwhml_1\",\n        \"pseudovoigt_amplitude_2\",\n        \"pseudovoigt_center_2\",\n        \"pseudovoigt_fwhmg_2\",\n        \"pseudovoigt_fwhml_2\",\n        \"constant_amplitude_3\",\n        \"gaussian_amplitude_4\",\n        \"gaussian_center_4\",\n        \"gaussian_fwhmg_4\"\n      ],\n      \"variable_numbers\": 12,\n      \"degree_of_freedom\": 565\n    },\n    \"statistics\": {\n      \"chi_square\": 2.149830777028136,\n      \"reduced_chi_square\": 0.0038050102248285596,\n      \"akaike_information\": -3202.8454593711404,\n      \"bayesian_information\": -3150.551352173043\n    },\n    \"variables\": {\n      \"pseudovoigt_amplitude_1\": {\n        \"init_value\": 1,\n        \"model_value\": 0.16403602584115073,\n        \"best_value\": 0.16403602584115073,\n        \"error_relative\": 0.28617283308359887,\n        \"error_absolute\": 174.45730693373602\n      },\n      \"pseudovoigt_center_1\": {\n        \"init_value\": 0,\n        \"model_value\": 0.03500058482452051,\n        \"best_value\": 0.03500058482452051,\n        \"error_relative\": 0.07534814694716585,\n        \"error_absolute\": 215.27682273005587\n      },\n      \"pseudovoigt_fwhmg_1\": {\n        \"init_value\": 0.02,\n        \"model_value\": 0.0687679507938458,\n        \"best_value\": 0.0687679507938458,\n        \"error_relative\": 0.04790400069682786,\n        \"error_absolute\": 69.66035797756372\n      },\n      \"pseudovoigt_fwhml_1\": {\n        \"init_value\": 0.01,\n        \"model_value\": 0.09252389394106236,\n        \"best_value\": 0.09252389394106236,\n        \"error_relative\": 0.037571255043319145,\n        \"error_absolute\": 40.607083687217056\n      },\n      \"pseudovoigt_amplitude_2\": {\n        \"init_value\": 1,\n        \"model_value\": 0.09740402120893221,\n        \"best_value\": 0.09740402120893221,\n        \"error_relative\": 0.12049275689025189,\n        \"error_absolute\": 123.7040887991618\n      },\n      \"pseudovoigt_center_2\": {\n        \"init_value\": 0,\n        \"model_value\": -0.018052359245206206,\n        \"best_value\": -0.018052359245206206,\n        \"error_relative\": 0.02098357900187265,\n        \"error_absolute\": 116.23732231810547\n      },\n      \"pseudovoigt_fwhmg_2\": {\n        \"init_value\": 0.02,\n        \"model_value\": 0.043344705776687614,\n        \"best_value\": 0.043344705776687614,\n        \"error_relative\": 0.030179868797834665,\n        \"error_absolute\": 69.62757794071015\n      },\n      \"pseudovoigt_fwhml_2\": {\n        \"init_value\": 0.01,\n        \"model_value\": 0.09989511131863486,\n        \"best_value\": 0.09989511131863486,\n        \"error_relative\": 0.0766935496518902,\n        \"error_absolute\": 76.77407696885308\n      },\n      \"constant_amplitude_3\": {\n        \"init_value\": 1,\n        \"model_value\": 0.03676872733249155,\n        \"best_value\": 0.03676872733249155,\n        \"error_relative\": 0.0027777331216664375,\n        \"error_absolute\": 7.554607741921567\n      },\n      \"gaussian_amplitude_4\": {\n        \"init_value\": 1,\n        \"model_value\": 0.014112879601465012,\n        \"best_value\": 0.014112879601465012,\n        \"error_relative\": 0.18946469610443273,\n        \"error_absolute\": 1342.494951099597\n      },\n      \"gaussian_center_4\": {\n        \"init_value\": 0,\n        \"model_value\": 0.000785067433615172,\n        \"best_value\": 0.000785067433615172,\n        \"error_relative\": 0.0723964536938497,\n        \"error_absolute\": 9221.686009884514\n      },\n      \"gaussian_fwhmg_4\": {\n        \"init_value\": 0.02,\n        \"model_value\": 0.0489339673857355,\n        \"best_value\": 0.0489339673857355,\n        \"error_relative\": 0.27055202071590273,\n        \"error_absolute\": 552.8920608116684\n      }\n    },\n    \"errorbars\": {},\n    \"correlations\": {\n      \"pseudovoigt_amplitude_1\": {\n        \"pseudovoigt_center_1\": -0.9862283106649913,\n        \"pseudovoigt_fwhmg_1\": 0.08087768591070482,\n        \"pseudovoigt_fwhml_1\": 0.026422859895268734,\n        \"pseudovoigt_amplitude_2\": -0.8508056947473775,\n        \"pseudovoigt_center_2\": 0.443720894718587,\n        \"pseudovoigt_fwhmg_2\": 0.46503877490597423,\n        \"pseudovoigt_fwhml_2\": -0.7971320712781913,\n        \"constant_amplitude_3\": -0.19256163835611795,\n        \"gaussian_amplitude_4\": -0.9391516417433717,\n        \"gaussian_center_4\": 0.4275708026546227\n      },\n      \"pseudovoigt_center_1\": {\n        \"pseudovoigt_fwhmg_1\": 0.016337719047078703,\n        \"pseudovoigt_fwhml_1\": 0.09199213704177446,\n        \"pseudovoigt_amplitude_2\": 0.7845675730452338,\n        \"pseudovoigt_center_2\": -0.5671057830051938,\n        \"pseudovoigt_fwhmg_2\": -0.543356574051609,\n        \"pseudovoigt_fwhml_2\": 0.7838468315613173,\n        \"constant_amplitude_3\": 0.1908234141503389,\n        \"gaussian_amplitude_4\": 0.9606615151849531,\n        \"gaussian_center_4\": -0.45981680639412886\n      },\n      \"pseudovoigt_fwhmg_1\": {\n        \"pseudovoigt_fwhml_1\": 0.9707589530283234,\n        \"pseudovoigt_amplitude_2\": -0.12947342434289133,\n        \"pseudovoigt_center_2\": -0.22593963910738113,\n        \"pseudovoigt_fwhmg_2\": -0.041441070112167695,\n        \"pseudovoigt_fwhml_2\": -0.22029948420194614,\n        \"constant_amplitude_3\": -0.08828608501696038,\n        \"gaussian_amplitude_4\": -0.02662835781007091,\n        \"gaussian_center_4\": 0.11186439414852514\n      },\n      \"pseudovoigt_fwhml_1\": {\n        \"pseudovoigt_amplitude_2\": -0.13806698462988234,\n        \"pseudovoigt_center_2\": -0.3754173331238591,\n        \"pseudovoigt_fwhmg_2\": -0.14152665304317025,\n        \"pseudovoigt_fwhml_2\": -0.16783283765319543,\n        \"constant_amplitude_3\": -0.07658241281626063,\n        \"gaussian_amplitude_4\": 0.05913347928634629,\n        \"gaussian_center_4\": 0.06599377246402101\n      },\n      \"pseudovoigt_amplitude_2\": {\n        \"pseudovoigt_center_2\": 0.01906524917689979,\n        \"pseudovoigt_fwhmg_2\": 0.06033478892009533,\n        \"pseudovoigt_fwhml_2\": 0.44749434233368474,\n        \"constant_amplitude_3\": 0.18484185277297382,\n        \"gaussian_amplitude_4\": 0.6203122316031827,\n        \"gaussian_center_4\": 0.0556317158685396\n      },\n      \"pseudovoigt_center_2\": {\n        \"pseudovoigt_fwhmg_2\": 0.8392271456101567,\n        \"pseudovoigt_fwhml_2\": -0.5198485790152048,\n        \"constant_amplitude_3\": -0.09631860290887163,\n        \"gaussian_amplitude_4\": -0.6669343985978409,\n        \"gaussian_center_4\": 0.6369311212860583\n      },\n      \"pseudovoigt_fwhmg_2\": {\n        \"pseudovoigt_fwhml_2\": -0.7677038773609103,\n        \"constant_amplitude_3\": -0.04615140867123564,\n        \"gaussian_amplitude_4\": -0.7331418848699987,\n        \"gaussian_center_4\": 0.9347248046811267\n      },\n      \"pseudovoigt_fwhml_2\": {\n        \"constant_amplitude_3\": 0.07011958877932851,\n        \"gaussian_amplitude_4\": 0.9079454516212739,\n        \"gaussian_center_4\": -0.8457904795491098\n      },\n      \"constant_amplitude_3\": {\n        \"gaussian_amplitude_4\": 0.15153400546405374,\n        \"gaussian_center_4\": 0.000926625676270801\n      },\n      \"gaussian_amplitude_4\": {\n        \"gaussian_center_4\": -0.680824994264301\n      },\n      \"gaussian_center_4\": {},\n      \"gaussian_fwhmg_4\": {}\n    },\n    \"covariance_matrix\": {\n      \"pseudovoigt_amplitude_1\": {\n        \"pseudovoigt_amplitude_1\": 0.08189489039509333,\n        \"pseudovoigt_center_1\": -0.021265639351830783,\n        \"pseudovoigt_fwhmg_1\": 0.001108737928958058,\n        \"pseudovoigt_fwhml_1\": 0.0002840952206331345,\n        \"pseudovoigt_amplitude_2\": -0.029337272332296393,\n        \"pseudovoigt_center_2\": 0.0026645130237849127,\n        \"pseudovoigt_fwhmg_2\": 0.004016381114148398,\n        \"pseudovoigt_fwhml_2\": -0.017495144124302444,\n        \"constant_amplitude_3\": -0.00015306951027211485,\n        \"gaussian_amplitude_4\": -0.05092047223554052,\n        \"gaussian_center_4\": 0.008858368387821043,\n        \"gaussian_fwhmg_4\": -0.06714216825754851\n      },\n      \"pseudovoigt_center_1\": {\n        \"pseudovoigt_amplitude_1\": -0.02126563935183133,\n        \"pseudovoigt_center_1\": 0.005677343248371699,\n        \"pseudovoigt_fwhmg_1\": 5.897063230563316e-5,\n        \"pseudovoigt_fwhml_1\": 0.00026042278959073953,\n        \"pseudovoigt_amplitude_2\": 0.007123015208851593,\n        \"pseudovoigt_center_2\": -0.0008966360919980639,\n        \"pseudovoigt_fwhmg_2\": -0.0012355913220318477,\n        \"pseudovoigt_fwhml_2\": 0.004529628892633818,\n        \"constant_amplitude_3\": 3.993877639913862e-5,\n        \"gaussian_amplitude_4\": 0.013714224880423878,\n        \"gaussian_center_4\": -0.0025082724605561347,\n        \"gaussian_fwhmg_4\": 0.018719658813627908\n      },\n      \"pseudovoigt_fwhmg_1\": {\n        \"pseudovoigt_amplitude_1\": 0.0011087379289576504,\n        \"pseudovoigt_center_1\": 5.8970632305741064e-5,\n        \"pseudovoigt_fwhmg_1\": 0.0022947932827616846,\n        \"pseudovoigt_fwhml_1\": 0.0017471849987940095,\n        \"pseudovoigt_amplitude_2\": -0.0007473316247946308,\n        \"pseudovoigt_center_2\": -0.00022711393397554513,\n        \"pseudovoigt_fwhmg_2\": -5.991286583356574e-5,\n        \"pseudovoigt_fwhml_2\": -0.0008093644116645487,\n        \"constant_amplitude_3\": -1.174774635498921e-5,\n        \"gaussian_amplitude_4\": -0.000241682089250215,\n        \"gaussian_center_4\": 0.0003879546421282315,\n        \"gaussian_fwhmg_4\": 0.0006338841801499864\n      },\n      \"pseudovoigt_fwhml_1\": {\n        \"pseudovoigt_amplitude_1\": 0.00028409522063252706,\n        \"pseudovoigt_center_1\": 0.00026042278959089474,\n        \"pseudovoigt_fwhmg_1\": 0.001747184998794004,\n        \"pseudovoigt_fwhml_1\": 0.001411599205530134,\n        \"pseudovoigt_amplitude_2\": -0.0006250380895126818,\n        \"pseudovoigt_center_2\": -0.0002959712912374934,\n        \"pseudovoigt_fwhmg_2\": -0.0001604764417774813,\n        \"pseudovoigt_fwhml_2\": -0.0004836057758023863,\n        \"constant_amplitude_3\": -7.99236418817879e-6,\n        \"gaussian_amplitude_4\": 0.0004209373212019539,\n        \"gaussian_center_4\": 0.00017950475225613966,\n        \"gaussian_fwhmg_4\": 0.0016290684573037366\n      },\n      \"pseudovoigt_amplitude_2\": {\n        \"pseudovoigt_amplitude_1\": -0.029337272332291955,\n        \"pseudovoigt_center_1\": 0.007123015208850233,\n        \"pseudovoigt_fwhmg_1\": -0.0007473316247947598,\n        \"pseudovoigt_fwhml_1\": -0.0006250380895129165,\n        \"pseudovoigt_amplitude_2\": 0.014518504463013346,\n        \"pseudovoigt_center_2\": 4.8203990398478634e-5,\n        \"pseudovoigt_fwhmg_2\": 0.00021940478068353377,\n        \"pseudovoigt_fwhml_2\": 0.004135302929289992,\n        \"constant_amplitude_3\": 6.186596216252945e-5,\n        \"gaussian_amplitude_4\": 0.014161184585388637,\n        \"gaussian_center_4\": 0.0004852892705786586,\n        \"gaussian_fwhmg_4\": 0.01580657485574901\n      },\n      \"pseudovoigt_center_2\": {\n        \"pseudovoigt_amplitude_1\": 0.0026645130237860095,\n        \"pseudovoigt_center_1\": -0.000896636091998334,\n        \"pseudovoigt_fwhmg_1\": -0.00022711393397552792,\n        \"pseudovoigt_fwhml_1\": -0.0002959712912374785,\n        \"pseudovoigt_amplitude_2\": 4.820399039793754e-5,\n        \"pseudovoigt_center_2\": 0.00044031058772783083,\n        \"pseudovoigt_fwhmg_2\": 0.0005314671608839781,\n        \"pseudovoigt_fwhml_2\": -0.0008365949996164612,\n        \"constant_amplitude_3\": -5.614101449265054e-6,\n        \"gaussian_amplitude_4\": -0.002651496020276534,\n        \"gaussian_center_4\": 0.0009675854452465984,\n        \"gaussian_fwhmg_4\": -0.004552935512084298\n      },\n      \"pseudovoigt_fwhmg_2\": {\n        \"pseudovoigt_amplitude_1\": 0.004016381114150193,\n        \"pseudovoigt_center_1\": -0.0012355913220322883,\n        \"pseudovoigt_fwhmg_1\": -5.991286583353875e-5,\n        \"pseudovoigt_fwhml_1\": -0.00016047644177745796,\n        \"pseudovoigt_amplitude_2\": 0.00021940478068266733,\n        \"pseudovoigt_center_2\": 0.0005314671608839815,\n        \"pseudovoigt_fwhmg_2\": 0.0009108244806545143,\n        \"pseudovoigt_fwhml_2\": -0.0017769283665557472,\n        \"constant_amplitude_3\": -3.868947408063938e-6,\n        \"gaussian_amplitude_4\": -0.004192119718773303,\n        \"gaussian_center_4\": 0.002042294689594265,\n        \"gaussian_fwhmg_4\": -0.006643131556043086\n      },\n      \"pseudovoigt_fwhml_2\": {\n        \"pseudovoigt_amplitude_1\": -0.017495144124304918,\n        \"pseudovoigt_center_1\": 0.004529628892634345,\n        \"pseudovoigt_fwhmg_1\": -0.0008093644116646446,\n        \"pseudovoigt_fwhml_1\": -0.0004836057758025077,\n        \"pseudovoigt_amplitude_2\": 0.004135302929291826,\n        \"pseudovoigt_center_2\": -0.0008365949996163061,\n        \"pseudovoigt_fwhmg_2\": -0.0017769283665554888,\n        \"pseudovoigt_fwhml_2\": 0.005881900558206947,\n        \"constant_amplitude_3\": 1.4937871417533935e-5,\n        \"gaussian_amplitude_4\": 0.013193101203570787,\n        \"gaussian_center_4\": -0.0046961171705344,\n        \"gaussian_fwhmg_4\": 0.017977662918727797\n      },\n      \"constant_amplitude_3\": {\n        \"pseudovoigt_amplitude_1\": -0.00015306951027210417,\n        \"pseudovoigt_center_1\": 3.993877639913526e-5,\n        \"pseudovoigt_fwhmg_1\": -1.1747746354989603e-5,\n        \"pseudovoigt_fwhml_1\": -7.992364188179718e-6,\n        \"pseudovoigt_amplitude_2\": 6.186596216253293e-5,\n        \"pseudovoigt_center_2\": -5.61410144926284e-6,\n        \"pseudovoigt_fwhmg_2\": -3.868947408060254e-6,\n        \"pseudovoigt_fwhml_2\": 1.4937871417527104e-5,\n        \"constant_amplitude_3\": 7.71580129520277e-6,\n        \"gaussian_amplitude_4\": 7.974967428193074e-5,\n        \"gaussian_center_4\": 1.8634259555896554e-7,\n        \"gaussian_fwhmg_4\": 0.00010750148023268642\n      },\n      \"gaussian_amplitude_4\": {\n        \"pseudovoigt_amplitude_1\": -0.050920472235545126,\n        \"pseudovoigt_center_1\": 0.013714224880424732,\n        \"pseudovoigt_fwhmg_1\": -0.00024168208925048727,\n        \"pseudovoigt_fwhml_1\": 0.0004209373212015925,\n        \"pseudovoigt_amplitude_2\": 0.01416118458539306,\n        \"pseudovoigt_center_2\": -0.0026514960202759937,\n        \"pseudovoigt_fwhmg_2\": -0.004192119718772415,\n        \"pseudovoigt_fwhml_2\": 0.013193101203570229,\n        \"constant_amplitude_3\": 7.974967428194676e-5,\n        \"gaussian_amplitude_4\": 0.03589687106994505,\n        \"gaussian_center_4\": -0.00933858512004467,\n        \"gaussian_fwhmg_4\": 0.05016978516684734\n      },\n      \"gaussian_center_4\": {\n        \"pseudovoigt_amplitude_1\": 0.008858368387825048,\n        \"pseudovoigt_center_1\": -0.002508272460557119,\n        \"pseudovoigt_fwhmg_1\": 0.0003879546421282912,\n        \"pseudovoigt_fwhml_1\": 0.00017950475225619249,\n        \"pseudovoigt_amplitude_2\": 0.0004852892705767287,\n        \"pseudovoigt_center_2\": 0.0009675854452466064,\n        \"pseudovoigt_fwhmg_2\": 0.002042294689594267,\n        \"pseudovoigt_fwhml_2\": -0.004696117170534979,\n        \"constant_amplitude_3\": 1.863425955505357e-7,\n        \"gaussian_amplitude_4\": -0.009338585120046658,\n        \"gaussian_center_4\": 0.005241246507445724,\n        \"gaussian_fwhmg_4\": -0.014022897607884997\n      },\n      \"gaussian_fwhmg_4\": {\n        \"pseudovoigt_amplitude_1\": -0.06714216825755784,\n        \"pseudovoigt_center_1\": 0.01871965881362988,\n        \"pseudovoigt_fwhmg_1\": 0.0006338841801496148,\n        \"pseudovoigt_fwhml_1\": 0.001629068457303274,\n        \"pseudovoigt_amplitude_2\": 0.015806574855756025,\n        \"pseudovoigt_center_2\": -0.004552935512083683,\n        \"pseudovoigt_fwhmg_2\": -0.006643131556042074,\n        \"pseudovoigt_fwhml_2\": 0.01797766291872774,\n        \"constant_amplitude_3\": 0.00010750148023271109,\n        \"gaussian_amplitude_4\": 0.05016978516684935,\n        \"gaussian_center_4\": -0.014022897607882723,\n        \"gaussian_fwhmg_4\": 0.07319839591345827\n      }\n    }\n  },\n  \"confidence_interval\": {\n    \"pseudovoigt_amplitude_1\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.16403602584115073],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_center_1\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.03500058482452051],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_fwhmg_1\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.0687679507938458],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_fwhml_1\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.09252389394106236],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_amplitude_2\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.09740402120893221],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_center_2\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, -0.018052359245206206],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_fwhmg_2\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.043344705776687614],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"pseudovoigt_fwhml_2\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.09989511131863486],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"constant_amplitude_3\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.03676872733249155],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"gaussian_amplitude_4\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.014112879601465012],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"gaussian_center_4\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.000785067433615172],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ],\n    \"gaussian_fwhmg_4\": [\n      [0.9973002039367398, -Infinity],\n      [0.9544997361036416, -Infinity],\n      [0.6826894921370859, -Infinity],\n      [0.0, 0.0489339673857355],\n      [0.6826894921370859, Infinity],\n      [0.9544997361036416, Infinity],\n      [0.9973002039367398, Infinity]\n    ]\n  },\n  \"linear_correlation\": {\n    \"energy\": {\n      \"energy\": 1.0,\n      \"intensity\": -0.3129468170823972,\n      \"residual\": 0.11751656931991195,\n      \"fit\": -0.2259994866489651,\n      \"pseudovoigt_1\": -0.21288051248995526,\n      \"pseudovoigt_2\": -0.246613792947609,\n      \"constant_3\": NaN,\n      \"gaussian_4\": -0.10125030598524841\n    },\n    \"intensity\": {\n      \"energy\": -0.3129468170823972,\n      \"intensity\": 1.0,\n      \"residual\": 0.04780312901812482,\n      \"fit\": 0.9036600060804049,\n      \"pseudovoigt_1\": 0.8801769832650946,\n      \"pseudovoigt_2\": 0.854987122158034,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 0.6134257926400243\n    },\n    \"residual\": {\n      \"energy\": 0.11751656931991195,\n      \"intensity\": 0.04780312901812482,\n      \"residual\": 1.0,\n      \"fit\": 0.4709588097391075,\n      \"pseudovoigt_1\": 0.47380507798980864,\n      \"pseudovoigt_2\": 0.39048994293738104,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 0.39179078414068746\n    },\n    \"fit\": {\n      \"energy\": -0.2259994866489651,\n      \"intensity\": 0.9036600060804049,\n      \"residual\": 0.4709588097391075,\n      \"fit\": 1.0,\n      \"pseudovoigt_1\": 0.9804809307693575,\n      \"pseudovoigt_2\": 0.9225135358767362,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 0.709732782751552\n    },\n    \"pseudovoigt_1\": {\n      \"energy\": -0.21288051248995526,\n      \"intensity\": 0.8801769832650946,\n      \"residual\": 0.47380507798980864,\n      \"fit\": 0.9804809307693575,\n      \"pseudovoigt_1\": 1.0,\n      \"pseudovoigt_2\": 0.8453034770676977,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 0.6530789084228865\n    },\n    \"pseudovoigt_2\": {\n      \"energy\": -0.246613792947609,\n      \"intensity\": 0.854987122158034,\n      \"residual\": 0.39048994293738104,\n      \"fit\": 0.9225135358767362,\n      \"pseudovoigt_1\": 0.8453034770676977,\n      \"pseudovoigt_2\": 1.0,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 0.558516514398519\n    },\n    \"constant_3\": {\n      \"energy\": NaN,\n      \"intensity\": NaN,\n      \"residual\": NaN,\n      \"fit\": NaN,\n      \"pseudovoigt_1\": NaN,\n      \"pseudovoigt_2\": NaN,\n      \"constant_3\": NaN,\n      \"gaussian_4\": NaN\n    },\n    \"gaussian_4\": {\n      \"energy\": -0.10125030598524841,\n      \"intensity\": 0.6134257926400243,\n      \"residual\": 0.39179078414068746,\n      \"fit\": 0.709732782751552,\n      \"pseudovoigt_1\": 0.6530789084228865,\n      \"pseudovoigt_2\": 0.558516514398519,\n      \"constant_3\": NaN,\n      \"gaussian_4\": 1.0\n    }\n  },\n  \"fit_result\": {\n    \"energy\": [\n      -1.6, -1.5833333333333335, -1.5666666666666669, -1.5500000000000003,\n      -1.5333333333333337, -1.516666666666667, -1.5000000000000004,\n      -1.4833333333333338, -1.4666666666666672, -1.4500000000000006,\n      -1.433333333333334, -1.4166666666666674, -1.4000000000000008,\n      -1.383333333333334, -1.3666666666666676, -1.3500000000000008,\n      -1.3333333333333344, -1.3166666666666675, -1.3000000000000012,\n      -1.2833333333333343, -1.266666666666668, -1.250000000000001,\n      -1.2333333333333347, -1.216666666666668, -1.2000000000000015,\n      -1.183333333333335, -1.1666666666666683, -1.1500000000000017,\n      -1.133333333333335, -1.1166666666666685, -1.1000000000000019,\n      -1.0833333333333353, -1.0666666666666687, -1.050000000000002,\n      -1.0333333333333354, -1.0166666666666688, -1.0000000000000022,\n      -0.9833333333333357, -0.966666666666669, -0.9500000000000025,\n      -0.9333333333333358, -0.9166666666666691, -0.9000000000000026,\n      -0.8833333333333359, -0.8666666666666692, -0.8500000000000028,\n      -0.8333333333333361, -0.8166666666666694, -0.8000000000000029,\n      -0.7833333333333363, -0.7666666666666697, -0.750000000000003,\n      -0.7333333333333365, -0.7166666666666699, -0.7000000000000033,\n      -0.6833333333333367, -0.6666666666666701, -0.6500000000000035,\n      -0.6333333333333369, -0.6166666666666702, -0.6000000000000036,\n      -0.5833333333333369, -0.5666666666666704, -0.5500000000000038,\n      -0.5333333333333372, -0.5166666666666706, -0.500000000000004,\n      -0.48333333333333733, -0.4666666666666708, -0.4500000000000042,\n      -0.4333333333333376, -0.41666666666667096, -0.4000000000000044,\n      -0.38333333333333774, -0.36666666666667114, -0.3500000000000045,\n      -0.3333333333333379, -0.31666666666667126, -0.3000000000000047,\n      -0.2833333333333381, -0.2666666666666715, -0.2500000000000049,\n      -0.23333333333333828, -0.21666666666667167, -0.20000000000000503,\n      -0.18333333333333843, -0.16666666666667185, -0.15000000000000524,\n      -0.13333333333333863, -0.11666666666667203, -0.1000000000000054,\n      -0.08333333333333881, -0.0666666666666722, -0.0500000000000056,\n      -0.03333333333333899, -0.01666666666667238, -5.773159728050815e-15,\n      0.016666666666660834, 0.03333333333332744, 0.04999999999999405,\n      0.06666666666666066, 0.08333333333332726, 0.09999999999999389,\n      0.11666666666666048, 0.1333333333333271, 0.14999999999999367,\n      0.1666666666666603, 0.18333333333332688, 0.19999999999999352,\n      0.21666666666666007, 0.23333333333332676, 0.2499999999999933,\n      0.26666666666665995, 0.2833333333333265, 0.2999999999999932,\n      0.31666666666665977, 0.3333333333333264, 0.349999999999993,\n      0.3666666666666596, 0.38333333333332614, 0.3999999999999928,\n      0.41666666666665936, 0.433333333333326, 0.44999999999999263,\n      0.4666666666666592, 0.4833333333333258, 0.4999999999999925,\n      0.5166666666666592, 0.5333333333333257, 0.5499999999999923,\n      0.5666666666666589, 0.5833333333333255, 0.5999999999999921,\n      0.6166666666666587, 0.6333333333333253, 0.6499999999999919,\n      0.6666666666666585, 0.6833333333333251, 0.6999999999999916,\n      0.7166666666666583, 0.733333333333325, 0.7499999999999916,\n      0.7666666666666581, 0.7833333333333247, 0.7999999999999914,\n      0.8166666666666581, 0.8333333333333246, 0.8499999999999912,\n      0.8666666666666578, 0.8833333333333245, 0.899999999999991,\n      0.9166666666666576, 0.9333333333333241, 0.9499999999999907,\n      0.9666666666666575, 0.983333333333324, 0.9999999999999906,\n      1.0166666666666573, 1.033333333333324, 1.0499999999999905,\n      1.066666666666657, 1.0833333333333235, 1.0999999999999903,\n      1.1166666666666567, 1.1333333333333235, 1.14999999999999,\n      1.1666666666666567, 1.1833333333333231, 1.19999999999999,\n      1.2166666666666563, 1.2333333333333232, 1.2499999999999896,\n      1.2666666666666564, 1.283333333333323, 1.2999999999999896,\n      1.3166666666666562, 1.3333333333333228, 1.3499999999999894,\n      1.366666666666656, 1.3833333333333226, 1.3999999999999893,\n      1.4166666666666559, 1.4333333333333225, 1.449999999999989,\n      1.4666666666666557, 1.4833333333333223, 1.499999999999989,\n      1.5166666666666555, 1.533333333333322, 1.5499999999999887,\n      1.566666666666655, 1.583333333333322, 1.5999999999999883,\n      1.6166666666666551, 1.6333333333333215, 1.6499999999999884,\n      1.6666666666666548, 1.6833333333333216, 1.699999999999988,\n      1.7166666666666548, 1.7333333333333214, 1.749999999999988,\n      1.7666666666666546, 1.7833333333333212, 1.7999999999999878,\n      1.8166666666666544, 1.8333333333333208, 1.849999999999988,\n      1.8666666666666545, 1.8833333333333209, 1.8999999999999877,\n      1.916666666666654, 1.9333333333333207, 1.9499999999999873,\n      1.9666666666666537, 1.9833333333333203, 1.9999999999999871,\n      2.0166666666666537, 2.0333333333333203, 2.049999999999987,\n      2.066666666666653, 2.08333333333332, 2.0999999999999868,\n      2.1166666666666534, 2.13333333333332, 2.1499999999999866,\n      2.1666666666666528, 2.18333333333332, 2.1999999999999864,\n      2.216666666666653, 2.23333333333332, 2.2499999999999862,\n      2.266666666666653, 2.2833333333333194, 2.299999999999986,\n      2.3166666666666527, 2.3333333333333193, 2.3499999999999854,\n      2.3666666666666525, 2.383333333333319, 2.3999999999999857,\n      2.4166666666666523, 2.433333333333319, 2.449999999999985,\n      2.466666666666652, 2.4833333333333187, 2.4999999999999853,\n      2.516666666666652, 2.5333333333333186, 2.5499999999999847,\n      2.566666666666652, 2.5833333333333184, 2.599999999999985,\n      2.6166666666666516, 2.633333333333318, 2.649999999999985,\n      2.6666666666666514, 2.683333333333318, 2.6999999999999846,\n      2.7166666666666512, 2.7333333333333174, 2.7499999999999845,\n      2.766666666666651, 2.7833333333333177, 2.799999999999984,\n      2.816666666666651, 2.833333333333317, 2.849999999999984,\n      2.8666666666666507, 2.8833333333333173, 2.899999999999984,\n      2.9166666666666505, 2.9333333333333167, 2.949999999999984,\n      2.9666666666666504, 2.983333333333317, 2.9999999999999836,\n      3.01666666666665, 3.033333333333317, 3.0499999999999834,\n      3.0666666666666496, 3.0833333333333166, 3.099999999999983,\n      3.11666666666665, 3.1333333333333164, 3.149999999999983,\n      3.1666666666666496, 3.183333333333316, 3.199999999999983,\n      3.216666666666649, 3.233333333333316, 3.2499999999999822,\n      3.266666666666649, 3.283333333333316, 3.2999999999999825,\n      3.3166666666666487, 3.333333333333316, 3.3499999999999823,\n      3.366666666666649, 3.3833333333333155, 3.399999999999982,\n      3.4166666666666488, 3.433333333333316, 3.4499999999999815,\n      3.4666666666666486, 3.483333333333315, 3.499999999999982,\n      3.5166666666666484, 3.533333333333315, 3.5499999999999816,\n      3.566666666666648, 3.583333333333315, 3.599999999999981,\n      3.616666666666648, 3.633333333333314, 3.649999999999981,\n      3.666666666666648, 3.6833333333333136, 3.6999999999999806,\n      3.716666666666648, 3.7333333333333134, 3.749999999999981,\n      3.766666666666648, 3.7833333333333137, 3.7999999999999807,\n      3.8166666666666473, 3.8333333333333135, 3.849999999999981,\n      3.866666666666647, 3.8833333333333138, 3.89999999999998,\n      3.916666666666647, 3.9333333333333136, 3.94999999999998,\n      3.9666666666666472, 3.9833333333333134, 3.99999999999998,\n      4.016666666666646, 4.033333333333314, 4.049999999999979,\n      4.066666666666647, 4.083333333333313, 4.09999999999998, 4.116666666666646,\n      4.133333333333312, 4.149999999999979, 4.166666666666647,\n      4.183333333333312, 4.19999999999998, 4.216666666666645, 4.233333333333313,\n      4.249999999999979, 4.266666666666646, 4.283333333333312,\n      4.299999999999979, 4.316666666666645, 4.333333333333313,\n      4.349999999999977, 4.366666666666646, 4.383333333333312,\n      4.399999999999979, 4.416666666666645, 4.433333333333312,\n      4.449999999999978, 4.466666666666645, 4.483333333333311,\n      4.499999999999979, 4.516666666666644, 4.533333333333312,\n      4.549999999999978, 4.566666666666645, 4.583333333333311,\n      4.599999999999977, 4.616666666666644, 4.633333333333312,\n      4.649999999999976, 4.666666666666645, 4.6833333333333105,\n      4.699999999999978, 4.716666666666644, 4.733333333333311,\n      4.749999999999977, 4.766666666666644, 4.78333333333331, 4.799999999999978,\n      4.816666666666643, 4.833333333333311, 4.8499999999999766,\n      4.866666666666644, 4.88333333333331, 4.899999999999976, 4.916666666666642,\n      4.9333333333333105, 4.949999999999976, 4.966666666666644,\n      4.9833333333333085, 4.999999999999977, 5.016666666666643,\n      5.03333333333331, 5.049999999999976, 5.066666666666643, 5.083333333333309,\n      5.0999999999999766, 5.116666666666641, 5.13333333333331,\n      5.149999999999976, 5.166666666666642, 5.183333333333309,\n      5.199999999999976, 5.216666666666642, 5.2333333333333085,\n      5.249999999999975, 5.266666666666643, 5.283333333333308,\n      5.299999999999976, 5.316666666666642, 5.333333333333309,\n      5.349999999999975, 5.366666666666641, 5.383333333333308,\n      5.399999999999976, 5.416666666666641, 5.433333333333309,\n      5.449999999999974, 5.466666666666642, 5.483333333333308,\n      5.499999999999975, 5.516666666666641, 5.533333333333308,\n      5.549999999999974, 5.566666666666642, 5.583333333333307,\n      5.599999999999975, 5.61666666666664, 5.633333333333308, 5.649999999999974,\n      5.666666666666641, 5.683333333333306, 5.699999999999974, 5.71666666666664,\n      5.733333333333308, 5.7499999999999725, 5.766666666666641,\n      5.783333333333307, 5.799999999999974, 5.81666666666664, 5.833333333333307,\n      5.849999999999973, 5.86666666666664, 5.883333333333305, 5.899999999999974,\n      5.91666666666664, 5.933333333333306, 5.949999999999973, 5.96666666666664,\n      5.983333333333306, 5.9999999999999725, 6.016666666666639,\n      6.033333333333307, 6.049999999999972, 6.06666666666664,\n      6.0833333333333055, 6.099999999999973, 6.11666666666664,\n      6.133333333333305, 6.149999999999972, 6.16666666666664, 6.183333333333305,\n      6.199999999999973, 6.216666666666638, 6.233333333333306,\n      6.249999999999972, 6.266666666666639, 6.283333333333305,\n      6.299999999999972, 6.316666666666638, 6.3333333333333055,\n      6.349999999999971, 6.36666666666664, 6.383333333333304, 6.399999999999972,\n      6.416666666666638, 6.433333333333305, 6.449999999999973,\n      6.466666666666638, 6.483333333333304, 6.499999999999972,\n      6.516666666666639, 6.533333333333305, 6.5499999999999705,\n      6.566666666666638, 6.5833333333333055, 6.599999999999971,\n      6.616666666666637, 6.633333333333304, 6.649999999999972,\n      6.666666666666638, 6.683333333333303, 6.69999999999997, 6.716666666666638,\n      6.733333333333304, 6.74999999999997, 6.766666666666636, 6.783333333333305,\n      6.7999999999999705, 6.816666666666636, 6.833333333333304,\n      6.849999999999971, 6.866666666666637, 6.8833333333333035,\n      6.899999999999969, 6.916666666666638, 6.933333333333303,\n      6.949999999999969, 6.966666666666637, 6.983333333333304, 6.99999999999997,\n      7.016666666666636, 7.033333333333303, 7.0499999999999705,\n      7.066666666666636, 7.083333333333302, 7.0999999999999694,\n      7.116666666666637, 7.1333333333333035, 7.149999999999968,\n      7.166666666666636, 7.183333333333303, 7.199999999999969,\n      7.216666666666634, 7.233333333333302, 7.249999999999972,\n      7.2666666666666355, 7.283333333333301, 7.299999999999968,\n      7.316666666666637, 7.333333333333303, 7.349999999999967,\n      7.366666666666635, 7.383333333333303, 7.399999999999968,\n      7.416666666666633, 7.433333333333301, 7.44999999999997, 7.466666666666634,\n      7.4833333333333, 7.499999999999968, 7.5166666666666355, 7.533333333333301,\n      7.549999999999968, 7.566666666666634, 7.583333333333303,\n      7.599999999999967, 7.616666666666633, 7.633333333333299,\n      7.649999999999968, 7.666666666666633, 7.683333333333299,\n      7.699999999999966, 7.716666666666634, 7.7333333333333, 7.749999999999966,\n      7.766666666666634, 7.783333333333301, 7.799999999999968,\n      7.816666666666632, 7.833333333333299, 7.849999999999967,\n      7.866666666666633, 7.883333333333299, 7.899999999999967,\n      7.916666666666633, 7.933333333333299, 7.949999999999965,\n      7.966666666666634, 7.9833333333333, 7.999999999999966\n    ],\n    \"intensity\": [\n      0.0, 0.003891050583657596, 0.003973071404922201, 0.00405770964833183,\n      0.0041450777202072485, 0.004235294117647068, 0.0043284838283034685,\n      0.004424778761061949, 0.004524318210380788, 0.0046272493573264635,\n      0.004733727810650881, 0.004843918191603862, 0.004957994766561084,\n      0.005076142131979685, 0.005198555956678712, 0.0053254437869822225,\n      0.005457025920873108, 0.005593536357986327, 0.0057352238330412595,\n      0.005882352941176454, 0.006035205364626978, 0.006194081211286973,\n      0.006359300476947529, 0.00653120464441218, 0.006710158434296354,\n      0.006896551724137925, 0.007090801654520351, 0.0072933549432738845,\n      0.007504690431519682, 0.0077253218884119875, 0.007955801104972366,\n      0.008196721311475363, 0.008448720957521673, 0.008712487899322318,\n      0.00898876404494378, 0.009278350515463833, 0.009582113388341695,\n      0.009900990099009844, 0.010235996588001109, 0.010588235294117582,\n      0.010958904109588984, 0.011349306431273604, 0.011760862463247207,\n      0.012195121951219443, 0.012653778558875128, 0.013138686131386808,\n      0.013651877133105715, 0.014195583596214404, 0.014772260976610463,\n      0.015384615384615235, 0.01603563474387513, 0.016728624535315855,\n      0.01746724890829681, 0.018255578093306146, 0.01909814323607401,\n      0.019999999999999855, 0.02096680256260904, 0.02200488997554988,\n      0.02312138728323678, 0.02432432432432412, 0.02562277580071142,\n      0.02702702702702668, 0.028548770816811748, 0.030201342281878873,\n      0.03199999999999956, 0.03396226415094291, 0.03610832497492419,\n      0.0384615384615379, 0.04104903078677245, 0.04390243902438932,\n      0.04705882352941089, 0.05056179775280797, 0.054462934947048874,\n      0.058823529411763525, 0.0637168141592905, 0.06923076923076783,\n      0.07547169811320567, 0.08256880733944734, 0.09068010075566536,\n      0.09999999999999735, 0.11076923076922764, 0.12328767123287268,\n      0.137931034482754, 0.15517241379309754, 0.1756097560975534,\n      0.19999999999999216, 0.22929936305731488, 0.2647058823529294,\n      0.3076923076922934, 0.35999999999998283, 0.42352941176468273,\n      0.49999999999997286, 0.590163934426198, 0.6923076923076551,\n      0.7999999999999646, 0.8999999999999696, 0.972972972972956, 1.0,\n      0.9729729729729932, 0.9000684869288876, 0.8003319898391893,\n      0.6926622009062817, 0.5905260079579859, 0.5003698828803956,\n      0.423907359037742, 0.36038627792143624, 0.3080871943516519,\n      0.26510966833725974, 0.229712352160166, 0.200422509979045,\n      0.17604211948496107, 0.15561497876280292, 0.1383841657795379,\n      0.12375175116828944, 0.11124466029010888, 0.1008615472585792,\n      0.09156616328472589, 0.08347578183738227, 0.07640033803343374,\n      0.07018186486213082, 0.06469119491649024, 0.05982206629964605,\n      0.05548654321439518, 0.05161143975291705, 0.04813551180660481,\n      0.04500723964762217, 0.042183066953828376, 0.03962599439990947,\n      0.03762979151803755, 0.0355235772582584, 0.033602772665341465,\n      0.03184727712998013, 0.0302396665048004, 0.028764785209156422,\n      0.02740940871559529, 0.026161963071215155, 0.025055460720915503,\n      0.02399553502734928, 0.02310851127639354, 0.022205528543641218,\n      0.021575947349213472, 0.020807671274259663, 0.020262538639031612,\n      0.019608943762035314, 0.01900508918247521, 0.01844758920101576,\n      0.017933441506014527, 0.017459988802825416, 0.017116223909357433,\n      0.01700109250482449, 0.016644697110745524, 0.016321490303453878,\n      0.016030153287369217, 0.015769582084074696, 0.01553887828303456,\n      0.015337342770190972, 0.015164472389002764, 0.015019959565844851,\n      0.014903695013669643, 0.014815773718070222, 0.014756504512647603,\n      0.01472642367105966, 0.014726313087813518, 0.014762833800814612,\n      0.014828824980555134, 0.014936297382658363, 0.015092709661536039,\n      0.015265693132420408, 0.015480363766871183, 0.01574034597789587,\n      0.016049975876225163, 0.016445001617509163, 0.016871150941466195,\n      0.017365810966736703, 0.01793794637067392, 0.018598387284889623,\n      0.019360276650060192, 0.02027741539926165, 0.02139506330100348,\n      0.02265340564781228, 0.024215964657596928, 0.02582307680845409,\n      0.02770646393851211, 0.029925276941982052, 0.03255400371914528,\n      0.03568618792266998, 0.039438183003851726, 0.04395161588318507,\n      0.049396347905066126, 0.05593774572615727, 0.06372917556163323,\n      0.07281235769968086, 0.08297912055122572, 0.08968666903582638,\n      0.09956504877300416, 0.106985658129584, 0.1105553529287392,\n      0.10976166283155749, 0.10550302268599474, 0.09954066028792553,\n      0.09359971188053476, 0.08894698680154246, 0.08611776697261757,\n      0.08549802656897262, 0.08714704444740207, 0.09114323548348285,\n      0.09741566916226682, 0.10570299682241792, 0.11534606210318205,\n      0.12489566539676876, 0.1324663709406456, 0.1361582465387924,\n      0.13517303448186327, 0.13039310047924793, 0.12373011438496852,\n      0.1172246633030924, 0.11223132336840552, 0.10964438113207683,\n      0.10970848399307127, 0.11247749074012411, 0.11768922280751624,\n      0.12473707754788672, 0.13233632676821225, 0.1388812549798811,\n      0.1427420541018731, 0.14319471281865284, 0.14110364763997182,\n      0.13826829089995027, 0.1363279334870925, 0.13652200547175272,\n      0.13932494130255624, 0.14470822166638303, 0.1521105848946017,\n      0.16061207756974027, 0.16897722924770694, 0.1759261828247377,\n      0.18029139969025185, 0.18149515421662843, 0.1797830536574096,\n      0.1762170482718902, 0.17226873288254063, 0.1691475675474199,\n      0.1671686571423933, 0.16548924618092917, 0.16242034016088563,\n      0.15633214078963112, 0.14661349398571155, 0.13410546069691992,\n      0.12044536220806938, 0.10718928699229796, 0.09532586355221329,\n      0.08529339317605522, 0.07709066119281836, 0.07063904745880455,\n      0.06568665577483854, 0.062078991816957016, 0.059617904082309055,\n      0.058164564233077025, 0.05756091921572554, 0.057635772916898795,\n      0.058225327937197355, 0.05915096685973496, 0.06033003213293948,\n      0.06181828855366552, 0.06374490759060672, 0.06628981889926785,\n      0.06958414097301331, 0.07372846515462701, 0.07885975952308069,\n      0.0851664178607698, 0.09277070516830589, 0.10151164911253709,\n      0.11073487266572096, 0.11922007584730741, 0.12537987745324689,\n      0.1277625583305999, 0.1256732739092848, 0.11955130788860958,\n      0.11079566712510833, 0.10112180177353332, 0.09192926638695936,\n      0.08404615436832302, 0.07780751134483174, 0.07325039227702294,\n      0.0702860388364263, 0.06882118316423944, 0.06876812106173276,\n      0.07010374023997071, 0.07279255164035678, 0.07675045397804342,\n      0.08174717338281955, 0.08735955311363625, 0.09306179365964579,\n      0.09900498124429352, 0.10487737930796168, 0.11069291597185596,\n      0.11639708496367848, 0.1217273908908785, 0.1265996020457453,\n      0.13116896447439702, 0.135966288673545, 0.14142025008083,\n      0.14751975109442883, 0.15352737719387624, 0.15816409853225305,\n      0.1601857154835972, 0.1589545566775944, 0.1544852206038986,\n      0.14869755741153032, 0.14263605104698895, 0.13741146743857324,\n      0.133595436797124, 0.1313273368739534, 0.13056686253320388,\n      0.1312641333278097, 0.1332797358903959, 0.13628483366420036,\n      0.13952422967709147, 0.14204112486636356, 0.14294294009596903,\n      0.1414293792565008, 0.13818933933035218, 0.1331860419733018,\n      0.12665222914930274, 0.1187286978126514, 0.10961484592424504,\n      0.09984258973974126, 0.09008223810188593, 0.08085685620230627,\n      0.07256316222572513, 0.06510214772133885, 0.058610921444190896,\n      0.05272378319996645, 0.04782334744197015, 0.04352307002441606,\n      0.04013926610201627, 0.03746459966304642, 0.03544048418519373,\n      0.033991331387312106, 0.03302552570019131, 0.03235083401139447,\n      0.03178395118237268, 0.031763311390900446, 0.03201973702619608,\n      0.03258483891250205, 0.033434036826116544, 0.03443820935102124,\n      0.03536756518157945, 0.0359505047177961, 0.03596231076319577,\n      0.035307682507203744, 0.03406049881290491, 0.032431453015792665,\n      0.030672135044579777, 0.028966334931621377, 0.027363343807303785,\n      0.025815923983005612, 0.024223887688296343, 0.022534439228242227,\n      0.02080220500592597, 0.01906966307887128, 0.017415702302007743,\n      0.015905951446525034, 0.014547887882829291, 0.013426539109273928,\n      0.012476164752763268, 0.01169175984669532, 0.0110536908237312,\n      0.010544300517995238, 0.010111764810362156, 0.00972206784273088,\n      0.009455938247878402, 0.00917693218891364, 0.009188422430469106,\n      0.009302694296132702, 0.009526867750149264, 0.00986838204117474,\n      0.010331111121827347, 0.01090924976026132, 0.011580885210842348,\n      0.012302396425264627, 0.013040057798095108, 0.01375875631275779,\n      0.014446891702747667, 0.015096153108483168, 0.0156940023344889,\n      0.016245522651620947, 0.01679928445342448, 0.01737505498767164,\n      0.0181204113718608, 0.019033587276818326, 0.019970639491295936,\n      0.02074138628625168, 0.021111052848654666, 0.021112069193101986,\n      0.020665350292444727, 0.019932856436185555, 0.01901540556743102,\n      0.018058869882539637, 0.017125363876573842, 0.016172326663091947,\n      0.015272093379256828, 0.014377044247257916, 0.013569579387075379,\n      0.012938043359667311, 0.012491246058805286, 0.01227021526391276,\n      0.012229573379522967, 0.012411790448933363, 0.012631955771594887,\n      0.012861890526208767, 0.012952664129169731, 0.012832477224745792,\n      0.012455702351086588, 0.01199385158593986, 0.011501102142697736,\n      0.011128819379458171, 0.01097831551997038, 0.010927316390904133,\n      0.010806211169280888, 0.010614974257290192, 0.010271581326610123,\n      0.009834131065227129, 0.009297598301658177, 0.008697139372068055,\n      0.008024116887538398, 0.007315731922365474, 0.006565652453779356,\n      0.005844794880350924, 0.005177767365665529, 0.004587412844911594,\n      0.0040798944721002, 0.0036506665421485577, 0.00329037815035334,\n      0.0029886090930426146, 0.002735690107776864, 0.002523366843905612,\n      0.0023300631942332127, 0.002180374898760963, 0.002054958204967324,\n      0.0019505886000300875, 0.0018648527274811324, 0.0017960239663209377,\n      0.001720481626512626, 0.0016830996415389443, 0.0016262300718450644,\n      0.001611919732637923, 0.0016048014922694148, 0.0016347432507004985,\n      0.0016857628276620254, 0.001761334740481444, 0.001865932288006437,\n      0.001989512518215736, 0.0021607489243893377, 0.002386736856454915,\n      0.0026530571609377643, 0.002969667659174261, 0.0033068140847257966,\n      0.003620015633850385, 0.0038444166455045207, 0.003916571185462839,\n      0.0038092320327282624, 0.0035494402458889464, 0.00320043214610638,\n      0.0028268467668079366, 0.002472937473226955, 0.002160175622001572,\n      0.001894251048772865, 0.001672608969388938, 0.0014894646029960984,\n      0.0013384345380275796, 0.0012136748094292323, 0.0011102474053009976,\n      0.0010241407634558619, 0.0009521598820936355, 0.0008917842772384375,\n      0.0008410336313034932, 0.0007882098897912334, 0.0007525906554877921,\n      0.0007228641949372934, 0.0006982868399087982, 0.0006671157541095356,\n      0.000645005379493612, 0.0006333058086720105, 0.000625184442884534,\n      0.0006205035025779992, 0.0006192046745116873, 0.0006213057378856704,\n      0.0006039945868221229, 0.0006137252238044462, 0.0006047776936573755,\n      0.0006231581830360969, 0.0006337680871982241, 0.0006624848892488697,\n      0.0006973192371910539, 0.0007392569480711444, 0.0007895426603224253,\n      0.0008330084196076873, 0.0009054639619342336, 0.0009923357464075885,\n      0.0010968178118700965, 0.0012229540649686605, 0.0013758345184867965,\n      0.0015617780277680387, 0.0017884101805828436, 0.002064429183181777,\n      0.002387968244156822, 0.002787075005635288, 0.0032330643719318663,\n      0.0037448433409505576, 0.004266115855053602, 0.004733392359982105,\n      0.0050731049261991245, 0.005228483226228465, 0.005177871012632568,\n      0.004933801139556769, 0.004516681615965384, 0.004025914623300037,\n      0.0035069432009657746, 0.003011562010941419, 0.0025693287122871486,\n      0.002180151797621449, 0.0018631067214146704, 0.0016005279884154326,\n      0.001383752803081267, 0.0012045262550681973, 0.0010557189196281143,\n      0.0009314598629566572, 0.0008270276372756256, 0.0007386662934833399,\n      0.000663398632862216, 0.0005988630824781945, 0.0005431803012114177,\n      0.0004948475983603272, 0.00045265671581789455, 0.00041563027155241765,\n      0.0003829727316072356, 0.0003540325485166859, 0.0003282728337111797,\n      0.00030524854341540544, 0.0002845886426487827, 0.0002659820854651423,\n      0.00024916673278896844, 0.00023392054231395035, 0.0002200545248037094,\n      0.00020740708106580888, 0.00019583942400428853, 0.00018523185810550465,\n      0.0001754807401376867, 0.00016649598393723487, 0.00015819900201364986,\n      0.00015052099962416344, 0.00014340155465021373, 0.000136787430317109,\n      0.0001306315784814117, 0.00012489229957700896, 0.00010650950352080627,\n      0.00010176233346638824, 9.732407586281645e-5, 9.316862596969085e-5,\n      8.927256629278886e-5, 8.56148429229433e-5, 8.217648623838878e-5,\n      7.894036918914812e-5, 7.589099752037563e-5, 7.301432722262195e-5,\n      7.029760526128519e-5, 6.772923026716017e-5, 6.529863039051561e-5,\n      6.299615595285945e-5, 6.0812984889811416e-5, 5.874103927838362e-5,\n      5.677291149306076e-5, 5.490179874591324e-5, 5.312144494355774e-5,\n      5.1426088943718254e-5, 4.98104184211338e-5\n    ],\n    \"residual\": [\n      0.03860835067784256, 0.034755929338874086, 0.034713767352860754,\n      0.034670270277321384, 0.034625381306410005, 0.03457904058984698,\n      0.03453118503564271, 0.03448174809779662, 0.0344306595476548,\n      0.03437784522747757, 0.03432322678462423, 0.03426672138459972,\n      0.034208241401028024, 0.0341476940804171, 0.03408498117935497,\n      0.034019998571528126, 0.03395263582167139, 0.03388277572324744,\n      0.03381029379630025, 0.03373505774153422, 0.03365692684622595,\n      0.033575751337077325, 0.033491371674555175, 0.0334036177826287,\n      0.03331230820709761, 0.033217249194892835, 0.03311823368581079,\n      0.03301504020709824, 0.03290743166011859, 0.032795153986978146,\n      0.03267793470345212, 0.03255548128279151, 0.03242747937298003,\n      0.032293590827708996, 0.03215345152869319, 0.03200666897391602,\n      0.031852819602894655, 0.03169144582602684, 0.03152205272042256,\n      0.031344104349238136, 0.03115701965528346, 0.030960167872422326,\n      0.03075286338984804, 0.0305343599944853, 0.03030384440529244,\n      0.03006042899981081, 0.02980314361758412, 0.029530926306607953,\n      0.029242612857274225, 0.028936924942721938, 0.02861245665437759,\n      0.028267659185889516, 0.027900823376594754, 0.027510059775875558,\n      0.027093275830804387, 0.02664814972962787, 0.02617210035090616,\n      0.02566225267019198, 0.025115397860429232, 0.02452794718590352,\n      0.023895878629637275, 0.023214675007755425, 0.02247925210934835,\n      0.021683875156030277, 0.02082206160408097, 0.019886468021757357,\n      0.01886875848316276, 0.017759451663624158, 0.01654774366568139,\n      0.015221303666706196, 0.01376603996327215, 0.012165835246254315,\n      0.010402252579275295, 0.008454218608935277, 0.006297699791160891,\n      0.0039054039536188107, 0.0012465686863734893, -0.001713050737178562,\n      -0.00501079129024537, -0.008685928829828285, -0.012777118852549577,\n      -0.01731728446222318, -0.022323891084748734, -0.027780872985517707,\n      -0.03360537151419199, -0.039586630446788645, -0.04527345615413636,\n      -0.04976623524941967, -0.051332814029436236, -0.04670979648244089,\n      -0.02992910866157955, 0.00834627278103478, 0.06757368359087457,\n      0.07695004831992192, -0.045058986420534075, -0.028838642887844768,\n      0.30668309108973946, 0.5407560669094325, 0.5116953022752087,\n      0.3389883135922821, 0.15697239334297997, 0.04059965536957866,\n      -0.024463855271129376, -0.06015334419556084, -0.07622680102286677,\n      -0.0793043581904585, -0.07511572427795105, -0.06759871577631399,\n      -0.05896867203894013, -0.0503368553875615, -0.0422132942886545,\n      -0.03479894795370227, -0.028140603747496593, -0.022211425601807153,\n      -0.016952565701173455, -0.012668729091475275, -0.008553585642755254,\n      -0.00489974695071882, -0.001652693129829394, 0.0012394575301695049,\n      0.0038219037778644133, 0.006133756561190765, 0.008208740150774704,\n      0.010075892623749562, 0.011760215824865049, 0.013283255062883796,\n      0.014663604385087438, 0.0159173409104287, 0.016733053695929964,\n      0.017766665147062134, 0.018710003617794707, 0.019572247547523153,\n      0.020361421692874027, 0.021084557322296506, 0.021747827764196943,\n      0.022356663259406356, 0.022872678570613474, 0.023385525273261126,\n      0.023764726477124663, 0.024195476076278324, 0.024385164795845616,\n      0.024743002619652357, 0.024904579695912952, 0.02519920474436302,\n      0.02546661839927864, 0.02570836016780407, 0.02592577144504429,\n      0.026120012016892128, 0.026200736048967974, 0.02606777292793712,\n      0.026189909003981292, 0.026291681924040352, 0.026373491165563957,\n      0.026435602296030813, 0.02647814782687228, 0.026501126088400585,\n      0.026504398037648043, 0.026487681853415337, 0.026450545107400122,\n      0.026392394223961748, 0.02631246085005698, 0.02620978464633912,\n      0.026083191874152034, 0.02592565897936336, 0.02574401100821977,\n      0.025525925823794267, 0.025263655695028392, 0.024989300644709864,\n      0.024677494748194834, 0.024324380806498985, 0.023925405694445512,\n      0.023444618748470973, 0.022936103079279697, 0.022362294733430512,\n      0.021714063563867105, 0.0209804244690447, 0.020148089248693563,\n      0.0191631206994373, 0.017980131112409665, 0.016658814981058732,\n      0.0150355370465865, 0.01336985445560971, 0.011429945194186747,\n      0.009156563963226356, 0.0064751338341242845, 0.0032920271391578063,\n      -0.0005091889097260938, -0.005070216200630487, -0.010560986961986457,\n      -0.017146934914952366, -0.02498148976399059, -0.03410643193765691,\n      -0.044313646848081874, -0.05106039347145185, -0.060976768719997756,\n      -0.06843421965719515, -0.0720396483628944, -0.07128062846013256,\n      -0.06705563659934542, -0.061125940345465854, -0.05521671379486265,\n      -0.050594802332261, -0.04779552222259374, -0.04720488037631938,\n      -0.048882186866967554, -0.05290588635208791, -0.05920507674235126,\n      -0.06751843651914187, -0.07718683525038286, -0.0867610981075003,\n      -0.09435581301832728, -0.09807107044527191, -0.09710863435895237,\n      -0.09235089122052664, -0.08570953075487021, -0.0792251591004837,\n      -0.07425237063206114, -0.07168546938562137, -0.07176911952711967,\n      -0.0745571959295001, -0.07978753546156526, -0.08685355029202702,\n      -0.09447052645498562, -0.10103276212787482, -0.10491046236098614,\n      -0.10537962846027474, -0.10330468907073037, -0.10048508819776666,\n      -0.09856012795835918, -0.0987692492285203, -0.10158689685868263,\n      -0.1069845615516601, -0.11440099128593259, -0.1229162419384949,\n      -0.1312948520224338, -0.1382569730684573, -0.14263507479160187,\n      -0.14385143959417163, -0.14215168247645477, -0.1385977611732126,\n      -0.1346612777224229, -0.1315516991484657, -0.12958413705459676,\n      -0.12791584245251109, -0.12485782711843339, -0.11878029882710517,\n      -0.1090721093619037, -0.09657432534097125, -0.08292427353267603,\n      -0.06967804771425257, -0.05782428151994819, -0.04780128120387075,\n      -0.03960783690149589, -0.0331653331223192, -0.028221878172900942,\n      -0.024622982093127126, -0.022170497607437993, -0.020725600473844925,\n      -0.02013024160805489, -0.020213228744033702, -0.02081076821224921,\n      -0.021744246212504877, -0.022931008700836808, -0.024426823876550686,\n      -0.02636086650939446, -0.028913069458135078, -0.03221455432506285,\n      -0.03636591547086569, -0.041504123904576584, -0.04781757625385996,\n      -0.055428540282731614, -0.06417604634238946, -0.07340572001308493,\n      -0.08189726384849717, -0.08806329910753104, -0.09045210903131848,\n      -0.08836885137726525, -0.08225281210779269, -0.07350300028029876,\n      -0.0638348681901938, -0.05464797247297031, -0.04677040855763331,\n      -0.04053722404292937, -0.03598547580815738, -0.03302640739251714,\n      -0.03156675275540896, -0.0315188094684024, -0.032859466966464086,\n      -0.035553237869954325, -0.03951602252943584, -0.04451754866790964,\n      -0.05013466109664059, -0.05584156181744983, -0.06178933852801549,\n      -0.0676662561056825, -0.07348624407247417, -0.07919479752185071,\n      -0.08452942239300759, -0.0894058882769799, -0.09397944248660747,\n      -0.09878089675424229, -0.10423892772299531, -0.11034243896722273,\n      -0.11635401711419793, -0.12099463343712077, -0.12302008940332243,\n      -0.12179271470972336, -0.11732710888789546, -0.11154312310417772,\n      -0.10548524229848213, -0.10026423336928525, -0.09645172747501984,\n      -0.0941871032926323, -0.09343005659054926, -0.09413070780522742,\n      -0.09614964443262178, -0.0991580307596591, -0.10240067063878928,\n      -0.10492076581329773, -0.10582573793503819, -0.10431529166490015,\n      -0.10107832473843886, -0.09607805954791526, -0.08954723877752678,\n      -0.08162666008600367, -0.07251572212328132, -0.06274634181906176,\n      -0.05298882867553135, -0.04376624852953199, -0.03547532019714199,\n      -0.028017035845409703, -0.021528504834072253, -0.015644027560684927,\n      -0.01074621905792393, -0.006448535747191696, -0.003067293338511634,\n      -0.0003951563638908834, 0.0016264611665431222, 0.0030731470125073337,\n      0.00403651623252179, 0.004708801438807773, 0.005273307279916498,\n      0.005291599098044171, 0.005032854033669258, 0.004465460801736619,\n      0.0036139991743970312, 0.002607590125156947, 0.00167602452596409,\n      0.0010909015517372028, 0.0010769379822836017, 0.0017294342197192863,\n      0.0029745110005167663, 0.004601474596568067, 0.006358734694190963,\n      0.008062500883528053, 0.009663481663984785, 0.0112089143610999,\n      0.012798986389182872, 0.014486493093848495, 0.01621680772934184,\n      0.017947451901962546, 0.01959953642695273, 0.021107432209499483,\n      0.022463661561638905, 0.023583196673389425, 0.02453177761201577,\n      0.025314409043957237, 0.02595072424193274, 0.026458380082618256,\n      0.026889200401240473, 0.02727720077718678, 0.027541652304038197,\n      0.027818998550005164, 0.027805866486628313, 0.02768997053124185,\n      0.027464190465169777, 0.027121086789872087, 0.026656785307296402,\n      0.026077091008209506, 0.025403916401429492, 0.02468088230261855,\n      0.02394171408865085, 0.023221524551542437, 0.022531913737153665,\n      0.021881192288255108, 0.02128189818726514, 0.020728947953946957,\n      0.020173770988975038, 0.019596599842323294, 0.01884985719769351,\n      0.01793530918884301, 0.01699689883491848, 0.016224807676107716,\n      0.01585381033976923, 0.015851476628751245, 0.016296891390703068,\n      0.01702809415961633, 0.017944266818813, 0.01889953700123892,\n      0.0198317900439549, 0.020783586668289052, 0.021682591574673733,\n      0.022576424381170378, 0.023382684810653385, 0.024013028147572175,\n      0.02445864434606604, 0.024678505477077207, 0.0247179889888456,\n      0.024534624693208038, 0.024313323148163687, 0.024082263034732973,\n      0.023990374798471062, 0.02410945765924575, 0.02448513894518771,\n      0.024945906446933536, 0.02543758282153983, 0.02580880258338305,\n      0.025958253383176186, 0.026008209270662393, 0.02612828094714761,\n      0.026318493890648633, 0.02666087231153804, 0.027097317405690314,\n      0.02763285423022649, 0.028232326336364306, 0.028904371002117363,\n      0.029611787043966158, 0.03036090637710841, 0.031080812497022207,\n      0.03174689713576312, 0.03233631725534696, 0.03284290960050219,\n      0.03327121977655904, 0.033630598589949254, 0.0339314661475279,\n      0.03418349161634656, 0.034394929253071485, 0.03458735507229309,\n      0.03473617324275961, 0.034860727427073204, 0.034964242049444504,\n      0.03504913037901515, 0.03511711895072095, 0.03519182836977601,\n      0.03522838461909429, 0.03528443555582591, 0.03529793428353716,\n      0.03530424785380724, 0.03527350828774432, 0.03522169768780544,\n      0.03514534145995077, 0.0350399662297014, 0.03491561487451031,\n      0.0347436138275742, 0.034516867666469685, 0.03424979547318603,\n      0.033932439355894926, 0.03359455351152, 0.03328061867524902,\n      0.033055490440516144, 0.03298261467486666, 0.03308923853353158,\n      0.03334832089305566, 0.03369662536829465, 0.034069512862708276,\n      0.03442272994880601, 0.034734805208534364, 0.03500004874566511,\n      0.035221015284577856, 0.03540348954715571, 0.03555385488678374,\n      0.0356779552111106, 0.0357807284753947, 0.03586618618593307,\n      0.035937523289375654, 0.0359972602152761, 0.03604737722751546,\n      0.03609957232759082, 0.03613456786040966, 0.03616367550780477,\n      0.036187638887056554, 0.03621820078416936, 0.03623970670755242,\n      0.036250806515599795, 0.03625833275870845, 0.036262423168690355,\n      0.03626313601165745, 0.03626045346188387, 0.03627718757931547,\n      0.036266884316121586, 0.03627526358270603, 0.03625631914820919,\n      0.036245149573727535, 0.03621587733306, 0.03618049173564935,\n      0.036138006922428585, 0.03608717821346932, 0.03604317352213138,\n      0.03597018307194, 0.035882780363824605, 0.03577777131947265,\n      0.035651111993254624, 0.03549771233388474, 0.03531125344799047,\n      0.03508410971023866, 0.03480758287727551, 0.03448353970385852,\n      0.034083932511656, 0.03363744636058849, 0.03312517421742044,\n      0.03260341210488503, 0.0321356495427573, 0.031795454426505075,\n      0.03163959704994415, 0.03168973362725453, 0.03193333127143042,\n      0.03234998194103846, 0.03284028342255379, 0.033358792644868476,\n      0.033853714914675766, 0.03429549254195716, 0.03468421700350027,\n      0.035000812814600143, 0.03526294544062774, 0.03547927764759439,\n      0.035658064316657315, 0.03580643484371741, 0.03593026013406664,\n      0.03603426160730104, 0.03612219518466567, 0.03619703803734262,\n      0.03626115171104713, 0.036316415519992526, 0.03636433212828186,\n      0.03640610976772744, 0.03644272579436591, 0.0364749757164544,\n      0.03650351105605059, 0.03652886867660364, 0.03655149359705213,\n      0.036571756827819706, 0.03658996939057171, 0.03660639340037514,\n      0.036621250875796506, 0.036634730782597456, 0.036646994696757265,\n      0.03665818138241675, 0.03666841051238907, 0.036677785707456716,\n      0.036686397031581955, 0.036694323050298544, 0.03670163253663396,\n      0.03670838589122964, 0.03671463632961832, 0.03672043087893344,\n      0.03672581121796011, 0.036743837416226444, 0.03674823031024688,\n      0.03675231659346057, 0.03675612235071341, 0.0367596709798196,\n      0.03676298351522002, 0.03676607890727711, 0.03676897426398784,\n      0.03677168506075774, 0.036774225322947926, 0.0367766077851432,\n      0.03677884403045891, 0.03678094461268439, 0.03678291916362873,\n      0.036784776487675516, 0.03678652464525312, 0.036788171026676315,\n      0.03678972241760383, 0.0367911850571791, 0.036792564689771476,\n      0.03679386661110809\n    ],\n    \"fit\": [\n      0.03860835067784256, 0.03864697992253168, 0.038686838757782956,\n      0.038727979925653216, 0.03877045902661726, 0.03881433470749405,\n      0.03885966886394618, 0.038906526858858564, 0.03895497775803559,\n      0.03900509458480403, 0.03905695459527511, 0.03911063957620358,\n      0.03916623616758911, 0.039223836212396786, 0.03928353713603368,\n      0.03934544235851035, 0.0394096617425445, 0.03947631208123376,\n      0.03954551762934151, 0.03961741068271068, 0.03969213221085292,\n      0.039769832548364296, 0.0398506721515027, 0.039934822427040884,\n      0.040022466641393965, 0.04011380091903076, 0.040209035340331135,\n      0.04030839515037212, 0.040412122091638275, 0.040520475875390136,\n      0.040633735808424484, 0.04075220259426687, 0.040876200330501704,\n      0.04100607872703131, 0.041142215573636974, 0.04128501948937985,\n      0.04143493299123635, 0.04159243592503668, 0.04175804930842367,\n      0.041932339643355715, 0.04211592376487244, 0.04230947430369593,\n      0.04251372585309525, 0.04272948194570474, 0.042957622964167566,\n      0.04319911513119762, 0.043455020750689834, 0.043726509902822355,\n      0.044014873833884686, 0.04432154032733717, 0.04464809139825272,\n      0.04499628372120537, 0.045368072284891564, 0.045765637869181704,\n      0.046191419066878396, 0.046648149729627726, 0.0471389029135152,\n      0.04766714264574186, 0.048236785143666014, 0.04885227151022764,\n      0.049518654430348696, 0.05024170203478211, 0.0510280229261601,\n      0.05188521743790915, 0.052822061604080525, 0.05384873217270027,\n      0.054977083458086946, 0.05622099012516206, 0.05759677445245384,\n      0.059123742691095514, 0.06082486349268304, 0.06272763299906228,\n      0.06486518752632417, 0.0672777480206988, 0.07001451395045138,\n      0.07313617318438664, 0.07671826679957916, 0.08085575660226878,\n      0.08566930946542, 0.09131407117016907, 0.09799211191667806,\n      0.1059703867706495, 0.11560714339800528, 0.12739154080757983,\n      0.1420043845833614, 0.1604133695532035, 0.18402590690317852,\n      0.21493964710350974, 0.25635949366285715, 0.31329020351754194,\n      0.3936003031031032, 0.5083462727810076, 0.6577376180170725,\n      0.769257740627577, 0.7549410135794306, 0.8711613571121248,\n      1.2796560640626955, 1.5407560669094325, 1.4846682752482019,\n      1.2390568005211697, 0.9573043831821693, 0.7332618562758604,\n      0.5660621526868566, 0.4402165386848348, 0.34768055801487524,\n      0.28108191973097774, 0.23297147007370084, 0.19751095256094575,\n      0.17074368012122587, 0.1500856545914835, 0.13382882519630657,\n      0.12081603080910065, 0.11024356203204132, 0.10154032556648229,\n      0.09429209458893542, 0.08819281816710392, 0.08301257764197063,\n      0.07857603488666345, 0.07474764490360435, 0.07142132239230033,\n      0.06851309869435465, 0.06595582286083682, 0.06369528336516989,\n      0.06168733237666661, 0.05989572763146986, 0.058290494710505965,\n      0.056846671338915813, 0.05554333531033817, 0.05436284521396752,\n      0.053290242405320536, 0.05231277628313617, 0.051419524677503284,\n      0.05060108819767443, 0.04984934253145293, 0.049157236479792234,\n      0.04851862633062151, 0.047928139291528976, 0.04738106030061041,\n      0.046873237753518204, 0.04640100461991954, 0.04596111214505909,\n      0.04555067389391202, 0.045167118334944564, 0.04480814850639833,\n      0.04447170758175385, 0.04415594936881983, 0.04385921295105882,\n      0.043580000819717545, 0.04331695995832541, 0.04306886543276161,\n      0.042834606114726816, 0.04261317222749423, 0.042403644452933174,\n      0.04220518438010551, 0.04201702610990684, 0.041838468858591556,\n      0.04166887042665081, 0.04150764141926019, 0.041354240121069766,\n      0.04120816794203197, 0.04106896536270458, 0.04093620831739878,\n      0.04080950496196555, 0.04068849278017797, 0.040572835988774904,\n      0.04046222320645263, 0.04035636535656443, 0.04025499377713027,\n      0.040157858515066015, 0.040064726784394857, 0.039975381570670675,\n      0.039889620365980136, 0.03980725402074589, 0.039728105700167216,\n      0.03965200993454102, 0.03957881175393432, 0.039508365898753756,\n      0.03944053609869895, 0.039375194413413146, 0.03931222062887101,\n      0.03925150170418343, 0.0391929312640638, 0.039136409132698856,\n      0.03908184090520841, 0.03902913755326957, 0.03897821506182779,\n      0.03892899409412563, 0.038881399682554586, 0.03883536094307967,\n      0.038790810811204904, 0.038747685797642636, 0.03870592576202395,\n      0.03866547370314385, 0.03862627556437453, 0.03858828005300641,\n      0.038551438472388844, 0.0385157045658448, 0.03848103437142493,\n      0.03844738608664931, 0.03841471994245968, 0.03838299808567211,\n      0.038352184469281465, 0.038322244750023826, 0.03829314619265324,\n      0.03826485758043451, 0.03823734913139495, 0.03821059241991556,\n      0.03818456030327605, 0.03815922685279918, 0.038134567289268465,\n      0.03811055792231831, 0.0380871760935205, 0.0380644001229109,\n      0.03804220925872129, 0.038020583630098304, 0.03799950420260871,\n      0.037978952736344385, 0.037958911746455465, 0.0379393644659516,\n      0.03792029481062402, 0.03790168734595098, 0.03788352725585971,\n      0.03786580031322663, 0.03784849285200628, 0.03783159174088696,\n      0.037815084358378104, 0.03779895856924145, 0.037783202702183605,\n      0.03776780552873331, 0.03775275624323242, 0.0377380444438736,\n      0.03772366011472293, 0.0377095936086691, 0.03769583563124537,\n      0.03768237722527315, 0.03766920975628041, 0.03765632489864998,\n      0.0376437146224568, 0.03763137118095483, 0.037619287098677595,\n      0.037607455160117736, 0.03759586839895421, 0.03758452008779653,\n      0.03757340372841808, 0.03756251304245224, 0.03755184196252595,\n      0.03754138462380785, 0.03753113535594867, 0.037521088675393346,\n      0.037511239278045394, 0.0375015820322651, 0.03749211197218447,\n      0.03748282429132247, 0.037473714336485345, 0.037464777601937595,\n      0.03745600972382989, 0.03744740647487106, 0.0374389637592321,\n      0.037430677607670645, 0.03742254417286509, 0.03741455972494814,\n      0.037406720647230086, 0.03739902343210267, 0.037391464677114836,\n      0.03738404108121226, 0.03737674944113278, 0.03736958664795046,\n      0.03736254968376132, 0.03735563561850411, 0.037348841606909836,\n      0.03734216488557428, 0.03733560277014762, 0.03732915265263603,\n      0.03732281199881024, 0.03731657834571585, 0.03731044929928143,\n      0.03730442253201954, 0.0372984957808169, 0.03729266684480957,\n      0.037286933583339524, 0.03728129391398905, 0.037275745810689716,\n      0.03727028730190237, 0.037264916468865567, 0.03725963144390916,\n      0.037254430408830475, 0.03724931159333036, 0.03724427327350662,\n      0.03723931377040245, 0.03723443144860758, 0.037229624714909905,\n      0.03722489201699566, 0.03722023184219596, 0.03721564271627803,\n      0.03721112320227918, 0.03720667189938179, 0.03720228744182777,\n      0.03719796849787091, 0.0371937137687654, 0.03718952198778955,\n      0.0371853919193027, 0.037181322357834695, 0.0371773121272061,\n      0.03717336007967831, 0.037169465095132276, 0.037165626080274766,\n      0.037161841967871034, 0.03715811171600314, 0.0371544343073526,\n      0.03715080874850682, 0.03714723406928799, 0.037143709322104146,\n      0.0371402335813211, 0.037136805942654616, 0.03713342552258228,\n      0.03713009145777413, 0.03712680290454126, 0.03712355903830218,\n      0.03712035905306582, 0.03711720216093084, 0.037114087591600634,\n      0.03711101459191332, 0.03710798242538654, 0.03710499037177596,\n      0.03710203772664773, 0.037099123800963724, 0.037096247920679504,\n      0.03709340942635458, 0.037090607672774285, 0.037087842028583146,\n      0.037085111875929146, 0.03708241661011864, 0.03707975563928152,\n      0.03707712838404622, 0.03707453427722437, 0.037071972763504636,\n      0.037069443299155534, 0.03706694535173685, 0.03706447839981944,\n      0.0370620419327131, 0.037059635450202244, 0.037057258462289175,\n      0.03705491048894462, 0.03705259105986534, 0.03705029971423867,\n      0.037048036000513575, 0.037045799476178184, 0.03704358970754354,\n      0.037041406269533304, 0.03703924874547937, 0.03703711672692303,\n      0.03703500981342168, 0.03703292761236073, 0.03703086973877074,\n      0.03702883581514943, 0.03702682547128857, 0.03702483834410551,\n      0.037022874077479215, 0.03702093232209072, 0.03701901273526781,\n      0.03701711498083383, 0.037015238728960474, 0.037013383656024516,\n      0.037011549444468196, 0.03700973578266335, 0.037007942364779035,\n      0.03700616889065256, 0.03700441506566394, 0.03700268060061349,\n      0.03700096521160263, 0.03699926861991766, 0.0369975905519166,\n      0.036995930738918804, 0.03699428891709742, 0.03699266482737455,\n      0.03699105821531904, 0.036989468831046826, 0.03698789642912375,\n      0.03698634076847083, 0.03698480161227184, 0.03698327872788318,\n      0.03698177188674596, 0.036980280864300226, 0.036978805439901334,\n      0.036977345396738276, 0.03697590052175404, 0.036974470605567904,\n      0.03697305544239952, 0.036971654829994934, 0.03697026856955431,\n      0.03696889646566134, 0.03696753832621442, 0.036966193962359395,\n      0.036964863188423895, 0.03696354582185323, 0.036962241683147795,\n      0.036960950595801886, 0.03695967238624402, 0.036958406883778556,\n      0.03695715392052874, 0.036955913331381, 0.03695468495393056,\n      0.03695346862842829, 0.03695226419772876, 0.03695107150723949,\n      0.03694989040487132, 0.03694872074098997, 0.03694756236836857,\n      0.0369464151421414, 0.03694527891975857, 0.03694415356094174,\n      0.036943038927640795, 0.03694193488399154, 0.0369408412962743,\n      0.036939758032873395, 0.036938684964237564, 0.03693762196284122,\n      0.03693656890314657, 0.03693552566156653, 0.0369344921164285,\n      0.036933468147938825, 0.03693245363814816, 0.03693144847091744,\n      0.036930452531884664, 0.03692946570843236, 0.03692848788965576,\n      0.03692751896633163, 0.036926558830887767, 0.03692560737737313,\n      0.036924664501428645, 0.03692373010025855, 0.03692280407260239,\n      0.036921886318707596, 0.03692097674030259, 0.03692007524057051,\n      0.03691918172412342, 0.036918296096977096, 0.0369174182665263,\n      0.03691654814152057, 0.03691568563204053, 0.03691483064947459,\n      0.03691398310649628, 0.03691314291704189, 0.03691230999628864,\n      0.03691148426063324, 0.03691066562767097, 0.03690985401617509,\n      0.03690904934607665, 0.03690825153844482, 0.03690746051546746,\n      0.03690667620043221, 0.03690589851770784, 0.03690512739272604,\n      0.03690436275196354, 0.0369036045229246, 0.036902852634123795,\n      0.036902107015069185, 0.03690136759624579, 0.03690063430909941,\n      0.036899907086020665, 0.0368991858603295, 0.03689847056625984,\n      0.03689776113894461, 0.03689705751440103, 0.036896359629516214,\n      0.036895667422032964, 0.03689498083053594, 0.03689429979443798,\n      0.03689362425396679, 0.03689295415015181, 0.03689228942481132,\n      0.03689163002053983, 0.036890975880695696, 0.03689032694938893,\n      0.03688968317146929, 0.03688904449251454, 0.03688841085881896,\n      0.03688778221738205, 0.03688715851589745, 0.03688653970274206,\n      0.036885925726965356, 0.036885316538278895, 0.03688471208704604,\n      0.03688411232427181, 0.03688351720159298, 0.03688292667126836,\n      0.036882340686169135, 0.03688175919976954, 0.036881182166137595,\n      0.03688060953992603, 0.03688004127636341, 0.03687947733124529,\n      0.036878917660925756, 0.036878362222308864, 0.0368778109728404,\n      0.03687726387049973, 0.03687672087379175, 0.03687618194173906,\n      0.036875647033874234, 0.03687511611023219, 0.03687458913134275,\n      0.036874066058223284, 0.036873546852371535, 0.03687303147575851,\n      0.036872519890821506, 0.03687201206045729, 0.036871507948015345,\n      0.03687100751729129, 0.03687051073252036, 0.036870017558371,\n      0.03686952795993863, 0.0368690419027394, 0.0368685593527042,\n      0.03686808027617262, 0.0368676046398871, 0.03686713241098719,\n      0.03686666355700385, 0.036866198045853824, 0.036865735845834254,\n      0.03686527692561718, 0.036864821254244305, 0.03686436880112172,\n      0.03686391953601481, 0.03686347342904317, 0.03686303045067566,\n      0.036862590571725515, 0.03686215376334552, 0.0368617199970233,\n      0.03686128924457667, 0.03686086147814901, 0.03686043667020484,\n      0.036860014793525325, 0.03685959582120395, 0.03685917972664218,\n      0.03685876648354534, 0.03685835606591833, 0.03685794844806164,\n      0.03685754360456728, 0.03685714151031482, 0.03685674214046753,\n      0.03685634547046849, 0.03685595147603685, 0.03685556013316411,\n      0.036855171418110455, 0.03685478530740117, 0.03685440177782307,\n      0.036854020806421035, 0.03685364237049457, 0.0368532664475944,\n      0.03685289301551919, 0.036852522052312195, 0.03685215353625812,\n      0.03685178744587986, 0.03685142375993543, 0.03685106245741485,\n      0.03685070351753712, 0.03685034691974725, 0.03684999264371327,\n      0.03684964066932339, 0.0368492909766831, 0.036848943546112393,\n      0.03684859835814296, 0.036848255393515494, 0.03684791463317699,\n      0.03684757605827811, 0.036847239650170546, 0.036846905390404486,\n      0.03684657326072607, 0.03684624324307491, 0.03684591531958159,\n      0.036845589472565325, 0.0368452656845315, 0.036844943938169374,\n      0.03684462421634974, 0.036844306502122656, 0.0368439907787152,\n      0.036843677029529225\n    ],\n    \"pseudovoigt_1\": [\n      0.0010203787554590932, 0.0010414867929510528, 0.0010632564601278677,\n      0.0010857156923063493, 0.0011088939144357798, 0.0011328221374159867,\n      0.001157533061758024, 0.0011830611892340247, 0.0012094429432274996,\n      0.001236716798567391, 0.0012649234217094027, 0.0012941058222175556,\n      0.0013243095165987808, 0.0013555827056549597, 0.0013879764666417237,\n      0.0014215449616632964, 0.0014563456638896925, 0.0014924396033590538,\n      0.001529891634326391, 0.001568770726343699, 0.0016091502815087193,\n      0.0016511084806048093, 0.0016947286611770133, 0.0017400997309551908,\n      0.0017873166204501656, 0.001836480779020952, 0.0018877007192486866,\n      0.001941092615066285, 0.001996780959793788, 0.0020548992910319514,\n      0.002115590990287214, 0.0021790101662591196, 0.00224532263193951,\n      0.0023147069870783337, 0.0023873558191960303, 0.002463477038205273,\n      0.002543295361891246, 0.002627053972044079, 0.0027150163640052125,\n      0.002807468415860106, 0.0029047207075780504, 0.0030071111251808147,\n      0.003115007790655349, 0.0032288123649816146, 0.0033489637795326706,\n      0.0034759424604748923, 0.00361027512196472, 0.0037525402172909773,\n      0.003903374153127332, 0.0040634783913331045, 0.004233627586015814,\n      0.0044146789317775345, 0.004607582933383012, 0.004813395848995123,\n      0.005033294110508854, 0.0052685910877879535, 0.0055207566418594145,\n      0.005791440009338805, 0.006082496681716756, 0.006396020095382287,\n      0.006734379140247754, 0.00710026273826672, 0.0074967330535409115,\n      0.007927289293891407, 0.008395944577746, 0.008907319008019672,\n      0.009466752968403491, 0.010080445808964776, 0.010755626617170532,\n      0.01150076581777973, 0.012325839109600827, 0.013242659014067735,\n      0.01426529449287676, 0.015410606294245286, 0.016698935805936184,\n      0.018154999573410845, 0.019809062330407034, 0.021698491546744223,\n      0.02386984107680995, 0.02638167838137046, 0.029308471781395704,\n      0.032746012390989385, 0.03681909528587662, 0.04169258710013812,\n      0.047587669642544246, 0.054806163227427096, 0.06376775098873315,\n      0.07506830401988039, 0.08957358499248821, 0.1085735272966188,\n      0.13403919458094876, 0.16902639784460446, 0.218123416140869,\n      0.28727222905756417, 0.38200899053722776, 0.5066139952417967,\n      0.6690083240842193, 0.8629428281200358, 0.9827433697474828,\n      0.8986257236264162, 0.7065903576489863, 0.5357310897879607,\n      0.40439010734055114, 0.3040361302823388, 0.23015392043296964,\n      0.17754368511019047, 0.14015461899913745, 0.11307194304344162,\n      0.09296404147700855, 0.07768000538891869, 0.06581841656915285,\n      0.056443553354201176, 0.048914530654551605, 0.04278195815347782,\n      0.037723942467631236, 0.03350544242539946, 0.02995183190218515,\n      0.02693131886511055, 0.024343012951228156, 0.02210867354230479,\n      0.020166903989532105, 0.018469001685053797, 0.016975948165187722,\n      0.01565619651336172, 0.014484024521478765, 0.01343829475159477,\n      0.012501510929102073, 0.011659092671368413, 0.010898812840859605,\n      0.010210357261964106, 0.009584977386235472, 0.009015214193185597,\n      0.008494677144200859, 0.008017866019194948, 0.007580026404516575,\n      0.007177031773237084, 0.006805286719008788, 0.0064616471226569975,\n      0.006143353953468091, 0.005847978111455222, 0.005573374258213927,\n      0.005317642002809423, 0.005079093135240759, 0.004856223855465166,\n      0.004647691147203988, 0.004452292605160974, 0.00426894915122208,\n      0.004096690176795282, 0.003934640730142415, 0.0037820104335519,\n      0.003638083868753228, 0.0035022122126122353, 0.0033738059408507447,\n      0.0032523284468619416, 0.0031372904468736484, 0.0030282450627210113,\n      0.0029247834901055835, 0.002826531174061615, 0.0027331444249222223,\n      0.0026443074177814148, 0.0025597295266089797, 0.002479142951059257,\n      0.0024023005998381267, 0.002328974199432072, 0.002258952601204106,\n      0.002192040263443452, 0.002128055888017703, 0.002066831193899841,\n      0.0020082098120957448, 0.0019520462884375608, 0.0018982051823815903,\n      0.0018465602513961785, 0.0017969937117783637, 0.0017493955678262003,\n      0.0017036630022400174, 0.0016596998214506973, 0.0016174159502931479,\n      0.0015767269710730218, 0.001537553702626637, 0.0014998218154584856,\n      0.0014634614794666022, 0.0014284070411411628, 0.0013945967274524675,\n      0.0013619723739367374, 0.0013304791747467074, 0.0013000654526631027,\n      0.0012706824472663656, 0.0012422841196486482, 0.001214826972206804,\n      0.0011882698822003306, 0.0011625739478859835, 0.0011377023461548953,\n      0.0011136202007001725, 0.0010902944598342968, 0.0010676937831576906,\n      0.0010457884363533484, 0.0010245501934485835, 0.0010039522459444213,\n      0.0009839691182667821, 0.000964576589041879, 0.0009457516177419135,\n      0.0009274722762865196, 0.0009097176852210864, 0.000892467954125332,\n      0.0008757041259347721, 0.0008594081248842378, 0.0008435627078067051,\n      0.0008281514185425766, 0.0008131585452344874, 0.0007985690803008134,\n      0.0007843686828976236, 0.0007705436436938446, 0.0007570808517981837,\n      0.0007439677636889294, 0.0007311923740092102, 0.0007187431881008322,\n      0.0007066091961594315, 0.0006947798489024892, 0.0006832450346498692,\n      0.000671995057723946, 0.000661020618083217, 0.0006503127921095659,\n      0.0006398630144751044, 0.0006296630610198226, 0.0006197050325761794,\n      0.0006099813396812568, 0.0006004846881212595, 0.0005912080652569796,\n      0.0005821447270823841, 0.0005732881859717486, 0.0005646321990738001,\n      0.0005561707573141163, 0.0005478980749696234, 0.0005398085797814416,\n      0.0005318969035745404, 0.0005241578733547348, 0.0005165865028554681,\n      0.000509177984508597, 0.0005019276818150538, 0.0004948311220927875,\n      0.0004878839895808128, 0.00048108211887952707, 0.0004744214887086856,\n      0.0004678982159655772, 0.0004615085500670163, 0.0004552488675597643,\n      0.00044911566698492463, 0.0004431055639827278, 0.00043721528662493437,\n      0.00043144167096283983, 0.0004257816567795755, 0.0004202322835360662,\n      0.00041479068650061303, 0.00040945409305266655, 0.0004042198191518837,\n      0.0003990852659640781, 0.00039404791663614683, 0.000389105333212505,\n      0.0003842551536859756, 0.0003794950891764781, 0.00037482292123122533,\n      0.00037023649924048367, 0.0003657337379632825, 0.0003613126151577531,\n      0.00035697116931107816, 0.0003527074974642892, 0.0003485197531274167,\n      0.0003444061442807223, 0.00034036493145798166, 0.000336394425907987,\n      0.0003324929878306449, 0.00032865902468422946, 0.0003248909895605308,\n      0.00032118737962480247, 0.00031754673461757476, 0.00031396763541554105,\n      0.00031044870264887616, 0.0003069885953724676, 0.0003035860097886727,\n      0.00030023967801933094, 0.0002969483669248714, 0.00029371087696846424,\n      0.0002905260411232634, 0.00028739272382087946, 0.00028430981993931876,\n      0.0002812762538287026, 0.00027829097837316226, 0.00027535297408738674,\n      0.0002724612482463635, 0.0002696148340469311, 0.0002668127897998147,\n      0.0002640541981508929, 0.00026133816533048597, 0.00025866382042952424,\n      0.0002560303147015, 0.00025343682088915874, 0.0002508825325749333,\n      0.00024836666355417057, 0.00024588844723023634, 0.00024344713603063634,\n      0.00024104200084331835, 0.00023867233047236428, 0.00023633743111231326,\n      0.00023403662584039095, 0.00023176925412594983, 0.00022953467135645997,\n      0.00022733224837941186, 0.00022516137105952637, 0.00022302143985068865,\n      0.0002209118693820499, 0.00021883208805776295, 0.00021678153766984168,\n      0.0002147596730236539, 0.00021276596157557924, 0.00021079988308238335,\n      0.0002088609292618749, 0.0002069486034644358, 0.00020506242035502612,\n      0.00020320190560528306, 0.00020136659559535247, 0.00019955603712509964,\n      0.00019776978713436497, 0.00019600741243194425, 0.0001942684894329796,\n      0.00019255260390446782, 0.00019085935071860011, 0.00018918833361365685,\n      0.00018753916496219586, 0.0001859114655462824, 0.000184304864339513,\n      0.00018271899829560477, 0.00018115351214332114, 0.0001796080581875204,\n      0.00017808229611611718, 0.00017657589281275867, 0.00017508852217502165,\n      0.00017361986493794548, 0.00017216960850272364, 0.00017073744677038115,\n      0.0001693230799802734, 0.00016792621455324642, 0.00016654656293930737,\n      0.000165183843469655, 0.0001638377802129307, 0.0001625081028355506,\n      0.00016119454646598935, 0.0001598968515628859, 0.00015861476378685156,\n      0.00015734803387585777, 0.00015609641752409572, 0.00015485967526419154,\n      0.00015363757235267668, 0.00015242987865860604, 0.00015123636855523056,\n      0.0001500568208146234, 0.00014889101850517383, 0.00014773874889185436,\n      0.00014659980333918068, 0.000145473977216777, 0.00014436106980747224,\n      0.0001432608842178445, 0.00014217322729114377, 0.00014109790952251833,\n      0.0001400347449764779, 0.00013898355120652256, 0.00013794414917687724,\n      0.00013691636318626557, 0.00013590002079366407, 0.00013489495274597764,\n      0.0001339009929075806, 0.00013291797819166658, 0.00013194574849335715,\n      0.00013098414662451486, 0.0001300330182502138, 0.000129092211826818,\n      0.00012816157854162277, 0.0001272409722540113, 0.00012633024943808823,\n      0.00012542926912674168, 0.00012453789285709891, 0.0001236559846173318,\n      0.00012278341079477751, 0.00012192004012533411, 0.00012106574364409854,\n      0.00012022039463720957, 0.00011938386859486416, 0.00011855604316547333,\n      0.00011773679811092724, 0.00011692601526293749, 0.00011612357848042899,\n      0.00011532937360795038, 0.00011454328843507752, 0.00011376521265678119,\n      0.00011299503783473469, 0.00011223265735953354, 0.00011147796641380593,\n      0.00011073086193618655, 0.00010999124258613457, 0.00010925900870956903,\n      0.00010853406230530401, 0.00010781630699225922, 0.00010710564797742818,\n      0.00010640199202458136, 0.00010570524742368826, 0.00010501532396103588,\n      0.00010433213289002971, 0.00010365558690265538, 0.00010298560010158685,\n      0.00010232208797292337, 0.00010166496735953913, 0.00010101415643502935,\n      0.00010036957467823919, 9.97311428483589e-5, 9.909878296057192e-5,\n      9.847241826224124e-5, 9.785197320962143e-5, 9.723737344508203e-5,\n      9.662854577483034e-5, 9.602541814712053e-5, 9.542791963093752e-5,\n      9.483598039514337e-5, 9.424953168807536e-5, 9.366850581758324e-5,\n      9.309283613149729e-5, 9.252245699851377e-5, 9.195730378948998e-5,\n      9.139731285913727e-5, 9.084242152810365e-5, 9.029256806543505e-5,\n      8.974769167140809e-5, 8.920773246072315e-5, 8.867263144605134e-5,\n      8.814233052192477e-5, 8.761677244896393e-5, 8.709590083843238e-5,\n      8.657966013711259e-5, 8.60679956124938e-5, 8.556085333826623e-5,\n      8.505818018011227e-5, 8.455992378179057e-5, 8.406603255150296e-5,\n      8.357645564854049e-5, 8.309114297019981e-5, 8.261004513896578e-5,\n      8.213311348995183e-5, 8.166030005859441e-5, 8.119155756859382e-5,\n      8.072683942009731e-5, 8.026609967811742e-5, 7.98092930611819e-5,\n      7.9356374930208e-5, 7.890730127759839e-5, 7.846202871655102e-5,\n      7.802051447058042e-5, 7.758271636324459e-5, 7.714859280807296e-5,\n      7.671810279869102e-5, 7.629120589913739e-5, 7.586786223436873e-5,\n      7.544803248094878e-5, 7.503167785791701e-5, 7.461876011783346e-5,\n      7.420924153799472e-5, 7.380308491181963e-5, 7.340025354039793e-5,\n      7.300071122420099e-5, 7.260442225494975e-5, 7.221135140763655e-5,\n      7.182146393269764e-5, 7.143472554833376e-5, 7.105110243297433e-5,\n      7.067056121788353e-5, 7.029306897990404e-5, 6.991859323433652e-5,\n      6.954710192795112e-5, 6.917856343212896e-5, 6.881294653613008e-5,\n      6.8450220440486e-5, 6.809035475051331e-5, 6.773331946994714e-5,\n      6.737908499468983e-5, 6.702762210667536e-5, 6.667890196784397e-5,\n      6.633289611422732e-5, 6.598957645014013e-5, 6.564891524247695e-5,\n      6.531088511511182e-5, 6.497545904339849e-5, 6.464261034876926e-5,\n      6.431231269343022e-5, 6.398454007515145e-5, 6.36592668221497e-5,\n      6.333646758806192e-5, 6.301611734700765e-5, 6.26981913887388e-5,\n      6.238266531387477e-5, 6.206951502922127e-5, 6.175871674317105e-5,\n      6.145024696118516e-5, 6.114408248135311e-5, 6.084020039003013e-5,\n      6.05385780575499e-5, 6.023919313401189e-5, 5.994202354514116e-5,\n      5.964704748821969e-5, 5.935424342808726e-5, 5.906359009321115e-5,\n      5.877506647182303e-5, 5.848865180812158e-5, 5.820432559853976e-5,\n      5.792206758807556e-5, 5.764185776668465e-5, 5.7363676365734294e-5,\n      5.708750385451647e-5, 5.681332093682021e-5, 5.6541108547561035e-5,\n      5.627084784946696e-5, 5.600252022981951e-5, 5.5736107297249397e-5,\n      5.5471590878585174e-5, 5.5208953015754167e-5, 5.494817596273455e-5,\n      5.468924218255787e-5, 5.4432134344360746e-5, 5.417683532048495e-5,\n      5.39233281836252e-5, 5.367159620402306e-5, 5.342162284670725e-5,\n      5.317339176877831e-5, 5.292688681673749e-5, 5.268209202385884e-5,\n      5.243899160760396e-5, 5.219756996707819e-5, 5.19578116805274e-5,\n      5.1719701502875656e-5, 5.1483224363301716e-5, 5.1248365362854474e-5,\n      5.101510977210615e-5, 5.078344302884297e-5, 5.055335073579262e-5,\n      5.032481865838723e-5, 5.0097832722562e-5, 4.98723790125883e-5,\n      4.9648443768941085e-5, 4.942601338619959e-5, 4.920507441098051e-5,\n      4.898561353990419e-5, 4.8767617617591966e-5, 4.85510736346947e-5,\n      4.83359687259519e-5, 4.812229016828107e-5, 4.791002537889618e-5,\n      4.7699161913455596e-5, 4.748968746423786e-5, 4.72815898583461e-5,\n      4.707485705593939e-5, 4.686947714849163e-5, 4.666543835707626e-5,\n      4.646272903067771e-5, 4.626133764452818e-5, 4.60612527984696e-5,\n      4.586246321534025e-5, 4.566495773938598e-5, 4.5468725334694975e-5,\n      4.5273755083656305e-5, 4.508003618544137e-5, 4.488755795450798e-5,\n      4.469630981912715e-5, 4.4506281319931255e-5, 4.431746210848412e-5,\n      4.4129841945872115e-5, 4.3943410701316335e-5, 4.375815835080485e-5,\n      4.357407497574543e-5, 4.339115076163789e-5, 4.320937599676614e-5,\n      4.302874107090888e-5\n    ],\n    \"pseudovoigt_2\": [\n      0.0008192445898919191, 0.0008367657970890763, 0.0008548549651635387,\n      0.0008735369008553154, 0.0008928377796899282, 0.0009127852375865147,\n      0.0009334084696966048, 0.000954738337132994, 0.0009768074823165388,\n      0.0009996504537450903, 0.0010233038410741566, 0.0010478064214944763,\n      0.001073199318498782, 0.001099526174250279, 0.001126833336900406,\n      0.0011551700643555025, 0.0011845887461632576, 0.0012151451453831575,\n      0.0012468986625235724, 0.0012799126238754273, 0.0013142545968526543,\n      0.0013499967352679399, 0.001387216157834144, 0.0014259953635941418,\n      0.0014664226884522518, 0.0015085928075182593, 0.0015526072885909013,\n      0.0015985752028142852, 0.0016466137993529396, 0.0016968492518666329,\n      0.00174941748564572, 0.0018044650955162072, 0.0018621503660706433,\n      0.0019226444074614303, 0.001986132421949395, 0.002052815118683034,\n      0.002122910296853553, 0.002196654620501058, 0.002274305611926903,\n      0.0023561438950040663, 0.00244247572480284, 0.0025336358460235665,\n      0.0026299907299483535, 0.0027319422482315783, 0.0028399318521433437,\n      0.002954445338231177, 0.003076018296233562, 0.0032052423530398257,\n      0.0033427723482658076, 0.0034893346035125153, 0.003645736479745359,\n      0.003812877456936287, 0.003991762019017006, 0.00418351468769503,\n      0.004389397623877995, 0.004610831309348223, 0.0048494189391642345,\n      0.005106975303911505, 0.005385561129457711, 0.005687524082353807,\n      0.006015547957609393, 0.006372711964023837, 0.0067625625401276385,\n      0.007189200811526193, 0.007657389693842981, 0.008172685832189044,\n      0.008741603157191904, 0.009371816983705738, 0.01007242050279176,\n      0.010854249540824236, 0.011730297050590668, 0.012716246652502995,\n      0.013831165700955852, 0.015098414393961961, 0.016546850812023648,\n      0.018212446278484253, 0.02014047713668057, 0.022388537723033,\n      0.02503074105611849, 0.028163665456307063, 0.03191491280279081,\n      0.03645564704716857, 0.04201932077963711, 0.04893022637495016,\n      0.057647987608325624, 0.06883847899328488, 0.08348942858195167,\n      0.10310261575013842, 0.13001718109380564, 0.16794791756021857,\n      0.2227902677692082, 0.30247621542621883, 0.40144916094629907,\n      0.43154170834763916, 0.2657736647929631, 0.13735546223617767,\n      0.3031323769667468, 0.4387246557498286, 0.3856966266613826,\n      0.287260762361435, 0.21216596283786704, 0.16066058685292614,\n      0.12490027784170292, 0.09941163318863112, 0.08075790985307471,\n      0.0667695072865715, 0.056048123742067885, 0.0476702821850126,\n      0.04101091131172576, 0.03563692187007328, 0.031241681294662142,\n      0.02760375012240792, 0.024560304044998163, 0.021989640080512924,\n      0.019799424788812636, 0.017918648409212902, 0.01629201840729393,\n      0.014875988689061358, 0.013635904619884641, 0.012543921517503984,\n      0.011577467372330999, 0.01071809384329147, 0.009950607867490614,\n      0.009262408530813348, 0.008642975777499548, 0.008083472626419647,\n      0.007576433077322195, 0.007115515306478207, 0.006695305040616366,\n      0.006311157810864881, 0.00595907156440915, 0.00563558315182614,\n      0.005337683720982022, 0.005062749179766427, 0.004808482742784108,\n      0.00457286722489288, 0.0043541252400286405, 0.004150685845461861,\n      0.003961156467558566, 0.0037842991759727703, 0.00361901055435361,\n      0.003464304558611049, 0.0033192978672122553, 0.0031831973184416134,\n      0.0030552891020583146, 0.0029349294311673034, 0.0028215364673451846,\n      0.0027145833104307124, 0.002613591895691443, 0.0025181276667181627,\n      0.0024277949134820357, 0.0023422326823904433, 0.002261111179590879,\n      0.0021841286007520224, 0.002111008330541643, 0.0020414964633789943,\n      0.00197535960405368, 0.0019123829127070204, 0.0018523683636559967,\n      0.0017951331917590032, 0.0017405085036040493, 0.001688338033847974,\n      0.0016384770296358762, 0.0015907912482543527, 0.0015451560550792498,\n      0.001501455610517629, 0.0014595821360551763, 0.0014194352507388842,\n      0.001380921370478721, 0.0013439531634657467, 0.001308449055797535,\n      0.0012743327820924075, 0.0012415329764759774, 0.0012099827998494697,\n      0.0011796195998094558, 0.0011503845999920783, 0.001122222615969059,\n      0.0010950817951343758, 0.0010689133782949604, 0.0010436714809209757,\n      0.0010193128922252783, 0.0009957968904310904, 0.0009730850727548365,\n      0.0009511411987801194, 0.0009299310460313121, 0.0009094222766731369,\n      0.0008895843143677206, 0.0008703882304143916, 0.0008518066383813138,\n      0.0008338135965130208, 0.0008163845172651001, 0.0007994960833775104,\n      0.0007831261699521231, 0.0007672537720486825, 0.0007518589373571695,\n      0.0007369227035439478, 0.0007224270399046658, 0.0007083547929889494,\n      0.0006946896358909787, 0.000681416020926253, 0.0006685191354386475,\n      0.0006559848605033951, 0.0006437997323111913, 0.0006319509060363619,\n      0.0006204261220081892, 0.0006092136740191636, 0.0005983023796173097,\n      0.0005876815522419211, 0.0005773409750731563, 0.0005672708764760948,\n      0.0005574619069291377, 0.0005479051173351085, 0.0005385919386211707,\n      0.0005295141625407996, 0.0005206639235975471, 0.0005120336820163234,\n      0.000503616207693405, 0.0004954045650614196, 0.0004873920988101802,\n      0.0004795724204085242, 0.0004719393953762153, 0.0004644871312585911,\n      0.00045720996625997327, 0.0004501024584949169, 0.0004431593758192281,\n      0.000436375686205288, 0.0004297465486286445, 0.00042326730443507216,\n      0.0004169334691593754, 0.00041074072476911857, 0.00040468491230825476,\n      0.00039876202491726307, 0.00039296820120793616, 0.0003872997189723749,\n      0.000381752989207063, 0.00037632455043411933, 0.0003710110633029586,\n      0.00036580930545664965, 0.000360716166648243, 0.0003557286440932607,\n      0.0003508438380453769, 0.0003460589475831372, 0.0003413712665962839,\n      0.00033677817996095676, 0.00033227715989367807, 0.000327865762474643,\n      0.0003235416243313791, 0.00031930245947438805, 0.0003151460562768576,\n      0.000311070274590996, 0.000307073042993973, 0.0003031523561568577,\n      0.0002993062723303061, 0.00029553291094112677, 0.0002918304502941642,\n      0.0002881971253742633, 0.0002846312257433636, 0.0002811310935280472,\n      0.0002776951214931226, 0.0002743217511970658, 0.000271009471225369,\n      0.0002677568154980567, 0.00026456236164783693, 0.0002614247294655338,\n      0.0002583425794096339, 0.00025531461117694063, 0.00025233956233149444,\n      0.00024941620698905174, 0.00024654335455457586, 0.0002437198485103028,\n      0.00024094456525208628, 0.00023821641297183392, 0.0002355343305839605,\n      0.00023289728669388803, 0.0002303042786067233, 0.00022775433137432985,\n      0.00022524649687910995, 0.00022277985295288472, 0.00022035350252934765,\n      0.00021796657282863548, 0.00021561821457263383, 0.00021330760122970053,\n      0.00021103392828755466, 0.00020879641255313447, 0.00020659429147828952,\n      0.0002044268225102226, 0.00020229328246564862, 0.00020019296692768643,\n      0.00019812518966454373, 0.00019608928206910208, 0.00019408459261854435,\n      0.0001921104863532133, 0.00019016634437391957, 0.0001882515633569599,\n      0.00018636555508613352, 0.00018450774600107993, 0.00018267757676129133,\n      0.0001808745018251818, 0.00017909798904361924, 0.0001773475192673578,\n      0.00017562258596782925, 0.00017392269487077533, 0.00017224736360222802,\n      0.00017059612134636372, 0.00016896850851477797, 0.00016736407642674843,\n      0.0001657823870000694, 0.00016422301245206124, 0.00016268553501037347,\n      0.00016116954663321709, 0.00015967464873867577, 0.00015820045194276077,\n      0.00015674657580588985, 0.0001553126485874787, 0.00015389830700835412,\n      0.00015250319602070042, 0.0001511269685852717, 0.0001497692854556061,\n      0.00014842981496899225, 0.00014710823284394854, 0.00014580422198398377,\n      0.00014451747228741587, 0.00014324768046304, 0.00014199454985143616,\n      0.00014075779025172423, 0.00013953711775357552, 0.00013833225457429932,\n      0.00013714292890083053, 0.000135968874736451, 0.00013480983175208144,\n      0.0001336655451419913, 0.00013253576548377481, 0.00013142024860245198,\n      0.00013031875543855384, 0.00012923105192006126, 0.00012815690883806756,\n      0.00012709610172604265, 0.00012604841074257962, 0.00012501362055750918,\n      0.00012399152024127286, 0.00012298190315744727, 0.000121984566858319,\n      0.00012099931298340979, 0.00012002594716085935, 0.00011906427891157138,\n      0.00011811412155603763, 0.00011717529212375237, 0.00011624761126513763,\n      0.00011533090316589635, 0.00011442499546372306, 0.00011352971916729094,\n      0.00011264490857745207, 0.00011177040121057477, 0.00011090603772395829,\n      0.00011005166184325602, 0.00010920712029184921, 0.00010837226272210843,\n      0.00010754694164848834, 0.00010673101238239711, 0.00010592433296879004,\n      0.00010512676412443209, 0.00010433816917778218, 0.00010355841401044885,\n      0.00010278736700017208, 0.00010202489896528395, 0.00010127088311060664,\n      0.00010052519497474382, 9.978771237872564e-5, 9.905831537596654e-5,\n      9.833688620349942e-5, 9.762330923444684e-5, 9.691747093169607e-5,\n      9.621925980274069e-5, 9.552856635565749e-5, 9.484528305618468e-5,\n      9.416930428587118e-5, 9.350052630126456e-5, 9.283884719411196e-5,\n      9.218416685254066e-5, 9.153638692319512e-5, 9.089541077430033e-5,\n      9.026114345962852e-5, 8.96334916833412e-5, 8.901236376568522e-5,\n      8.839766960951641e-5, 8.778932066763066e-5, 8.71872299108779e-5,\n      8.659131179703998e-5, 8.600148224044887e-5, 8.541765858232833e-5,\n      8.483975956183605e-5, 8.426770528779043e-5, 8.370141721106122e-5,\n      8.314081809760831e-5, 8.258583200214898e-5, 8.203638424243958e-5,\n      8.149240137415285e-5, 8.095381116633734e-5, 8.042054257744142e-5,\n      7.98925257318892e-5, 7.936969189719188e-5, 7.885197346158282e-5,\n      7.833930391215985e-5, 7.783161781352502e-5, 7.732885078690547e-5,\n      7.683093948974656e-5, 7.633782159576158e-5, 7.584943577542937e-5,\n      7.536572167692667e-5, 7.488661990748473e-5, 7.441207201515924e-5,\n      7.394202047100345e-5, 7.3476408651634e-5, 7.301518082217985e-5,\n      7.25582821196041e-5, 7.210565853639097e-5, 7.165725690458634e-5,\n      7.121302488018592e-5, 7.077291092785999e-5, 7.033686430600822e-5,\n      6.990483505213528e-5, 6.947677396854021e-5, 6.905263260831095e-5,\n      6.863236326161793e-5, 6.821591894229805e-5, 6.78032533747231e-5,\n      6.739432098094488e-5, 6.69890768681116e-5, 6.658747681614716e-5,\n      6.618947726568936e-5, 6.579503530627863e-5, 6.540410866479306e-5,\n      6.501665569412267e-5, 6.463263536207828e-5, 6.425200724052835e-5,\n      6.387473149475979e-5, 6.350076887305592e-5, 6.313008069648823e-5,\n      6.276262884891505e-5, 6.239837576718453e-5, 6.203728443153482e-5,\n      6.167931835618918e-5, 6.132444158013944e-5, 6.0972618658115566e-5,\n      6.062381465173501e-5, 6.027799512082949e-5, 5.993512611494393e-5,\n      5.959517416500453e-5, 5.925810627515134e-5, 5.892388991473247e-5,\n      5.8592493010455517e-5, 5.826388393869327e-5, 5.793803151793989e-5,\n      5.7614905001414264e-5, 5.729447406980755e-5, 5.697670882417134e-5,\n      5.666157977894336e-5, 5.634905785510801e-5, 5.6039114373488473e-5,\n      5.573172104816756e-5, 5.5426849980034484e-5, 5.5124473650455e-5,\n      5.4824564915061767e-5, 5.4527096997662996e-5, 5.4232043484266133e-5,\n      5.393937831721451e-5, 5.36490757894345e-5, 5.336111053879081e-5,\n      5.3075457542547025e-5, 5.279209211193048e-5, 5.2510989886797616e-5,\n      5.223212683039902e-5, 5.1955479224241134e-5, 5.168102366304335e-5,\n      5.140873704978756e-5, 5.1138596590859346e-5, 5.087057979127771e-5,\n      5.0604664450012594e-5, 5.034082865538729e-5, 5.007905078056521e-5,\n      4.9819309479117665e-5, 4.9561583680672936e-5, 4.9305852586642965e-5,\n      4.905209566602762e-5, 4.8800292651294224e-5, 4.855042353433053e-5,\n      4.8302468562470595e-5, 4.8056408234591275e-5, 4.78122232972779e-5,\n      4.756989474105831e-5, 4.7329403796703276e-5, 4.7090731931592434e-5,\n      4.685386084614401e-5, 4.66187724703072e-5, 4.638544896011623e-5,\n      4.615387269430442e-5, 4.592402627097728e-5, 4.569589250434352e-5,\n      4.5469454421502686e-5, 4.524469525928835e-5, 4.5021598461166e-5,\n      4.48001476741839e-5, 4.458032674597668e-5, 4.436211972182013e-5,\n      4.414551084173634e-5, 4.393048453764809e-5, 4.371702543058175e-5,\n      4.350511832791763e-5, 4.329474822068677e-5, 4.3085900280913395e-5,\n      4.28785598590022e-5, 4.2672712481169414e-5, 4.2468343846917126e-5,\n      4.226543982654949e-5, 4.206398645873065e-5, 4.186396994808343e-5,\n      4.1665376662827354e-5, 4.146819313245634e-5, 4.127240604545447e-5,\n      4.1078002247049506e-5, 4.088496873700335e-5, 4.069329266743872e-5,\n      4.050296134070135e-5, 4.031396220725737e-5, 4.012628286362455e-5,\n      3.99399110503375e-5, 3.97548346499456e-5, 3.957104168504358e-5,\n      3.9388520316333784e-5, 3.9207258840719535e-5, 3.902724568942921e-5,\n      3.8848469426170554e-5, 3.867091874531438e-5, 3.849458247010693e-5,\n      3.831944955091137e-5, 3.814550906347674e-5, 3.7972750207234464e-5,\n      3.780116230362176e-5, 3.7630734794431556e-5, 3.7461457240188474e-5,\n      3.729331931855013e-5, 3.7126310822733576e-5, 3.696042165996636e-5,\n      3.679564184996181e-5, 3.6631961523418004e-5, 3.646937092053987e-5,\n      3.630786038958455e-5, 3.6147420385429095e-5, 3.598804146816008e-5,\n      3.582971430168522e-5, 3.567242965236617e-5, 3.551617838767226e-5,\n      3.536095147485507e-5, 3.520673997964266e-5, 3.505353506495445e-5,\n      3.490132798963498e-5, 3.475011010720733e-5, 3.459987286464499e-5,\n      3.445060780116261e-5, 3.4302306547024884e-5, 3.4154960822373234e-5,\n      3.4008562436070106e-5, 3.386310328456072e-5, 3.371857535075167e-5,\n      3.357497070290638e-5, 3.343228149355674e-5, 3.3290499958431115e-5,\n      3.314961841539827e-5, 3.300962926342669e-5, 3.287052498155941e-5,\n      3.273229812790386e-5, 3.25949413386366e-5, 3.245844732702256e-5,\n      3.232280888244874e-5, 3.218801886947186e-5, 3.205407022688011e-5,\n      3.1920955966768215e-5\n    ],\n    \"constant_3\": [\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155, 0.03676872733249155, 0.03676872733249155,\n      0.03676872733249155\n    ],\n    \"gaussian_4\": [\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 1e-323, 1.78772040377626e-310, 1.8032804745638036e-297,\n      9.560027216324996e-285, 2.6637112322435962e-272, 3.900742843443814e-260,\n      3.0022002979695774e-248, 1.214406748796896e-236, 2.581789590092358e-225,\n      2.88475997458685e-214, 1.694067407172288e-203, 5.22858117890097e-193,\n      8.481432079270852e-183, 7.230805618269816e-173, 3.2399353925736414e-163,\n      7.629888269479909e-154, 9.443482318596115e-145, 6.142969085323184e-136,\n      2.1001806506598716e-127, 3.7736979952081206e-119, 3.563771039717098e-111,\n      1.7688239601240874e-103, 4.614148798060406e-96, 6.326022667889939e-89,\n      4.5582911044351154e-82, 1.7262573274432265e-75, 3.435905243038288e-69,\n      3.5942558333395547e-63, 1.9761001873913888e-57, 5.710065596892935e-52,\n      8.671723073903939e-47, 6.921526221986705e-42, 2.903557972517465e-37,\n      6.401640765551718e-33, 7.417956165452716e-29, 4.517616809165431e-25,\n      1.4459946417733081e-21, 2.4325184426209592e-18, 2.1506897466208535e-15,\n      9.993820679784684e-13, 2.4407174464664605e-10, 3.132821304213062e-8,\n      2.113420454650224e-6, 7.493217769268222e-5, 0.0013963135974129001,\n      0.013675075889881988, 0.07038963091674806, 0.1904231723016589,\n      0.27074663567923785, 0.20231985570707672, 0.07945955150684494,\n      0.016401587200826954, 0.0017793353628243944, 0.00010145230248197641,\n      3.0401721109090353e-6, 4.788137334638579e-8, 3.9633934857367174e-10,\n      1.7242488658334508e-12, 3.942437995785727e-15, 4.737638938119847e-18,\n      2.992204089785455e-21, 9.932364063416592e-25, 1.732791115813526e-28,\n      1.588809984234179e-32, 7.656492703577398e-37, 1.939188159150705e-41,\n      2.581322062425891e-46, 1.805912071231515e-51, 6.640230782055112e-57,\n      1.2832223383564624e-62, 1.3033252640112674e-68, 6.957222317430592e-75,\n      1.951871010969456e-81, 2.878051172814559e-88, 2.2303759534766652e-95,\n      9.08426514701918e-103, 1.9446152813742607e-110, 2.1878107491501e-118,\n      1.2936535192317675e-126, 4.0202990733029856e-135, 6.566454121793289e-144,\n      5.63683901498046e-153, 2.543153149166632e-162, 6.030336704853497e-172,\n      7.515238611957875e-182, 4.922391494019721e-192, 1.6945004715889732e-202,\n      3.065768809317157e-213, 2.915206165895905e-224, 1.4569052599246102e-235,\n      3.826709668292917e-247, 5.282650527748491e-259, 3.8327493032816837e-271,\n      1.4615077098342504e-283, 2.9290310330625155e-296, 3.085169294723996e-309,\n      1.73e-322, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n    ]\n  }\n}\n</code></pre></p>"},{"location":"interface/features/#jupyter-notebook-interface","title":"Jupyter Notebook Interface","text":"<p><code>SpectraFit</code> provides also an interface to Jupyter Notebook as an package import. This interface is useful for interactive fitting and plotting of the results. For interactive working the following tools are implemented:</p> <ol> <li>Plotly for interactive plotting of the results</li> <li>Dtale for interactive data exploration (external)</li> <li>itables for interactive data exploration (internal)</li> </ol> <p>For more information, please check the Jupyter Notebook Interface section.</p>"},{"location":"interface/installation/","title":"Installation","text":"<p><code>SpectraFit</code> can be currently only installed directly from the GitHub repository. It is important that poetry is installed first, because the <code>setup.py</code> is not explicitly defined, because it is indirectly available in the <code>pyproject.toml</code> file.</p>"},{"location":"interface/installation/#via-github","title":"via GitHub","text":"Bash<pre><code>pip install git+https://github.com/Anselmoo/SpectraFit.git\n</code></pre>"},{"location":"interface/installation/#via-pypi","title":"via PyPi","text":"Bash<pre><code>pip install spectrafit\n</code></pre>"},{"location":"interface/installation/#with-extensions","title":"With extensions","text":"<p>For the <code>jupyter</code> support, the following command can be used:</p> Bash<pre><code>pip install spectrafit[jupyter-dash]\n</code></pre> <p>For the graph visualization, the following command can be used:</p> Bash<pre><code>pip install spectrafit[graph]\n</code></pre> <p>For all extensions, the following command can be used:</p> Bash<pre><code>pip install spectrafit[all]\n</code></pre>"},{"location":"interface/installation/#via-environment","title":"via Environment","text":"<p>To keep the system environment clean, the installation is done via the:</p> PIPXCondaPoetry <p>PIPX allows to install and run packages in a isolated environment.</p> <p>Installation:</p> Bash<pre><code># install pipx for macOS\nbrew install pipx\n# install pipx for Linux or Windows\npip install pipx\npipx install --upgrade pipx\n# install spectrafit for python 3.7\npipx install spectrafit --python python3.7\n# install spectrafit for python 3.8\npipx install spectrafit --python python3.8\n# install spectrafit for python 3.9\npipx install spectrafit --python python3.9\n\nspectrafit --help\n</code></pre> <p>Conda is a package manager for Python. It is a tool for installing and managing packages, environments, and virtualenvs. <code>SpectraFit</code> is available as conda-forge.</p> <p>Example:</p> Bash<pre><code>conda install -c conda-forge spectrafit\n\nspectrafit --help\n</code></pre> <p>For include the <code>jupyter</code> support, the following command can be used:</p> Bash<pre><code>conda install -c conda-forge spectrafit-jupyter\n\n# To test\npython -c \"from spectrafit.plugins.notebook import SpectraFitNotebook\"\n</code></pre> <p>For include the <code>graph</code> support, the following command can be used:</p> <p>Bash<pre><code>conda install -c conda-forge spectrafit-graph\n\n# To test\npython -c \"from spectrafit.plugins.graph import SpectraFitGraph\"\n</code></pre> For include the <code>all</code> support, the following command can be used:</p> Bash<pre><code>conda install -c conda-forge spectrafit-all\n\n# To test\npython -c \"from spectrafit.plugins.notebook import SpectraFitNotebook\"\npython -c \"from spectrafit.plugins.graph import SpectraFitGraph\"\n</code></pre> <p>Extended documentation about the installation of <code>SpectraFit</code> via conda can be found here. In general, the following command can be useful for working with conda:</p> Bash<pre><code>conda config --add channels conda-forge\nconda config --set channel_priority strict\n</code></pre> <p>For installing <code>SpectraFit</code> via Poetry, first <code>SpectraFit</code> has to be downloaded or cloned from the GitHub repository. Optionally, the <code>SpectraFit</code> repo has to be unpacked. Next, <code>poetry</code> has to be installed via <code>pip</code>:</p> Bash<pre><code>pip install poetry\n</code></pre> <p>or via <code>conda</code>:</p> <p>Bash<pre><code>conda install -c conda-forge poetry\n</code></pre> Installation:</p> <p>Bash<pre><code>poetry install -E jupyter\n</code></pre> Usage:</p> Bash<pre><code>poetry run spectrafit --help\n</code></pre> <p>or using the <code>poetry shell</code>:</p> Bash<pre><code>poetry shell\nspectrafit --help\n</code></pre> <p>Result:</p> Bash<pre><code>    usage: spectrafit [-h] [-o OUTFILE] [-i INPUT] [-ov] [-e0 ENERGY_START]\n                    [-e1 ENERGY_STOP] [-s SMOOTH] [-sh SHIFT] [-c COLUMN COLUMN]\n                    [-sep { ,,,;,:,|, ,s+}] [-dec {.,,}] [-hd HEADER]\n                    [-g {0,1,2}] [-auto] [-np] [-v] [-vb {0,1,2}]\n                    infile\n\n    Fast Fitting Program for ascii txt files.\n\n    ...\n</code></pre>"},{"location":"interface/installation/#plugins","title":"Plugins","text":"<p>The <code>SpectraFit</code> package is designed to be extended by plugins. Currently available plugins are:</p> <ul> <li> Input-File-Converter (built-in)</li> <li> Jupyter-Notebook-Interface (<code>pip install spectrafit[jupyter]</code>)</li> <li> Elastic-Line-Alignment (in progress)</li> </ul>"},{"location":"interface/installation/#via-docker","title":"via Docker","text":"<p>About Docker-Image</p> <p>Since version 0.12.0, the <code>SpectraFit</code> package is available as a Docker-Image. The Docker-Image is based on an modified Jupyter-Scipy-Image and contains the <code>SpectraFit</code> package and the Jupyter-Notebook interface.</p> <p>The Docker-Image can be installed for both amd64 aka x86_64 or arm64 and used via:</p> Bash<pre><code>docker pull ghcr.io/anselmoo/spectrafit:latest\ndocker run -it -p 8888:8888 spectrafit:latest\n</code></pre> <p>or just via:</p> Bash<pre><code>docker run -it -p 8888:8888 ghcr.io/anselmoo/spectrafit:latest\n</code></pre> <p></p> <p>To include the home directory of the host system, the following command can be used:</p> Bash<pre><code>docker run -it -p 8888:8888 -v $HOME:/home/user/work spectrafit:latest\n</code></pre> <p>or via:</p> Bash<pre><code>docker run -it -p 8888:8888 -v $HOME:/home/user/work ghcr.io/anselmoo/spectrafit:latest\n</code></pre> <p>see also: spectrafit</p> <p>About cosign</p> <p>coming soon</p>"},{"location":"interface/usage/","title":"Usage","text":""},{"location":"interface/usage/#standard-usage","title":"Standard Usage","text":"<p>In case of the standard usage of <code>SpectraFit</code>, the following steps are necessary:</p> <ol> <li>Having a structured textfile available with or without header. Preferred    fileformat can be <code>.csv</code> or <code>.txt</code>; however every file with a consistent    separation is supported.    SQL<pre><code>        -1.600000000000000089e+00    0.000000000000000000e+00\n        -1.583333333333333481e+00    3.891050583657595843e-03\n        -1.566666666666666874e+00    3.973071404922200699e-03\n        -1.550000000000000266e+00    4.057709648331829684e-03\n        -1.533333333333333659e+00    4.145077720207249357e-03\n        -1.516666666666667052e+00    4.235294117647067993e-03\n</code></pre></li> <li>A wide range of pre-defined separators can be choosen: <code>,</code>, <code>;</code>, <code>:</code>, <code>|</code>,    <code>\\t</code>, <code>s+</code>, <code></code></li> <li>Having an input file available as json,    toml, or    yaml. The input file has to have at    least the initial parameters for the peaks. More options are in the default    settings not necessary, but can be activated by extending the objects in the    input file.</li> <li>More command line arguments can be seen by activating the <code>-h</code> <code>`--help</code>    flag.</li> <li>The attributes <code>minimizer</code> and <code>optimizer</code> have to be also defined, because    they control the optimization algorithm of lmfit. For information see    lmfit.mininizer. The input file has to contain the following lines:    JSON<pre><code>   \"parameters\": {\n   \"minimizer\": { \"nan_policy\": \"propagate\", \"calc_covar\": true },\n   \"optimizer\": { \"max_nfev\": 1000, \"method\": \"leastsq\" }\n   }\n</code></pre></li> <li>Starting <code>SpectraFit</code> via:    Bash<pre><code>spectrafit data_file.txt input_file.json\n</code></pre></li> </ol> <p>Peak definition in the input file</p> <p>In the input file, the peaks has to be define as nested objects, as seen below:</p> JSON<pre><code>\"peaks\": {\n  \"1\": {\n    \"pseudovoigt\": {\n      \"amplitude\": {\n        \"max\": 2,\n        \"min\": 0,\n        \"vary\": true,\n        \"value\": 1\n      },\n      \"center\": {\n        \"max\": 2,\n        \"min\": -2,\n        \"vary\": true,\n        \"value\": 0\n      },\n      \"fwhmg\": {\n        \"max\": 0.1,\n        \"min\": 0.02,\n        \"vary\": true,\n        \"value\": 0.01\n      },\n      \"fwhml\": {\n        \"max\": 0.1,\n        \"min\": 0.01,\n        \"vary\": true,\n        \"value\": 0.01\n      }\n    }\n  },\n</code></pre> <p>First, peaks have to be declared in the input file. Every peak contains a number as string; like \"1\" for peak #1. Next, the type of peak has to be defined in the input. The following peak types are available:</p> <ul> <li> Gaussian</li> <li> Lorentzian     also known as Cauchy distribution</li> <li> Voigt</li> <li> Pseudo Voigt</li> <li> Exponential</li> <li> Powerlaw (also known as Log-parabola or just Power)</li> <li> Linear</li> <li> Constant</li> <li> Error Function</li> <li> Arcus Tangens</li> <li> Logarithmic</li> </ul> <p>More information about the models, please see the Section Models. For every model, the attributes have to be defined. The attributes are in case of the <code>pseudovoigt</code> model:</p> <ol> <li><code>Amplitude</code>: The amplitude of the distribution function.</li> <li><code>Center</code>: The center of the distribution function.</li> <li><code>FWHM</code>: The full width half maximum of the Gaussian distribution</li> <li><code>FWHM</code>: The full width half maximum of the Lorentzian distribution</li> </ol> <p>Each attribute has sub-attributes, which are always:</p> <ol> <li><code>max</code>: the maximum value of the attribute</li> <li><code>min</code>: the minimum value of the attribute</li> <li><code>vary</code>: if the attribute should be varied during the fit</li> <li><code>value</code>: the initial value of the attribute</li> </ol> <p>At the moment, no default attributes are defined for the models, but this will come in a future release.</p>"},{"location":"interface/usage/#advanced-usage","title":"Advanced Usage","text":"<p>In case of advanced usage of <code>SpectraFit</code>, the following steps are necessary:</p>"},{"location":"interface/usage/#redfine-the-spectrafit-class","title":"Redfine the <code>SpectraFit</code> class","text":"<p>Define the settings in the input file as shown below:</p> JSON<pre><code>{\n\"settings\": {\n\"column\": [0, 1],\n\"decimal\": \".\",\n\"energy_start\": 0,\n\"energy_stop\": 8,\n\"header\": null,\n\"infile\": \"spectrafit/test/rixs_fecl4.txt\",\n\"outfile\": \"fit_results\",\n\"oversampling\": false,\n\"separator\": \"\\t\",\n\"shift\": 0,\n\"smooth\": 0,\n\"verbose\": 1,\n\n\"noplot\": false\n}\n</code></pre> <p>If the settings are pre-defined in the input file, the corresponding command line arguments will be automatically replaced with them. If they are not defined, the command line arguments or their default values will be use. This allows to run faster <code>SpectraFit</code> and also be consistent in the fitting procedure in case of larger studies. For the detail mechanism of overwriting the settings, please see the API documentation of Command Line Module.</p> <p>Datatype of columns for <code>pandas.read_csv</code></p> <p>According to the documentation of <code>pandas.read_csv</code>, the datatype of  can be both: <code>int</code> or <code>str</code>. The <code>in</code> is the default. In case of using  the header the <code>str</code> is the mandatory.</p>"},{"location":"interface/usage/#define-project-details","title":"Define project details","text":"<p>Another advanced feature of <code>SpectraFit</code> is to define the fit as project, which can become very useful in case of versioning the fitting project. For using <code>SpectraFit</code> as a project, the project details have to be defined as attributes. The attributes are <code>project name</code>, <code>project details</code>, <code>keywords</code>, as shown in the snippet below:</p> JSON<pre><code>\"fitting\": {\n    \"description\": {\n      \"project_name\": \"Template\",\n      \"project_details\": \"Template for testing\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    }\n</code></pre> <p>All three attributes are strings, the <code>project name</code> should be ideally a single name with no spaces. The <code>project details</code> can be longer text, and the <code>keywords</code> should be a list of strings for tagging in a database.</p>"},{"location":"interface/usage/#tuning-minimizer-and-optimizer-and-activating-confidence-intervals","title":"Tuning <code>Minimizer</code> and <code>Optimizer</code> and activating <code>Confidence Intervals</code>","text":"<p>The input file can be extended with more parameters, which are not necessary and optional in case of the confidence intervals. In general, the keywords of the lmfit <code>minimizer</code> function are supported. For more information please check the module lmfit.mininizer. The attributes have to be initialized with the keyword <code>parameters</code> as shown below:</p> JSON<pre><code> \"parameters\": {\n   \"minimizer\": { \"nan_policy\": \"propagate\", \"calc_covar\": true },\n   \"optimizer\": { \"max_nfev\": 1000, \"method\": \"leastsq\" },\n   \"report\": { \"min_correl\": 0.0 },\n   \"conf_interval\": {\n     \"p_names\": null,\n     \"sigmas\": null,\n     \"trace\": true,\n     \"maxiter\": 200,\n     \"verbose\": 1,\n     \"prob_func\": null\n   }\n }\n</code></pre> <p>About confidence interval calculations</p> <p>The calculations of the confidence intervals depends on the number of  features and <code>maxiter</code>. Consequently, the confidence interval calculations  should be only used for the final fit to put the calculation time low.</p>"},{"location":"interface/usage/#using-mathematical-expressions","title":"Using mathematical expressions","text":"<p>The input file can be further extended by <code>expressions</code>, which are evaluated during the fitting process. The <code>expressions</code> have to be defined as attributes of the <code>fitting</code> object in the input file. It can be only contain mathematical constraints or dependencies between different <code>peaks</code>; please compare the docs of lmfit.eval and docs. The attributes are defined by the keyword <code>expr</code> followd by the string, which can contain any mathematical expression supported by Python.</p> <p>About the importance of expressions</p> <p>Using the <code>expr</code> attribute, the amplitude of the peak <code>2</code> can be defined \u2153 of the amplitude of the peak <code>1</code>. In general, this expression mode is very useful in cases of fitting relative dependencies like the L-edge X-ray Absorption Spectra (L-XAS), where are relative dependencie between the L<sub>3</sub> and L<sub>2</sub> edge has to be defined.</p> JSON<pre><code>\"peaks\": {\n       \"1\": {\n         \"pseudovoigt\": {\n           \"amplitude\": {\n             \"max\": 2,\n             \"min\": 0,\n             \"vary\": true,\n             \"value\": 1\n           },\n           \"center\": {\n             \"max\": 2,\n             \"min\": -2,\n             \"vary\": true,\n             \"value\": 0\n           },\n           \"fwhmg\": {\n             \"max\": 0.74,\n             \"min\": 0.02,\n             \"vary\": true,\n             \"value\": 0.21\n           },\n           \"fwhml\": {\n             \"max\": 0.74,\n             \"min\": 0.01,\n             \"vary\": true,\n             \"value\": 0.21\n           }\n         }\n       },\n       \"2\": {\n         \"pseudovoigt\": {\n           \"amplitude\": {\n             \"expr\": \"pseudovoigt_amplitude_1 / 3\"\n           },\n           \"center\": {\n             \"expr\": \"pseudovoigt_center_1 + 1.73\"\n           },\n           \"fwhmg\": {\n             \"max\": 0.5,\n             \"min\": 0.02,\n             \"vary\": true,\n             \"value\": 0.01\n           },\n           \"fwhml\": {\n             \"max\": 0.5,\n             \"min\": 0.01,\n             \"vary\": true,\n             \"value\": 0.01\n           }\n         }\n       },\n       \"3\": {\n         \"constant\": {\n           \"amplitude\": {\n             \"max\": 2,\n             \"min\": 0.01,\n             \"vary\": true,\n             \"value\": 1\n           }\n         }\n       },\n       \"4\": {\n         \"gaussian\": {\n           \"amplitude\": {\n             \"max\": 2,\n             \"min\": 0,\n             \"vary\": true,\n             \"value\": 1\n           },\n           \"center\": {\n             \"expr\": \"pseudovoigt_center_2 + 0.35\"\n           },\n           \"fwhmg\": {\n             \"max\": 0.4,\n             \"min\": 0.02,\n             \"vary\": true,\n             \"value\": 0.01\n           }\n         }\n       }\n     }\n</code></pre>"},{"location":"interface/usage/#activating-global-fitting","title":"Activating Global Fitting","text":"<p>The input file as well as the command line interface can be turned into the <code>global fitting</code> mode. The <code>global fitting</code> mode is useful when the fitting several spectra with the same initial model. In case of using the <code>global fitting</code> mode = 1, the <code>fitting</code> object has to be defined in the same way like the local fitting model; via Input file</p> JSON<pre><code>{\n  \"settings\": {\n    \"column\": [\"energy\"],\n    \"decimal\": \".\",\n    \"header\": 0,\n    \"infile\": \"data_global.csv\",\n    \"outfile\": \"example_6\",\n    \"oversampling\": false,\n    \"separator\": \",\",\n    \"shift\": 0.2,\n    \"smooth\": false,\n    \"verbose\": 1,\n\n    \"noplot\": false,\n    \"global\": 1,\n    \"autopeak\": false\n  }\n}\n</code></pre> <p>or via Command Line.</p> Bash<pre><code>spectrafit global_data.csv -i input.json -g 1\n</code></pre> <p>For more info please see the example section.</p> <p>Correct Data Format for Global Fits</p> <p>For the correct fitting the data file has to contain only spectra data;  meaning <code>energy</code> and <code>intensity</code> columns. No other columns are  allowed!!</p>"},{"location":"interface/usage/#activating-automatic-peak-detection-for-fitting","title":"Activating Automatic Peak detection for Fitting","text":"<p>The input file can further extended by <code>autopeak</code>, which is used to automatically find the peaks in the data. The <code>autopeak</code> has to be defined as an attribute of the <code>setting</code> object in the input file or directly via command line:</p> Bash<pre><code>spectrafit data.csv -i input.json -auto\n</code></pre> <p>The default peak model is <code>Gaussian</code>, but the <code>setting</code>-section in the input file allows switching to:</p> <ul> <li> gaussian</li> <li> lorentzian</li> <li> voigt</li> <li> pseudovoigt</li> </ul> <p>Furthermore, the finding attributes of the <code>autopeak</code> are identical to the Scipy's <code>find_peaks</code>. The <code>autopeak</code> attributes have to be defined as follows:</p> JSON<pre><code>  \"autopeak\": {\n   \"modeltype\": \"gaussian\",\n   \"height\": [0.0, 10],\n   \"threshold\": [0.0, 10],\n   \"distance\": 2,\n   \"prominence\": [0.0, 1.0],\n   \"width\": [0.0, 10],\n   \"wlen\": 2,\n   \"rel_height\": 1,\n   \"plateau_size\": 0.5\n   }\n</code></pre>"},{"location":"interface/usage/#configurations","title":"Configurations","text":"<p>In terms of the configuration of <code>SpectraFit</code>, configurations depends on <code>lmfit package</code>.Most of the provided features of <code>lmfit</code> can be used. The configurations can be called as attributes of <code>optimizer</code> and <code>minimizer</code> as shown in Standard Usage #5. For the individualization of the configuration, please use the keywords of <code>lmfit</code> minimizer module and also check the <code>SpectraFit</code>'s fitting routine.</p>"},{"location":"interface/usage/#input-files","title":"Input Files","text":"<p>The input file of <code>SpectraFit</code> are dictionary-like objects. The input file can be one of these three types:</p> <ul> <li> json</li> <li> toml</li> <li> yaml</li> </ul> <p>Especially, the <code>toml</code> and <code>yaml</code> files are very useful for the configuration of <code>SpectraFit</code> due to their structure and simplicity. www.convertsimple.com allows easily to convert between these three file types.</p> Reference Input in <code>JSON</code> JSON<pre><code>{\n  \"settings\": {\n    \"column\": [0, 1],\n    \"decimal\": \".\",\n    \"energy_start\": 0,\n    \"energy_stop\": 8,\n    \"header\": null,\n    \"infile\": \"spectrafit/test/rixs_fecl4.txt\",\n    \"outfile\": \"fit_results\",\n    \"oversampling\": false,\n    \"noplot\": false,\n    \"separator\": \"\\t\",\n    \"shift\": 0,\n    \"smooth\": 0,\n    \"verbose\": 1\n  },\n  \"fitting\": {\n    \"description\": {\n      \"project_name\": \"Template\",\n      \"project_details\": \"Template for testing\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    },\n    \"parameters\": {\n      \"minimizer\": { \"nan_policy\": \"propagate\", \"calc_covar\": true },\n      \"optimizer\": { \"max_nfev\": 1000, \"method\": \"leastsq\" },\n      \"report\": { \"min_correl\": 0.0 },\n      \"conf_interval\": {\n        \"p_names\": null,\n        \"sigmas\": null,\n        \"trace\": true,\n        \"maxiter\": 200,\n        \"verbose\": 1,\n        \"prob_func\": null\n      }\n    },\n    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.1,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          },\n          \"fwhml\": {\n            \"max\": 0.1,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      },\n      \"2\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.1,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          },\n          \"fwhml\": {\n            \"max\": 0.1,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      },\n      \"3\": {\n        \"constant\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0.01,\n            \"vary\": true,\n            \"value\": 1\n          }\n        }\n      },\n      \"4\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 2,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 2,\n            \"min\": -2,\n            \"vary\": true,\n            \"value\": 0\n          },\n          \"fwhmg\": {\n            \"max\": 0.1,\n            \"min\": 0.02,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"interface/usage/#jupyter-notebook-interface","title":"Jupyter Notebook Interface","text":"<p>The <code>SpectraFit</code> can be used in the Jupyter Notebook. First, the plugin has to be installed as described in Installation. To use the <code>SpectraFit</code> in the Jupyter Notebook, the <code>SpectraFit</code> has to be imported as follows:</p> Python<pre><code>from spectrafit.plugins import notebook\n</code></pre> <p>Next, the peak definition has to be defined now as follows:</p> Python<pre><code>initial_model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.1, \"min\": 0.02, \"vary\": True, \"value\": 0.01},\n            \"fwhml\": {\"max\": 0.1, \"min\": 0.01, \"vary\": True, \"value\": 0.01},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.1, \"min\": 0.02, \"vary\": True, \"value\": 0.01},\n        }\n    },\n]\n</code></pre> <p>For generating the first fit via <code>spectrafit.plugins.notebook</code>, the following code has to be used:</p> Python<pre><code>spf = SpectraFitNotebook(df=df, x_column=\"Energy\", y_column=\"Noisy\")\nspf.solver_model(\n    initial_model,\n)\n</code></pre> <p>and to save the results as <code>toml</code> file, just save the <code>spf</code> object as follows:</p> Python<pre><code>spf.generate_report\n</code></pre> <p>About the <code>Jupyter</code> Interface</p> <p>The <code>Jupyter</code> interface is still under development and not yet fully functional. Furthermore, the peak definition is changes a little bit. From a <code>dictionary</code> of <code>dictionary</code> to a <code>list</code> of <code>dictionaries</code>. As a consequence, the peak number is not needed anymore.</p> <p>Also the global fitting routine is not yet implemented for the <code>Jupyter</code> interface.</p> <p>More information about the Jupyter Notebook interface can be found in the Jupyter Example and the plugin documentation for Jupyter-SpectraFit-Interface of <code>SpectraFit</code>.</p> <p>The Jupyter Lab for the <code>SpectraFit</code> can be also start via the command line:</p> Bash<pre><code>spectrafit-jupyter\n</code></pre>"},{"location":"plugins/data_converter/","title":"Data-Format-Conversion","text":"<p>With the command <code>spectrafit-data-converter</code> data files can be converted to <code>CSV</code> or pandas dataframes. Currently, the following data formats are</p> <ul> <li> The <code>Athena</code> data format</li> <li> Text files with a header and a data seperator by space or tab</li> <li> More formats are coming soon</li> </ul> Bash<pre><code>\u279c spectrafit-data-converter -f ATHENA -h\n  usage: spectrafit-data-converter [-h] [-f {ATHENA,TXT}] [-e {txt,csv,out,dat}] infile\n\n  Converter for 'SpectraFit' from data files to CSV files.\n\n  positional arguments:\n    infile                Filename of the data file to convert.\n\n  options:\n    -h, --help            show this help message and exit\n    -f {ATHENA,TXT}, --file-format {ATHENA,TXT}\n                          File format for the conversion.\n    -e {txt,csv,out,dat}, --export-format {txt,csv,out,dat}\n                          File format for the export.\n</code></pre> <p>From ATHENA to CSV</p> <p>To convert a data file from the <code>Athena</code> format to <code>CSV</code> use:</p> Bash<pre><code>spectrafit-data-converter Examples/athena.nor -f ATHENA\n</code></pre> <p>The original data file looks like this, but can contains more rows:</p> Carbon<pre><code>  # XDI/1.0 Demeter/0.9.26\n  # Demeter.output_filetype: multicolumn normalized mu(E)\n  # Element.symbol: V\n  # Element.edge: K\n  # Column.1: energy eV\n  # Column.2: JZP-4-merged\n  #------------------------\n  #  energy  JZP-4-merged\n    5263.8492       0.12737417\n    5273.8501       0.10231758\n    5283.8503       0.81114410E-01\n    5293.8492       0.61588687E-01\n    5303.8493       0.47158833E-01\n    5313.8497       0.35236642E-01\n    5323.8502       0.25314870E-01\n    5333.8506       0.18438437E-01\n    5343.8501       0.12077480E-01\n</code></pre> <p>will be converted to:</p> Text Only<pre><code>  energy,JZP-4-merged\n  5263.8492,0.12737417\n  5273.8501,0.10231758\n  5283.8503,0.08111441\n  5293.8492,0.06158869\n  5303.8493,0.04715883\n  5313.8497,0.03523664\n  5323.8502,0.02531487\n  5333.8506,0.01843844\n  5343.8501,0.01207748\n</code></pre>"},{"location":"plugins/file_converter/","title":"File-Format-Conversion","text":"<p>With the command <code>spectrafit-file-converter</code> input and also output files can be converted. The supported file formats are:</p> <ol> <li><code>.json</code></li> <li><code>.yaml</code> or <code>.yml</code></li> <li><code>.toml</code> or <code>.lock</code>(output only)</li> </ol> Bash<pre><code>   \u279c  spectrafit-file-converter -h\n   usage: spectrafit-file-converter [-h] [-f {yml,lock,yaml,json,toml}] [-e {yml,lock,yaml,json,toml}] infile\n\n   Converter for 'SpectraFit' input and output files.\n\n   positional arguments:\n     infile                Filename of the 'SpectraFit' input or output file.\n\n   options:\n     -h, --help            show this help message and exit\n     -f {yml,lock,yaml,json,toml}, --file-format {yml,lock,yaml,json,toml}\n                           File format for the conversion.\n     -e {yml,lock,yaml,json,toml}, --export-format {yml,lock,yaml,json,toml}\n                           File format for the export.\n</code></pre> File Change from JSON to LOCKJSONLOCK <p>Info</p> <p>The file format change can be also applied to the <code>.json</code>-output to the more human-readable <code>lock</code>-file-format, which is a <code>.toml</code> file.</p> <p>Both output files are provided as:</p> Scdoc<pre><code>* example_8_summary.json\n* example_8_summary.lock\n</code></pre> JSON<pre><code>   {\n    \"infile\": \"athena.nor\",\n    \"outfile\": \"example_8\",\n    \"input\": \"example_8.json\",\n    \"oversampling\": false,\n    \"energy_start\": 5440,\n    \"energy_stop\": 5520,\n    \"smooth\": 0,\n    \"shift\": 0,\n    \"column\": [0, 1],\n    \"separator\": \"\\\\s+\",\n    \"decimal\": \".\",\n    \"header\": null,\n    \"comment\": \"#\",\n    \"global_\": 0,\n    \"autopeak\": false,\n    \"noplot\": false,\n\n    \"verbose\": 0,\n    \"description\": {\n      \"project_name\": \"Template\",\n      \"project_details\": \"Template for testing\",\n      \"keywords\": [\n        \"2D-Spectra\",\n        \"fitting\",\n        \"curve-fitting\",\n        \"peak-fitting\",\n        \"spectrum\"\n      ]\n    },\n    \"minimizer\": {\n      \"nan_policy\": \"propagate\",\n      \"calc_covar\": true\n    },\n    \"optimizer\": {\n      \"max_nfev\": 1000,\n      \"method\": \"leastsq\"\n    },\n    \"report\": {\n      \"min_correl\": 0.0\n    },\n    \"conf_interval\": null,\n    \"peaks\": {\n      \"1\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5470,\n            \"min\": 5460,\n            \"vary\": true,\n            \"value\": 5468\n          },\n          \"fwhmg\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          },\n          \"fwhml\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          }\n        }\n      },\n      \"2\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5470,\n            \"min\": 5465,\n            \"vary\": true,\n            \"value\": 5469\n          },\n          \"fwhmg\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          },\n          \"fwhml\": {\n            \"max\": 2.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 1.0\n          }\n        }\n      },\n      \"3\": {\n        \"pseudovoigt\": {\n          \"amplitude\": {\n            \"max\": 4,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5480,\n            \"min\": 5470,\n            \"vary\": true,\n            \"value\": 5473\n          },\n          \"fwhmg\": {\n            \"max\": 3.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"fwhml\": {\n            \"max\": 3.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          }\n        }\n      },\n      \"4\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          },\n          \"center\": {\n            \"max\": 5485,\n            \"min\": 5475,\n            \"vary\": true,\n            \"value\": 5478\n          },\n          \"fwhmg\": {\n            \"max\": 4,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 1\n          }\n        }\n      },\n      \"5\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 4\n          },\n          \"center\": {\n            \"max\": 5498,\n            \"min\": 5480,\n            \"vary\": true,\n            \"value\": 5483\n          },\n          \"fwhmg\": {\n            \"max\": 4.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          }\n        }\n      },\n      \"6\": {\n        \"gaussian\": {\n          \"amplitude\": {\n            \"max\": 10,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 4\n          },\n          \"center\": {\n            \"max\": 5498,\n            \"min\": 5493,\n            \"vary\": true,\n            \"value\": 5494\n          },\n          \"fwhmg\": {\n            \"max\": 4.75,\n            \"min\": 0.1,\n            \"vary\": true,\n            \"value\": 3\n          }\n        }\n      },\n      \"7\": {\n        \"atan\": {\n          \"amplitude\": {\n            \"max\": 5,\n            \"min\": 0,\n            \"vary\": true,\n            \"value\": 1\n          },\n          \"center\": {\n            \"max\": 5500,\n            \"min\": 5483,\n            \"vary\": true,\n            \"value\": 5481\n          },\n          \"sigma\": {\n            \"max\": 0.75,\n            \"min\": 0.001,\n            \"vary\": true,\n            \"value\": 0.01\n          }\n        }\n      }\n    },\n    \"timestamp\": \"2022-06-26 12:35:11\",\n    \"ID\": \"e5c7fc20-bd57-4578-abbf-7736cef3be9b\",\n    \"host_info\": \"e74490816920d147adc2315b45c4c6ce05e99ae9e09e34d2a263e2e9da861ffd\",\n    \"used_version\": \"0.9.0\",\n    \"data_statistic\": {\n      \"0\": [\n        393.0, 5493.268875318066, 70.85455926057932, 5263.8492, 5439.3992,\n        5449.2004400000005, 5459.00094, 5468.80008, 5478.5995, 5488.40074,\n        5498.20038, 5526.97246, 5602.409339999999, 5707.751\n      ],\n      \"1\": [\n        393.0, 0.5559652545537828, 0.5000826290756465, -0.0015911817,\n        0.0011720014800000002, 0.003939243640000001, 0.012118344800000002,\n        0.11680503600000006, 0.55104052, 0.983449568, 1.0087658400000001,\n        1.04338526, 1.12497912, 1.2670019\n      ]\n    },\n    \"fit_insights\": {\n      \"configurations\": {\n        \"fitting_method\": \"leastsq\",\n        \"function_evals\": 1000,\n        \"data_points\": 267,\n        \"variable_names\": [\n          \"pseudovoigt_amplitude_1\",\n          \"pseudovoigt_center_1\",\n          \"pseudovoigt_fwhmg_1\",\n          \"pseudovoigt_fwhml_1\",\n          \"pseudovoigt_amplitude_2\",\n          \"pseudovoigt_center_2\",\n          \"pseudovoigt_fwhmg_2\",\n          \"pseudovoigt_fwhml_2\",\n          \"pseudovoigt_amplitude_3\",\n          \"pseudovoigt_center_3\",\n          \"pseudovoigt_fwhmg_3\",\n          \"pseudovoigt_fwhml_3\",\n          \"gaussian_amplitude_4\",\n          \"gaussian_center_4\",\n          \"gaussian_fwhmg_4\",\n          \"gaussian_amplitude_5\",\n          \"gaussian_center_5\",\n          \"gaussian_fwhmg_5\",\n          \"gaussian_amplitude_6\",\n          \"gaussian_center_6\",\n          \"gaussian_fwhmg_6\",\n          \"atan_amplitude_7\",\n          \"atan_center_7\",\n          \"atan_sigma_7\"\n        ],\n        \"variable_numbers\": 24,\n        \"degree_of_freedom\": 243\n      },\n      \"statistics\": {\n        \"chi_square\": 0.19287134070118112,\n        \"reduced_chi_square\": 0.0007937092209925148,\n        \"akaike_information\": -1883.2058200035844,\n        \"bayesian_information\": -1797.1118522019785\n      },\n      \"variables\": {\n        \"pseudovoigt_amplitude_1\": {\n          \"init_value\": 1,\n          \"model_value\": 6.887357351104129e-11,\n          \"best_value\": 6.887357351104129e-11\n        },\n        \"pseudovoigt_center_1\": {\n          \"init_value\": 5468,\n          \"model_value\": 5468.054405630964,\n          \"best_value\": 5468.054405630964\n        },\n        \"pseudovoigt_fwhmg_1\": {\n          \"init_value\": 1.0,\n          \"model_value\": 0.1897199824713271,\n          \"best_value\": 0.1897199824713271\n        },\n        \"pseudovoigt_fwhml_1\": {\n          \"init_value\": 1.0,\n          \"model_value\": 1.8340047382909581,\n          \"best_value\": 1.8340047382909581\n        },\n        \"pseudovoigt_amplitude_2\": {\n          \"init_value\": 1,\n          \"model_value\": 1.5312014287723803,\n          \"best_value\": 1.5312014287723803\n        },\n        \"pseudovoigt_center_2\": {\n          \"init_value\": 5469,\n          \"model_value\": 5468.965365073547,\n          \"best_value\": 5468.965365073547\n        },\n        \"pseudovoigt_fwhmg_2\": {\n          \"init_value\": 1.0,\n          \"model_value\": 2.1735730746400175,\n          \"best_value\": 2.1735730746400175\n        },\n        \"pseudovoigt_fwhml_2\": {\n          \"init_value\": 1.0,\n          \"model_value\": 1.429425183820899,\n          \"best_value\": 1.429425183820899\n        },\n        \"pseudovoigt_amplitude_3\": {\n          \"init_value\": 1,\n          \"model_value\": 1.4124892488220628,\n          \"best_value\": 1.4124892488220628\n        },\n        \"pseudovoigt_center_3\": {\n          \"init_value\": 5473,\n          \"model_value\": 5475.767047063245,\n          \"best_value\": 5475.767047063245\n        },\n        \"pseudovoigt_fwhmg_3\": {\n          \"init_value\": 1,\n          \"model_value\": 0.10000000837664919,\n          \"best_value\": 0.10000000837664919\n        },\n        \"pseudovoigt_fwhml_3\": {\n          \"init_value\": 1,\n          \"model_value\": 3.7499977334701127,\n          \"best_value\": 3.7499977334701127\n        },\n        \"gaussian_amplitude_4\": {\n          \"init_value\": 3,\n          \"model_value\": 0.6090009741875487,\n          \"best_value\": 0.6090009741875487\n        },\n        \"gaussian_center_4\": {\n          \"init_value\": 5478,\n          \"model_value\": 5477.92439530641,\n          \"best_value\": 5477.92439530641\n        },\n        \"gaussian_fwhmg_4\": {\n          \"init_value\": 1,\n          \"model_value\": 2.5805286730950385,\n          \"best_value\": 2.5805286730950385\n        },\n        \"gaussian_amplitude_5\": {\n          \"init_value\": 4,\n          \"model_value\": 3.2112928728775594,\n          \"best_value\": 3.2112928728775594\n        },\n        \"gaussian_center_5\": {\n          \"init_value\": 5483,\n          \"model_value\": 5481.724992617458,\n          \"best_value\": 5481.724992617458\n        },\n        \"gaussian_fwhmg_5\": {\n          \"init_value\": 3,\n          \"model_value\": 4.1240411794396445,\n          \"best_value\": 4.1240411794396445\n        },\n        \"gaussian_amplitude_6\": {\n          \"init_value\": 4,\n          \"model_value\": 1.2428818045605532,\n          \"best_value\": 1.2428818045605532\n        },\n        \"gaussian_center_6\": {\n          \"init_value\": 5494,\n          \"model_value\": 5493.950495823278,\n          \"best_value\": 5493.950495823278\n        },\n        \"gaussian_fwhmg_6\": {\n          \"init_value\": 3,\n          \"model_value\": 4.749999999999982,\n          \"best_value\": 4.749999999999982\n        },\n        \"atan_amplitude_7\": {\n          \"init_value\": 1,\n          \"model_value\": 1.0784237600535795,\n          \"best_value\": 1.0784237600535795\n        },\n        \"atan_center_7\": {\n          \"init_value\": 5483,\n          \"model_value\": 5483.0,\n          \"best_value\": 5483.0\n        },\n        \"atan_sigma_7\": {\n          \"init_value\": 0.01,\n          \"model_value\": 0.7490707110057951,\n          \"best_value\": 0.7490707110057951\n        }\n      },\n      \"errorbars\": {\n        \"at_boundary\": \"atan_center_7\",\n        \"at_initial_value\": \"atan_center_7\"\n      },\n      \"correlations\": {\n        \"pseudovoigt_amplitude_1\": {},\n        \"pseudovoigt_center_1\": {},\n        \"pseudovoigt_fwhmg_1\": {},\n        \"pseudovoigt_fwhml_1\": {},\n        \"pseudovoigt_amplitude_2\": {},\n        \"pseudovoigt_center_2\": {},\n        \"pseudovoigt_fwhmg_2\": {},\n        \"pseudovoigt_fwhml_2\": {},\n        \"pseudovoigt_amplitude_3\": {},\n        \"pseudovoigt_center_3\": {},\n        \"pseudovoigt_fwhmg_3\": {},\n        \"pseudovoigt_fwhml_3\": {},\n        \"gaussian_amplitude_4\": {},\n        \"gaussian_center_4\": {},\n        \"gaussian_fwhmg_4\": {},\n        \"gaussian_amplitude_5\": {},\n        \"gaussian_center_5\": {},\n        \"gaussian_fwhmg_5\": {},\n        \"gaussian_amplitude_6\": {},\n        \"gaussian_center_6\": {},\n        \"gaussian_fwhmg_6\": {},\n        \"atan_amplitude_7\": {},\n        \"atan_center_7\": {},\n        \"atan_sigma_7\": {}\n      },\n      \"covariance_matrix\": {}\n    },\n    \"linear_correlation\": {\n      \"energy\": [\n        1.0, 0.8935483804274674, 0.014165493917872009, 0.8994185246507211,\n        -0.08246614304287148, -0.05776360778162228, 0.04606936027745239,\n        0.05426690223694854, 0.13152358463255703, 0.3565816542879464,\n        0.8586601784730943\n      ],\n      \"intensity\": [\n        0.8935483804274674, 1.0, -0.13373933056053425, 0.9986081827277958,\n        -0.11486056672062087, -0.028801840216786542, -0.11711982159837439,\n        -0.029551863819738563, 0.2461777622422082, 0.4984003575413818,\n        0.9269401277948314\n      ],\n      \"residual\": [\n        0.014165493917872009, -0.13373933056053425, 1.0, -0.08128519419811593,\n        0.02974964926139685, -0.021642832049659354, -0.03994103386305105,\n        -0.025395325083663524, -0.03017747407078183, -0.027397566228850468,\n        -0.06236947885767277\n      ],\n      \"fit\": [\n        0.8994185246507211, 0.9986081827277958, -0.08128519419811593, 1.0,\n        -0.1139349593296497, -0.0301185824198321, -0.11991608123181818,\n        -0.031072607786035288, 0.24598127893632823, 0.4997959907896826,\n        0.928928282259139\n      ],\n      \"pseudovoigt_1\": [\n        -0.08246614304287148, -0.11486056672062087, 0.02974964926139685,\n        -0.1139349593296497, 1.0, 0.7536175354567056, -0.009367644277978189,\n        -0.05870829199955287, -0.08494369976082802, -0.10017757939797277,\n        -0.21929151577520153\n      ],\n      \"pseudovoigt_2\": [\n        -0.05776360778162228, -0.028801840216786542, -0.021642832049659354,\n        -0.0301185824198321, 0.7536175354567056, 1.0, -0.0007768811093853067,\n        -0.05476516992155444, -0.07487367647974848, -0.08449580439139602,\n        -0.18491861804427098\n      ],\n      \"pseudovoigt_3\": [\n        0.04606936027745239, -0.11711982159837439, -0.03994103386305105,\n        -0.11991608123181818, -0.009367644277978189, -0.0007768811093853067, 1.0,\n        0.512935093390806, 0.050902822461948154, -0.13360361523893485,\n        -0.2599584538174289\n      ],\n      \"gaussian_4\": [\n        0.05426690223694854, -0.029551863819738563, -0.025395325083663524,\n        -0.031072607786035288, -0.05870829199955287, -0.05476516992155444,\n        0.512935093390806, 1.0, 0.109321855811239, -0.08610145641955333,\n        -0.17117656530833758\n      ],\n      \"gaussian_5\": [\n        0.13152358463255703, 0.2461777622422082, -0.03017747407078183,\n        0.24598127893632823, -0.08494369976082802, -0.07487367647974848,\n        0.050902822461948154, 0.109321855811239, 1.0, -0.11089816832021102,\n        -0.041298565912075064\n      ],\n      \"gaussian_6\": [\n        0.3565816542879464, 0.4984003575413818, -0.027397566228850468,\n        0.4997959907896826, -0.10017757939797277, -0.08449580439139602,\n        -0.13360361523893485, -0.08610145641955333, -0.11089816832021102, 1.0,\n        0.4791340524061516\n      ],\n      \"atan_7\": [\n        0.8586601784730943, 0.9269401277948314, -0.06236947885767277,\n        0.928928282259139, -0.21929151577520153, -0.18491861804427098,\n        -0.2599584538174289, -0.17117656530833758, -0.041298565912075064,\n        0.4791340524061516, 1.0\n      ]\n    },\n    \"fit_result\": {\n      \"energy\": [\n        5440.0988, 5440.3491, 5440.5989, 5440.8488, 5441.1015, 5441.349,\n        5441.5992, 5441.8491, 5442.0996, 5442.3496, 5442.5996, 5442.8499,\n        5443.1003, 5443.3503, 5443.601, 5443.8513, 5444.0989, 5444.3497,\n        5444.5998, 5444.8503, 5445.1009, 5445.3489, 5445.5992, 5445.85, 5446.1005,\n        5446.3513, 5446.599, 5446.85, 5447.1007, 5447.3488, 5447.5997, 5447.8503,\n        5448.0988, 5448.3498, 5448.6006, 5448.8493, 5449.1, 5449.3511, 5449.5995,\n        5449.8505, 5450.0992, 5450.35, 5450.6012, 5450.8498, 5451.1013, 5451.3498,\n        5451.6009, 5451.8495, 5452.1012, 5452.35, 5452.5987, 5452.8501, 5453.0989,\n        5453.3502, 5453.5991, 5453.8506, 5454.0998, 5454.3489, 5454.6004,\n        5454.8493, 5455.101, 5455.3502, 5455.5992, 5455.8511, 5456.1, 5456.3495,\n        5456.6012, 5456.8505, 5457.0997, 5457.3491, 5457.6011, 5457.8507,\n        5458.0998, 5458.3494, 5458.5987, 5458.8513, 5459.1007, 5459.3501,\n        5459.5997, 5459.8495, 5460.099, 5460.3513, 5460.6013, 5460.8507,\n        5461.1005, 5461.3503, 5461.6003, 5461.8499, 5462.0999, 5462.3498, 5462.6,\n        5462.8499, 5463.0998, 5463.3496, 5463.5999, 5463.8501, 5464.1002,\n        5464.3504, 5464.6005, 5464.8507, 5465.1009, 5465.3512, 5465.5989,\n        5465.8493, 5466.0996, 5466.3501, 5466.6003, 5466.8509, 5467.0989,\n        5467.3494, 5467.5997, 5467.8501, 5468.1008, 5468.349, 5468.5996,\n        5468.8502, 5469.1008, 5469.349, 5469.5999, 5469.8504, 5470.0987,\n        5470.3496, 5470.6005, 5470.8489, 5471.0995, 5471.3507, 5471.599,\n        5471.8499, 5472.1012, 5472.3498, 5472.6009, 5472.8494, 5473.1006,\n        5473.3491, 5473.6002, 5473.8488, 5474.1002, 5474.3488, 5474.6003,\n        5474.8489, 5475.1002, 5475.3489, 5475.6007, 5475.8495, 5476.101,\n        5476.3499, 5476.5987, 5476.8505, 5477.0997, 5477.3513, 5477.6003,\n        5477.8492, 5478.1013, 5478.3503, 5478.5995, 5478.8511, 5479.1005,\n        5479.3496, 5479.5991, 5479.851, 5480.1004, 5480.3498, 5480.5992,\n        5480.8511, 5481.1007, 5481.3504, 5481.6, 5481.8493, 5482.1014, 5482.3487,\n        5482.6011, 5482.8505, 5483.1, 5483.3499, 5483.5998, 5483.8497, 5484.0993,\n        5484.349, 5484.5991, 5484.8491, 5485.0988, 5485.3489, 5485.599, 5485.8489,\n        5486.099, 5486.3491, 5486.5992, 5486.849, 5487.0993, 5487.3494, 5487.5997,\n        5487.8502, 5488.1003, 5488.3507, 5488.6009, 5488.8512, 5489.0991,\n        5489.3498, 5489.6, 5489.8505, 5490.101, 5490.3491, 5490.5994, 5490.8503,\n        5491.1006, 5491.3488, 5491.5993, 5491.8499, 5492.1004, 5492.349,\n        5492.5997, 5492.8506, 5493.0988, 5493.3496, 5493.6006, 5493.849,\n        5494.0998, 5494.351, 5494.5992, 5494.8502, 5495.1016, 5495.3501, 5495.601,\n        5495.8495, 5496.1007, 5496.3495, 5496.6007, 5496.8492, 5497.1006,\n        5497.3494, 5497.6006, 5497.8491, 5498.1009, 5498.3496, 5498.6013,\n        5498.8502, 5499.0991, 5499.3506, 5499.5995, 5499.8511, 5500.0999,\n        5500.3492, 5500.6012, 5500.85, 5501.0992, 5501.351, 5501.6, 5501.8494,\n        5502.0987, 5502.3507, 5502.5999, 5502.8493, 5503.1011, 5503.3508,\n        5503.5999, 5503.8494, 5505.0945, 5506.3561, 5507.6398, 5508.9402,\n        5510.2626, 5511.6018, 5512.9604, 5514.3357, 5515.7336, 5517.1486, 5518.583\n      ],\n      \"intensity\": [\n        0.00075008782, 0.0007137763, 0.00071128868, 0.00063286325, 0.00099449376,\n        0.0010605063, 0.0011034319, 0.001215315, 0.0011611731, 0.0010641958,\n        0.0011309926, 0.0014741452, 0.0012445178, 0.0014717449, 0.001410836,\n        0.0012844782, 0.0016211726, 0.0013805333, 0.0015237237, 0.001538607,\n        0.0018384047, 0.0017104137, 0.0018211203, 0.0020499052, 0.0024345136,\n        0.00204639, 0.0021995281, 0.0020694927, 0.0021394668, 0.0026118533,\n        0.0026087239, 0.0024609195, 0.0025642725, 0.0024221516, 0.0025371315,\n        0.002645023, 0.0029001956, 0.0027025267, 0.0031233567, 0.0028600589,\n        0.0032291827, 0.0032088736, 0.0031056149, 0.003613545, 0.0035004956,\n        0.0036851611, 0.0038396385, 0.0038811606, 0.0041256214, 0.0040804403,\n        0.0040263682, 0.004236159, 0.0045363625, 0.0048021543, 0.0045030138,\n        0.0049594557, 0.0053033365, 0.0051551775, 0.0049120742, 0.0050961341,\n        0.0054605721, 0.0057251564, 0.0060001418, 0.006230617, 0.0058970981,\n        0.0063953616, 0.0063618432, 0.0065745064, 0.0071347496, 0.0072233055,\n        0.0074109999, 0.0077600291, 0.0078010452, 0.0080880159, 0.008298518,\n        0.0086553695, 0.0087778796, 0.0092913713, 0.0093650197, 0.0099400509,\n        0.010172231, 0.01033062, 0.010813026, 0.011341481, 0.012145588,\n        0.012424155, 0.013122967, 0.013289268, 0.014198758, 0.014800496,\n        0.015251234, 0.01624618, 0.01718605, 0.018069132, 0.019060487,\n        0.020429046, 0.021923405, 0.023593881, 0.02503222, 0.027476768,\n        0.02954772, 0.032443852, 0.036927865, 0.041575946, 0.047120195,\n        0.054864195, 0.066197026, 0.081240398, 0.10396684, 0.13679905, 0.18073021,\n        0.24507544, 0.35005136, 0.49895559, 0.65875114, 0.72461012, 0.65273415,\n        0.55104052, 0.48306196, 0.41516438, 0.32597808, 0.24179332, 0.18204402,\n        0.14368564, 0.11778118, 0.1030822, 0.095387254, 0.091934181, 0.093517333,\n        0.097436882, 0.10429757, 0.11290046, 0.12352105, 0.13449277, 0.14666962,\n        0.15854493, 0.17175571, 0.18744141, 0.20498469, 0.22643179, 0.25124335,\n        0.27733772, 0.30017716, 0.3191437, 0.33621993, 0.35128088, 0.36647138,\n        0.38031479, 0.39252342, 0.4042917, 0.41772563, 0.42988369, 0.44482772,\n        0.4587377, 0.47272491, 0.49120434, 0.50928952, 0.53179087, 0.55935883,\n        0.59149209, 0.62744231, 0.66963255, 0.71466729, 0.76418391, 0.81580103,\n        0.86917222, 0.92311432, 0.9728729, 1.0203673, 1.0561529, 1.0861181,\n        1.1086619, 1.1222761, 1.1320221, 1.1387401, 1.1414318, 1.1396176,\n        1.1381366, 1.1331909, 1.1250521, 1.1142828, 1.1025584, 1.0921434,\n        1.0782789, 1.068865, 1.0587789, 1.0508437, 1.0433624, 1.038511, 1.0330431,\n        1.0337037, 1.031843, 1.0328293, 1.0348535, 1.0368246, 1.0434005, 1.053307,\n        1.0628649, 1.0738037, 1.0912933, 1.1053502, 1.1246872, 1.141449, 1.163211,\n        1.1835321, 1.2021008, 1.2169399, 1.2309978, 1.2416963, 1.2518929,\n        1.2572181, 1.2616482, 1.2670019, 1.2660771, 1.2665506, 1.2644464,\n        1.2650979, 1.262694, 1.259666, 1.2558234, 1.2514429, 1.2430164, 1.2372008,\n        1.2285302, 1.2200916, 1.209717, 1.1989269, 1.1892529, 1.1795568,\n        1.1690754, 1.1603893, 1.1477072, 1.1414142, 1.1352982, 1.1272946,\n        1.1212208, 1.1146086, 1.1127375, 1.1056488, 1.1030786, 1.099154,\n        1.0944947, 1.089456, 1.0874645, 1.082802, 1.0814821, 1.0760062, 1.0752181,\n        1.0707524, 1.068229, 1.0642905, 1.0609054, 1.0571893, 1.0555451,\n        1.0545785, 1.0504415, 1.0381922, 1.0304394, 1.0219384, 1.0095111,\n        0.9956127, 0.98439138, 0.97572282, 0.96606673, 0.94952275, 0.94140584,\n        0.94279763\n      ],\n      \"residual\": [\n        0.00613325457829908, 0.006218107450074614, 0.006269758966251143,\n        0.006398104051966323, 0.006087718929064824, 0.006072662143982822,\n        0.006082036083867459, 0.006023199732237316, 0.0061313480466662395,\n        0.006283075368452066, 0.006271900437882411, 0.005985331945703346,\n        0.0062724855228322995, 0.006103633813716175, 0.006224050483498058,\n        0.006410814558853532, 0.006134877384581588, 0.006438102920583359,\n        0.006358398490650242, 0.006408207741560957, 0.006174265739105387,\n        0.006368580438249494, 0.00632600674212941, 0.006166728513764874,\n        0.005852816256907992, 0.006313032283925843, 0.006232421864408486,\n        0.006437336110719652, 0.00644358520262364, 0.006048085550215489,\n        0.006130486499830275, 0.006359038426391628, 0.006337355964746424,\n        0.006563638434029771, 0.0065344837607907, 0.006513464019769027,\n        0.006347700723879553, 0.006636835547815529, 0.006308437946297291,\n        0.0066671748586435015, 0.0063947092239849505, 0.0065146794327679974,\n        0.006720040256161193, 0.006315487859591328, 0.006535571356781192,\n        0.0064591767813287175, 0.006416740179407737, 0.006488858048721772,\n        0.0063623173076473565, 0.0065270069673789705, 0.006703589907641805,\n        0.006620870908124233, 0.006449761149115165, 0.006317877751326865,\n        0.006753288328506617, 0.006438388459725186, 0.0062387483598735725,\n        0.00653525103448885, 0.006932551920682097, 0.006905688884617853,\n        0.006705098223615943, 0.006607819634015715, 0.006505326238668154,\n        0.006455055327034877, 0.006972577147389198, 0.006665025401301513,\n        0.00689766058010848, 0.006889266641246444, 0.006540649792141456,\n        0.0066717991548336094, 0.00671465132963713, 0.00660300340100341,\n        0.0068084591455706825, 0.006778705052416935, 0.006836083208777332,\n        0.006762669503324556, 0.006932772223388006, 0.006725575466166037,\n        0.006973275075836933, 0.00673592271439373, 0.0068584583994780075,\n        0.00707809134767194, 0.006991223441708865, 0.006880168824026575,\n        0.0065192705117452215, 0.0067117077567329375, 0.006515148301712643,\n        0.0068846199183853, 0.006550239446671604, 0.006566670062045411,\n        0.006783878703319051, 0.006511788622039404, 0.0063585018755647205,\n        0.00633507631316018, 0.006290534876124434, 0.005968457027442885,\n        0.0056382836544224615, 0.005273710299882901, 0.005312219821720185,\n        0.0045585615478305405, 0.004454710928714203, 0.0039056298196634073,\n        0.0022951213987462277, 0.001435235874458471, 0.001154392583074794,\n        0.001168221836944025, 0.0016722102592303112, 0.004885754773733472,\n        0.009418307223525157, 0.01661884903502181, 0.02822885529143518,\n        0.03726442642797709, 0.024960732580559475, -0.013711076530043387,\n        -0.0530521157630095, -0.028969691863028446, 0.04000601101523371,\n        0.05092312259221998, 0.0011902950753464592, -0.03772752268046198,\n        -0.03563462792125954, -0.02021771909914416, -0.01128248631407422,\n        -0.007805866874400602, -0.004509981867563406, -0.002969241719038465,\n        -0.0017101565415633957, -0.00027568515388672055, -0.0008109076822804956,\n        -0.0015039996522130394, -0.003302902054105966, -0.005238540143666051,\n        -0.007399846485810324, -0.00815909631731157, -0.007953497902540407,\n        -0.0053166973705467135, -0.001403698377971191, 0.0022990181362357587,\n        0.006626338553615468, 0.008394653444240036, 0.0075142435652750805,\n        0.004036651375449951, 0.0015259002134263011, 0.0009761201327874724,\n        -0.0033765167030079257, -0.005236412296452275, -0.006265577655221843,\n        -0.003650640651651771, 0.002285243778724466, 0.009192922731271203,\n        0.01254393167540957, 0.01377986684829613, 0.008357517105051449,\n        0.0007798149548345901, -0.007598024045102514, -0.01789863970575223,\n        -0.022062605171512317, -0.02228682847849439, -0.017849999906515368,\n        -0.008071540921267273, 0.005274444478820528, 0.017347806262467125,\n        0.02815980535736151, 0.03314622416180668, 0.030613793949474166,\n        0.019323803552962926, -0.0003734580845986546, -0.022798982368488874,\n        -0.046447998685479996, -0.056933990424680614, -0.0515738245484878,\n        -0.025351105397896978, 0.0156469270987607, 0.04758595542787036,\n        0.05857719449495824, 0.05250364687388487, 0.03768345992289257,\n        0.016108083046696642, -0.003745070436204534, -0.019175262429097284,\n        -0.02910646332683431, -0.03453806884319777, -0.03755774707977322,\n        -0.033628247001525224, -0.031097949380057832, -0.02535279588350714,\n        -0.019737499208146936, -0.01302810283952871, -0.0077973953450158895,\n        -0.0011047619045621015, 8.97275502742545e-5, 0.004304428711847219,\n        0.006107113089672156, 0.007321311918927487, 0.00909286193183756,\n        0.006873188891779014, 0.0020212879753471746, -0.0015139784445348248,\n        -0.005354838677951834, -0.014476720885421512, -0.01874789099133989,\n        -0.026875620294148472, -0.030730145767443817, -0.037944129856692266,\n        -0.04223474044506825, -0.04359623710794125, -0.040037456348461564,\n        -0.035053560854164445, -0.02657928510088725, -0.01817924833157014,\n        -0.005808346941323483, 0.005765870868484901, 0.013956388917991447,\n        0.025705366224742843, 0.03273415934926471, 0.03867351719549217,\n        0.03811891492384745, 0.03683593235075344, 0.032687699111738855,\n        0.026045308930862765, 0.017148920412947355, 0.010288299272841694,\n        -0.0008850558290864896, -0.009945014859170653, -0.019722080523808083,\n        -0.02711970743858627, -0.033516616350662165, -0.039716707914066784,\n        -0.0446585244689468, -0.04708412427640174, -0.04975844677650132,\n        -0.046669289944217374, -0.048501668430261935, -0.04895691030453242,\n        -0.046288296806074714, -0.04435835487538897, -0.04093641911724166,\n        -0.04148800103297967, -0.036156620056670974, -0.03485186769412607,\n        -0.03178825572803179, -0.027697227172147842, -0.02301123362518398,\n        -0.021209572992874737, -0.01662548501047678, -0.015306228660030508,\n        -0.009778611749572619, -0.008904605212544547, -0.0043315431432862095,\n        -0.0016866086259874624, 0.0023790909821914674, 0.005894665032446289,\n        0.00974324734072085, 0.011518052413842517, 0.012613275924305833,\n        0.016876924378935065, 0.029720310657255222, 0.038012765958672645,\n        0.04700728383129227, 0.05988576441372251, 0.07419983671454389,\n        0.08580388164009689, 0.09482663757264798, 0.10481082634373873,\n        0.12166082183392402, 0.13006270018831478, 0.1289373275067074\n      ],\n      \"fit\": [\n        0.00688334239829908, 0.006931883750074614, 0.006981047646251143,\n        0.0070309673019663226, 0.0070822126890648235, 0.0071331684439828215,\n        0.007185467983867459, 0.007238514732237316, 0.00729252114666624,\n        0.0073472711684520655, 0.007402893037882411, 0.007459477145703346,\n        0.0075170033228322995, 0.007575378713716175, 0.007634886483498058,\n        0.0076952927588535315, 0.007756049984581588, 0.00781863622058336,\n        0.007882122190650242, 0.007946814741560957, 0.008012670439105387,\n        0.008078994138249494, 0.00814712704212941, 0.008216633713764875,\n        0.008287329856907992, 0.008359422283925843, 0.008431949964408486,\n        0.008506828810719652, 0.00858305200262364, 0.008659938850215489,\n        0.008739210399830276, 0.008819957926391628, 0.008901628464746424,\n        0.00898579003402977, 0.0090716152607907, 0.009158487019769027,\n        0.009247896323879554, 0.009339362247815529, 0.00943179464629729,\n        0.009527233758643502, 0.00962389192398495, 0.009723553032767998,\n        0.009825655156161192, 0.009929032859591328, 0.010036066956781192,\n        0.010144337881328718, 0.010256378679407737, 0.010370018648721772,\n        0.010487938707647356, 0.01060744726737897, 0.010729958107641805,\n        0.010857029908124233, 0.010986123649115165, 0.011120032051326865,\n        0.011256302128506618, 0.011397844159725185, 0.011542084859873573,\n        0.01169042853448885, 0.011844626120682097, 0.012001822984617853,\n        0.012165670323615943, 0.012332976034015715, 0.012505468038668154,\n        0.012685672327034877, 0.012869675247389198, 0.013060387001301512,\n        0.01325950378010848, 0.013463773041246444, 0.013675399392141456,\n        0.01389510465483361, 0.01412565122963713, 0.01436303250100341,\n        0.014609504345570682, 0.014866720952416935, 0.015134601208777331,\n        0.015418039003324556, 0.015710651823388006, 0.016016946766166038,\n        0.016338294775836933, 0.01667597361439373, 0.017030689399478008,\n        0.01740871134767194, 0.017804249441708865, 0.018221649824026576,\n        0.018664858511745222, 0.019135862756732937, 0.019638115301712642,\n        0.0201738879183853, 0.020748997446671604, 0.02136716606204541,\n        0.02203511270331905, 0.022757968622039403, 0.023544551875564722,\n        0.024404208313160182, 0.025351021876124435, 0.026397503027442884,\n        0.02756168865442246, 0.0288675912998829, 0.030344439821720186,\n        0.03203532954783054, 0.0340024309287142, 0.03634948181966341,\n        0.039222986398746225, 0.04301118187445847, 0.04827458758307479,\n        0.05603241683694402, 0.06786923625923032, 0.08612615277373348,\n        0.11338514722352516, 0.15341789903502182, 0.20895906529143518,\n        0.2823398664279771, 0.37501209258055945, 0.4852445134699566,\n        0.6056990242369905, 0.6956404281369716, 0.6927401610152337,\n        0.60196364259222, 0.48425225507534647, 0.377436857319538,\n        0.29034345207874046, 0.22157560090085585, 0.17076153368592578,\n        0.1358797731255994, 0.11327119813243659, 0.10011295828096153,\n        0.09367709745843661, 0.09165849584611328, 0.0927064253177195,\n        0.09593288234778696, 0.10099466794589404, 0.10766191985633394,\n        0.11612120351418967, 0.12633367368268844, 0.1387161220974596,\n        0.1532282326294533, 0.17035201162202881, 0.18974042813623576,\n        0.21161102855361547, 0.23482644344424003, 0.25875759356527506,\n        0.28137437137544996, 0.3017030602134263, 0.32011982013278745,\n        0.3328434132969921, 0.34604446770354774, 0.36020580234477817,\n        0.37666414934834824, 0.3948086637787245, 0.4134846227312712,\n        0.4302695616754096, 0.4436635568482961, 0.45318523710505143,\n        0.4595175149548346, 0.4651268859548975, 0.4733057002942478,\n        0.48722691482848773, 0.5095040415215056, 0.5415088300934846,\n        0.5834205490787328, 0.6327167544788205, 0.6869803562624671,\n        0.7428270953573615, 0.7973301341618066, 0.8464148239494742,\n        0.888496023552963, 0.9227408619154014, 0.9500739176315112,\n        0.97391930131452, 0.9992189095753194, 1.0345442754515122,\n        1.083310794602103, 1.1379230270987608, 1.1796080554278703,\n        1.1973172944949582, 1.193935446873885, 1.1773010599228926,\n        1.1542446830466966, 1.1294458295637955, 1.1058768375709027,\n        1.0851763366731657, 1.0680203311568022, 1.0545856529202269,\n        1.0446506529984747, 1.0377670506199421, 1.033426104116493,\n        1.031106200791853, 1.0303342971604712, 1.030713604654984,\n        1.031938338095438, 1.0337934275502743, 1.0361474287118473,\n        1.038936413089672, 1.0421748119189276, 1.0459174619318377,\n        1.050273688891779, 1.0553282879753472, 1.061350921555465,\n        1.0684488613220482, 1.0768165791145785, 1.08660230900866,\n        1.0978115797058516, 1.1107188542325561, 1.1252668701433077,\n        1.1412973595549318, 1.1585045628920587, 1.1769024436515385,\n        1.1959442391458355, 1.2151170148991128, 1.23371365166843,\n        1.2514097530586765, 1.267414070868485, 1.2809582889179914,\n        1.2917824662247428, 1.2992847593492647, 1.3031199171954921,\n        1.3032168149238474, 1.2995299323507534, 1.2923536991117388,\n        1.2818687089308627, 1.2685918204129474, 1.2533046992728416,\n        1.2363157441709136, 1.2185851851408294, 1.2003695194761919,\n        1.1825972925614137, 1.1654102836493379, 1.1495361920859333,\n        1.1348982755310533, 1.1219912757235984, 1.1106308532234987,\n        1.1010379100557826, 1.092912531569738, 1.0863412896954676,\n        1.0810063031939252, 1.076862445124611, 1.0736721808827583,\n        1.0712494989670203, 1.069492179943329, 1.0682267323058738,\n        1.0673657442719682, 1.0667974728278522, 1.066444766374816,\n        1.0662549270071253, 1.0661765149895233, 1.0661758713399694,\n        1.0662275882504273, 1.0663134947874555, 1.0664208568567137,\n        1.0665423913740126, 1.0666695909821915, 1.0668000650324463,\n        1.066932547340721, 1.0670631524138425, 1.067191775924306,\n        1.067318424378935, 1.0679125106572551, 1.0684521659586725,\n        1.0689456838312923, 1.0693968644137226, 1.069812536714544,\n        1.070195261640097, 1.070549457572648, 1.0708775563437387,\n        1.071183571833924, 1.0714685401883148, 1.0717349575067074\n      ],\n      \"pseudovoigt_1\": [\n        2.5477518269831344e-14, 2.5939438391063845e-14, 2.641306986658508e-14,\n        2.6899985440804153e-14, 2.7406171765445164e-14, 2.7915913809036578e-14,\n        2.844580335503268e-14, 2.8990255357654845e-14, 2.955184739778201e-14,\n        3.01287397368939e-14, 3.0722683582178253e-14, 3.133510225347277e-14,\n        3.196626427437094e-14, 3.2615626038785005e-14, 3.3286870846414276e-14,\n        3.397792107989151e-14, 3.468289784427909e-14, 3.5419580271594437e-14,\n        3.617781722128574e-14, 3.696192440389886e-14, 3.7772117096274406e-14,\n        3.860040126029779e-14, 3.9464285832430363e-14, 4.0359296757945344e-14,\n        4.128395904147331e-14, 4.224191264079428e-14, 4.322110941571337e-14,\n        4.424847471870753e-14, 4.531159188923597e-14, 4.640182986462542e-14,\n        4.754485552187398e-14, 4.872916798584927e-14, 4.994776485333176e-14,\n        5.12255850810543e-14, 5.2551960526913755e-14, 5.3918719470269e-14,\n        5.5351108742878993e-14, 5.684372270162186e-14, 5.838044114498289e-14,\n        5.999736541558293e-14, 6.166658566413154e-14, 6.342138636474374e-14,\n        6.52550813165956e-14, 6.71491473786615e-14, 6.915039082209839e-14,\n        7.121684789551846e-14, 7.340035926913301e-14, 7.566246488029492e-14,\n        7.80608877026732e-14, 8.05453977781867e-14, 8.314922243937113e-14,\n        8.591161691315234e-14, 8.878305188821059e-14, 9.183179315859283e-14,\n        9.500866311029503e-14, 9.838890734328577e-14, 1.0191907915083504e-13,\n        1.0564088043520405e-13, 1.0960891890729414e-13, 1.137598298907998e-13,\n        1.1820149882579364e-13, 1.2285988373705574e-13, 1.2779457950280996e-13,\n        1.330949605644112e-13, 1.3866218009064554e-13, 1.4460014217024726e-13,\n        1.5098462655003923e-13, 1.57733341366046e-13, 1.6494076609069056e-13,\n        1.726588595015357e-13, 1.8101950822789799e-13, 1.8991209476507556e-13,\n        1.9945460407219983e-13, 2.0975400246453637e-13, 2.208557379792811e-13,\n        2.330250682192212e-13, 2.4605077942579467e-13, 2.601957211360193e-13,\n        2.7560424071170607e-13, 2.924311705441069e-13, 3.1081715744408116e-13,\n        3.312218327197359e-13, 3.534779811320526e-13, 3.7798019843137146e-13,\n        4.051512654577147e-13, 4.353414036865724e-13, 4.690402453633132e-13,\n        5.067142604477799e-13, 5.491498556488133e-13, 5.970781271263975e-13,\n        6.515715823637814e-13, 7.137164037273526e-13, 7.850841330969724e-13,\n        8.67532712947661e-13, 9.636906656316065e-13, 1.0764391590393499e-12,\n        1.2097438899895015e-12, 1.3689392017618985e-12, 1.5608419120747447e-12,\n        1.7949739435559878e-12, 2.0840991172232416e-12, 2.4462427073004233e-12,\n        2.901214706777992e-12, 3.494856471992592e-12, 4.27538222313482e-12,\n        5.321649335762057e-12, 6.744627499296208e-12, 8.706741108973261e-12,\n        1.1364779597964273e-11, 1.4898062301369692e-11, 1.9025914128698622e-11,\n        2.269947436170319e-11, 2.610200166348529e-11, 2.149005047540669e-11,\n        1.751338147048875e-11, 1.3521063773564047e-11, 1.029659763395703e-11,\n        7.919568978330085e-12, 6.172113722639024e-12, 4.90165067770988e-12,\n        3.9705933983999074e-12, 3.2629116625195082e-12, 2.721722767146111e-12,\n        2.304311776040268e-12, 1.9708827625928754e-12, 1.7026946079688544e-12,\n        1.4869411280358671e-12, 1.3073351776135351e-12, 1.1576930976795844e-12,\n        1.033237926417423e-12, 9.265976372621478e-13, 8.363455125005869e-13,\n        7.57746860023005e-13, 6.903109539972513e-13, 6.308409152598229e-13,\n        5.791657188505488e-13, 5.330613609242005e-13, 4.926437072826536e-13,\n        4.562297911521819e-13, 4.2404138157060783e-13, 3.9482737238287405e-13,\n        3.687753833982024e-13, 3.4492798068466226e-13, 3.2355663751016605e-13,\n        3.039021561541127e-13, 2.8615589118498377e-13, 2.69920470146406e-13,\n        2.5485176121804577e-13, 2.4114363291479287e-13, 2.283922584084194e-13,\n        2.1674018090915663e-13, 2.059592657906118e-13, 1.9583726922172104e-13,\n        1.865530464179621e-13, 1.7790543917653255e-13, 1.6976913022765615e-13,\n        1.6224141781457122e-13, 1.5521064269603624e-13, 1.486160238852683e-13,\n        1.4237452423926224e-13, 1.3657373153058975e-13, 1.3111973246325956e-13,\n        1.2598547207450127e-13, 1.2109939015483677e-13, 1.165325627264671e-13,\n        1.1221720482703946e-13, 1.0813842453857015e-13, 1.0428224718699747e-13,\n        1.0058849086957758e-13, 9.715225538228466e-14, 9.382335077807792e-14,\n        9.069907291946518e-14, 8.772694281263289e-14, 8.489395184210815e-14,\n        8.219585317736068e-14, 7.962422631552811e-14, 7.717417345368642e-14,\n        7.483445653232673e-14, 7.259594451088774e-14, 7.045713068639094e-14,\n        6.841377606544641e-14, 6.645489313418893e-14, 6.457887956030425e-14,\n        6.278253765142878e-14, 6.105870488182671e-14, 5.940484913039758e-14,\n        5.781723651484241e-14, 5.629417154956962e-14, 5.482758832538093e-14,\n        5.3418641665922404e-14, 5.20622135075092e-14, 5.075574199996439e-14,\n        4.949977602855187e-14, 4.828840303781567e-14, 4.712184630989722e-14,\n        4.5996589049761335e-14, 4.4921361892879e-14, 4.387186032739458e-14,\n        4.2860677009925925e-14, 4.188288341801995e-14, 4.093815330328698e-14,\n        4.003361663390086e-14, 3.915108537034141e-14, 3.829539031089004e-14,\n        3.746937848562935e-14, 3.667639439233539e-14, 3.590130303282947e-14,\n        3.515021793032373e-14, 3.4422733307382094e-14, 3.3722857775232567e-14,\n        3.303845597765013e-14, 3.2374148658148814e-14, 3.173650157586658e-14,\n        3.1111113170465793e-14, 3.050354499254429e-14, 2.991961804879651e-14,\n        2.9346889825170855e-14, 2.8789569181118316e-14, 2.8254346558465823e-14,\n        2.772811704625332e-14, 2.721564350677481e-14, 2.6722912893884736e-14,\n        2.6238870727307858e-14, 2.5772302470498138e-14, 2.5313195313275075e-14,\n        2.4870457419587816e-14, 2.4435125324643395e-14, 2.4015618811322834e-14,\n        2.3602111073260083e-14, 2.3203302640961805e-14, 2.2810811693070345e-14,\n        2.2432253962058504e-14, 2.2058197721851793e-14, 2.169785308464534e-14,\n        2.1342075344846454e-14, 2.099878892037676e-14, 2.0663716623035972e-14,\n        2.033322256287519e-14, 2.0013888173391673e-14, 1.96986727762458e-14,\n        1.9394229996000973e-14, 1.9096198086978896e-14, 1.880186435152691e-14,\n        1.8517892118983724e-14, 1.8239862186216785e-14, 1.7965241701495626e-14,\n        1.7699727543932965e-14, 1.7439642401884365e-14, 1.7185347596514982e-14,\n        1.6933908496200127e-14, 1.6690649639272348e-14, 1.645240486786002e-14,\n        1.621700409816642e-14, 1.5988519525075034e-14, 1.5765360708088488e-14,\n        1.554649334018058e-14, 1.4519501339015308e-14, 1.3579292196796739e-14,\n        1.2713321486601242e-14, 1.191787106280922e-14, 1.118313282697676e-14,\n        1.0506186127376343e-14, 9.880348774984831e-15, 9.302089555346774e-15,\n        8.76483085663962e-15, 8.26704315664177e-15, 7.80448991605057e-15\n      ],\n      \"pseudovoigt_2\": [\n        0.0002299953752127306, 0.0002340338871588413, 0.0002381712954736742,\n        0.0002424210965715298, 0.00024683521037575804, 0.0002512763738024623,\n        0.00025588890881152225, 0.00026062383097534764, 0.0002655032193832896,\n        0.00027051073907827716, 0.0002756612373819032, 0.00028096665865601575,\n        0.0002864289038015645, 0.00029204284140905897, 0.0002978398400207405,\n        0.0003038014540954352, 0.00030987657070929606, 0.00031621783050111415,\n        0.00032273716469741334, 0.000329471066485048, 0.00033642069472135616,\n        0.00034351690117820826, 0.00035090895754058787, 0.000358557627098925,\n        0.00036644943347350153, 0.00037461452331253106, 0.00038294941895961174,\n        0.00039168225352503936, 0.0004007061539509868, 0.0004099468934911178,\n        0.00041962072837097795, 0.00042962874065416944, 0.00043991051071170064,\n        0.00045067483946830956, 0.0004618299248444953, 0.00047330546982593893,\n        0.0004853114961741942, 0.0004978002766443269, 0.0005106349577830338,\n        0.0005241145997383109, 0.0005380038465060039, 0.0005525767939294275,\n        0.0005677743575955626, 0.0005834400384887663, 0.0005999572116568478,\n        0.0006169755937579578, 0.0006349178453069429, 0.0006534632261700329,\n        0.0006730796166227732, 0.0006933505412463263, 0.000714541872633794,\n        0.0007369655322500421, 0.0007602120986256219, 0.0007848261132012544,\n        0.000810401643453308, 0.0008375344780865258, 0.0008657846809775093,\n        0.0008954752929427834, 0.0009270274108651083, 0.0009599227196429622,\n        0.0009949996291658608, 0.0010316551452813176, 0.0010703402373253579,\n        0.0011117305914497592, 0.0011550293006026933, 0.0012010187555075227,\n        0.0012502507721085306, 0.0013020552822651415, 0.0013571207408358708,\n        0.0014157986673180485, 0.0014790347550625593, 0.001545932850650535,\n        0.0016173194904267666, 0.001693918408038035, 0.0017759794760396335,\n        0.0018653515739805928, 0.001960365349587306, 0.0020628138066620563,\n        0.002173584039484392, 0.0022936029163493554, 0.002423658274890767,\n        0.0025667270888149484, 0.0027213291068996608, 0.0028898695071786057,\n        0.003074830606494397, 0.003278078725938276, 0.003502286780345906,\n        0.003749809143342735, 0.004024892322912671, 0.0043311381440560084,\n        0.004673990828659085, 0.0050585356859917914, 0.005492311462132106,\n        0.005983836653336534, 0.006545203312219761, 0.0071886342551783665,\n        0.007930903932675475, 0.008794277483757412, 0.009806786926529948,\n        0.011009445692216159, 0.012462714579654895, 0.014268015070511123,\n        0.01657582650323279, 0.019759695839841638, 0.024383515236661362,\n        0.031462476089922566, 0.04257890187601227, 0.060067776242317364,\n        0.0865163635635435, 0.12567454098285827, 0.1802797361063831,\n        0.2526553633634901, 0.3442445467609167, 0.45332048366471034,\n        0.5725122104957818, 0.6610835611236304, 0.6566923690222599,\n        0.5643045069003176, 0.4448096040001777, 0.336036771505521,\n        0.24680366194142328, 0.17564187912875995, 0.12216486172422318,\n        0.08433938620409209, 0.05840015470723445, 0.04147768745167672,\n        0.030829068718583878, 0.023967517473227014, 0.019465752642205555,\n        0.016385240039016532, 0.01409645282615341, 0.01233804119585928,\n        0.01090213256829056, 0.009724374932549856, 0.008720679205254918,\n        0.007872889657305097, 0.007134976912305034, 0.006502334774117172,\n        0.00594383550006576, 0.005459299870683887, 0.005027069980783668,\n        0.004647749894631741, 0.00430566307158605, 0.004003323302450998,\n        0.003728850662327919, 0.003484014234115606, 0.003262542005592535,\n        0.0030591710075243543, 0.0028760172038252312, 0.002707255819174805,\n        0.0025544193088505858, 0.0024141967512870234, 0.0022835980264771954,\n        0.002164718687114551, 0.002054785264088944, 0.0019520612530613479,\n        0.0018576422431908948, 0.0017700030499761697, 0.0016882872205488508,\n        0.0016113868561178685, 0.0015403051114181634, 0.0014738191293986735,\n        0.0014115415790403344, 0.0013525579317540792, 0.0012976815506367157,\n        0.001246054734855963, 0.001197464343542984, 0.0011517123770891438,\n        0.001108059653915381, 0.0010676034654329039, 0.0010285534581798957,\n        0.000992033007561494, 0.0009574085430614485, 0.0009245129322042021,\n        0.0008932827362360117, 0.0008636074865910846, 0.0008354187641552384,\n        0.0008085765469520917, 0.0007829666634587268, 0.0007585632294530329,\n        0.0007353097407457772, 0.0007130739200770861, 0.0006918310748721706,\n        0.0006715388650341184, 0.0006521108261700182, 0.0006335133878975428,\n        0.0006156998942909391, 0.0005986469704201467, 0.0005822604087298049,\n        0.0005665495470264231, 0.0005514539660687864, 0.0005369421344404597,\n        0.0005230172623679873, 0.0005096111420133216, 0.0004967238198938961,\n        0.00048431416992203777, 0.0004724761108107978, 0.00046094016796272686,\n        0.00044984322424960354, 0.0004391294872199218, 0.00042879384635433033,\n        0.00041891263656950524, 0.00040928580408617667, 0.00039996501909929773,\n        0.0003909801083691847, 0.00038236615349135865, 0.00037395773456879263,\n        0.0003658203721455711, 0.0003579487621603282, 0.00035038531624542887,\n        0.0003429981077002349, 0.00033583639045728136, 0.00032897012411532803,\n        0.0003222435688432617, 0.00031571605519378315, 0.0003094494373397226,\n        0.00030330962799758474, 0.0002973413423293684, 0.0002916156452556453,\n        0.00028599187704943853, 0.00028052061440687464, 0.0002752652856738804,\n        0.00027010758458638094, 0.00026514076432462196, 0.00026025789722580576,\n        0.00025555341176466674, 0.00025093175305835686, 0.0002464820120046611,\n        0.00024209968132045165, 0.00023787671517366482, 0.0002337241041357554,\n        0.00022972218358306156, 0.00022577103219647546, 0.00022196772870551916,\n        0.00021821554813092832, 0.00021459787703711567, 0.00021106941221531088,\n        0.000207591733926245, 0.00020423393179628912, 0.00020092181557560644,\n        0.00019772514738092685, 0.0001945979547504829, 0.00019151167897301253,\n        0.00018853605338900358, 0.00018562461347012549, 0.00018275075231380682,\n        0.00017997397200818577, 0.00017725568119806892, 0.00017459955730260768,\n        0.0001719748748488551, 0.0001694371197378246, 0.00016695314747212792,\n        0.00016450026917847255, 0.000162120837206724, 0.00015979818753033943,\n        0.00015752147845748295, 0.00014685556969374028, 0.00013711621506798375,\n        0.000128167885954442, 0.0001199674165215495, 0.00011240961538916714,\n        0.00010546095111400769, 9.904978478874828e-5, 9.313732080969409e-5,\n        8.765407215966809e-5, 8.258249805872804e-5, 7.78777238020077e-5\n      ],\n      \"pseudovoigt_3\": [\n        0.0006602842942843671, 0.0006696236061098646, 0.0006791430291785958,\n        0.0006888706342961126, 0.0006989211006014035, 0.0007089792679182944,\n        0.000719369244114519, 0.0007299761902924956, 0.0007408455508072781,\n        0.000751936808867619, 0.000763278747101859, 0.0007748930474192907,\n        0.0007867789748730252, 0.000798920527767003, 0.0008113801875615833,\n        0.0008241126836025982, 0.000837004653241417, 0.0008503737416651244,\n        0.0008640266492829008, 0.0008780332425176227, 0.0008923885718755253,\n        0.0009069439240150739, 0.000921997874536953, 0.0009374604831410558,\n        0.0009532956279319128, 0.0009695545509087378, 0.0009860236608209517,\n        0.0010031433467599653, 0.001020690871456239, 0.0010385129715610821,\n        0.0010570144499212483, 0.0010759910053001489, 0.0010953168917789268,\n        0.0011153697676600665, 0.001135960876796459, 0.0011569468921880158,\n        0.0011786948127137126, 0.0012010969051426945, 0.001223891348237173,\n        0.0012475887199854803, 0.001271753085677423, 0.0012968381753034077,\n        0.0013227132638672192, 0.0013490890642436097, 0.001376581959297545,\n        0.0014045790392767585, 0.001433743863331964, 0.0014635205511831673,\n        0.0014946216525138945, 0.0015263469050112199, 0.0015590774733956188,\n        0.001593242700484374, 0.00162816974933064, 0.0016646239317352138,\n        0.001701947310130163, 0.0017409470380232973, 0.0017809240259602063,\n        0.0018222734806197273, 0.0018654957332269928, 0.0019097989151356752,\n        0.0019562204838960056, 0.002003863814503159, 0.0020532235827279486,\n        0.0021050318351616307, 0.0021581672838437167, 0.002213469409690192,\n        0.0022714342138737257, 0.002331112586955668, 0.002393140665880005,\n        0.0024577218761403555, 0.0025256586472258953, 0.002595753124794593,\n        0.002668645974551409, 0.002744796500471869, 0.0028241427453367463,\n        0.00290808604558968, 0.00299467617411067, 0.0030851747771541353,\n        0.0031798971985257706, 0.003279110338772425, 0.0033828895807083586,\n        0.0034928995997873906, 0.0036072582680863313, 0.0037270007550785243,\n        0.003852979210847778, 0.003985417499233984, 0.00412487669639773,\n        0.00427149906652618, 0.004426283937624137, 0.004589513315612093,\n        0.0047620906562942525, 0.004944292398704334, 0.005137075299930752,\n        0.00534118411672285, 0.005558049842013633, 0.005788188604183887,\n        0.006032693959271478, 0.006292987916569693, 0.006570219614277274,\n        0.00686611720952792, 0.007182248601659563, 0.007520620008958777,\n        0.00787929725579662, 0.008268284566896883, 0.008686253179687442,\n        0.009136668876840878, 0.009621931146898752, 0.010147178142152479,\n        0.010709791394265854, 0.011326119677678605, 0.011995679217596531,\n        0.012725547857236808, 0.013523708180281693, 0.014388571079833668,\n        0.015346742297886082, 0.016401422801955282, 0.0175656351456039,\n        0.01884160643338125, 0.02027351256747762, 0.02186655544328535,\n        0.02363114945367887, 0.025631136693328754, 0.027884256176473502,\n        0.030405612231644234, 0.033292368516666254, 0.03659253567264006,\n        0.04032655950316669, 0.044664148339543956, 0.049684321140800555,\n        0.05544262121754967, 0.0622115227336975, 0.07003082531457179,\n        0.07927588573028703, 0.08997465817715887, 0.10258999354789741,\n        0.1170696993642949, 0.13383392928376944, 0.1524052475829859,\n        0.17272188768391533, 0.19326111108786778, 0.2126984094366267,\n        0.22825040071813035, 0.2377359846948626, 0.2407319924434132,\n        0.2322351773125234, 0.218489447743203, 0.20021326519494842,\n        0.17962519434151933, 0.15918685967365567, 0.13979815687791677,\n        0.12249813752979173, 0.1072924097721866, 0.09396665996700705,\n        0.08267405114078165, 0.07300405400524618, 0.06466189636440677,\n        0.05758667248841191, 0.05151895750415635, 0.04628237051034979,\n        0.0417123175702249, 0.03778447304345979, 0.03435747888063975,\n        0.03135457343604374, 0.028687278786948187, 0.026353541065201543,\n        0.024282619544888556, 0.02243937283280075, 0.020793946277893098,\n        0.01930241824015902, 0.017985966641819184, 0.01677324587024237,\n        0.015688884396364823, 0.014703836560757126, 0.013805570396836619,\n        0.012985685066344331, 0.01223548504550525, 0.01154821701015249,\n        0.010916152059377387, 0.0103329572774636, 0.009794854999006798,\n        0.009297753380567524, 0.008836385108688286, 0.008408127264268447,\n        0.008010229235705256, 0.007639338967103865, 0.00729336631884354,\n        0.006970150300244951, 0.006668107847228484, 0.006384560949824963,\n        0.006118776978894665, 0.005868923592006102, 0.0056337670156171495,\n        0.00541270422565224, 0.005204066605989193, 0.005007333851356962,\n        0.00482140382524843, 0.0046472150033818735, 0.004480427004446693,\n        0.0043227132355389275, 0.004172960430074258, 0.0040308139149955475,\n        0.003897031576456852, 0.0037686657227455605, 0.0036462220806199857,\n        0.0035298935553494115, 0.003419926953455834, 0.0033140470370487804,\n        0.0032129480580481264, 0.003116423649570511, 0.0030248508448286106,\n        0.002936515604452582, 0.0028519130344469104, 0.00277175419095666,\n        0.002694127540060916, 0.0026196470537841353, 0.0025489272823286686,\n        0.002480380490745496, 0.002414450024853887, 0.0023518470882371114,\n        0.002290974104726604, 0.0022323355316474476, 0.0021765517416729493,\n        0.002122317851534998, 0.0020705708271396076, 0.0020201562425436756,\n        0.0019720117981366254, 0.0019251235450503262, 0.00188036137010037,\n        0.0018366428899657175, 0.0017948569417401091, 0.0017540946671630898,\n        0.0017151184698988953, 0.001676931883576254, 0.0016404509047001745,\n        0.0016047260087464058, 0.0015705314648703167, 0.0015374160447358413,\n        0.0015050050963615982, 0.001473925847718829, 0.0014434758011304693,\n        0.0014142813858226597, 0.0013859060477466889, 0.0013580809119112449,\n        0.001331421652838608, 0.0013054973332373013, 0.0012800627172487884,\n        0.0012556336700940136, 0.0012318585509267983, 0.0012087603726667925,\n        0.0011860649857325786, 0.00116424357174067, 0.001143001128805079,\n        0.001122137749481993, 0.001102006574728667, 0.001082457963197974,\n        0.0010633940184011348, 0.0009753774790250093, 0.0008968755866283491,\n        0.0008263298515967832, 0.000763017033690182, 0.0007058063001530561,\n        0.000654179253128558, 0.0006073792977230862, 0.0005649354487804341,\n        0.0005261926379069528, 0.0004908951017387461, 0.0004586164857668766\n      ],\n      \"gaussian_4\": [\n        4.259858228995655e-260, 1.1016131884618945e-256, 2.662298682438112e-253,\n        6.127151116252188e-250, 1.4586939164380406e-246, 2.8105996209991916e-243,\n        5.584078595085743e-240, 1.043641057323023e-236, 1.885122768473291e-233,\n        3.184213174246208e-230, 5.10577676573387e-227, 7.840144600603041e-224,\n        1.1460105952720686e-220, 1.5717251710746544e-217, 2.087617274017277e-214,\n        2.6017566790601215e-211, 2.852318995737637e-208, 3.249490138790396e-205,\n        3.4454708015103387e-202, 3.5062710898382087e-199, 3.395753405610471e-196,\n        2.9086174576255017e-193, 2.5181579855742987e-190, 2.0971141463033846e-187,\n        1.6442233052531943e-184, 1.2331948740393608e-181, 8.095390148993437e-179,\n        5.4997387308629296e-176, 3.518181066858118e-173, 1.999016843859897e-170,\n        1.158143966741979e-167, 6.319460104117335e-165, 3.1062441712148647e-162,\n        1.5424059929844438e-159, 7.231974255586328e-157, 3.058348212415427e-154,\n        1.2888362919152725e-151, 5.2037018478691155e-149, 1.87054699391571e-146,\n        6.787484941557916e-144, 2.2157541180138237e-141, 7.20955057959372e-139,\n        2.246465070652964e-136, 6.263461896541479e-134, 1.7697488144042887e-131,\n        4.4391915917565225e-129, 1.1197378404439163e-126, 2.538359712583208e-124,\n        5.842405755636607e-122, 1.1992200135080797e-119, 2.3329411787764614e-117,\n        4.560634371185514e-115, 8.015828913947689e-113, 1.4083293933154093e-110,\n        2.236194183742487e-108, 3.5526113301746383e-106, 5.1155823361357e-104,\n        6.981222601064197e-102, 9.479219606922421e-100, 1.161563811530446e-97,\n        1.425678961084507e-95, 1.5837283052186428e-93, 1.664433635547698e-91,\n        1.7521903266155786e-89, 1.656807219944689e-87, 1.5039724244138628e-85,\n        1.3479112324857233e-83, 1.0987059075648758e-81, 8.489304365388519e-80,\n        6.2501805819479235e-78, 4.565930819174326e-76, 3.039333172981001e-74,\n        1.9050749631396407e-72, 1.1432602716092456e-70, 6.482625329825229e-69,\n        3.678278954640446e-67, 1.8822655014158332e-65, 9.145820168793742e-64,\n        4.232484750458475e-62, 1.865283958885258e-60, 7.769515326770571e-59,\n        3.2013005464172613e-57, 1.2101250507036817e-55, 4.305529226719047e-54,\n        1.4627231222130185e-52, 4.717707962280662e-51, 1.448485108613923e-49,\n        4.199222945671826e-48, 1.161936681593653e-46, 3.048105103540754e-45,\n        7.620005724410939e-44, 1.8013835886709173e-42, 4.0427080247339915e-41,\n        8.60254064982454e-40, 1.7482545534523544e-38, 3.36834468899525e-37,\n        6.153036001588072e-36, 1.0681503558939156e-34, 1.7581441731941724e-33,\n        2.7499734012179853e-32, 4.08285083627552e-31, 5.759890828090673e-30,\n        7.509650886932179e-29, 9.55934980518719e-28, 1.1538095504083611e-26,\n        1.3244024688187237e-25, 1.4387454058803583e-24, 1.4890553088611994e-23,\n        1.4287246475501728e-22, 1.3313914039847015e-21, 1.1755006753817208e-20,\n        9.859326831612325e-20, 7.867962137346769e-19, 5.84105903034015e-18,\n        4.1969800732045645e-17, 2.862007630893282e-16, 1.8522228419547885e-15,\n        1.1183102306507797e-14, 6.535556299020223e-14, 3.614673224893979e-13,\n        1.870410013475965e-12, 9.346128918481265e-12, 4.4316032726947175e-11,\n        1.9648446916542164e-10, 8.379383240943728e-10, 3.402600168977505e-9,\n        1.2910917403208595e-8, 4.7154132626544926e-8, 1.6374158041236136e-7,\n        5.32743009219752e-7, 1.6647167278086784e-6, 4.881913712715456e-6,\n        1.3747348350951613e-5, 3.6354759097352445e-5, 9.218035568105857e-5,\n        0.00021990224931217438, 0.0005027411315092636, 0.0010813922319456604,\n        0.0022272011411965872, 0.004319533160917661, 0.0080079766479752,\n        0.014007151918547553, 0.023410751798273937, 0.03692342024181861,\n        0.05553718980843239, 0.07897902778391583, 0.10665651372111784,\n        0.13716502155824473, 0.16703046437773958, 0.19336954607143753,\n        0.21221882229523883, 0.2211844837027692, 0.21883571393143644,\n        0.2055780923930622, 0.1833852044219346, 0.1550565383982527,\n        0.12464057132695, 0.0951675687950812, 0.06896614121516682,\n        0.04727148453410309, 0.03087332195920074, 0.019145778832305605,\n        0.011273746592723873, 0.0062650438511900955, 0.0033225784127335783,\n        0.0016725223427313475, 0.0007995634833446323, 0.0003632697879699139,\n        0.00015520330255815832, 6.401368133403478e-5, 2.4598377646566834e-5,\n        9.07501581466291e-6, 3.1776546807523935e-6, 1.0545537221683494e-6,\n        3.322354635546973e-7, 9.936616709655675e-8, 2.8256366258481642e-8,\n        7.62484828660207e-9, 1.9490904258022883e-9, 4.732191441372916e-10,\n        1.0926176394486724e-10, 2.3891946335516156e-11, 4.959226677797263e-12,\n        9.784275509505562e-13, 1.8300687440469833e-13, 3.249265805735101e-14,\n        5.476236337440673e-15, 8.780646815070553e-16, 1.3315123323627031e-16,\n        1.9195016881130636e-17, 2.622473521076492e-18, 3.3951480866575794e-19,\n        4.1858636394456633e-20, 4.8860664317179995e-21, 5.422888704315008e-22,\n        5.707788441526681e-23, 5.831067365626359e-24, 5.51106534682831e-25,\n        4.9671212131525297e-26, 4.236830408524281e-27, 3.4299208074805974e-28,\n        2.701586220546003e-29, 1.9751924812627266e-30, 1.361878111751396e-31,\n        8.969337054148373e-33, 5.7401254183651195e-34, 3.39961954908058e-35,\n        1.9087204980428646e-36, 1.0182527579670024e-37, 5.274577859083375e-39,\n        2.529443759795812e-40, 1.1482942676177718e-41, 5.118394528252823e-43,\n        2.096201756984044e-44, 8.125514479275992e-46, 3.0935662649865446e-47,\n        1.0832163182185248e-48, 3.579703502142197e-50, 1.1701763234214125e-51,\n        3.493327532707207e-53, 9.83917135257652e-55, 2.7421938662008497e-56,\n        7.007515527585234e-58, 1.7612590531759095e-59, 4.0364840752215754e-61,\n        9.106594606738052e-63, 1.879807618947693e-64, 3.841764779088005e-66,\n        7.120423658110417e-68, 1.3058411013076189e-69, 2.1868128321549607e-71,\n        3.6338684433480606e-73, 5.426466888193308e-75, 8.102817807762883e-77,\n        1.0913276896322173e-78, 1.464043674319669e-80, 1.865299395527267e-82,\n        2.15473260941904e-84, 2.4748289310219656e-86, 2.56970826461812e-88,\n        2.6655440918629117e-90, 2.6016370876115095e-92, 2.2913419114643544e-94,\n        2.0346982273595933e-96, 1.7028303465027835e-98, 1.286346896732215e-100,\n        9.74071500985926e-103, 6.94928799175537e-105, 4.717040351658215e-107,\n        2.8778816387542913e-109, 1.7639990323719425e-111, 1.0224982875117536e-113,\n        5.351571922196971e-116, 2.777676563524733e-118, 1.3864515682329547e-120,\n        6.515340863115743e-123, 7.244281174010586e-135, 1.4989872781923165e-147,\n        4.770746486722214e-161, 2.5012472434113596e-175, 1.7740647758454357e-190,\n        1.8314630184404583e-206, 2.4115200312567504e-223, 4.115352123722348e-241,\n        7.137742664823761e-260, 1.3915568248429963e-279, 2.6555675954628907e-300\n      ],\n      \"gaussian_5\": [\n        1.5449587777325296e-123, 4.5686160463087665e-122, 1.314830349899796e-120,\n        3.712768936689873e-119, 1.0660805031865058e-117, 2.7997096715563514e-116,\n        7.466264528327707e-115, 1.9432822837502817e-113, 4.9945021782506135e-112,\n        1.2496131354620481e-110, 3.063438384474205e-109, 7.386595126647533e-108,\n        1.7472509929119257e-106, 4.0291613941130415e-105, 9.183389987002056e-104,\n        2.0405481563080098e-102, 4.29769145116277e-101, 9.225263045581326e-100,\n        1.923694103788854e-98, 3.9493436897500776e-97, 7.953296815593462e-96,\n        1.52154802009638e-94, 2.9314394325467873e-93, 5.566023561451631e-92,\n        1.031785285593648e-90, 1.8804033936614104e-89, 3.2403229562617456e-88,\n        5.68243728500414e-87, 9.729476123131954e-86, 1.5852203636948537e-84,\n        2.6115857093312683e-83, 4.201131977754345e-82, 6.47049454763275e-81,\n        1.0036440197572745e-79, 1.5218194150355757e-78, 2.210368145415456e-77,\n        3.2140126158741323e-76, 4.597955191552085e-75, 6.264300770951583e-74,\n        8.593670785957667e-73, 1.1278849131283163e-71, 1.4822539994893107e-70,\n        1.9161820276798394e-69, 2.3640118059919985e-68, 2.942301595319073e-67,\n        3.4822981115676683e-66, 4.1437305012066904e-65, 4.7142645425400254e-64,\n        5.416135074340816e-63, 5.928335349335039e-62, 6.35328835549078e-61,\n        6.844568709381621e-60, 7.050276217873123e-59, 7.283598942932092e-58,\n        7.210844748349831e-57, 7.1633580166077835e-56, 6.82801465287542e-55,\n        6.372228441188437e-54, 5.952785780078823e-53, 5.3247471288437635e-52,\n        4.782575419006318e-51, 4.118300788506448e-50, 3.469294571277286e-49,\n        2.935015227750774e-48, 2.3719748726518494e-47, 1.8879634820023304e-46,\n        1.4993029242187866e-45, 1.143830987251139e-44, 8.544473837506012e-44,\n        6.26478030031129e-43, 4.594102965433754e-42, 3.2388495821796653e-41,\n        2.228880137526713e-40, 1.508868595914541e-39, 9.9864754356288e-39,\n        6.638373686220498e-38, 4.221100993953959e-37, 2.6301614719108793e-36,\n        1.6082674745481492e-35, 9.650107232919457e-35, 5.661763198210732e-34,\n        3.3191847904791796e-33, 1.8759390787819432e-32, 1.034624615487129e-31,\n        5.60670442419936e-31, 2.9771235853208395e-30, 1.5510304858729894e-29,\n        7.897112204799089e-29, 3.9500839483429505e-28, 1.9347292139728948e-27,\n        9.302587065021082e-27, 4.3744306421908164e-26, 2.0155640257612676e-25,\n        9.094288852127666e-25, 4.032630990563303e-24, 1.7509915941184986e-23,\n        7.445024066796082e-23, 3.103396616340363e-22, 1.2667823670406245e-21,\n        5.069309231362259e-21, 1.9876118935762356e-20, 7.639804860395483e-20,\n        2.8380857396668735e-19, 1.0479752264849825e-18, 3.78945821145431e-18,\n        1.3439019351915533e-17, 4.6626231800911533e-17, 1.5880769670297658e-16,\n        5.234031022854976e-16, 1.7107303208489189e-15, 5.473202984417719e-15,\n        1.716433424883291e-14, 5.2809611407562164e-14, 1.574580938966072e-13,\n        4.648951583924988e-13, 1.344784577833765e-12, 3.811167880316236e-12,\n        1.0480107678665409e-11, 2.8548721371567146e-11, 7.607139634839806e-11,\n        1.9694704628654794e-10, 5.045869899422644e-10, 1.2665110560850503e-9,\n        3.0868723569941707e-9, 7.43022200471847e-9, 1.755795686575193e-8,\n        4.025814364954592e-8, 9.123041853693155e-8, 2.0279490531395717e-7,\n        4.379742725247035e-7, 9.339411128916642e-7, 1.936401645615291e-6,\n        3.964835620474495e-6, 7.894384512050563e-6, 1.551168848187899e-5,\n        2.9667732024698354e-5, 5.599925137293382e-5, 0.00010285064003675579,\n        0.0001863833120547779, 0.0003287212551501769, 0.0005715192107641682,\n        0.0009681550234966213, 0.0016172974671230876, 0.0026312492485412926,\n        0.004216184947133826, 0.0065878336195920005, 0.010086045086502576,\n        0.015205664785381856, 0.022367110545137448, 0.03235249871668645,\n        0.04567981024952089, 0.06319849330144363, 0.08601213238427675,\n        0.11427019131480619, 0.1488043267212761, 0.19031891597612413,\n        0.23799491788829202, 0.29157154249456624, 0.3501521536349937,\n        0.4126589586291023, 0.47573627541334507, 0.5374448177880398,\n        0.5949686909568478, 0.6458873224794934, 0.6864859171697572,\n        0.7149740827296335, 0.7296567709597787, 0.7296770910622179,\n        0.71481524931493, 0.6865676585126325, 0.6454793557484344,\n        0.5950309772334914, 0.5374894530933569, 0.47565695725534257,\n        0.4124535364624024, 0.35043984663492533, 0.29181665023035025,\n        0.2380937469225478, 0.19028061955780654, 0.14901448048361435,\n        0.11438153092609375, 0.08599031001130027, 0.06334119262211708,\n        0.045728068648309285, 0.03233797993216762, 0.022407119340745615,\n        0.015212559125585402, 0.010124633530438878, 0.006596904819692305,\n        0.004212979512558395, 0.0026352099578999186, 0.0016143458453106564,\n        0.0009697366223322295, 0.0005703910184463353, 0.0003288577908266272,\n        0.00018572857014822688, 0.00010336764125342294, 5.5997195917445325e-5,\n        2.9758160025161506e-5, 1.5482344965945625e-5, 7.891910718020928e-6,\n        3.968016834175699e-6, 1.94305411129132e-6, 9.30572001802753e-7,\n        4.37419346900552e-7, 2.0278551026736073e-7, 9.14613492656671e-8,\n        4.040263421778023e-8, 1.7491873818721385e-8, 7.468548827479449e-9,\n        3.1020716650358588e-9, 1.2614002895533401e-9, 5.075621647970878e-10,\n        1.9820909741496701e-10, 7.5773104924071e-11, 2.8671458909926515e-11,\n        1.053034630511926e-11, 3.782804258413012e-12, 1.3480922033260319e-12,\n        4.652638206852141e-13, 1.5703649683073564e-13, 5.2595452925468973e-14,\n        1.707799023811436e-14, 5.493031102175373e-15, 1.7098103554711777e-15,\n        5.273745297073263e-16, 1.5756888590549943e-16, 4.6737931268270085e-17,\n        1.3390952604534952e-17, 3.8085257207372636e-18, 1.0484376770771899e-18,\n        2.8678625156741053e-19, 7.554033594672361e-20, 1.9820739429820073e-20,\n        5.01342500322294e-21, 1.2617369708624952e-21, 3.1119387107406933e-22,\n        7.410247577845825e-23, 1.754927145022704e-23, 4.008520042308842e-24,\n        9.120764863187977e-25, 2.0276587207172776e-25, 4.3445226411722343e-26,\n        9.301730637546658e-27, 1.9468078134116276e-27, 3.927030452316954e-28,\n        7.901475187371056e-29, 1.5539360142642537e-29, 2.9966718685951516e-30,\n        5.561090980335198e-31, 1.0303047384393712e-31, 1.8680130716456895e-32,\n        3.2637948741022414e-33, 5.669162689213273e-34, 9.690470893780304e-35,\n        1.618570244095521e-35, 1.5804850348783825e-39, 8.154693226308838e-44,\n        2.0777530142103366e-48, 2.6675311446061633e-53, 1.6081067292203905e-58,\n        4.6542746338578485e-64, 6.161193256181061e-70, 3.7413227406265723e-76,\n        9.54481645596202e-83, 1.0569666428460558e-89, 4.826413706761959e-97\n      ],\n      \"gaussian_6\": [\n        4.193275255068707e-156, 1.1426631726738381e-154, 3.0461324258918096e-153,\n        8.007293772757398e-152, 2.1495721470747327e-150, 5.311393360512078e-149,\n        1.3384866802295418e-147, 3.3087930782543244e-146, 8.116711696763965e-145,\n        1.9482247791099125e-143, 4.604971857766272e-142, 1.0759204597745792e-140,\n        2.4785008043363587e-139, 5.594293254809135e-138, 1.2542735984709464e-136,\n        2.755446249619383e-135, 5.766845354832117e-134, 1.2361840350121178e-132,\n        2.587181715012955e-131, 5.357851752973489e-130, 1.0939012548023444e-128,\n        2.1319409457742765e-127, 4.2060819196619675e-126, 8.219781790064488e-125,\n        1.57614753205611e-123, 2.986481874554613e-122, 5.3745465457648855e-121,\n        9.8984165254809e-120, 1.788813043850402e-118, 3.0897508081424457e-117,\n        5.427062852082148e-116, 9.354292365767241e-115, 1.5505175447993618e-113,\n        2.603272831476906e-112, 4.294079617912392e-111, 6.813930107743825e-110,\n        1.088674383761343e-108, 1.7202598728336897e-107, 2.5988379917812406e-106,\n        3.9775642257099944e-105, 5.847439807401378e-104, 8.6593565760395455e-103,\n        1.2680678355301042e-101, 1.7787029151197344e-100, 2.5335625250988268e-99,\n        3.443244520145533e-98, 4.735500469512624e-97, 6.248850089449056e-96,\n        8.384661531120188e-95, 1.075307123455614e-93, 1.3568473771193963e-92,\n        1.732896763827006e-91, 2.122911440659338e-90, 2.626141268632678e-89,\n        3.123397833306517e-88, 3.7536410901685974e-87, 4.3425422663591264e-86,\n        4.9429278643469744e-85, 5.671290952242476e-84, 6.248524450416201e-83,\n        6.964206222334919e-82, 7.462836125916386e-81, 7.86120452089031e-80,\n        8.380117118579096e-79, 8.553004001330211e-78, 8.645355758025258e-77,\n        8.781593275741806e-76, 8.592077950040671e-75, 8.27172423249319e-74,\n        7.856820474890547e-73, 7.522226739589706e-72, 6.940975962142727e-71,\n        6.279595829032828e-70, 5.619785560145033e-69, 4.939990445909895e-68,\n        4.400097797758237e-67, 3.7539235100912676e-66, 3.154056485040776e-65,\n        2.6142539329805257e-64, 2.137491244182159e-63, 1.7167877749260047e-62,\n        1.3897172575894174e-61, 1.0868139825929042e-60, 8.329006605332986e-60,\n        6.306591164312252e-59, 4.7025756859661355e-58, 3.4586542199360237e-57,\n        2.497105894199353e-56, 1.781053376797039e-55, 1.2499959092837654e-54,\n        8.65921326306708e-54, 5.89346504759487e-53, 3.9500018546778645e-52,\n        2.6051430484014986e-51, 1.6983424533284298e-50, 1.0894583478875182e-49,\n        6.876947085359578e-49, 4.2777983925975365e-48, 2.618484272509292e-47,\n        1.579479032550646e-46, 9.382013588891335e-46, 5.491636799822032e-45,\n        3.108514436896967e-44, 1.765850580021062e-43, 9.871095574926301e-43,\n        5.4410023320798157e-42, 2.947263447786839e-41, 1.5762834472133199e-40,\n        8.160095431711793e-40, 4.2295098592725324e-39, 2.155880052684747e-38,\n        1.0828060873395155e-37, 5.3655238500777225e-37, 2.577115843072661e-36,\n        1.2375843914301406e-35, 5.852111898620382e-35, 2.7248797150693698e-34,\n        1.2313376906038989e-33, 5.5699288534975444e-33, 2.474993401175176e-32,\n        1.0690550887122038e-31, 4.617378455401463e-31, 1.9636845204505523e-30,\n        8.107084490300074e-30, 3.3376277958143455e-29, 1.3575485664886226e-28,\n        5.350809546657775e-28, 2.1068644887376328e-27, 8.185918660830095e-27,\n        3.086974093081435e-26, 1.161714224002648e-25, 4.2469805095259865e-25,\n        1.550526170148524e-24, 5.49801628165452e-24, 1.9453134763645354e-23,\n        6.693907200158776e-23, 2.2998852946568657e-22, 7.675893387470128e-22,\n        2.5582630345834623e-21, 8.281289471090615e-21, 2.6735421802196716e-20,\n        8.397957585646549e-20, 2.6346967283678817e-19, 8.030166110095961e-19,\n        2.4392465181499947e-18, 7.213590404696582e-18, 2.1001465874548697e-17,\n        6.098410554971724e-17, 1.7248061530857463e-16, 4.851633745035881e-16,\n        1.3296642073330506e-15, 3.587619090269964e-15, 9.653219181615978e-15,\n        2.5269294402427773e-14, 6.51964583080787e-14, 1.6714553278356703e-13,\n        4.185256097271301e-13, 1.0309621708692542e-12, 2.5046847835483487e-12,\n        6.04270225026915e-12, 1.423118497545816e-11, 3.3007443581606575e-11,\n        7.539519578563868e-11, 1.7097483922267605e-10, 3.7896025433729634e-10,\n        8.274464883273072e-10, 1.778686148174393e-9, 3.7620238756113566e-9,\n        7.90044791828422e-9, 1.6112225802232833e-8, 3.283304421598904e-8,\n        6.53300814693446e-8, 1.280536672543621e-7, 2.474452207414332e-7,\n        4.708693592091525e-7, 8.823809065630415e-7, 1.6271614434724022e-6,\n        2.95568383548864e-6, 5.292118330612122e-6, 9.328839238184302e-6,\n        1.618345379671794e-5, 2.7671139345640854e-5, 4.659148016438421e-5,\n        7.72212214014769e-5, 0.000126086545584599, 0.00020273300775135929,\n        0.0003209991024628713, 0.0005002411547634894, 0.0007683521523505103,\n        0.0011617515162094141, 0.0017303158871940288, 0.002538520790921391,\n        0.0036651230124954202, 0.00521313940847715, 0.00729967518950698,\n        0.01006654545313186, 0.013631004933976931, 0.018238589975216934,\n        0.024016739381899153, 0.0311520347318908, 0.0397888196468262,\n        0.04993622463374502, 0.0618425667394269, 0.07545201187681713,\n        0.0906050712914918, 0.10699518106455314, 0.12461723411128771,\n        0.14292779164758176, 0.16141073992749205, 0.17936010448461692,\n        0.19643811632920333, 0.21185597684107776, 0.2248492680503198,\n        0.2351440780564097, 0.24214209591207958, 0.24550155261290635,\n        0.24514008958452282, 0.24101471523074205, 0.23342413561242617,\n        0.22253800087390382, 0.2088762049765619, 0.1932241835088985,\n        0.17588154937683737, 0.15781443045149393, 0.13927162874436552,\n        0.12118761273876123, 0.10369745103309051, 0.08753434234973899,\n        0.0726144466327064, 0.05943814511065143, 0.04781515818656779,\n        0.03797122834775271, 0.029599962944000753, 0.02279378018021084,\n        0.01722863885707551, 0.012864362620438533, 0.009460479096413758,\n        0.006828531093618036, 0.004870327624394102, 0.0034078189828854384,\n        0.002357634144118628, 0.001605194623970854, 0.001071590846713327,\n        0.0007081238512547304, 0.0004605503440996193, 0.00029360484203537875,\n        0.00018525436359309824, 0.00011503200357582611, 7.03585452318445e-5,\n        4.214643521701928e-5, 2.5004147463401824e-5, 1.460309443878564e-5,\n        8.354008544462428e-6, 4.728079638027677e-6, 2.638989193116787e-6,\n        1.4492547743101205e-6, 5.792551529900139e-8, 1.5041488019794708e-9,\n        2.452229294019683e-11, 2.507481496863653e-13, 1.5493181136665965e-15,\n        5.790983292592509e-18, 1.2723115394465807e-20, 1.6334262258604093e-23,\n        1.167347455168096e-26, 4.6816523432596956e-30, 1.0207086555460516e-33\n      ],\n      \"atan_7\": [\n        0.005993062728776505, 0.006028226256779969, 0.00606373332157246,\n        0.006099675571071781, 0.006136456378060256, 0.006172912802234149,\n        0.006210209830912972, 0.006247914710940482, 0.00628617237644612,\n        0.006324823620476041, 0.006363953053367927, 0.006403617439596704,\n        0.0064437954441257436, 0.006484415344507497, 0.006525666455882447,\n        0.00656737862112152, 0.006609168760596192, 0.006652044648381702,\n        0.0066953583766337504, 0.006739310432521324, 0.006783861172470734,\n        0.006828533313017612, 0.006874220210012405, 0.006920615603484534,\n        0.006967584795461295, 0.007015253209662333, 0.007062976884584702,\n        0.0071120032103904, 0.007161654977171102, 0.007211478985116888,\n        0.007262575221490504, 0.00731433818038858, 0.007366401062205849,\n        0.007419745426850169, 0.007473824459097193, 0.007528234657701152,\n        0.007583890014936296, 0.007640465065971664, 0.007697268340218703,\n        0.007755530438859713, 0.007814134991739857, 0.007874138063471741,\n        0.007935167534633155, 0.007996503756791803, 0.008059527785757649,\n        0.008122783248222784, 0.00818771697069543, 0.00825303487129291,\n        0.008320237438432628, 0.00838774982104088, 0.008456338761529243,\n        0.008526821675303905, 0.00859774180107012, 0.008670582006298565,\n        0.008743953174828139, 0.008819362643516973, 0.008895376152833938,\n        0.008972679760820699, 0.009052102976480387, 0.009132101349725455,\n        0.009214450210435874, 0.009297457074108378, 0.009381904218487053,\n        0.009468909900290392, 0.009556478662804126, 0.009645898835959198,\n        0.009737818793975239, 0.009830605171867901, 0.00992513798526064,\n        0.010021584111202547, 0.010120957827167655, 0.01022134652536837,\n        0.010323538880393052, 0.010428006043697277, 0.010534478987180096,\n        0.010644601383521258, 0.01075561029944398, 0.010868958182089652,\n        0.010984813537551166, 0.011103260358979518, 0.011224141543568064,\n        0.011349084658738379, 0.011475662066369397, 0.011604779561391467,\n        0.011737048693997897, 0.011872366531125333, 0.012010951824499965,\n        0.012152579708009672, 0.012297821185585646, 0.012446514601780234,\n        0.012599031217714144, 0.012755140536629564, 0.012915165112716781,\n        0.013079187542233266, 0.013247768720927349, 0.013420680167004194,\n        0.013598090761265764, 0.013780325898186854, 0.013967433279352124,\n        0.014159766644291487, 0.014357467745315648, 0.014560846737747268,\n        0.014767862636815602, 0.014983201464225094, 0.0152048191624506,\n        0.015433271864858919, 0.015668403229574624, 0.01591119838055674,\n        0.016158992254350493, 0.016417238359585157, 0.016683649948424164,\n        0.0169589551845336, 0.01724383761320625, 0.01753545870376508,\n        0.017840071425344294, 0.01815544419651965, 0.018482156833260127,\n        0.018817529240110317, 0.01916913847290496, 0.019533530289397125,\n        0.01990864048085024, 0.0203025845615711, 0.02071241447168029,\n        0.021134771404201957, 0.021578666638404673, 0.02204271419438502,\n        0.022521416066138045, 0.0230266916474838, 0.02355598499706999,\n        0.02410405037290578, 0.02468409372727583, 0.025286235029708205,\n        0.02592547303088291, 0.02659039142867997, 0.027297757299513482,\n        0.02803607362593724, 0.028824365042539067, 0.029648602906657617,\n        0.030531720915926767, 0.03145777806919646, 0.03245261828873047,\n        0.03350091382027495, 0.03463336318123574, 0.035829834896239775,\n        0.037126010566270636, 0.03850414432243521, 0.03998743633634691,\n        0.04160909765542301, 0.043348211978125196, 0.04525716524582673,\n        0.0473183722917895, 0.04957397332040011, 0.0520871327956485,\n        0.054830461418858244, 0.057878515542108544, 0.0613162883020659,\n        0.06514711088106218, 0.06947596967653956, 0.0744198775097722,\n        0.08016640148299946, 0.08678237893702904, 0.09455846159894472,\n        0.10381854271718445, 0.115137930941325, 0.12895510537206828,\n        0.14632074337329493, 0.16864768851714007, 0.1980878943642129,\n        0.23853836290240887, 0.29353365116177793, 0.3712384891638708,\n        0.4715897596186985, 0.5847690231931497, 0.6892197128444592,\n        0.7709839871250703, 0.83039552595971, 0.8730991185003477,\n        0.9044232442090606, 0.9280439919975729, 0.9462996095463007,\n        0.9607455590626317, 0.9724528909534325, 0.9820979104737809,\n        0.9901635950269833, 0.9970115343486721, 1.002889372061163,\n        1.0079867923692056, 1.012442667657563, 1.0163815263243314,\n        1.0198782805406956, 1.0230075241470533, 1.0258238529255068,\n        1.0283658319667748, 1.0306776037439533, 1.0327848712802061,\n        1.0347156968732825, 1.0364742242858793, 1.0381149672118775,\n        1.0396298073202925, 1.0410369721203856, 1.042345989689725,\n        1.043555442842206, 1.044696392912147, 1.0457677405947312,\n        1.046770977180337, 1.0477068859350114, 1.048597113307248,\n        1.0494376386653905, 1.0502318850679817, 1.0509783035541564,\n        1.0516921199152156, 1.0523703433410703, 1.0530082960450058,\n        1.0536220168611887, 1.0542073002524035, 1.054759987834216,\n        1.0552930352100218, 1.0558034257490165, 1.0562861007644435,\n        1.0567537420746898, 1.057202759290147, 1.0576286987365169,\n        1.0580417693579116, 1.05843504309784, 1.0588174765920297,\n        1.0591821146127258, 1.0595367773181141, 1.0598750063540652,\n        1.0602050863270371, 1.06052039695601, 1.0608278762656094,\n        1.0611218410545253, 1.0614098657099427, 1.0616850908818294,\n        1.061954722779951, 1.062212953162244, 1.0624632163293728,\n        1.062708371043094, 1.0629436925393998, 1.0631745157062626,\n        1.0633961035946267, 1.063611774201365, 1.0638235829371996,\n        1.0640268454496244, 1.064224842698698, 1.0644194530283535,\n        1.0646067262447143, 1.0647893485517375, 1.0649671383814954,\n        1.0651422050781973, 1.0653109061432329, 1.065475507661714,\n        1.0656375553134998, 1.0657942969222531, 1.0659468807843688,\n        1.0660960596272866, 1.0667902196830066, 1.0674181726528138,\n        1.067991186069206, 1.0685138799632483, 1.068994320798989,\n        1.0694356214358438, 1.0698430284901264, 1.0702194835741392,\n        1.0705697251238486, 1.0708950625885092, 1.0711984632971308\n      ]\n    }\n  }\n</code></pre> TOML<pre><code>  infile = \"athena.nor\"\n  outfile = \"example_8\"\n  input = \"example_8.json\"\n  oversampling = false\n  energy_start = 5440\n  energy_stop = 5520\n  smooth = 0\n  shift = 0\n  column = [0, 1]\n  separator = \"\\\\s+\"\n  decimal = \".\"\n  comment = \"#\"\n  global_ = 0\n  autopeak = false\n  noplot = false\n  version = false\n  verbose = 0\n  timestamp = \"2022-06-26 12:35:11\"\n  ID = \"e5c7fc20-bd57-4578-abbf-7736cef3be9b\"\n  host_info = \"e74490816920d147adc2315b45c4c6ce05e99ae9e09e34d2a263e2e9da861ffd\"\n  host_info = \"e74490816920d147adc2315b45c4c6ce05e99ae9e09e34d2a263e2e9da861ffd\"\n  used_version = \"0.9.0\"\n\n  [description]\n  project_name = \"Template\"\n  project_details = \"Template for testing\"\n  keywords = [\n      \"2D-Spectra\",\n      \"fitting\",\n      \"curve-fitting\",\n      \"peak-fitting\",\n      \"spectrum\",\n  ]\n\n  [minimizer]\n  nan_policy = \"propagate\"\n  calc_covar = true\n\n  [optimizer]\n  max_nfev = 1000\n  method = \"leastsq\"\n\n  [report]\n  min_correl = 0.0\n\n  [data_statistic]\n  0 = [\n      393.0,\n      5493.268875318066,\n      70.85455926057932,\n      5263.8492,\n      5439.3992,\n      5449.2004400000005,\n      5459.00094,\n      5468.80008,\n      5478.5995,\n      5488.40074,\n      5498.20038,\n      5526.97246,\n      5602.409339999999,\n      5707.751,\n  ]\n  1 = [\n      393.0,\n      0.5559652545537828,\n      0.5000826290756465,\n      -0.0015911817,\n      0.0011720014800000002,\n      0.003939243640000001,\n      0.012118344800000002,\n      0.11680503600000006,\n      0.55104052,\n      0.983449568,\n      1.0087658400000001,\n      1.04338526,\n      1.12497912,\n      1.2670019,\n  ]\n\n  [linear_correlation]\n  energy = [\n      1.0,\n      0.8935483804274674,\n      0.014165493917872009,\n      0.8994185246507211,\n      -0.08246614304287148,\n      -0.05776360778162228,\n      0.04606936027745239,\n      0.05426690223694854,\n      0.13152358463255703,\n      0.3565816542879464,\n      0.8586601784730943,\n  ]\n  intensity = [\n      0.8935483804274674,\n      1.0,\n      -0.13373933056053425,\n      0.9986081827277958,\n      -0.11486056672062087,\n      -0.028801840216786542,\n      -0.11711982159837439,\n      -0.029551863819738563,\n      0.2461777622422082,\n      0.4984003575413818,\n      0.9269401277948314,\n  ]\n  residual = [\n      0.014165493917872009,\n      -0.13373933056053425,\n      1.0,\n      -0.08128519419811593,\n      0.02974964926139685,\n      -0.021642832049659354,\n      -0.03994103386305105,\n      -0.025395325083663524,\n      -0.03017747407078183,\n      -0.027397566228850468,\n      -0.06236947885767277,\n  ]\n  fit = [\n      0.8994185246507211,\n      0.9986081827277958,\n      -0.08128519419811593,\n      1.0,\n      -0.1139349593296497,\n      -0.0301185824198321,\n      -0.11991608123181818,\n      -0.031072607786035288,\n      0.24598127893632823,\n      0.4997959907896826,\n      0.928928282259139,\n  ]\n  pseudovoigt_1 = [\n      -0.08246614304287148,\n      -0.11486056672062087,\n      0.02974964926139685,\n      -0.1139349593296497,\n      1.0,\n      0.7536175354567056,\n      -0.009367644277978189,\n      -0.05870829199955287,\n      -0.08494369976082802,\n      -0.10017757939797277,\n      -0.21929151577520153,\n  ]\n  pseudovoigt_2 = [\n      -0.05776360778162228,\n      -0.028801840216786542,\n      -0.021642832049659354,\n      -0.0301185824198321,\n      0.7536175354567056,\n      1.0,\n      -0.0007768811093853067,\n      -0.05476516992155444,\n      -0.07487367647974848,\n      -0.08449580439139602,\n      -0.18491861804427098,\n  ]\n  pseudovoigt_3 = [\n      0.04606936027745239,\n      -0.11711982159837439,\n      -0.03994103386305105,\n      -0.11991608123181818,\n      -0.009367644277978189,\n      -0.0007768811093853067,\n      1.0,\n      0.512935093390806,\n      0.050902822461948154,\n      -0.13360361523893485,\n      -0.2599584538174289,\n  ]\n  gaussian_4 = [\n      0.05426690223694854,\n      -0.029551863819738563,\n      -0.025395325083663524,\n      -0.031072607786035288,\n      -0.05870829199955287,\n      -0.05476516992155444,\n      0.512935093390806,\n      1.0,\n      0.109321855811239,\n      -0.08610145641955333,\n      -0.17117656530833758,\n  ]\n  gaussian_5 = [\n      0.13152358463255703,\n      0.2461777622422082,\n      -0.03017747407078183,\n      0.24598127893632823,\n      -0.08494369976082802,\n      -0.07487367647974848,\n      0.050902822461948154,\n      0.109321855811239,\n      1.0,\n      -0.11089816832021102,\n      -0.041298565912075064,\n  ]\n  gaussian_6 = [\n      0.3565816542879464,\n      0.4984003575413818,\n      -0.027397566228850468,\n      0.4997959907896826,\n      -0.10017757939797277,\n      -0.08449580439139602,\n      -0.13360361523893485,\n      -0.08610145641955333,\n      -0.11089816832021102,\n      1.0,\n      0.4791340524061516,\n  ]\n  atan_7 = [\n      0.8586601784730943,\n      0.9269401277948314,\n      -0.06236947885767277,\n      0.928928282259139,\n      -0.21929151577520153,\n      -0.18491861804427098,\n      -0.2599584538174289,\n      -0.17117656530833758,\n      -0.041298565912075064,\n      0.4791340524061516,\n      1.0,\n  ]\n\n  [fit_result]\n  energy = [\n      5440.0988,\n      5440.3491,\n      5440.5989,\n      5440.8488,\n      5441.1015,\n      5441.349,\n      5441.5992,\n      5441.8491,\n      5442.0996,\n      5442.3496,\n      5442.5996,\n      5442.8499,\n      5443.1003,\n      5443.3503,\n      5443.601,\n      5443.8513,\n      5444.0989,\n      5444.3497,\n      5444.5998,\n      5444.8503,\n      5445.1009,\n      5445.3489,\n      5445.5992,\n      5445.85,\n      5446.1005,\n      5446.3513,\n      5446.599,\n      5446.85,\n      5447.1007,\n      5447.3488,\n      5447.5997,\n      5447.8503,\n      5448.0988,\n      5448.3498,\n      5448.6006,\n      5448.8493,\n      5449.1,\n      5449.3511,\n      5449.5995,\n      5449.8505,\n      5450.0992,\n      5450.35,\n      5450.6012,\n      5450.8498,\n      5451.1013,\n      5451.3498,\n      5451.6009,\n      5451.8495,\n      5452.1012,\n      5452.35,\n      5452.5987,\n      5452.8501,\n      5453.0989,\n      5453.3502,\n      5453.5991,\n      5453.8506,\n      5454.0998,\n      5454.3489,\n      5454.6004,\n      5454.8493,\n      5455.101,\n      5455.3502,\n      5455.5992,\n      5455.8511,\n      5456.1,\n      5456.3495,\n      5456.6012,\n      5456.8505,\n      5457.0997,\n      5457.3491,\n      5457.6011,\n      5457.8507,\n      5458.0998,\n      5458.3494,\n      5458.5987,\n      5458.8513,\n      5459.1007,\n      5459.3501,\n      5459.5997,\n      5459.8495,\n      5460.099,\n      5460.3513,\n      5460.6013,\n      5460.8507,\n      5461.1005,\n      5461.3503,\n      5461.6003,\n      5461.8499,\n      5462.0999,\n      5462.3498,\n      5462.6,\n      5462.8499,\n      5463.0998,\n      5463.3496,\n      5463.5999,\n      5463.8501,\n      5464.1002,\n      5464.3504,\n      5464.6005,\n      5464.8507,\n      5465.1009,\n      5465.3512,\n      5465.5989,\n      5465.8493,\n      5466.0996,\n      5466.3501,\n      5466.6003,\n      5466.8509,\n      5467.0989,\n      5467.3494,\n      5467.5997,\n      5467.8501,\n      5468.1008,\n      5468.349,\n      5468.5996,\n      5468.8502,\n      5469.1008,\n      5469.349,\n      5469.5999,\n      5469.8504,\n      5470.0987,\n      5470.3496,\n      5470.6005,\n      5470.8489,\n      5471.0995,\n      5471.3507,\n      5471.599,\n      5471.8499,\n      5472.1012,\n      5472.3498,\n      5472.6009,\n      5472.8494,\n      5473.1006,\n      5473.3491,\n      5473.6002,\n      5473.8488,\n      5474.1002,\n      5474.3488,\n      5474.6003,\n      5474.8489,\n      5475.1002,\n      5475.3489,\n      5475.6007,\n      5475.8495,\n      5476.101,\n      5476.3499,\n      5476.5987,\n      5476.8505,\n      5477.0997,\n      5477.3513,\n      5477.6003,\n      5477.8492,\n      5478.1013,\n      5478.3503,\n      5478.5995,\n      5478.8511,\n      5479.1005,\n      5479.3496,\n      5479.5991,\n      5479.851,\n      5480.1004,\n      5480.3498,\n      5480.5992,\n      5480.8511,\n      5481.1007,\n      5481.3504,\n      5481.6,\n      5481.8493,\n      5482.1014,\n      5482.3487,\n      5482.6011,\n      5482.8505,\n      5483.1,\n      5483.3499,\n      5483.5998,\n      5483.8497,\n      5484.0993,\n      5484.349,\n      5484.5991,\n      5484.8491,\n      5485.0988,\n      5485.3489,\n      5485.599,\n      5485.8489,\n      5486.099,\n      5486.3491,\n      5486.5992,\n      5486.849,\n      5487.0993,\n      5487.3494,\n      5487.5997,\n      5487.8502,\n      5488.1003,\n      5488.3507,\n      5488.6009,\n      5488.8512,\n      5489.0991,\n      5489.3498,\n      5489.6,\n      5489.8505,\n      5490.101,\n      5490.3491,\n      5490.5994,\n      5490.8503,\n      5491.1006,\n      5491.3488,\n      5491.5993,\n      5491.8499,\n      5492.1004,\n      5492.349,\n      5492.5997,\n      5492.8506,\n      5493.0988,\n      5493.3496,\n      5493.6006,\n      5493.849,\n      5494.0998,\n      5494.351,\n      5494.5992,\n      5494.8502,\n      5495.1016,\n      5495.3501,\n      5495.601,\n      5495.8495,\n      5496.1007,\n      5496.3495,\n      5496.6007,\n      5496.8492,\n      5497.1006,\n      5497.3494,\n      5497.6006,\n      5497.8491,\n      5498.1009,\n      5498.3496,\n      5498.6013,\n      5498.8502,\n      5499.0991,\n      5499.3506,\n      5499.5995,\n      5499.8511,\n      5500.0999,\n      5500.3492,\n      5500.6012,\n      5500.85,\n      5501.0992,\n      5501.351,\n      5501.6,\n      5501.8494,\n      5502.0987,\n      5502.3507,\n      5502.5999,\n      5502.8493,\n      5503.1011,\n      5503.3508,\n      5503.5999,\n      5503.8494,\n      5505.0945,\n      5506.3561,\n      5507.6398,\n      5508.9402,\n      5510.2626,\n      5511.6018,\n      5512.9604,\n      5514.3357,\n      5515.7336,\n      5517.1486,\n      5518.583,\n  ]\n  intensity = [\n      0.00075008782,\n      0.0007137763,\n      0.00071128868,\n      0.00063286325,\n      0.00099449376,\n      0.0010605063,\n      0.0011034319,\n      0.001215315,\n      0.0011611731,\n      0.0010641958,\n      0.0011309926,\n      0.0014741452,\n      0.0012445178,\n      0.0014717449,\n      0.001410836,\n      0.0012844782,\n      0.0016211726,\n      0.0013805333,\n      0.0015237237,\n      0.001538607,\n      0.0018384047,\n      0.0017104137,\n      0.0018211203,\n      0.0020499052,\n      0.0024345136,\n      0.00204639,\n      0.0021995281,\n      0.0020694927,\n      0.0021394668,\n      0.0026118533,\n      0.0026087239,\n      0.0024609195,\n      0.0025642725,\n      0.0024221516,\n      0.0025371315,\n      0.002645023,\n      0.0029001956,\n      0.0027025267,\n      0.0031233567,\n      0.0028600589,\n      0.0032291827,\n      0.0032088736,\n      0.0031056149,\n      0.003613545,\n      0.0035004956,\n      0.0036851611,\n      0.0038396385,\n      0.0038811606,\n      0.0041256214,\n      0.0040804403,\n      0.0040263682,\n      0.004236159,\n      0.0045363625,\n      0.0048021543,\n      0.0045030138,\n      0.0049594557,\n      0.0053033365,\n      0.0051551775,\n      0.0049120742,\n      0.0050961341,\n      0.0054605721,\n      0.0057251564,\n      0.0060001418,\n      0.006230617,\n      0.0058970981,\n      0.0063953616,\n      0.0063618432,\n      0.0065745064,\n      0.0071347496,\n      0.0072233055,\n      0.0074109999,\n      0.0077600291,\n      0.0078010452,\n      0.0080880159,\n      0.008298518,\n      0.0086553695,\n      0.0087778796,\n      0.0092913713,\n      0.0093650197,\n      0.0099400509,\n      0.010172231,\n      0.01033062,\n      0.010813026,\n      0.011341481,\n      0.012145588,\n      0.012424155,\n      0.013122967,\n      0.013289268,\n      0.014198758,\n      0.014800496,\n      0.015251234,\n      0.01624618,\n      0.01718605,\n      0.018069132,\n      0.019060487,\n      0.020429046,\n      0.021923405,\n      0.023593881,\n      0.02503222,\n      0.027476768,\n      0.02954772,\n      0.032443852,\n      0.036927865,\n      0.041575946,\n      0.047120195,\n      0.054864195,\n      0.066197026,\n      0.081240398,\n      0.10396684,\n      0.13679905,\n      0.18073021,\n      0.24507544,\n      0.35005136,\n      0.49895559,\n      0.65875114,\n      0.72461012,\n      0.65273415,\n      0.55104052,\n      0.48306196,\n      0.41516438,\n      0.32597808,\n      0.24179332,\n      0.18204402,\n      0.14368564,\n      0.11778118,\n      0.1030822,\n      0.095387254,\n      0.091934181,\n      0.093517333,\n      0.097436882,\n      0.10429757,\n      0.11290046,\n      0.12352105,\n      0.13449277,\n      0.14666962,\n      0.15854493,\n      0.17175571,\n      0.18744141,\n      0.20498469,\n      0.22643179,\n      0.25124335,\n      0.27733772,\n      0.30017716,\n      0.3191437,\n      0.33621993,\n      0.35128088,\n      0.36647138,\n      0.38031479,\n      0.39252342,\n      0.4042917,\n      0.41772563,\n      0.42988369,\n      0.44482772,\n      0.4587377,\n      0.47272491,\n      0.49120434,\n      0.50928952,\n      0.53179087,\n      0.55935883,\n      0.59149209,\n      0.62744231,\n      0.66963255,\n      0.71466729,\n      0.76418391,\n      0.81580103,\n      0.86917222,\n      0.92311432,\n      0.9728729,\n      1.0203673,\n      1.0561529,\n      1.0861181,\n      1.1086619,\n      1.1222761,\n      1.1320221,\n      1.1387401,\n      1.1414318,\n      1.1396176,\n      1.1381366,\n      1.1331909,\n      1.1250521,\n      1.1142828,\n      1.1025584,\n      1.0921434,\n      1.0782789,\n      1.068865,\n      1.0587789,\n      1.0508437,\n      1.0433624,\n      1.038511,\n      1.0330431,\n      1.0337037,\n      1.031843,\n      1.0328293,\n      1.0348535,\n      1.0368246,\n      1.0434005,\n      1.053307,\n      1.0628649,\n      1.0738037,\n      1.0912933,\n      1.1053502,\n      1.1246872,\n      1.141449,\n      1.163211,\n      1.1835321,\n      1.2021008,\n      1.2169399,\n      1.2309978,\n      1.2416963,\n      1.2518929,\n      1.2572181,\n      1.2616482,\n      1.2670019,\n      1.2660771,\n      1.2665506,\n      1.2644464,\n      1.2650979,\n      1.262694,\n      1.259666,\n      1.2558234,\n      1.2514429,\n      1.2430164,\n      1.2372008,\n      1.2285302,\n      1.2200916,\n      1.209717,\n      1.1989269,\n      1.1892529,\n      1.1795568,\n      1.1690754,\n      1.1603893,\n      1.1477072,\n      1.1414142,\n      1.1352982,\n      1.1272946,\n      1.1212208,\n      1.1146086,\n      1.1127375,\n      1.1056488,\n      1.1030786,\n      1.099154,\n      1.0944947,\n      1.089456,\n      1.0874645,\n      1.082802,\n      1.0814821,\n      1.0760062,\n      1.0752181,\n      1.0707524,\n      1.068229,\n      1.0642905,\n      1.0609054,\n      1.0571893,\n      1.0555451,\n      1.0545785,\n      1.0504415,\n      1.0381922,\n      1.0304394,\n      1.0219384,\n      1.0095111,\n      0.9956127,\n      0.98439138,\n      0.97572282,\n      0.96606673,\n      0.94952275,\n      0.94140584,\n      0.94279763,\n  ]\n  residual = [\n      0.00613325457829908,\n      0.006218107450074614,\n      0.006269758966251143,\n      0.006398104051966323,\n      0.006087718929064824,\n      0.006072662143982822,\n      0.006082036083867459,\n      0.006023199732237316,\n      0.0061313480466662395,\n      0.006283075368452066,\n      0.006271900437882411,\n      0.005985331945703346,\n      0.0062724855228322995,\n      0.006103633813716175,\n      0.006224050483498058,\n      0.006410814558853532,\n      0.006134877384581588,\n      0.006438102920583359,\n      0.006358398490650242,\n      0.006408207741560957,\n      0.006174265739105387,\n      0.006368580438249494,\n      0.00632600674212941,\n      0.006166728513764874,\n      0.005852816256907992,\n      0.006313032283925843,\n      0.006232421864408486,\n      0.006437336110719652,\n      0.00644358520262364,\n      0.006048085550215489,\n      0.006130486499830275,\n      0.006359038426391628,\n      0.006337355964746424,\n      0.006563638434029771,\n      0.0065344837607907,\n      0.006513464019769027,\n      0.006347700723879553,\n      0.006636835547815529,\n      0.006308437946297291,\n      0.0066671748586435015,\n      0.0063947092239849505,\n      0.0065146794327679974,\n      0.006720040256161193,\n      0.006315487859591328,\n      0.006535571356781192,\n      0.0064591767813287175,\n      0.006416740179407737,\n      0.006488858048721772,\n      0.0063623173076473565,\n      0.0065270069673789705,\n      0.006703589907641805,\n      0.006620870908124233,\n      0.006449761149115165,\n      0.006317877751326865,\n      0.006753288328506617,\n      0.006438388459725186,\n      0.0062387483598735725,\n      0.00653525103448885,\n      0.006932551920682097,\n      0.006905688884617853,\n      0.006705098223615943,\n      0.006607819634015715,\n      0.006505326238668154,\n      0.006455055327034877,\n      0.006972577147389198,\n      0.006665025401301513,\n      0.00689766058010848,\n      0.006889266641246444,\n      0.006540649792141456,\n      0.0066717991548336094,\n      0.00671465132963713,\n      0.00660300340100341,\n      0.0068084591455706825,\n      0.006778705052416935,\n      0.006836083208777332,\n      0.006762669503324556,\n      0.006932772223388006,\n      0.006725575466166037,\n      0.006973275075836933,\n      0.00673592271439373,\n      0.0068584583994780075,\n      0.00707809134767194,\n      0.006991223441708865,\n      0.006880168824026575,\n      0.0065192705117452215,\n      0.0067117077567329375,\n      0.006515148301712643,\n      0.0068846199183853,\n      0.006550239446671604,\n      0.006566670062045411,\n      0.006783878703319051,\n      0.006511788622039404,\n      0.0063585018755647205,\n      0.00633507631316018,\n      0.006290534876124434,\n      0.005968457027442885,\n      0.0056382836544224615,\n      0.005273710299882901,\n      0.005312219821720185,\n      0.0045585615478305405,\n      0.004454710928714203,\n      0.0039056298196634073,\n      0.0022951213987462277,\n      0.001435235874458471,\n      0.001154392583074794,\n      0.001168221836944025,\n      0.0016722102592303112,\n      0.004885754773733472,\n      0.009418307223525157,\n      0.01661884903502181,\n      0.02822885529143518,\n      0.03726442642797709,\n      0.024960732580559475,\n      -0.013711076530043387,\n      -0.0530521157630095,\n      -0.028969691863028446,\n      0.04000601101523371,\n      0.05092312259221998,\n      0.0011902950753464592,\n      -0.03772752268046198,\n      -0.03563462792125954,\n      -0.02021771909914416,\n      -0.01128248631407422,\n      -0.007805866874400602,\n      -0.004509981867563406,\n      -0.002969241719038465,\n      -0.0017101565415633957,\n      -0.00027568515388672055,\n      -0.0008109076822804956,\n      -0.0015039996522130394,\n      -0.003302902054105966,\n      -0.005238540143666051,\n      -0.007399846485810324,\n      -0.00815909631731157,\n      -0.007953497902540407,\n      -0.0053166973705467135,\n      -0.001403698377971191,\n      0.0022990181362357587,\n      0.006626338553615468,\n      0.008394653444240036,\n      0.0075142435652750805,\n      0.004036651375449951,\n      0.0015259002134263011,\n      0.0009761201327874724,\n      -0.0033765167030079257,\n      -0.005236412296452275,\n      -0.006265577655221843,\n      -0.003650640651651771,\n      0.002285243778724466,\n      0.009192922731271203,\n      0.01254393167540957,\n      0.01377986684829613,\n      0.008357517105051449,\n      0.0007798149548345901,\n      -0.007598024045102514,\n      -0.01789863970575223,\n      -0.022062605171512317,\n      -0.02228682847849439,\n      -0.017849999906515368,\n      -0.008071540921267273,\n      0.005274444478820528,\n      0.017347806262467125,\n      0.02815980535736151,\n      0.03314622416180668,\n      0.030613793949474166,\n      0.019323803552962926,\n      -0.0003734580845986546,\n      -0.022798982368488874,\n      -0.046447998685479996,\n      -0.056933990424680614,\n      -0.0515738245484878,\n      -0.025351105397896978,\n      0.0156469270987607,\n      0.04758595542787036,\n      0.05857719449495824,\n      0.05250364687388487,\n      0.03768345992289257,\n      0.016108083046696642,\n      -0.003745070436204534,\n      -0.019175262429097284,\n      -0.02910646332683431,\n      -0.03453806884319777,\n      -0.03755774707977322,\n      -0.033628247001525224,\n      -0.031097949380057832,\n      -0.02535279588350714,\n      -0.019737499208146936,\n      -0.01302810283952871,\n      -0.0077973953450158895,\n      -0.0011047619045621015,\n      8.97275502742545e-5,\n      0.004304428711847219,\n      0.006107113089672156,\n      0.007321311918927487,\n      0.00909286193183756,\n      0.006873188891779014,\n      0.0020212879753471746,\n      -0.0015139784445348248,\n      -0.005354838677951834,\n      -0.014476720885421512,\n      -0.01874789099133989,\n      -0.026875620294148472,\n      -0.030730145767443817,\n      -0.037944129856692266,\n      -0.04223474044506825,\n      -0.04359623710794125,\n      -0.040037456348461564,\n      -0.035053560854164445,\n      -0.02657928510088725,\n      -0.01817924833157014,\n      -0.005808346941323483,\n      0.005765870868484901,\n      0.013956388917991447,\n      0.025705366224742843,\n      0.03273415934926471,\n      0.03867351719549217,\n      0.03811891492384745,\n      0.03683593235075344,\n      0.032687699111738855,\n      0.026045308930862765,\n      0.017148920412947355,\n      0.010288299272841694,\n      -0.0008850558290864896,\n      -0.009945014859170653,\n      -0.019722080523808083,\n      -0.02711970743858627,\n      -0.033516616350662165,\n      -0.039716707914066784,\n      -0.0446585244689468,\n      -0.04708412427640174,\n      -0.04975844677650132,\n      -0.046669289944217374,\n      -0.048501668430261935,\n      -0.04895691030453242,\n      -0.046288296806074714,\n      -0.04435835487538897,\n      -0.04093641911724166,\n      -0.04148800103297967,\n      -0.036156620056670974,\n      -0.03485186769412607,\n      -0.03178825572803179,\n      -0.027697227172147842,\n      -0.02301123362518398,\n      -0.021209572992874737,\n      -0.01662548501047678,\n      -0.015306228660030508,\n      -0.009778611749572619,\n      -0.008904605212544547,\n      -0.0043315431432862095,\n      -0.0016866086259874624,\n      0.0023790909821914674,\n      0.005894665032446289,\n      0.00974324734072085,\n      0.011518052413842517,\n      0.012613275924305833,\n      0.016876924378935065,\n      0.029720310657255222,\n      0.038012765958672645,\n      0.04700728383129227,\n      0.05988576441372251,\n      0.07419983671454389,\n      0.08580388164009689,\n      0.09482663757264798,\n      0.10481082634373873,\n      0.12166082183392402,\n      0.13006270018831478,\n      0.1289373275067074,\n  ]\n  fit = [\n      0.00688334239829908,\n      0.006931883750074614,\n      0.006981047646251143,\n      0.0070309673019663226,\n      0.0070822126890648235,\n      0.0071331684439828215,\n      0.007185467983867459,\n      0.007238514732237316,\n      0.00729252114666624,\n      0.0073472711684520655,\n      0.007402893037882411,\n      0.007459477145703346,\n      0.0075170033228322995,\n      0.007575378713716175,\n      0.007634886483498058,\n      0.0076952927588535315,\n      0.007756049984581588,\n      0.00781863622058336,\n      0.007882122190650242,\n      0.007946814741560957,\n      0.008012670439105387,\n      0.008078994138249494,\n      0.00814712704212941,\n      0.008216633713764875,\n      0.008287329856907992,\n      0.008359422283925843,\n      0.008431949964408486,\n      0.008506828810719652,\n      0.00858305200262364,\n      0.008659938850215489,\n      0.008739210399830276,\n      0.008819957926391628,\n      0.008901628464746424,\n      0.00898579003402977,\n      0.0090716152607907,\n      0.009158487019769027,\n      0.009247896323879554,\n      0.009339362247815529,\n      0.00943179464629729,\n      0.009527233758643502,\n      0.00962389192398495,\n      0.009723553032767998,\n      0.009825655156161192,\n      0.009929032859591328,\n      0.010036066956781192,\n      0.010144337881328718,\n      0.010256378679407737,\n      0.010370018648721772,\n      0.010487938707647356,\n      0.01060744726737897,\n      0.010729958107641805,\n      0.010857029908124233,\n      0.010986123649115165,\n      0.011120032051326865,\n      0.011256302128506618,\n      0.011397844159725185,\n      0.011542084859873573,\n      0.01169042853448885,\n      0.011844626120682097,\n      0.012001822984617853,\n      0.012165670323615943,\n      0.012332976034015715,\n      0.012505468038668154,\n      0.012685672327034877,\n      0.012869675247389198,\n      0.013060387001301512,\n      0.01325950378010848,\n      0.013463773041246444,\n      0.013675399392141456,\n      0.01389510465483361,\n      0.01412565122963713,\n      0.01436303250100341,\n      0.014609504345570682,\n      0.014866720952416935,\n      0.015134601208777331,\n      0.015418039003324556,\n      0.015710651823388006,\n      0.016016946766166038,\n      0.016338294775836933,\n      0.01667597361439373,\n      0.017030689399478008,\n      0.01740871134767194,\n      0.017804249441708865,\n      0.018221649824026576,\n      0.018664858511745222,\n      0.019135862756732937,\n      0.019638115301712642,\n      0.0201738879183853,\n      0.020748997446671604,\n      0.02136716606204541,\n      0.02203511270331905,\n      0.022757968622039403,\n      0.023544551875564722,\n      0.024404208313160182,\n      0.025351021876124435,\n      0.026397503027442884,\n      0.02756168865442246,\n      0.0288675912998829,\n      0.030344439821720186,\n      0.03203532954783054,\n      0.0340024309287142,\n      0.03634948181966341,\n      0.039222986398746225,\n      0.04301118187445847,\n      0.04827458758307479,\n      0.05603241683694402,\n      0.06786923625923032,\n      0.08612615277373348,\n      0.11338514722352516,\n      0.15341789903502182,\n      0.20895906529143518,\n      0.2823398664279771,\n      0.37501209258055945,\n      0.4852445134699566,\n      0.6056990242369905,\n      0.6956404281369716,\n      0.6927401610152337,\n      0.60196364259222,\n      0.48425225507534647,\n      0.377436857319538,\n      0.29034345207874046,\n      0.22157560090085585,\n      0.17076153368592578,\n      0.1358797731255994,\n      0.11327119813243659,\n      0.10011295828096153,\n      0.09367709745843661,\n      0.09165849584611328,\n      0.0927064253177195,\n      0.09593288234778696,\n      0.10099466794589404,\n      0.10766191985633394,\n      0.11612120351418967,\n      0.12633367368268844,\n      0.1387161220974596,\n      0.1532282326294533,\n      0.17035201162202881,\n      0.18974042813623576,\n      0.21161102855361547,\n      0.23482644344424003,\n      0.25875759356527506,\n      0.28137437137544996,\n      0.3017030602134263,\n      0.32011982013278745,\n      0.3328434132969921,\n      0.34604446770354774,\n      0.36020580234477817,\n      0.37666414934834824,\n      0.3948086637787245,\n      0.4134846227312712,\n      0.4302695616754096,\n      0.4436635568482961,\n      0.45318523710505143,\n      0.4595175149548346,\n      0.4651268859548975,\n      0.4733057002942478,\n      0.48722691482848773,\n      0.5095040415215056,\n      0.5415088300934846,\n      0.5834205490787328,\n      0.6327167544788205,\n      0.6869803562624671,\n      0.7428270953573615,\n      0.7973301341618066,\n      0.8464148239494742,\n      0.888496023552963,\n      0.9227408619154014,\n      0.9500739176315112,\n      0.97391930131452,\n      0.9992189095753194,\n      1.0345442754515122,\n      1.083310794602103,\n      1.1379230270987608,\n      1.1796080554278703,\n      1.1973172944949582,\n      1.193935446873885,\n      1.1773010599228926,\n      1.1542446830466966,\n      1.1294458295637955,\n      1.1058768375709027,\n      1.0851763366731657,\n      1.0680203311568022,\n      1.0545856529202269,\n      1.0446506529984747,\n      1.0377670506199421,\n      1.033426104116493,\n      1.031106200791853,\n      1.0303342971604712,\n      1.030713604654984,\n      1.031938338095438,\n      1.0337934275502743,\n      1.0361474287118473,\n      1.038936413089672,\n      1.0421748119189276,\n      1.0459174619318377,\n      1.050273688891779,\n      1.0553282879753472,\n      1.061350921555465,\n      1.0684488613220482,\n      1.0768165791145785,\n      1.08660230900866,\n      1.0978115797058516,\n      1.1107188542325561,\n      1.1252668701433077,\n      1.1412973595549318,\n      1.1585045628920587,\n      1.1769024436515385,\n      1.1959442391458355,\n      1.2151170148991128,\n      1.23371365166843,\n      1.2514097530586765,\n      1.267414070868485,\n      1.2809582889179914,\n      1.2917824662247428,\n      1.2992847593492647,\n      1.3031199171954921,\n      1.3032168149238474,\n      1.2995299323507534,\n      1.2923536991117388,\n      1.2818687089308627,\n      1.2685918204129474,\n      1.2533046992728416,\n      1.2363157441709136,\n      1.2185851851408294,\n      1.2003695194761919,\n      1.1825972925614137,\n      1.1654102836493379,\n      1.1495361920859333,\n      1.1348982755310533,\n      1.1219912757235984,\n      1.1106308532234987,\n      1.1010379100557826,\n      1.092912531569738,\n      1.0863412896954676,\n      1.0810063031939252,\n      1.076862445124611,\n      1.0736721808827583,\n      1.0712494989670203,\n      1.069492179943329,\n      1.0682267323058738,\n      1.0673657442719682,\n      1.0667974728278522,\n      1.066444766374816,\n      1.0662549270071253,\n      1.0661765149895233,\n      1.0661758713399694,\n      1.0662275882504273,\n      1.0663134947874555,\n      1.0664208568567137,\n      1.0665423913740126,\n      1.0666695909821915,\n      1.0668000650324463,\n      1.066932547340721,\n      1.0670631524138425,\n      1.067191775924306,\n      1.067318424378935,\n      1.0679125106572551,\n      1.0684521659586725,\n      1.0689456838312923,\n      1.0693968644137226,\n      1.069812536714544,\n      1.070195261640097,\n      1.070549457572648,\n      1.0708775563437387,\n      1.071183571833924,\n      1.0714685401883148,\n      1.0717349575067074,\n  ]\n  pseudovoigt_1 = [\n      2.5477518269831344e-14,\n      2.5939438391063845e-14,\n      2.641306986658508e-14,\n      2.6899985440804153e-14,\n      2.7406171765445164e-14,\n      2.7915913809036578e-14,\n      2.844580335503268e-14,\n      2.8990255357654845e-14,\n      2.955184739778201e-14,\n      3.01287397368939e-14,\n      3.0722683582178253e-14,\n      3.133510225347277e-14,\n      3.196626427437094e-14,\n      3.2615626038785005e-14,\n      3.3286870846414276e-14,\n      3.397792107989151e-14,\n      3.468289784427909e-14,\n      3.5419580271594437e-14,\n      3.617781722128574e-14,\n      3.696192440389886e-14,\n      3.7772117096274406e-14,\n      3.860040126029779e-14,\n      3.9464285832430363e-14,\n      4.0359296757945344e-14,\n      4.128395904147331e-14,\n      4.224191264079428e-14,\n      4.322110941571337e-14,\n      4.424847471870753e-14,\n      4.531159188923597e-14,\n      4.640182986462542e-14,\n      4.754485552187398e-14,\n      4.872916798584927e-14,\n      4.994776485333176e-14,\n      5.12255850810543e-14,\n      5.2551960526913755e-14,\n      5.3918719470269e-14,\n      5.5351108742878993e-14,\n      5.684372270162186e-14,\n      5.838044114498289e-14,\n      5.999736541558293e-14,\n      6.166658566413154e-14,\n      6.342138636474374e-14,\n      6.52550813165956e-14,\n      6.71491473786615e-14,\n      6.915039082209839e-14,\n      7.121684789551846e-14,\n      7.340035926913301e-14,\n      7.566246488029492e-14,\n      7.80608877026732e-14,\n      8.05453977781867e-14,\n      8.314922243937113e-14,\n      8.591161691315234e-14,\n      8.878305188821059e-14,\n      9.183179315859283e-14,\n      9.500866311029503e-14,\n      9.838890734328577e-14,\n      1.0191907915083504e-13,\n      1.0564088043520405e-13,\n      1.0960891890729414e-13,\n      1.137598298907998e-13,\n      1.1820149882579364e-13,\n      1.2285988373705574e-13,\n      1.2779457950280996e-13,\n      1.330949605644112e-13,\n      1.3866218009064554e-13,\n      1.4460014217024726e-13,\n      1.5098462655003923e-13,\n      1.57733341366046e-13,\n      1.6494076609069056e-13,\n      1.726588595015357e-13,\n      1.8101950822789799e-13,\n      1.8991209476507556e-13,\n      1.9945460407219983e-13,\n      2.0975400246453637e-13,\n      2.208557379792811e-13,\n      2.330250682192212e-13,\n      2.4605077942579467e-13,\n      2.601957211360193e-13,\n      2.7560424071170607e-13,\n      2.924311705441069e-13,\n      3.1081715744408116e-13,\n      3.312218327197359e-13,\n      3.534779811320526e-13,\n      3.7798019843137146e-13,\n      4.051512654577147e-13,\n      4.353414036865724e-13,\n      4.690402453633132e-13,\n      5.067142604477799e-13,\n      5.491498556488133e-13,\n      5.970781271263975e-13,\n      6.515715823637814e-13,\n      7.137164037273526e-13,\n      7.850841330969724e-13,\n      8.67532712947661e-13,\n      9.636906656316065e-13,\n      1.0764391590393499e-12,\n      1.2097438899895015e-12,\n      1.3689392017618985e-12,\n      1.5608419120747447e-12,\n      1.7949739435559878e-12,\n      2.0840991172232416e-12,\n      2.4462427073004233e-12,\n      2.901214706777992e-12,\n      3.494856471992592e-12,\n      4.27538222313482e-12,\n      5.321649335762057e-12,\n      6.744627499296208e-12,\n      8.706741108973261e-12,\n      1.1364779597964273e-11,\n      1.4898062301369692e-11,\n      1.9025914128698622e-11,\n      2.269947436170319e-11,\n      2.610200166348529e-11,\n      2.149005047540669e-11,\n      1.751338147048875e-11,\n      1.3521063773564047e-11,\n      1.029659763395703e-11,\n      7.919568978330085e-12,\n      6.172113722639024e-12,\n      4.90165067770988e-12,\n      3.9705933983999074e-12,\n      3.2629116625195082e-12,\n      2.721722767146111e-12,\n      2.304311776040268e-12,\n      1.9708827625928754e-12,\n      1.7026946079688544e-12,\n      1.4869411280358671e-12,\n      1.3073351776135351e-12,\n      1.1576930976795844e-12,\n      1.033237926417423e-12,\n      9.265976372621478e-13,\n      8.363455125005869e-13,\n      7.57746860023005e-13,\n      6.903109539972513e-13,\n      6.308409152598229e-13,\n      5.791657188505488e-13,\n      5.330613609242005e-13,\n      4.926437072826536e-13,\n      4.562297911521819e-13,\n      4.2404138157060783e-13,\n      3.9482737238287405e-13,\n      3.687753833982024e-13,\n      3.4492798068466226e-13,\n      3.2355663751016605e-13,\n      3.039021561541127e-13,\n      2.8615589118498377e-13,\n      2.69920470146406e-13,\n      2.5485176121804577e-13,\n      2.4114363291479287e-13,\n      2.283922584084194e-13,\n      2.1674018090915663e-13,\n      2.059592657906118e-13,\n      1.9583726922172104e-13,\n      1.865530464179621e-13,\n      1.7790543917653255e-13,\n      1.6976913022765615e-13,\n      1.6224141781457122e-13,\n      1.5521064269603624e-13,\n      1.486160238852683e-13,\n      1.4237452423926224e-13,\n      1.3657373153058975e-13,\n      1.3111973246325956e-13,\n      1.2598547207450127e-13,\n      1.2109939015483677e-13,\n      1.165325627264671e-13,\n      1.1221720482703946e-13,\n      1.0813842453857015e-13,\n      1.0428224718699747e-13,\n      1.0058849086957758e-13,\n      9.715225538228466e-14,\n      9.382335077807792e-14,\n      9.069907291946518e-14,\n      8.772694281263289e-14,\n      8.489395184210815e-14,\n      8.219585317736068e-14,\n      7.962422631552811e-14,\n      7.717417345368642e-14,\n      7.483445653232673e-14,\n      7.259594451088774e-14,\n      7.045713068639094e-14,\n      6.841377606544641e-14,\n      6.645489313418893e-14,\n      6.457887956030425e-14,\n      6.278253765142878e-14,\n      6.105870488182671e-14,\n      5.940484913039758e-14,\n      5.781723651484241e-14,\n      5.629417154956962e-14,\n      5.482758832538093e-14,\n      5.3418641665922404e-14,\n      5.20622135075092e-14,\n      5.075574199996439e-14,\n      4.949977602855187e-14,\n      4.828840303781567e-14,\n      4.712184630989722e-14,\n      4.5996589049761335e-14,\n      4.4921361892879e-14,\n      4.387186032739458e-14,\n      4.2860677009925925e-14,\n      4.188288341801995e-14,\n      4.093815330328698e-14,\n      4.003361663390086e-14,\n      3.915108537034141e-14,\n      3.829539031089004e-14,\n      3.746937848562935e-14,\n      3.667639439233539e-14,\n      3.590130303282947e-14,\n      3.515021793032373e-14,\n      3.4422733307382094e-14,\n      3.3722857775232567e-14,\n      3.303845597765013e-14,\n      3.2374148658148814e-14,\n      3.173650157586658e-14,\n      3.1111113170465793e-14,\n      3.050354499254429e-14,\n      2.991961804879651e-14,\n      2.9346889825170855e-14,\n      2.8789569181118316e-14,\n      2.8254346558465823e-14,\n      2.772811704625332e-14,\n      2.721564350677481e-14,\n      2.6722912893884736e-14,\n      2.6238870727307858e-14,\n      2.5772302470498138e-14,\n      2.5313195313275075e-14,\n      2.4870457419587816e-14,\n      2.4435125324643395e-14,\n      2.4015618811322834e-14,\n      2.3602111073260083e-14,\n      2.3203302640961805e-14,\n      2.2810811693070345e-14,\n      2.2432253962058504e-14,\n      2.2058197721851793e-14,\n      2.169785308464534e-14,\n      2.1342075344846454e-14,\n      2.099878892037676e-14,\n      2.0663716623035972e-14,\n      2.033322256287519e-14,\n      2.0013888173391673e-14,\n      1.96986727762458e-14,\n      1.9394229996000973e-14,\n      1.9096198086978896e-14,\n      1.880186435152691e-14,\n      1.8517892118983724e-14,\n      1.8239862186216785e-14,\n      1.7965241701495626e-14,\n      1.7699727543932965e-14,\n      1.7439642401884365e-14,\n      1.7185347596514982e-14,\n      1.6933908496200127e-14,\n      1.6690649639272348e-14,\n      1.645240486786002e-14,\n      1.621700409816642e-14,\n      1.5988519525075034e-14,\n      1.5765360708088488e-14,\n      1.554649334018058e-14,\n      1.4519501339015308e-14,\n      1.3579292196796739e-14,\n      1.2713321486601242e-14,\n      1.191787106280922e-14,\n      1.118313282697676e-14,\n      1.0506186127376343e-14,\n      9.880348774984831e-15,\n      9.302089555346774e-15,\n      8.76483085663962e-15,\n      8.26704315664177e-15,\n      7.80448991605057e-15,\n  ]\n  pseudovoigt_2 = [\n      0.0002299953752127306,\n      0.0002340338871588413,\n      0.0002381712954736742,\n      0.0002424210965715298,\n      0.00024683521037575804,\n      0.0002512763738024623,\n      0.00025588890881152225,\n      0.00026062383097534764,\n      0.0002655032193832896,\n      0.00027051073907827716,\n      0.0002756612373819032,\n      0.00028096665865601575,\n      0.0002864289038015645,\n      0.00029204284140905897,\n      0.0002978398400207405,\n      0.0003038014540954352,\n      0.00030987657070929606,\n      0.00031621783050111415,\n      0.00032273716469741334,\n      0.000329471066485048,\n      0.00033642069472135616,\n      0.00034351690117820826,\n      0.00035090895754058787,\n      0.000358557627098925,\n      0.00036644943347350153,\n      0.00037461452331253106,\n      0.00038294941895961174,\n      0.00039168225352503936,\n      0.0004007061539509868,\n      0.0004099468934911178,\n      0.00041962072837097795,\n      0.00042962874065416944,\n      0.00043991051071170064,\n      0.00045067483946830956,\n      0.0004618299248444953,\n      0.00047330546982593893,\n      0.0004853114961741942,\n      0.0004978002766443269,\n      0.0005106349577830338,\n      0.0005241145997383109,\n      0.0005380038465060039,\n      0.0005525767939294275,\n      0.0005677743575955626,\n      0.0005834400384887663,\n      0.0005999572116568478,\n      0.0006169755937579578,\n      0.0006349178453069429,\n      0.0006534632261700329,\n      0.0006730796166227732,\n      0.0006933505412463263,\n      0.000714541872633794,\n      0.0007369655322500421,\n      0.0007602120986256219,\n      0.0007848261132012544,\n      0.000810401643453308,\n      0.0008375344780865258,\n      0.0008657846809775093,\n      0.0008954752929427834,\n      0.0009270274108651083,\n      0.0009599227196429622,\n      0.0009949996291658608,\n      0.0010316551452813176,\n      0.0010703402373253579,\n      0.0011117305914497592,\n      0.0011550293006026933,\n      0.0012010187555075227,\n      0.0012502507721085306,\n      0.0013020552822651415,\n      0.0013571207408358708,\n      0.0014157986673180485,\n      0.0014790347550625593,\n      0.001545932850650535,\n      0.0016173194904267666,\n      0.001693918408038035,\n      0.0017759794760396335,\n      0.0018653515739805928,\n      0.001960365349587306,\n      0.0020628138066620563,\n      0.002173584039484392,\n      0.0022936029163493554,\n      0.002423658274890767,\n      0.0025667270888149484,\n      0.0027213291068996608,\n      0.0028898695071786057,\n      0.003074830606494397,\n      0.003278078725938276,\n      0.003502286780345906,\n      0.003749809143342735,\n      0.004024892322912671,\n      0.0043311381440560084,\n      0.004673990828659085,\n      0.0050585356859917914,\n      0.005492311462132106,\n      0.005983836653336534,\n      0.006545203312219761,\n      0.0071886342551783665,\n      0.007930903932675475,\n      0.008794277483757412,\n      0.009806786926529948,\n      0.011009445692216159,\n      0.012462714579654895,\n      0.014268015070511123,\n      0.01657582650323279,\n      0.019759695839841638,\n      0.024383515236661362,\n      0.031462476089922566,\n      0.04257890187601227,\n      0.060067776242317364,\n      0.0865163635635435,\n      0.12567454098285827,\n      0.1802797361063831,\n      0.2526553633634901,\n      0.3442445467609167,\n      0.45332048366471034,\n      0.5725122104957818,\n      0.6610835611236304,\n      0.6566923690222599,\n      0.5643045069003176,\n      0.4448096040001777,\n      0.336036771505521,\n      0.24680366194142328,\n      0.17564187912875995,\n      0.12216486172422318,\n      0.08433938620409209,\n      0.05840015470723445,\n      0.04147768745167672,\n      0.030829068718583878,\n      0.023967517473227014,\n      0.019465752642205555,\n      0.016385240039016532,\n      0.01409645282615341,\n      0.01233804119585928,\n      0.01090213256829056,\n      0.009724374932549856,\n      0.008720679205254918,\n      0.007872889657305097,\n      0.007134976912305034,\n      0.006502334774117172,\n      0.00594383550006576,\n      0.005459299870683887,\n      0.005027069980783668,\n      0.004647749894631741,\n      0.00430566307158605,\n      0.004003323302450998,\n      0.003728850662327919,\n      0.003484014234115606,\n      0.003262542005592535,\n      0.0030591710075243543,\n      0.0028760172038252312,\n      0.002707255819174805,\n      0.0025544193088505858,\n      0.0024141967512870234,\n      0.0022835980264771954,\n      0.002164718687114551,\n      0.002054785264088944,\n      0.0019520612530613479,\n      0.0018576422431908948,\n      0.0017700030499761697,\n      0.0016882872205488508,\n      0.0016113868561178685,\n      0.0015403051114181634,\n      0.0014738191293986735,\n      0.0014115415790403344,\n      0.0013525579317540792,\n      0.0012976815506367157,\n      0.001246054734855963,\n      0.001197464343542984,\n      0.0011517123770891438,\n      0.001108059653915381,\n      0.0010676034654329039,\n      0.0010285534581798957,\n      0.000992033007561494,\n      0.0009574085430614485,\n      0.0009245129322042021,\n      0.0008932827362360117,\n      0.0008636074865910846,\n      0.0008354187641552384,\n      0.0008085765469520917,\n      0.0007829666634587268,\n      0.0007585632294530329,\n      0.0007353097407457772,\n      0.0007130739200770861,\n      0.0006918310748721706,\n      0.0006715388650341184,\n      0.0006521108261700182,\n      0.0006335133878975428,\n      0.0006156998942909391,\n      0.0005986469704201467,\n      0.0005822604087298049,\n      0.0005665495470264231,\n      0.0005514539660687864,\n      0.0005369421344404597,\n      0.0005230172623679873,\n      0.0005096111420133216,\n      0.0004967238198938961,\n      0.00048431416992203777,\n      0.0004724761108107978,\n      0.00046094016796272686,\n      0.00044984322424960354,\n      0.0004391294872199218,\n      0.00042879384635433033,\n      0.00041891263656950524,\n      0.00040928580408617667,\n      0.00039996501909929773,\n      0.0003909801083691847,\n      0.00038236615349135865,\n      0.00037395773456879263,\n      0.0003658203721455711,\n      0.0003579487621603282,\n      0.00035038531624542887,\n      0.0003429981077002349,\n      0.00033583639045728136,\n      0.00032897012411532803,\n      0.0003222435688432617,\n      0.00031571605519378315,\n      0.0003094494373397226,\n      0.00030330962799758474,\n      0.0002973413423293684,\n      0.0002916156452556453,\n      0.00028599187704943853,\n      0.00028052061440687464,\n      0.0002752652856738804,\n      0.00027010758458638094,\n      0.00026514076432462196,\n      0.00026025789722580576,\n      0.00025555341176466674,\n      0.00025093175305835686,\n      0.0002464820120046611,\n      0.00024209968132045165,\n      0.00023787671517366482,\n      0.0002337241041357554,\n      0.00022972218358306156,\n      0.00022577103219647546,\n      0.00022196772870551916,\n      0.00021821554813092832,\n      0.00021459787703711567,\n      0.00021106941221531088,\n      0.000207591733926245,\n      0.00020423393179628912,\n      0.00020092181557560644,\n      0.00019772514738092685,\n      0.0001945979547504829,\n      0.00019151167897301253,\n      0.00018853605338900358,\n      0.00018562461347012549,\n      0.00018275075231380682,\n      0.00017997397200818577,\n      0.00017725568119806892,\n      0.00017459955730260768,\n      0.0001719748748488551,\n      0.0001694371197378246,\n      0.00016695314747212792,\n      0.00016450026917847255,\n      0.000162120837206724,\n      0.00015979818753033943,\n      0.00015752147845748295,\n      0.00014685556969374028,\n      0.00013711621506798375,\n      0.000128167885954442,\n      0.0001199674165215495,\n      0.00011240961538916714,\n      0.00010546095111400769,\n      9.904978478874828e-5,\n      9.313732080969409e-5,\n      8.765407215966809e-5,\n      8.258249805872804e-5,\n      7.78777238020077e-5,\n  ]\n  pseudovoigt_3 = [\n      0.0006602842942843671,\n      0.0006696236061098646,\n      0.0006791430291785958,\n      0.0006888706342961126,\n      0.0006989211006014035,\n      0.0007089792679182944,\n      0.000719369244114519,\n      0.0007299761902924956,\n      0.0007408455508072781,\n      0.000751936808867619,\n      0.000763278747101859,\n      0.0007748930474192907,\n      0.0007867789748730252,\n      0.000798920527767003,\n      0.0008113801875615833,\n      0.0008241126836025982,\n      0.000837004653241417,\n      0.0008503737416651244,\n      0.0008640266492829008,\n      0.0008780332425176227,\n      0.0008923885718755253,\n      0.0009069439240150739,\n      0.000921997874536953,\n      0.0009374604831410558,\n      0.0009532956279319128,\n      0.0009695545509087378,\n      0.0009860236608209517,\n      0.0010031433467599653,\n      0.001020690871456239,\n      0.0010385129715610821,\n      0.0010570144499212483,\n      0.0010759910053001489,\n      0.0010953168917789268,\n      0.0011153697676600665,\n      0.001135960876796459,\n      0.0011569468921880158,\n      0.0011786948127137126,\n      0.0012010969051426945,\n      0.001223891348237173,\n      0.0012475887199854803,\n      0.001271753085677423,\n      0.0012968381753034077,\n      0.0013227132638672192,\n      0.0013490890642436097,\n      0.001376581959297545,\n      0.0014045790392767585,\n      0.001433743863331964,\n      0.0014635205511831673,\n      0.0014946216525138945,\n      0.0015263469050112199,\n      0.0015590774733956188,\n      0.001593242700484374,\n      0.00162816974933064,\n      0.0016646239317352138,\n      0.001701947310130163,\n      0.0017409470380232973,\n      0.0017809240259602063,\n      0.0018222734806197273,\n      0.0018654957332269928,\n      0.0019097989151356752,\n      0.0019562204838960056,\n      0.002003863814503159,\n      0.0020532235827279486,\n      0.0021050318351616307,\n      0.0021581672838437167,\n      0.002213469409690192,\n      0.0022714342138737257,\n      0.002331112586955668,\n      0.002393140665880005,\n      0.0024577218761403555,\n      0.0025256586472258953,\n      0.002595753124794593,\n      0.002668645974551409,\n      0.002744796500471869,\n      0.0028241427453367463,\n      0.00290808604558968,\n      0.00299467617411067,\n      0.0030851747771541353,\n      0.0031798971985257706,\n      0.003279110338772425,\n      0.0033828895807083586,\n      0.0034928995997873906,\n      0.0036072582680863313,\n      0.0037270007550785243,\n      0.003852979210847778,\n      0.003985417499233984,\n      0.00412487669639773,\n      0.00427149906652618,\n      0.004426283937624137,\n      0.004589513315612093,\n      0.0047620906562942525,\n      0.004944292398704334,\n      0.005137075299930752,\n      0.00534118411672285,\n      0.005558049842013633,\n      0.005788188604183887,\n      0.006032693959271478,\n      0.006292987916569693,\n      0.006570219614277274,\n      0.00686611720952792,\n      0.007182248601659563,\n      0.007520620008958777,\n      0.00787929725579662,\n      0.008268284566896883,\n      0.008686253179687442,\n      0.009136668876840878,\n      0.009621931146898752,\n      0.010147178142152479,\n      0.010709791394265854,\n      0.011326119677678605,\n      0.011995679217596531,\n      0.012725547857236808,\n      0.013523708180281693,\n      0.014388571079833668,\n      0.015346742297886082,\n      0.016401422801955282,\n      0.0175656351456039,\n      0.01884160643338125,\n      0.02027351256747762,\n      0.02186655544328535,\n      0.02363114945367887,\n      0.025631136693328754,\n      0.027884256176473502,\n      0.030405612231644234,\n      0.033292368516666254,\n      0.03659253567264006,\n      0.04032655950316669,\n      0.044664148339543956,\n      0.049684321140800555,\n      0.05544262121754967,\n      0.0622115227336975,\n      0.07003082531457179,\n      0.07927588573028703,\n      0.08997465817715887,\n      0.10258999354789741,\n      0.1170696993642949,\n      0.13383392928376944,\n      0.1524052475829859,\n      0.17272188768391533,\n      0.19326111108786778,\n      0.2126984094366267,\n      0.22825040071813035,\n      0.2377359846948626,\n      0.2407319924434132,\n      0.2322351773125234,\n      0.218489447743203,\n      0.20021326519494842,\n      0.17962519434151933,\n      0.15918685967365567,\n      0.13979815687791677,\n      0.12249813752979173,\n      0.1072924097721866,\n      0.09396665996700705,\n      0.08267405114078165,\n      0.07300405400524618,\n      0.06466189636440677,\n      0.05758667248841191,\n      0.05151895750415635,\n      0.04628237051034979,\n      0.0417123175702249,\n      0.03778447304345979,\n      0.03435747888063975,\n      0.03135457343604374,\n      0.028687278786948187,\n      0.026353541065201543,\n      0.024282619544888556,\n      0.02243937283280075,\n      0.020793946277893098,\n      0.01930241824015902,\n      0.017985966641819184,\n      0.01677324587024237,\n      0.015688884396364823,\n      0.014703836560757126,\n      0.013805570396836619,\n      0.012985685066344331,\n      0.01223548504550525,\n      0.01154821701015249,\n      0.010916152059377387,\n      0.0103329572774636,\n      0.009794854999006798,\n      0.009297753380567524,\n      0.008836385108688286,\n      0.008408127264268447,\n      0.008010229235705256,\n      0.007639338967103865,\n      0.00729336631884354,\n      0.006970150300244951,\n      0.006668107847228484,\n      0.006384560949824963,\n      0.006118776978894665,\n      0.005868923592006102,\n      0.0056337670156171495,\n      0.00541270422565224,\n      0.005204066605989193,\n      0.005007333851356962,\n      0.00482140382524843,\n      0.0046472150033818735,\n      0.004480427004446693,\n      0.0043227132355389275,\n      0.004172960430074258,\n      0.0040308139149955475,\n      0.003897031576456852,\n      0.0037686657227455605,\n      0.0036462220806199857,\n      0.0035298935553494115,\n      0.003419926953455834,\n      0.0033140470370487804,\n      0.0032129480580481264,\n      0.003116423649570511,\n      0.0030248508448286106,\n      0.002936515604452582,\n      0.0028519130344469104,\n      0.00277175419095666,\n      0.002694127540060916,\n      0.0026196470537841353,\n      0.0025489272823286686,\n      0.002480380490745496,\n      0.002414450024853887,\n      0.0023518470882371114,\n      0.002290974104726604,\n      0.0022323355316474476,\n      0.0021765517416729493,\n      0.002122317851534998,\n      0.0020705708271396076,\n      0.0020201562425436756,\n      0.0019720117981366254,\n      0.0019251235450503262,\n      0.00188036137010037,\n      0.0018366428899657175,\n      0.0017948569417401091,\n      0.0017540946671630898,\n      0.0017151184698988953,\n      0.001676931883576254,\n      0.0016404509047001745,\n      0.0016047260087464058,\n      0.0015705314648703167,\n      0.0015374160447358413,\n      0.0015050050963615982,\n      0.001473925847718829,\n      0.0014434758011304693,\n      0.0014142813858226597,\n      0.0013859060477466889,\n      0.0013580809119112449,\n      0.001331421652838608,\n      0.0013054973332373013,\n      0.0012800627172487884,\n      0.0012556336700940136,\n      0.0012318585509267983,\n      0.0012087603726667925,\n      0.0011860649857325786,\n      0.00116424357174067,\n      0.001143001128805079,\n      0.001122137749481993,\n      0.001102006574728667,\n      0.001082457963197974,\n      0.0010633940184011348,\n      0.0009753774790250093,\n      0.0008968755866283491,\n      0.0008263298515967832,\n      0.000763017033690182,\n      0.0007058063001530561,\n      0.000654179253128558,\n      0.0006073792977230862,\n      0.0005649354487804341,\n      0.0005261926379069528,\n      0.0004908951017387461,\n      0.0004586164857668766,\n  ]\n  gaussian_4 = [\n      4.259858228995655e-260,\n      1.1016131884618945e-256,\n      2.662298682438112e-253,\n      6.127151116252188e-250,\n      1.4586939164380406e-246,\n      2.8105996209991916e-243,\n      5.584078595085743e-240,\n      1.043641057323023e-236,\n      1.885122768473291e-233,\n      3.184213174246208e-230,\n      5.10577676573387e-227,\n      7.840144600603041e-224,\n      1.1460105952720686e-220,\n      1.5717251710746544e-217,\n      2.087617274017277e-214,\n      2.6017566790601215e-211,\n      2.852318995737637e-208,\n      3.249490138790396e-205,\n      3.4454708015103387e-202,\n      3.5062710898382087e-199,\n      3.395753405610471e-196,\n      2.9086174576255017e-193,\n      2.5181579855742987e-190,\n      2.0971141463033846e-187,\n      1.6442233052531943e-184,\n      1.2331948740393608e-181,\n      8.095390148993437e-179,\n      5.4997387308629296e-176,\n      3.518181066858118e-173,\n      1.999016843859897e-170,\n      1.158143966741979e-167,\n      6.319460104117335e-165,\n      3.1062441712148647e-162,\n      1.5424059929844438e-159,\n      7.231974255586328e-157,\n      3.058348212415427e-154,\n      1.2888362919152725e-151,\n      5.2037018478691155e-149,\n      1.87054699391571e-146,\n      6.787484941557916e-144,\n      2.2157541180138237e-141,\n      7.20955057959372e-139,\n      2.246465070652964e-136,\n      6.263461896541479e-134,\n      1.7697488144042887e-131,\n      4.4391915917565225e-129,\n      1.1197378404439163e-126,\n      2.538359712583208e-124,\n      5.842405755636607e-122,\n      1.1992200135080797e-119,\n      2.3329411787764614e-117,\n      4.560634371185514e-115,\n      8.015828913947689e-113,\n      1.4083293933154093e-110,\n      2.236194183742487e-108,\n      3.5526113301746383e-106,\n      5.1155823361357e-104,\n      6.981222601064197e-102,\n      9.479219606922421e-100,\n      1.161563811530446e-97,\n      1.425678961084507e-95,\n      1.5837283052186428e-93,\n      1.664433635547698e-91,\n      1.7521903266155786e-89,\n      1.656807219944689e-87,\n      1.5039724244138628e-85,\n      1.3479112324857233e-83,\n      1.0987059075648758e-81,\n      8.489304365388519e-80,\n      6.2501805819479235e-78,\n      4.565930819174326e-76,\n      3.039333172981001e-74,\n      1.9050749631396407e-72,\n      1.1432602716092456e-70,\n      6.482625329825229e-69,\n      3.678278954640446e-67,\n      1.8822655014158332e-65,\n      9.145820168793742e-64,\n      4.232484750458475e-62,\n      1.865283958885258e-60,\n      7.769515326770571e-59,\n      3.2013005464172613e-57,\n      1.2101250507036817e-55,\n      4.305529226719047e-54,\n      1.4627231222130185e-52,\n      4.717707962280662e-51,\n      1.448485108613923e-49,\n      4.199222945671826e-48,\n      1.161936681593653e-46,\n      3.048105103540754e-45,\n      7.620005724410939e-44,\n      1.8013835886709173e-42,\n      4.0427080247339915e-41,\n      8.60254064982454e-40,\n      1.7482545534523544e-38,\n      3.36834468899525e-37,\n      6.153036001588072e-36,\n      1.0681503558939156e-34,\n      1.7581441731941724e-33,\n      2.7499734012179853e-32,\n      4.08285083627552e-31,\n      5.759890828090673e-30,\n      7.509650886932179e-29,\n      9.55934980518719e-28,\n      1.1538095504083611e-26,\n      1.3244024688187237e-25,\n      1.4387454058803583e-24,\n      1.4890553088611994e-23,\n      1.4287246475501728e-22,\n      1.3313914039847015e-21,\n      1.1755006753817208e-20,\n      9.859326831612325e-20,\n      7.867962137346769e-19,\n      5.84105903034015e-18,\n      4.1969800732045645e-17,\n      2.862007630893282e-16,\n      1.8522228419547885e-15,\n      1.1183102306507797e-14,\n      6.535556299020223e-14,\n      3.614673224893979e-13,\n      1.870410013475965e-12,\n      9.346128918481265e-12,\n      4.4316032726947175e-11,\n      1.9648446916542164e-10,\n      8.379383240943728e-10,\n      3.402600168977505e-9,\n      1.2910917403208595e-8,\n      4.7154132626544926e-8,\n      1.6374158041236136e-7,\n      5.32743009219752e-7,\n      1.6647167278086784e-6,\n      4.881913712715456e-6,\n      1.3747348350951613e-5,\n      3.6354759097352445e-5,\n      9.218035568105857e-5,\n      0.00021990224931217438,\n      0.0005027411315092636,\n      0.0010813922319456604,\n      0.0022272011411965872,\n      0.004319533160917661,\n      0.0080079766479752,\n      0.014007151918547553,\n      0.023410751798273937,\n      0.03692342024181861,\n      0.05553718980843239,\n      0.07897902778391583,\n      0.10665651372111784,\n      0.13716502155824473,\n      0.16703046437773958,\n      0.19336954607143753,\n      0.21221882229523883,\n      0.2211844837027692,\n      0.21883571393143644,\n      0.2055780923930622,\n      0.1833852044219346,\n      0.1550565383982527,\n      0.12464057132695,\n      0.0951675687950812,\n      0.06896614121516682,\n      0.04727148453410309,\n      0.03087332195920074,\n      0.019145778832305605,\n      0.011273746592723873,\n      0.0062650438511900955,\n      0.0033225784127335783,\n      0.0016725223427313475,\n      0.0007995634833446323,\n      0.0003632697879699139,\n      0.00015520330255815832,\n      6.401368133403478e-5,\n      2.4598377646566834e-5,\n      9.07501581466291e-6,\n      3.1776546807523935e-6,\n      1.0545537221683494e-6,\n      3.322354635546973e-7,\n      9.936616709655675e-8,\n      2.8256366258481642e-8,\n      7.62484828660207e-9,\n      1.9490904258022883e-9,\n      4.732191441372916e-10,\n      1.0926176394486724e-10,\n      2.3891946335516156e-11,\n      4.959226677797263e-12,\n      9.784275509505562e-13,\n      1.8300687440469833e-13,\n      3.249265805735101e-14,\n      5.476236337440673e-15,\n      8.780646815070553e-16,\n      1.3315123323627031e-16,\n      1.9195016881130636e-17,\n      2.622473521076492e-18,\n      3.3951480866575794e-19,\n      4.1858636394456633e-20,\n      4.8860664317179995e-21,\n      5.422888704315008e-22,\n      5.707788441526681e-23,\n      5.831067365626359e-24,\n      5.51106534682831e-25,\n      4.9671212131525297e-26,\n      4.236830408524281e-27,\n      3.4299208074805974e-28,\n      2.701586220546003e-29,\n      1.9751924812627266e-30,\n      1.361878111751396e-31,\n      8.969337054148373e-33,\n      5.7401254183651195e-34,\n      3.39961954908058e-35,\n      1.9087204980428646e-36,\n      1.0182527579670024e-37,\n      5.274577859083375e-39,\n      2.529443759795812e-40,\n      1.1482942676177718e-41,\n      5.118394528252823e-43,\n      2.096201756984044e-44,\n      8.125514479275992e-46,\n      3.0935662649865446e-47,\n      1.0832163182185248e-48,\n      3.579703502142197e-50,\n      1.1701763234214125e-51,\n      3.493327532707207e-53,\n      9.83917135257652e-55,\n      2.7421938662008497e-56,\n      7.007515527585234e-58,\n      1.7612590531759095e-59,\n      4.0364840752215754e-61,\n      9.106594606738052e-63,\n      1.879807618947693e-64,\n      3.841764779088005e-66,\n      7.120423658110417e-68,\n      1.3058411013076189e-69,\n      2.1868128321549607e-71,\n      3.6338684433480606e-73,\n      5.426466888193308e-75,\n      8.102817807762883e-77,\n      1.0913276896322173e-78,\n      1.464043674319669e-80,\n      1.865299395527267e-82,\n      2.15473260941904e-84,\n      2.4748289310219656e-86,\n      2.56970826461812e-88,\n      2.6655440918629117e-90,\n      2.6016370876115095e-92,\n      2.2913419114643544e-94,\n      2.0346982273595933e-96,\n      1.7028303465027835e-98,\n      1.286346896732215e-100,\n      9.74071500985926e-103,\n      6.94928799175537e-105,\n      4.717040351658215e-107,\n      2.8778816387542913e-109,\n      1.7639990323719425e-111,\n      1.0224982875117536e-113,\n      5.351571922196971e-116,\n      2.777676563524733e-118,\n      1.3864515682329547e-120,\n      6.515340863115743e-123,\n      7.244281174010586e-135,\n      1.4989872781923165e-147,\n      4.770746486722214e-161,\n      2.5012472434113596e-175,\n      1.7740647758454357e-190,\n      1.8314630184404583e-206,\n      2.4115200312567504e-223,\n      4.115352123722348e-241,\n      7.137742664823761e-260,\n      1.3915568248429963e-279,\n      2.6555675954628907e-300,\n  ]\n  gaussian_5 = [\n      1.5449587777325296e-123,\n      4.5686160463087665e-122,\n      1.314830349899796e-120,\n      3.712768936689873e-119,\n      1.0660805031865058e-117,\n      2.7997096715563514e-116,\n      7.466264528327707e-115,\n      1.9432822837502817e-113,\n      4.9945021782506135e-112,\n      1.2496131354620481e-110,\n      3.063438384474205e-109,\n      7.386595126647533e-108,\n      1.7472509929119257e-106,\n      4.0291613941130415e-105,\n      9.183389987002056e-104,\n      2.0405481563080098e-102,\n      4.29769145116277e-101,\n      9.225263045581326e-100,\n      1.923694103788854e-98,\n      3.9493436897500776e-97,\n      7.953296815593462e-96,\n      1.52154802009638e-94,\n      2.9314394325467873e-93,\n      5.566023561451631e-92,\n      1.031785285593648e-90,\n      1.8804033936614104e-89,\n      3.2403229562617456e-88,\n      5.68243728500414e-87,\n      9.729476123131954e-86,\n      1.5852203636948537e-84,\n      2.6115857093312683e-83,\n      4.201131977754345e-82,\n      6.47049454763275e-81,\n      1.0036440197572745e-79,\n      1.5218194150355757e-78,\n      2.210368145415456e-77,\n      3.2140126158741323e-76,\n      4.597955191552085e-75,\n      6.264300770951583e-74,\n      8.593670785957667e-73,\n      1.1278849131283163e-71,\n      1.4822539994893107e-70,\n      1.9161820276798394e-69,\n      2.3640118059919985e-68,\n      2.942301595319073e-67,\n      3.4822981115676683e-66,\n      4.1437305012066904e-65,\n      4.7142645425400254e-64,\n      5.416135074340816e-63,\n      5.928335349335039e-62,\n      6.35328835549078e-61,\n      6.844568709381621e-60,\n      7.050276217873123e-59,\n      7.283598942932092e-58,\n      7.210844748349831e-57,\n      7.1633580166077835e-56,\n      6.82801465287542e-55,\n      6.372228441188437e-54,\n      5.952785780078823e-53,\n      5.3247471288437635e-52,\n      4.782575419006318e-51,\n      4.118300788506448e-50,\n      3.469294571277286e-49,\n      2.935015227750774e-48,\n      2.3719748726518494e-47,\n      1.8879634820023304e-46,\n      1.4993029242187866e-45,\n      1.143830987251139e-44,\n      8.544473837506012e-44,\n      6.26478030031129e-43,\n      4.594102965433754e-42,\n      3.2388495821796653e-41,\n      2.228880137526713e-40,\n      1.508868595914541e-39,\n      9.9864754356288e-39,\n      6.638373686220498e-38,\n      4.221100993953959e-37,\n      2.6301614719108793e-36,\n      1.6082674745481492e-35,\n      9.650107232919457e-35,\n      5.661763198210732e-34,\n      3.3191847904791796e-33,\n      1.8759390787819432e-32,\n      1.034624615487129e-31,\n      5.60670442419936e-31,\n      2.9771235853208395e-30,\n      1.5510304858729894e-29,\n      7.897112204799089e-29,\n      3.9500839483429505e-28,\n      1.9347292139728948e-27,\n      9.302587065021082e-27,\n      4.3744306421908164e-26,\n      2.0155640257612676e-25,\n      9.094288852127666e-25,\n      4.032630990563303e-24,\n      1.7509915941184986e-23,\n      7.445024066796082e-23,\n      3.103396616340363e-22,\n      1.2667823670406245e-21,\n      5.069309231362259e-21,\n      1.9876118935762356e-20,\n      7.639804860395483e-20,\n      2.8380857396668735e-19,\n      1.0479752264849825e-18,\n      3.78945821145431e-18,\n      1.3439019351915533e-17,\n      4.6626231800911533e-17,\n      1.5880769670297658e-16,\n      5.234031022854976e-16,\n      1.7107303208489189e-15,\n      5.473202984417719e-15,\n      1.716433424883291e-14,\n      5.2809611407562164e-14,\n      1.574580938966072e-13,\n      4.648951583924988e-13,\n      1.344784577833765e-12,\n      3.811167880316236e-12,\n      1.0480107678665409e-11,\n      2.8548721371567146e-11,\n      7.607139634839806e-11,\n      1.9694704628654794e-10,\n      5.045869899422644e-10,\n      1.2665110560850503e-9,\n      3.0868723569941707e-9,\n      7.43022200471847e-9,\n      1.755795686575193e-8,\n      4.025814364954592e-8,\n      9.123041853693155e-8,\n      2.0279490531395717e-7,\n      4.379742725247035e-7,\n      9.339411128916642e-7,\n      1.936401645615291e-6,\n      3.964835620474495e-6,\n      7.894384512050563e-6,\n      1.551168848187899e-5,\n      2.9667732024698354e-5,\n      5.599925137293382e-5,\n      0.00010285064003675579,\n      0.0001863833120547779,\n      0.0003287212551501769,\n      0.0005715192107641682,\n      0.0009681550234966213,\n      0.0016172974671230876,\n      0.0026312492485412926,\n      0.004216184947133826,\n      0.0065878336195920005,\n      0.010086045086502576,\n      0.015205664785381856,\n      0.022367110545137448,\n      0.03235249871668645,\n      0.04567981024952089,\n      0.06319849330144363,\n      0.08601213238427675,\n      0.11427019131480619,\n      0.1488043267212761,\n      0.19031891597612413,\n      0.23799491788829202,\n      0.29157154249456624,\n      0.3501521536349937,\n      0.4126589586291023,\n      0.47573627541334507,\n      0.5374448177880398,\n      0.5949686909568478,\n      0.6458873224794934,\n      0.6864859171697572,\n      0.7149740827296335,\n      0.7296567709597787,\n      0.7296770910622179,\n      0.71481524931493,\n      0.6865676585126325,\n      0.6454793557484344,\n      0.5950309772334914,\n      0.5374894530933569,\n      0.47565695725534257,\n      0.4124535364624024,\n      0.35043984663492533,\n      0.29181665023035025,\n      0.2380937469225478,\n      0.19028061955780654,\n      0.14901448048361435,\n      0.11438153092609375,\n      0.08599031001130027,\n      0.06334119262211708,\n      0.045728068648309285,\n      0.03233797993216762,\n      0.022407119340745615,\n      0.015212559125585402,\n      0.010124633530438878,\n      0.006596904819692305,\n      0.004212979512558395,\n      0.0026352099578999186,\n      0.0016143458453106564,\n      0.0009697366223322295,\n      0.0005703910184463353,\n      0.0003288577908266272,\n      0.00018572857014822688,\n      0.00010336764125342294,\n      5.5997195917445325e-5,\n      2.9758160025161506e-5,\n      1.5482344965945625e-5,\n      7.891910718020928e-6,\n      3.968016834175699e-6,\n      1.94305411129132e-6,\n      9.30572001802753e-7,\n      4.37419346900552e-7,\n      2.0278551026736073e-7,\n      9.14613492656671e-8,\n      4.040263421778023e-8,\n      1.7491873818721385e-8,\n      7.468548827479449e-9,\n      3.1020716650358588e-9,\n      1.2614002895533401e-9,\n      5.075621647970878e-10,\n      1.9820909741496701e-10,\n      7.5773104924071e-11,\n      2.8671458909926515e-11,\n      1.053034630511926e-11,\n      3.782804258413012e-12,\n      1.3480922033260319e-12,\n      4.652638206852141e-13,\n      1.5703649683073564e-13,\n      5.2595452925468973e-14,\n      1.707799023811436e-14,\n      5.493031102175373e-15,\n      1.7098103554711777e-15,\n      5.273745297073263e-16,\n      1.5756888590549943e-16,\n      4.6737931268270085e-17,\n      1.3390952604534952e-17,\n      3.8085257207372636e-18,\n      1.0484376770771899e-18,\n      2.8678625156741053e-19,\n      7.554033594672361e-20,\n      1.9820739429820073e-20,\n      5.01342500322294e-21,\n      1.2617369708624952e-21,\n      3.1119387107406933e-22,\n      7.410247577845825e-23,\n      1.754927145022704e-23,\n      4.008520042308842e-24,\n      9.120764863187977e-25,\n      2.0276587207172776e-25,\n      4.3445226411722343e-26,\n      9.301730637546658e-27,\n      1.9468078134116276e-27,\n      3.927030452316954e-28,\n      7.901475187371056e-29,\n      1.5539360142642537e-29,\n      2.9966718685951516e-30,\n      5.561090980335198e-31,\n      1.0303047384393712e-31,\n      1.8680130716456895e-32,\n      3.2637948741022414e-33,\n      5.669162689213273e-34,\n      9.690470893780304e-35,\n      1.618570244095521e-35,\n      1.5804850348783825e-39,\n      8.154693226308838e-44,\n      2.0777530142103366e-48,\n      2.6675311446061633e-53,\n      1.6081067292203905e-58,\n      4.6542746338578485e-64,\n      6.161193256181061e-70,\n      3.7413227406265723e-76,\n      9.54481645596202e-83,\n      1.0569666428460558e-89,\n      4.826413706761959e-97,\n  ]\n  gaussian_6 = [\n      4.193275255068707e-156,\n      1.1426631726738381e-154,\n      3.0461324258918096e-153,\n      8.007293772757398e-152,\n      2.1495721470747327e-150,\n      5.311393360512078e-149,\n      1.3384866802295418e-147,\n      3.3087930782543244e-146,\n      8.116711696763965e-145,\n      1.9482247791099125e-143,\n      4.604971857766272e-142,\n      1.0759204597745792e-140,\n      2.4785008043363587e-139,\n      5.594293254809135e-138,\n      1.2542735984709464e-136,\n      2.755446249619383e-135,\n      5.766845354832117e-134,\n      1.2361840350121178e-132,\n      2.587181715012955e-131,\n      5.357851752973489e-130,\n      1.0939012548023444e-128,\n      2.1319409457742765e-127,\n      4.2060819196619675e-126,\n      8.219781790064488e-125,\n      1.57614753205611e-123,\n      2.986481874554613e-122,\n      5.3745465457648855e-121,\n      9.8984165254809e-120,\n      1.788813043850402e-118,\n      3.0897508081424457e-117,\n      5.427062852082148e-116,\n      9.354292365767241e-115,\n      1.5505175447993618e-113,\n      2.603272831476906e-112,\n      4.294079617912392e-111,\n      6.813930107743825e-110,\n      1.088674383761343e-108,\n      1.7202598728336897e-107,\n      2.5988379917812406e-106,\n      3.9775642257099944e-105,\n      5.847439807401378e-104,\n      8.6593565760395455e-103,\n      1.2680678355301042e-101,\n      1.7787029151197344e-100,\n      2.5335625250988268e-99,\n      3.443244520145533e-98,\n      4.735500469512624e-97,\n      6.248850089449056e-96,\n      8.384661531120188e-95,\n      1.075307123455614e-93,\n      1.3568473771193963e-92,\n      1.732896763827006e-91,\n      2.122911440659338e-90,\n      2.626141268632678e-89,\n      3.123397833306517e-88,\n      3.7536410901685974e-87,\n      4.3425422663591264e-86,\n      4.9429278643469744e-85,\n      5.671290952242476e-84,\n      6.248524450416201e-83,\n      6.964206222334919e-82,\n      7.462836125916386e-81,\n      7.86120452089031e-80,\n      8.380117118579096e-79,\n      8.553004001330211e-78,\n      8.645355758025258e-77,\n      8.781593275741806e-76,\n      8.592077950040671e-75,\n      8.27172423249319e-74,\n      7.856820474890547e-73,\n      7.522226739589706e-72,\n      6.940975962142727e-71,\n      6.279595829032828e-70,\n      5.619785560145033e-69,\n      4.939990445909895e-68,\n      4.400097797758237e-67,\n      3.7539235100912676e-66,\n      3.154056485040776e-65,\n      2.6142539329805257e-64,\n      2.137491244182159e-63,\n      1.7167877749260047e-62,\n      1.3897172575894174e-61,\n      1.0868139825929042e-60,\n      8.329006605332986e-60,\n      6.306591164312252e-59,\n      4.7025756859661355e-58,\n      3.4586542199360237e-57,\n      2.497105894199353e-56,\n      1.781053376797039e-55,\n      1.2499959092837654e-54,\n      8.65921326306708e-54,\n      5.89346504759487e-53,\n      3.9500018546778645e-52,\n      2.6051430484014986e-51,\n      1.6983424533284298e-50,\n      1.0894583478875182e-49,\n      6.876947085359578e-49,\n      4.2777983925975365e-48,\n      2.618484272509292e-47,\n      1.579479032550646e-46,\n      9.382013588891335e-46,\n      5.491636799822032e-45,\n      3.108514436896967e-44,\n      1.765850580021062e-43,\n      9.871095574926301e-43,\n      5.4410023320798157e-42,\n      2.947263447786839e-41,\n      1.5762834472133199e-40,\n      8.160095431711793e-40,\n      4.2295098592725324e-39,\n      2.155880052684747e-38,\n      1.0828060873395155e-37,\n      5.3655238500777225e-37,\n      2.577115843072661e-36,\n      1.2375843914301406e-35,\n      5.852111898620382e-35,\n      2.7248797150693698e-34,\n      1.2313376906038989e-33,\n      5.5699288534975444e-33,\n      2.474993401175176e-32,\n      1.0690550887122038e-31,\n      4.617378455401463e-31,\n      1.9636845204505523e-30,\n      8.107084490300074e-30,\n      3.3376277958143455e-29,\n      1.3575485664886226e-28,\n      5.350809546657775e-28,\n      2.1068644887376328e-27,\n      8.185918660830095e-27,\n      3.086974093081435e-26,\n      1.161714224002648e-25,\n      4.2469805095259865e-25,\n      1.550526170148524e-24,\n      5.49801628165452e-24,\n      1.9453134763645354e-23,\n      6.693907200158776e-23,\n      2.2998852946568657e-22,\n      7.675893387470128e-22,\n      2.5582630345834623e-21,\n      8.281289471090615e-21,\n      2.6735421802196716e-20,\n      8.397957585646549e-20,\n      2.6346967283678817e-19,\n      8.030166110095961e-19,\n      2.4392465181499947e-18,\n      7.213590404696582e-18,\n      2.1001465874548697e-17,\n      6.098410554971724e-17,\n      1.7248061530857463e-16,\n      4.851633745035881e-16,\n      1.3296642073330506e-15,\n      3.587619090269964e-15,\n      9.653219181615978e-15,\n      2.5269294402427773e-14,\n      6.51964583080787e-14,\n      1.6714553278356703e-13,\n      4.185256097271301e-13,\n      1.0309621708692542e-12,\n      2.5046847835483487e-12,\n      6.04270225026915e-12,\n      1.423118497545816e-11,\n      3.3007443581606575e-11,\n      7.539519578563868e-11,\n      1.7097483922267605e-10,\n      3.7896025433729634e-10,\n      8.274464883273072e-10,\n      1.778686148174393e-9,\n      3.7620238756113566e-9,\n      7.90044791828422e-9,\n      1.6112225802232833e-8,\n      3.283304421598904e-8,\n      6.53300814693446e-8,\n      1.280536672543621e-7,\n      2.474452207414332e-7,\n      4.708693592091525e-7,\n      8.823809065630415e-7,\n      1.6271614434724022e-6,\n      2.95568383548864e-6,\n      5.292118330612122e-6,\n      9.328839238184302e-6,\n      1.618345379671794e-5,\n      2.7671139345640854e-5,\n      4.659148016438421e-5,\n      7.72212214014769e-5,\n      0.000126086545584599,\n      0.00020273300775135929,\n      0.0003209991024628713,\n      0.0005002411547634894,\n      0.0007683521523505103,\n      0.0011617515162094141,\n      0.0017303158871940288,\n      0.002538520790921391,\n      0.0036651230124954202,\n      0.00521313940847715,\n      0.00729967518950698,\n      0.01006654545313186,\n      0.013631004933976931,\n      0.018238589975216934,\n      0.024016739381899153,\n      0.0311520347318908,\n      0.0397888196468262,\n      0.04993622463374502,\n      0.0618425667394269,\n      0.07545201187681713,\n      0.0906050712914918,\n      0.10699518106455314,\n      0.12461723411128771,\n      0.14292779164758176,\n      0.16141073992749205,\n      0.17936010448461692,\n      0.19643811632920333,\n      0.21185597684107776,\n      0.2248492680503198,\n      0.2351440780564097,\n      0.24214209591207958,\n      0.24550155261290635,\n      0.24514008958452282,\n      0.24101471523074205,\n      0.23342413561242617,\n      0.22253800087390382,\n      0.2088762049765619,\n      0.1932241835088985,\n      0.17588154937683737,\n      0.15781443045149393,\n      0.13927162874436552,\n      0.12118761273876123,\n      0.10369745103309051,\n      0.08753434234973899,\n      0.0726144466327064,\n      0.05943814511065143,\n      0.04781515818656779,\n      0.03797122834775271,\n      0.029599962944000753,\n      0.02279378018021084,\n      0.01722863885707551,\n      0.012864362620438533,\n      0.009460479096413758,\n      0.006828531093618036,\n      0.004870327624394102,\n      0.0034078189828854384,\n      0.002357634144118628,\n      0.001605194623970854,\n      0.001071590846713327,\n      0.0007081238512547304,\n      0.0004605503440996193,\n      0.00029360484203537875,\n      0.00018525436359309824,\n      0.00011503200357582611,\n      7.03585452318445e-5,\n      4.214643521701928e-5,\n      2.5004147463401824e-5,\n      1.460309443878564e-5,\n      8.354008544462428e-6,\n      4.728079638027677e-6,\n      2.638989193116787e-6,\n      1.4492547743101205e-6,\n      5.792551529900139e-8,\n      1.5041488019794708e-9,\n      2.452229294019683e-11,\n      2.507481496863653e-13,\n      1.5493181136665965e-15,\n      5.790983292592509e-18,\n      1.2723115394465807e-20,\n      1.6334262258604093e-23,\n      1.167347455168096e-26,\n      4.6816523432596956e-30,\n      1.0207086555460516e-33,\n  ]\n  atan_7 = [\n      0.005993062728776505,\n      0.006028226256779969,\n      0.00606373332157246,\n      0.006099675571071781,\n      0.006136456378060256,\n      0.006172912802234149,\n      0.006210209830912972,\n      0.006247914710940482,\n      0.00628617237644612,\n      0.006324823620476041,\n      0.006363953053367927,\n      0.006403617439596704,\n      0.0064437954441257436,\n      0.006484415344507497,\n      0.006525666455882447,\n      0.00656737862112152,\n      0.006609168760596192,\n      0.006652044648381702,\n      0.0066953583766337504,\n      0.006739310432521324,\n      0.006783861172470734,\n      0.006828533313017612,\n      0.006874220210012405,\n      0.006920615603484534,\n      0.006967584795461295,\n      0.007015253209662333,\n      0.007062976884584702,\n      0.0071120032103904,\n      0.007161654977171102,\n      0.007211478985116888,\n      0.007262575221490504,\n      0.00731433818038858,\n      0.007366401062205849,\n      0.007419745426850169,\n      0.007473824459097193,\n      0.007528234657701152,\n      0.007583890014936296,\n      0.007640465065971664,\n      0.007697268340218703,\n      0.007755530438859713,\n      0.007814134991739857,\n      0.007874138063471741,\n      0.007935167534633155,\n      0.007996503756791803,\n      0.008059527785757649,\n      0.008122783248222784,\n      0.00818771697069543,\n      0.00825303487129291,\n      0.008320237438432628,\n      0.00838774982104088,\n      0.008456338761529243,\n      0.008526821675303905,\n      0.00859774180107012,\n      0.008670582006298565,\n      0.008743953174828139,\n      0.008819362643516973,\n      0.008895376152833938,\n      0.008972679760820699,\n      0.009052102976480387,\n      0.009132101349725455,\n      0.009214450210435874,\n      0.009297457074108378,\n      0.009381904218487053,\n      0.009468909900290392,\n      0.009556478662804126,\n      0.009645898835959198,\n      0.009737818793975239,\n      0.009830605171867901,\n      0.00992513798526064,\n      0.010021584111202547,\n      0.010120957827167655,\n      0.01022134652536837,\n      0.010323538880393052,\n      0.010428006043697277,\n      0.010534478987180096,\n      0.010644601383521258,\n      0.01075561029944398,\n      0.010868958182089652,\n      0.010984813537551166,\n      0.011103260358979518,\n      0.011224141543568064,\n      0.011349084658738379,\n      0.011475662066369397,\n      0.011604779561391467,\n      0.011737048693997897,\n      0.011872366531125333,\n      0.012010951824499965,\n      0.012152579708009672,\n      0.012297821185585646,\n      0.012446514601780234,\n      0.012599031217714144,\n      0.012755140536629564,\n      0.012915165112716781,\n      0.013079187542233266,\n      0.013247768720927349,\n      0.013420680167004194,\n      0.013598090761265764,\n      0.013780325898186854,\n      0.013967433279352124,\n      0.014159766644291487,\n      0.014357467745315648,\n      0.014560846737747268,\n      0.014767862636815602,\n      0.014983201464225094,\n      0.0152048191624506,\n      0.015433271864858919,\n      0.015668403229574624,\n      0.01591119838055674,\n      0.016158992254350493,\n      0.016417238359585157,\n      0.016683649948424164,\n      0.0169589551845336,\n      0.01724383761320625,\n      0.01753545870376508,\n      0.017840071425344294,\n      0.01815544419651965,\n      0.018482156833260127,\n      0.018817529240110317,\n      0.01916913847290496,\n      0.019533530289397125,\n      0.01990864048085024,\n      0.0203025845615711,\n      0.02071241447168029,\n      0.021134771404201957,\n      0.021578666638404673,\n      0.02204271419438502,\n      0.022521416066138045,\n      0.0230266916474838,\n      0.02355598499706999,\n      0.02410405037290578,\n      0.02468409372727583,\n      0.025286235029708205,\n      0.02592547303088291,\n      0.02659039142867997,\n      0.027297757299513482,\n      0.02803607362593724,\n      0.028824365042539067,\n      0.029648602906657617,\n      0.030531720915926767,\n      0.03145777806919646,\n      0.03245261828873047,\n      0.03350091382027495,\n      0.03463336318123574,\n      0.035829834896239775,\n      0.037126010566270636,\n      0.03850414432243521,\n      0.03998743633634691,\n      0.04160909765542301,\n      0.043348211978125196,\n      0.04525716524582673,\n      0.0473183722917895,\n      0.04957397332040011,\n      0.0520871327956485,\n      0.054830461418858244,\n      0.057878515542108544,\n      0.0613162883020659,\n      0.06514711088106218,\n      0.06947596967653956,\n      0.0744198775097722,\n      0.08016640148299946,\n      0.08678237893702904,\n      0.09455846159894472,\n      0.10381854271718445,\n      0.115137930941325,\n      0.12895510537206828,\n      0.14632074337329493,\n      0.16864768851714007,\n      0.1980878943642129,\n      0.23853836290240887,\n      0.29353365116177793,\n      0.3712384891638708,\n      0.4715897596186985,\n      0.5847690231931497,\n      0.6892197128444592,\n      0.7709839871250703,\n      0.83039552595971,\n      0.8730991185003477,\n      0.9044232442090606,\n      0.9280439919975729,\n      0.9462996095463007,\n      0.9607455590626317,\n      0.9724528909534325,\n      0.9820979104737809,\n      0.9901635950269833,\n      0.9970115343486721,\n      1.002889372061163,\n      1.0079867923692056,\n      1.012442667657563,\n      1.0163815263243314,\n      1.0198782805406956,\n      1.0230075241470533,\n      1.0258238529255068,\n      1.0283658319667748,\n      1.0306776037439533,\n      1.0327848712802061,\n      1.0347156968732825,\n      1.0364742242858793,\n      1.0381149672118775,\n      1.0396298073202925,\n      1.0410369721203856,\n      1.042345989689725,\n      1.043555442842206,\n      1.044696392912147,\n      1.0457677405947312,\n      1.046770977180337,\n      1.0477068859350114,\n      1.048597113307248,\n      1.0494376386653905,\n      1.0502318850679817,\n      1.0509783035541564,\n      1.0516921199152156,\n      1.0523703433410703,\n      1.0530082960450058,\n      1.0536220168611887,\n      1.0542073002524035,\n      1.054759987834216,\n      1.0552930352100218,\n      1.0558034257490165,\n      1.0562861007644435,\n      1.0567537420746898,\n      1.057202759290147,\n      1.0576286987365169,\n      1.0580417693579116,\n      1.05843504309784,\n      1.0588174765920297,\n      1.0591821146127258,\n      1.0595367773181141,\n      1.0598750063540652,\n      1.0602050863270371,\n      1.06052039695601,\n      1.0608278762656094,\n      1.0611218410545253,\n      1.0614098657099427,\n      1.0616850908818294,\n      1.061954722779951,\n      1.062212953162244,\n      1.0624632163293728,\n      1.062708371043094,\n      1.0629436925393998,\n      1.0631745157062626,\n      1.0633961035946267,\n      1.063611774201365,\n      1.0638235829371996,\n      1.0640268454496244,\n      1.064224842698698,\n      1.0644194530283535,\n      1.0646067262447143,\n      1.0647893485517375,\n      1.0649671383814954,\n      1.0651422050781973,\n      1.0653109061432329,\n      1.065475507661714,\n      1.0656375553134998,\n      1.0657942969222531,\n      1.0659468807843688,\n      1.0660960596272866,\n      1.0667902196830066,\n      1.0674181726528138,\n      1.067991186069206,\n      1.0685138799632483,\n      1.068994320798989,\n      1.0694356214358438,\n      1.0698430284901264,\n      1.0702194835741392,\n      1.0705697251238486,\n      1.0708950625885092,\n      1.0711984632971308,\n  ]\n\n  [fit_insights.configurations]\n  fitting_method = \"leastsq\"\n  function_evals = 1000\n  data_points = 267\n  variable_names = [\n      \"pseudovoigt_amplitude_1\",\n      \"pseudovoigt_center_1\",\n      \"pseudovoigt_fwhmg_1\",\n      \"pseudovoigt_fwhml_1\",\n      \"pseudovoigt_amplitude_2\",\n      \"pseudovoigt_center_2\",\n      \"pseudovoigt_fwhmg_2\",\n      \"pseudovoigt_fwhml_2\",\n      \"pseudovoigt_amplitude_3\",\n      \"pseudovoigt_center_3\",\n      \"pseudovoigt_fwhmg_3\",\n      \"pseudovoigt_fwhml_3\",\n      \"gaussian_amplitude_4\",\n      \"gaussian_center_4\",\n      \"gaussian_fwhmg_4\",\n      \"gaussian_amplitude_5\",\n      \"gaussian_center_5\",\n      \"gaussian_fwhmg_5\",\n      \"gaussian_amplitude_6\",\n      \"gaussian_center_6\",\n      \"gaussian_fwhmg_6\",\n      \"atan_amplitude_7\",\n      \"atan_center_7\",\n      \"atan_sigma_7\",\n  ]\n  variable_numbers = 24\n  degree_of_freedom = 243\n\n  [fit_insights.statistics]\n  chi_square = 0.19287134070118112\n  reduced_chi_square = 0.0007937092209925148\n  akaike_information = -1883.2058200035844\n  bayesian_information = -1797.1118522019785\n\n  [fit_insights.errorbars]\n  at_boundary = \"atan_center_7\"\n  at_initial_value = \"atan_center_7\"\n\n  [fit_insights.covariance_matrix]\n\n  [fit_insights.variables.pseudovoigt_amplitude_1]\n  init_value = 1\n  model_value = 6.887357351104129e-11\n  best_value = 6.887357351104129e-11\n\n  [fit_insights.variables.pseudovoigt_center_1]\n  init_value = 5468\n  model_value = 5468.054405630964\n  best_value = 5468.054405630964\n\n  [fit_insights.variables.pseudovoigt_fwhmg_1]\n  init_value = 1.0\n  model_value = 0.1897199824713271\n  best_value = 0.1897199824713271\n\n  [fit_insights.variables.pseudovoigt_fwhml_1]\n  init_value = 1.0\n  model_value = 1.8340047382909581\n  best_value = 1.8340047382909581\n\n  [fit_insights.variables.pseudovoigt_amplitude_2]\n  init_value = 1\n  model_value = 1.5312014287723803\n  best_value = 1.5312014287723803\n\n  [fit_insights.variables.pseudovoigt_center_2]\n  init_value = 5469\n  model_value = 5468.965365073547\n  best_value = 5468.965365073547\n\n  [fit_insights.variables.pseudovoigt_fwhmg_2]\n  init_value = 1.0\n  model_value = 2.1735730746400175\n  best_value = 2.1735730746400175\n\n  [fit_insights.variables.pseudovoigt_fwhml_2]\n  init_value = 1.0\n  model_value = 1.429425183820899\n  best_value = 1.429425183820899\n\n  [fit_insights.variables.pseudovoigt_amplitude_3]\n  init_value = 1\n  model_value = 1.4124892488220628\n  best_value = 1.4124892488220628\n\n  [fit_insights.variables.pseudovoigt_center_3]\n  init_value = 5473\n  model_value = 5475.767047063245\n  best_value = 5475.767047063245\n\n  [fit_insights.variables.pseudovoigt_fwhmg_3]\n  init_value = 1\n  model_value = 0.10000000837664919\n  best_value = 0.10000000837664919\n\n  [fit_insights.variables.pseudovoigt_fwhml_3]\n  init_value = 1\n  model_value = 3.7499977334701127\n  best_value = 3.7499977334701127\n\n  [fit_insights.variables.gaussian_amplitude_4]\n  init_value = 3\n  model_value = 0.6090009741875487\n  best_value = 0.6090009741875487\n\n  [fit_insights.variables.gaussian_center_4]\n  init_value = 5478\n  model_value = 5477.92439530641\n  best_value = 5477.92439530641\n\n  [fit_insights.variables.gaussian_fwhmg_4]\n  init_value = 1\n  model_value = 2.5805286730950385\n  best_value = 2.5805286730950385\n\n  [fit_insights.variables.gaussian_amplitude_5]\n  init_value = 4\n  model_value = 3.2112928728775594\n  best_value = 3.2112928728775594\n\n  [fit_insights.variables.gaussian_center_5]\n  init_value = 5483\n  model_value = 5481.724992617458\n  best_value = 5481.724992617458\n\n  [fit_insights.variables.gaussian_fwhmg_5]\n  init_value = 3\n  model_value = 4.1240411794396445\n  best_value = 4.1240411794396445\n\n  [fit_insights.variables.gaussian_amplitude_6]\n  init_value = 4\n  model_value = 1.2428818045605532\n  best_value = 1.2428818045605532\n\n  [fit_insights.variables.gaussian_center_6]\n  init_value = 5494\n  model_value = 5493.950495823278\n  best_value = 5493.950495823278\n\n  [fit_insights.variables.gaussian_fwhmg_6]\n  init_value = 3\n  model_value = 4.749999999999982\n  best_value = 4.749999999999982\n\n  [fit_insights.variables.atan_amplitude_7]\n  init_value = 1\n  model_value = 1.0784237600535795\n  best_value = 1.0784237600535795\n\n  [fit_insights.variables.atan_center_7]\n  init_value = 5483\n  model_value = 5483.0\n  best_value = 5483.0\n\n  [fit_insights.variables.atan_sigma_7]\n  init_value = 0.01\n  model_value = 0.7490707110057951\n  best_value = 0.7490707110057951\n\n  [fit_insights.correlations.pseudovoigt_amplitude_1]\n\n  [fit_insights.correlations.pseudovoigt_center_1]\n\n  [fit_insights.correlations.pseudovoigt_fwhmg_1]\n\n  [fit_insights.correlations.pseudovoigt_fwhml_1]\n\n  [fit_insights.correlations.pseudovoigt_amplitude_2]\n\n  [fit_insights.correlations.pseudovoigt_center_2]\n\n  [fit_insights.correlations.pseudovoigt_fwhmg_2]\n\n  [fit_insights.correlations.pseudovoigt_fwhml_2]\n\n  [fit_insights.correlations.pseudovoigt_amplitude_3]\n\n  [fit_insights.correlations.pseudovoigt_center_3]\n\n  [fit_insights.correlations.pseudovoigt_fwhmg_3]\n\n  [fit_insights.correlations.pseudovoigt_fwhml_3]\n\n  [fit_insights.correlations.gaussian_amplitude_4]\n\n  [fit_insights.correlations.gaussian_center_4]\n\n  [fit_insights.correlations.gaussian_fwhmg_4]\n\n  [fit_insights.correlations.gaussian_amplitude_5]\n\n  [fit_insights.correlations.gaussian_center_5]\n\n  [fit_insights.correlations.gaussian_fwhmg_5]\n\n  [fit_insights.correlations.gaussian_amplitude_6]\n\n  [fit_insights.correlations.gaussian_center_6]\n\n  [fit_insights.correlations.gaussian_fwhmg_6]\n\n  [fit_insights.correlations.atan_amplitude_7]\n\n  [fit_insights.correlations.atan_center_7]\n\n  [fit_insights.correlations.atan_sigma_7]\n\n  [peaks.1.pseudovoigt.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 1\n\n  [peaks.1.pseudovoigt.center]\n  max = 5470\n  min = 5460\n  vary = true\n  value = 5468\n\n  [peaks.1.pseudovoigt.fwhmg]\n  max = 2.75\n  min = 0.001\n  vary = true\n  value = 1.0\n\n  [peaks.1.pseudovoigt.fwhml]\n  max = 2.75\n  min = 0.001\n  vary = true\n  value = 1.0\n\n  [peaks.2.pseudovoigt.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 1\n\n  [peaks.2.pseudovoigt.center]\n  max = 5470\n  min = 5465\n  vary = true\n  value = 5469\n\n  [peaks.2.pseudovoigt.fwhmg]\n  max = 2.75\n  min = 0.001\n  vary = true\n  value = 1.0\n\n  [peaks.2.pseudovoigt.fwhml]\n  max = 2.75\n  min = 0.001\n  vary = true\n  value = 1.0\n\n  [peaks.3.pseudovoigt.amplitude]\n  max = 4\n  min = 0\n  vary = true\n  value = 1\n\n  [peaks.3.pseudovoigt.center]\n  max = 5480\n  min = 5470\n  vary = true\n  value = 5473\n\n  [peaks.3.pseudovoigt.fwhmg]\n  max = 3.75\n  min = 0.1\n  vary = true\n  value = 1\n\n  [peaks.3.pseudovoigt.fwhml]\n  max = 3.75\n  min = 0.1\n  vary = true\n  value = 1\n\n  [peaks.4.gaussian.amplitude]\n  max = 10\n  min = 0.1\n  vary = true\n  value = 3\n\n  [peaks.4.gaussian.center]\n  max = 5485\n  min = 5475\n  vary = true\n  value = 5478\n\n  [peaks.4.gaussian.fwhmg]\n  max = 4\n  min = 0.1\n  vary = true\n  value = 1\n\n  [peaks.5.gaussian.amplitude]\n  max = 10\n  min = 0.1\n  vary = true\n  value = 4\n\n  [peaks.5.gaussian.center]\n  max = 5498\n  min = 5480\n  vary = true\n  value = 5483\n\n  [peaks.5.gaussian.fwhmg]\n  max = 4.75\n  min = 0.1\n  vary = true\n  value = 3\n\n  [peaks.6.gaussian.amplitude]\n  max = 10\n  min = 0.1\n  vary = true\n  value = 4\n\n  [peaks.6.gaussian.center]\n  max = 5498\n  min = 5493\n  vary = true\n  value = 5494\n\n  [peaks.6.gaussian.fwhmg]\n  max = 4.75\n  min = 0.1\n  vary = true\n  value = 3\n\n  [peaks.7.atan.amplitude]\n  max = 5\n  min = 0\n  vary = true\n  value = 1\n\n  [peaks.7.atan.center]\n  max = 5500\n  min = 5483\n  vary = true\n  value = 5481\n\n  [peaks.7.atan.sigma]\n  max = 0.75\n  min = 0.001\n  vary = true\n  value = 0.01\n</code></pre>"},{"location":"plugins/jupyter_interface/","title":"Jupyter-Notebook-Integration","text":"<p>About the new Jupyter Notebook-Interface</p> <p>The Jupyter Notebook-Interface is a new interface for the <code>SpectraFit</code> for faster and more convenient usage. It is still in development and not all features are implemented yet. If you have any questions or suggestions, feel free to contact us.</p> <p>One of the main advantages of the Jupyter Notebook-Interface is that it allows you to use the <code>SpectraFit</code> in a more interactive way. You can directly see the results of your fitting, while changing the parameters. This is especially useful for the fitting of spectra with many parameters, where it is hard to keep track of the changes in the parameters.</p> <p>Also by using the Plotly library, the plots are interactive. You can zoom in and out, change the axis, and even save the plots as a <code>.png</code> file.</p> <p>By working in JupyterLab, VSCode, or PyCharms, the usage of the Git versionising system is very easy. You can easily track your changes and revert them if you made a mistake. Final results can be merged into the <code>main</code> or <code>release</code> branch, so that the data are available for everyone and ready to be published.</p> <pre><code>   gitGraph\n    commit\n    commit\n    branch develop\n    commit\n    commit\n    checkout main\n    commit\n    commit\n    checkout develop\n    commit\n    commit\n    merge main\n    commit\n    checkout main\n    commit\n    branch release\n    commit</code></pre> <p>Finally, the Jupyter Notebook-Interface is a good starting point for developing your own fitting routines. You can easily change the fitting routine and add your own functions.</p>"},{"location":"plugins/jupyter_interface/#dataflow","title":"DataFlow","text":"<p>The interface is divided into four sections:</p> <ol> <li>Input: Data, Model, and Method</li> <li>Fitting: Solving and Statistic of the Model</li> <li>Fitting: Plotting and Display of Data</li> <li>Export: Save the Fitting and Statistic Results</li> </ol> <p>Overview of the data flow in SpectraFit Jupyter Notebook Interface</p> <pre><code>flowchart LR\n    subgraph DataModel\n    Dictionary\n    DataFrame\n    end\n\n    subgraph Input\n    Model --&gt; Dictionary\n    Method --&gt; Dictionary\n    Data --&gt; DataFrame\n    end\n\n    subgraph Fitting\n    DataFrame --&gt; Statistics --&gt; DataFrame\n    Dictionary --&gt; Statistics --&gt; Dictionary\n    DataFrame --&gt; Solver --&gt; DataFrame\n    Dictionary --&gt; Solver --&gt; Dictionary\n    end\n\n    subgraph Visualization\n    DataFrame --&gt; Display\n    Dictionary --&gt; Display\n    DataFrame --&gt; Plot\n    end\n\n    subgraph Exporting\n    DataFrame --&gt; CSV\n    DataFrame --&gt; TOML\n    Dictionary --&gt; TOML\n    end\n    Input --&gt; Fitting\n    Fitting --&gt; Visualization\n    Input --&gt; Exporting\n    Fitting --&gt; Exporting</code></pre> <p>In summary, <code>SpectraFit</code> works with two types of data structures: <code>DataFrame</code> and <code>Dictionary</code>. The <code>DataFrame</code> is used to store the data and the fit results. The <code>Dictionary</code> is used to store the model and method. The <code>DataFrame</code> is used to display the results and the <code>Dictionary</code> is used to export the results.</p>"},{"location":"plugins/jupyter_interface/#input-parameter-model","title":"Input Parameter Model","text":"<p>For the easiere usage of the <code>SpectraFit</code> the intial model is now defined as a <code>List</code> of <code>Dict</code> objects. While every <code>Dict</code> object represents:</p> <ol> <li>The name of the model like <code>Gaussian</code> or <code>Lorentzian</code> or so on.</li> <li>The parameters of the model with their initial values and bounds as a <code>Dict</code>    object.</li> </ol> <p>Example of an Initial-Parameter-Model</p> Python<pre><code>model = [\n    {\n        \"pseudovoigt\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 0},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n            \"fwhml\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n    {\n        \"gaussian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 1},\n            \"fwhmg\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n    {\n        \"lorentzian\": {\n            \"amplitude\": {\"max\": 2, \"min\": 0, \"vary\": True, \"value\": 1},\n            \"center\": {\"max\": 2, \"min\": -2, \"vary\": True, \"value\": 1},\n            \"fwhml\": {\"max\": 0.4, \"min\": 0.1, \"vary\": True, \"value\": 0.21},\n        }\n    },\n]\n</code></pre>"},{"location":"plugins/jupyter_interface/#the-spectrafitnotebook-class","title":"The SpectraFitNotebook Class","text":"<p>For running the <code>SpectraFit</code> in the Jupyter Notebook-Interface, the <code>SpectraFitNotebook</code> class is used. It is a new module, which is part of the <code>SpectraFit</code> plugins. All important settings are defined in the <code>__init__</code> method of the class.</p> <p>The initial parameter model of the section Input Parameter Model is used in the function call of the <code>SpectraFitNotebook</code> class.</p>"},{"location":"plugins/jupyter_interface/#spectrafit.plugins.notebook.SpectraFitNotebook","title":"<code>spectrafit.plugins.notebook.SpectraFitNotebook</code>","text":"<p>               Bases: <code>DataFramePlot</code>, <code>DataFrameDisplay</code>, <code>ExportResults</code></p> <p>Jupyter Notebook plugin for SpectraFit.</p>"},{"location":"plugins/jupyter_interface/#spectrafit.plugins.notebook.SpectraFitNotebook.__init__","title":"<code>__init__</code>","text":"<p>Initialize the SpectraFitNotebook class.</p> <p>About <code>Pydantic</code>-Definition</p> <p>For being consistent with the <code>SpectraFit</code> class, the <code>SpectraFitNotebook</code> class refers to the <code>Pydantic</code>-Definition of the <code>SpectraFit</code> class. Currently, the following definitions are used:</p> <ul> <li><code>XAxisAPI</code>: Definition of the x-axis including units</li> <li><code>YAxisAPI</code>: Definition of the y-axis including units</li> <li><code>ResidualAPI</code>: Definition of the residual including units</li> <li><code>LegendAPI</code>: Definition of the legend according to <code>Plotly</code></li> <li><code>FontAPI</code>: Definition of the font according to <code>Plotly</code>, which can be     replaced by built-in definitions</li> <li><code>ColorAPI</code>: Definition of the colors according to <code>Plotly</code>, which can be     replace by built-in definitions</li> <li><code>GridAPI</code>: Definition of the grid according to <code>Plotly</code></li> <li><code>DescriptionAPI</code>: Definition of the description of the fit project</li> </ul> <p>All classes can be replaced by the corresponding <code>dict</code>-definition.</p> Python<pre><code>LegendAPI(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>can be also</p> Python<pre><code>dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe with the data to fit.</p> required <code>x_column</code> <code>str</code> <p>Name of the x column.</p> required <code>y_column</code> <code>Union[str, List[str]]</code> <p>Name of the y column(s).</p> required <code>oversampling</code> <code>bool</code> <p>Activate the oversampling options.  Defaults to False.</p> <code>False</code> <code>smooth</code> <code>int</code> <p>Activate the smoothing functions setting an  <code>int&gt;0</code>. Defaults to 0.</p> <code>0</code> <code>shift</code> <code>float</code> <p>Apply shift to the x-column. Defaults to 0.</p> <code>0</code> <code>energy_start</code> <code>Optional[float]</code> <p>Energy start. Defaults to None.</p> <code>None</code> <code>energy_stop</code> <code>Optional[float]</code> <p>Energy stop. Defaults to None.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Plot title. Defaults to None.</p> <code>None</code> <code>xaxis_title</code> <code>XAxisAPI</code> <p>X-Axis title. Defaults to XAxisAPI().</p> <code>XAxisAPI(name='Energy', unit='eV')</code> <code>yaxis_title</code> <code>YAxisAPI</code> <p>Y-Axis title. Defaults to YAxisAPI().</p> <code>YAxisAPI(name='Intensity', unit='a.u.')</code> <code>residual_title</code> <code>ResidualAPI</code> <p>Residual title. Defaults to  ResidualAPI().</p> <code>ResidualAPI(name='Residual', unit='a.u.')</code> <code>metric_title</code> <code>MetricAPI</code> <p>Metric title for both axes, bar and  line plot. Defaults to MetricAPI().</p> <code>MetricAPI(name_0='Metrics', unit_0='a.u.', name_1='Metrics', unit_1='a.u.')</code> <code>run_title</code> <code>RunAPI</code> <p>Run title. Defaults to RunAPI().</p> <code>RunAPI(name='Run', unit='#')</code> <code>legend_title</code> <code>str</code> <p>Legend title. Defaults to \"Spectra\".</p> <code>'Spectra'</code> <code>show_legend</code> <code>bool</code> <p>Show legend. Defaults to True.</p> <code>True</code> <code>legend</code> <code>LegendAPI</code> <p>Legend options. Defaults to LegendAPI().</p> <code>LegendAPI(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)</code> <code>font</code> <code>FontAPI</code> <p>Font options. Defaults to FontAPI().</p> <code>FontAPI(family='Open Sans, monospace', size=12, color='black')</code> <code>minor_ticks</code> <code>bool</code> <p>Show minor ticks. Defaults to True.</p> <code>True</code> <code>color</code> <code>ColorAPI</code> <p>Color options. Defaults to ColorAPI().</p> <code>ColorAPI()</code> <code>grid</code> <code>GridAPI</code> <p>Grid options. Defaults to GridAPI().</p> <code>GridAPI()</code> <code>size</code> <code>Tuple[int, Tuple[int, int]]</code> <p>Size of the fit- and metric-  plot. First width defines the fit, the second the metrics.  Defaults to (800, (600,300)).</p> <code>(800, (600, 300))</code> <code>fname</code> <code>str</code> <p>Filename of the export. Defaults to \"results\".</p> <code>'results'</code> <code>folder</code> <code>Optional[str]</code> <p>Folder of the export. Defaults to None.</p> <code>None</code> <code>description</code> <code>DescriptionAPI</code> <p>Description of the data. Defaults  to DescriptionAPI()..</p> <code>DescriptionAPI()</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the dataframe only contains one column.</p>"},{"location":"plugins/jupyter_interface/#spectrafit.plugins.notebook.SpectraFitNotebook","title":"<code>spectrafit.plugins.notebook.SpectraFitNotebook</code>","text":"<p>               Bases: <code>DataFramePlot</code>, <code>DataFrameDisplay</code>, <code>ExportResults</code></p> <p>Jupyter Notebook plugin for SpectraFit.</p>"},{"location":"plugins/jupyter_interface/#spectrafit.plugins.notebook.SpectraFitNotebook.__init__","title":"<code>__init__</code>","text":"<p>Initialize the SpectraFitNotebook class.</p> <p>About <code>Pydantic</code>-Definition</p> <p>For being consistent with the <code>SpectraFit</code> class, the <code>SpectraFitNotebook</code> class refers to the <code>Pydantic</code>-Definition of the <code>SpectraFit</code> class. Currently, the following definitions are used:</p> <ul> <li><code>XAxisAPI</code>: Definition of the x-axis including units</li> <li><code>YAxisAPI</code>: Definition of the y-axis including units</li> <li><code>ResidualAPI</code>: Definition of the residual including units</li> <li><code>LegendAPI</code>: Definition of the legend according to <code>Plotly</code></li> <li><code>FontAPI</code>: Definition of the font according to <code>Plotly</code>, which can be     replaced by built-in definitions</li> <li><code>ColorAPI</code>: Definition of the colors according to <code>Plotly</code>, which can be     replace by built-in definitions</li> <li><code>GridAPI</code>: Definition of the grid according to <code>Plotly</code></li> <li><code>DescriptionAPI</code>: Definition of the description of the fit project</li> </ul> <p>All classes can be replaced by the corresponding <code>dict</code>-definition.</p> Python<pre><code>LegendAPI(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>can be also</p> Python<pre><code>dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>Dataframe with the data to fit.</p> required <code>x_column</code> <code>str</code> <p>Name of the x column.</p> required <code>y_column</code> <code>Union[str, List[str]]</code> <p>Name of the y column(s).</p> required <code>oversampling</code> <code>bool</code> <p>Activate the oversampling options.  Defaults to False.</p> <code>False</code> <code>smooth</code> <code>int</code> <p>Activate the smoothing functions setting an  <code>int&gt;0</code>. Defaults to 0.</p> <code>0</code> <code>shift</code> <code>float</code> <p>Apply shift to the x-column. Defaults to 0.</p> <code>0</code> <code>energy_start</code> <code>Optional[float]</code> <p>Energy start. Defaults to None.</p> <code>None</code> <code>energy_stop</code> <code>Optional[float]</code> <p>Energy stop. Defaults to None.</p> <code>None</code> <code>title</code> <code>Optional[str]</code> <p>Plot title. Defaults to None.</p> <code>None</code> <code>xaxis_title</code> <code>XAxisAPI</code> <p>X-Axis title. Defaults to XAxisAPI().</p> <code>XAxisAPI(name='Energy', unit='eV')</code> <code>yaxis_title</code> <code>YAxisAPI</code> <p>Y-Axis title. Defaults to YAxisAPI().</p> <code>YAxisAPI(name='Intensity', unit='a.u.')</code> <code>residual_title</code> <code>ResidualAPI</code> <p>Residual title. Defaults to  ResidualAPI().</p> <code>ResidualAPI(name='Residual', unit='a.u.')</code> <code>metric_title</code> <code>MetricAPI</code> <p>Metric title for both axes, bar and  line plot. Defaults to MetricAPI().</p> <code>MetricAPI(name_0='Metrics', unit_0='a.u.', name_1='Metrics', unit_1='a.u.')</code> <code>run_title</code> <code>RunAPI</code> <p>Run title. Defaults to RunAPI().</p> <code>RunAPI(name='Run', unit='#')</code> <code>legend_title</code> <code>str</code> <p>Legend title. Defaults to \"Spectra\".</p> <code>'Spectra'</code> <code>show_legend</code> <code>bool</code> <p>Show legend. Defaults to True.</p> <code>True</code> <code>legend</code> <code>LegendAPI</code> <p>Legend options. Defaults to LegendAPI().</p> <code>LegendAPI(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1)</code> <code>font</code> <code>FontAPI</code> <p>Font options. Defaults to FontAPI().</p> <code>FontAPI(family='Open Sans, monospace', size=12, color='black')</code> <code>minor_ticks</code> <code>bool</code> <p>Show minor ticks. Defaults to True.</p> <code>True</code> <code>color</code> <code>ColorAPI</code> <p>Color options. Defaults to ColorAPI().</p> <code>ColorAPI()</code> <code>grid</code> <code>GridAPI</code> <p>Grid options. Defaults to GridAPI().</p> <code>GridAPI()</code> <code>size</code> <code>Tuple[int, Tuple[int, int]]</code> <p>Size of the fit- and metric-  plot. First width defines the fit, the second the metrics.  Defaults to (800, (600,300)).</p> <code>(800, (600, 300))</code> <code>fname</code> <code>str</code> <p>Filename of the export. Defaults to \"results\".</p> <code>'results'</code> <code>folder</code> <code>Optional[str]</code> <p>Folder of the export. Defaults to None.</p> <code>None</code> <code>description</code> <code>DescriptionAPI</code> <p>Description of the data. Defaults  to DescriptionAPI()..</p> <code>DescriptionAPI()</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the dataframe only contains one column.</p>"},{"location":"plugins/jupyter_interface/#output","title":"Output","text":"<p>The output file of the SpectraFit Jupyter interface is a <code>toml</code> file that consists of the three Input, Model, and Output sections. The reason of using <code>toml</code> is that it is a human-readable format that is easy to edit and can be still used as a basis for exporting (parts of) the data to a NoSql and Graph databases.</p> <p>The details of the Input and Model, and Output sections are shown below.</p> <pre><code>flowchart TB\n\n    subgraph Input\n    InitialModel\n    Method\n    Description\n    end\n\n    subgraph Model\n    Statistic --&gt; Descriptive\n    Statistic --&gt; GoodnessOfFit\n    Statistic --&gt; Regression\n    Statistic --&gt; ConfidenceInterval\n    Statistic --&gt; Correlation\n    Fit --&gt; Statistic\n    Variable --&gt; Fit\n    Variable --&gt; Names\n    Variable --&gt; InitialValues\n    Variable --&gt; Error\n    Variable --&gt; FinalValues\n    Variable --&gt; Statistic\n    end\n\n    subgraph Output\n    OriginalData\n    FittedData\n    end\n\n    Input --&gt; Model\n    Model --&gt; Output</code></pre> <p>The output file itself is as <code>.lock</code> file by default. This is to prevent accidental overwriting of the input file. The <code>.lock</code>-suffix can be replaced.</p> About the <code>.lock</code>-output file <p>The output file is a <code>.lock</code> file by default. This is to prevent accidental overwriting of the input file. The <code>.lock</code>-suffix can be replaced.</p> <p>The output files contains as shown above the Input, Model, and Output. Most kind of results are stored in a way that they can be easily imported to <code>pandas.DataFrame</code> or <code>pandas.Series</code> objects. The Input and Model are stored in a <code>Dictionary</code> object. The Output is stored in a dictionary way compatiable to <code>pandas.DataFrame</code>.</p> TOML<pre><code>    [input.description]\n    project_name = \"FittingProject\"\n    project_details = \"Fitting Project via SpectraFit v0.12.0b0\"\n    keywords = [\n        \"spectra\",\n    ]\n    authors = [\n        \"authors\",\n    ]\n    references = [\n        \"https://github.com/Anselmoo/spectrafit\",\n    ]\n    version = \"0.12.0b0\"\n    host_info = \"vscode@codespaces-c3ab6e\"\n    timestamp = \"2022-10-05 18:29:35\"\n    id_ = \"563e6d71-d872-4e63-85aa-6780a4fd8cb0\"\n\n    [input.credits]\n    dtale = \"dtale v2.8.1\"\n    emcee = \"emcee v3.1.3\"\n    itables = \"itables v1.3.0\"\n    lmfit = \"lmfit v1.0.3\"\n    numdifftools = \"numdifftools v0.9.40\"\n    numpy = \"numpy v1.21.6\"\n    pandas = \"pandas v1.3.5\"\n    plotly = \"plotly v5.10.0\"\n    pydantic = \"pydantic v1.10.2\"\n    scipy = \"scipy v1.9.1\"\n    sklearn = \"sklearn v1.0.2\"\n    statsmodels = \"statsmodels v0.13.1\"\n\n    [[input.initial_model]]\n\n    [input.initial_model.pseudovoigt.amplitude]\n    max = 2\n    min = 0\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.center]\n    max = 2\n    min = -2\n    vary = true\n    value = 0\n\n    [input.initial_model.pseudovoigt.fwhmg]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [input.initial_model.pseudovoigt.fwhml]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [[input.initial_model]]\n\n    [input.initial_model.pseudovoigt.amplitude]\n    max = 2\n    min = 0\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.center]\n    max = 2\n    min = -2\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.fwhmg]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [input.initial_model.pseudovoigt.fwhml]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [[input.initial_model]]\n\n    [input.initial_model.pseudovoigt.amplitude]\n    max = 2\n    min = 0\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.center]\n    max = 2\n    min = -2\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.fwhmg]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [input.initial_model.pseudovoigt.fwhml]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [[input.initial_model]]\n\n    [input.initial_model.pseudovoigt.amplitude]\n    max = 2\n    min = 0\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.center]\n    max = 2\n    min = -2\n    vary = true\n    value = 1\n\n    [input.initial_model.pseudovoigt.fwhmg]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [input.initial_model.pseudovoigt.fwhml]\n    max = 0.4\n    min = 0.1\n    vary = true\n    value = 0.21\n\n    [input.method]\n    global_fitting = false\n\n    [input.method.confidence_interval]\n    trace = true\n    maxiter = 200\n    verbose = false\n\n    [input.method.configurations]\n    fitting_method = \"leastsq\"\n    function_evals = 1000\n    data_points = 611\n    variable_names = [\n        \"pseudovoigt_amplitude_1\",\n        \"pseudovoigt_center_1\",\n        \"pseudovoigt_fwhmg_1\",\n        \"pseudovoigt_fwhml_1\",\n        \"pseudovoigt_amplitude_2\",\n        \"pseudovoigt_center_2\",\n        \"pseudovoigt_fwhmg_2\",\n        \"pseudovoigt_fwhml_2\",\n        \"pseudovoigt_amplitude_3\",\n        \"pseudovoigt_center_3\",\n        \"pseudovoigt_fwhmg_3\",\n        \"pseudovoigt_fwhml_3\",\n        \"pseudovoigt_amplitude_4\",\n        \"pseudovoigt_center_4\",\n        \"pseudovoigt_fwhmg_4\",\n        \"pseudovoigt_fwhml_4\",\n    ]\n    variable_numbers = 16\n    degree_of_freedom = 595\n\n    [input.pre_processing]\n    oversampling = false\n    smooth = 0\n    shift = 0.0\n    column = [\n        \"Energy\",\n        \"Noisy\",\n    ]\n\n    [solver.goodness_of_fit]\n    chi_square = 4.164347734430647\n    reduced_chi_square = 0.006998903755345625\n    akaike_information = -3015.9962916417835\n    bayesian_information = -2945.354740295038\n\n    [solver.regression_metrics]\n    index = [\n        \"explained_variance_score\",\n        \"r2_score\",\n        \"max_error\",\n        \"mean_absolute_error\",\n        \"mean_squared_error\",\n        \"mean_squared_log_error\",\n        \"median_absolute_error\",\n        \"mean_absolute_percentage_error\",\n        \"mean_poisson_deviance\",\n    ]\n    columns = [\n        0,\n    ]\n    data = [\n        [\n            0.7553892518876041,\n        ],\n        [\n            0.5663096593237575,\n        ],\n        [\n            0.2460985591365594,\n        ],\n        [\n            0.0646833180035097,\n        ],\n        [\n            0.006815626406596804,\n        ],\n        [\n            0.005797545462567391,\n        ],\n        [\n            0.054551744944657365,\n        ],\n        [\n            0.7627825488327861,\n        ],\n        [\n            0.2799898418525389,\n        ],\n    ]\n\n    [solver.descriptive_statistic]\n    index = [\n        \"count\",\n        \"mean\",\n        \"std\",\n        \"min\",\n        \"10%\",\n        \"20%\",\n        \"30%\",\n        \"40%\",\n        \"50%\",\n        \"60%\",\n        \"70%\",\n        \"80%\",\n        \"90%\",\n        \"max\",\n    ]\n    columns = [\n        \"energy\",\n        \"intensity\",\n        \"residual\",\n        \"fit\",\n        \"pseudovoigt_1\",\n        \"pseudovoigt_2\",\n        \"pseudovoigt_3\",\n        \"pseudovoigt_4\",\n    ]\n    data = [\n        [\n            611.0,\n            611.0,\n            611.0,\n            611.0,\n            611.0,\n            611.0,\n            611.0,\n            611.0,\n        ],\n        [\n            3.483333333333315,\n            0.1089010061672899,\n            -0.05451114979188872,\n            0.054389856375401176,\n            0.03667155501796126,\n            0.0027639192027055803,\n            0.013720675362421633,\n            0.001233706792312711,\n        ],\n        [\n            2.942079763251376,\n            0.12546387631757053,\n            0.06205209793526671,\n            0.1335303362111678,\n            0.12894352693788264,\n            0.008020005135597976,\n            0.03966674162573049,\n            0.003992524046788557,\n        ],\n        [\n            -1.6,\n            0.0003137504328578,\n            -0.2460985591365594,\n            0.0004650535623091784,\n            0.00023252595124947988,\n            3.192064158401232e-05,\n            0.00019178726297311872,\n            8.819706502565889e-06,\n        ],\n        [\n            -0.5833333333333369,\n            0.0235251449314025,\n            -0.14035295185196303,\n            0.0006196763016876258,\n            0.0002994922168346505,\n            4.28206657130505e-05,\n            0.00026581372606550475,\n            1.1549693074419566e-05,\n        ],\n        [\n            0.433333333333326,\n            0.0388054517326814,\n            -0.09311507189031785,\n            0.0008690419617321671,\n            0.0004001694321509918,\n            6.042686691053815e-05,\n            0.0003926710115436084,\n            1.5774651127030743e-05,\n        ],\n        [\n            1.4499999999999895,\n            0.051368596301534016,\n            -0.0787588361158717,\n            0.001313850287334162,\n            0.0005616510506130301,\n            9.161828724547808e-05,\n            0.0006377571048935076,\n            2.28238445821406e-05,\n        ],\n        [\n            2.466666666666652,\n            0.0686872585644631,\n            -0.06635925788964464,\n            0.002246442705679176,\n            0.0008449119788229013,\n            0.0001550153496099832,\n            0.0009318091779556716,\n            3.591265321638052e-05,\n        ],\n        [\n            3.483333333333315,\n            0.0829227048708064,\n            -0.049563604211037116,\n            0.004910698918660611,\n            0.0014120057370704852,\n            0.00027068774018755966,\n            0.0013399690804049827,\n            6.456871310826007e-05,\n        ],\n        [\n            4.499999999999979,\n            0.0939886519565868,\n            -0.03571705012202201,\n            0.01158290567849847,\n            0.002821380075303725,\n            0.00042186833534211437,\n            0.002082136465727273,\n            0.00013659146886625366,\n        ],\n        [\n            5.516666666666641,\n            0.1143602814641988,\n            -0.021285832104862984,\n            0.03256935845763962,\n            0.0071649881158480375,\n            0.0007418487540351618,\n            0.0036754599513524624,\n            0.0002411645349209166,\n        ],\n        [\n            6.533333333333305,\n            0.1490857763035889,\n            -0.007265231109661655,\n            0.06853312977663563,\n            0.01608220890188118,\n            0.0016355323317059902,\n            0.008059542423402248,\n            0.0005295912094745145,\n        ],\n        [\n            7.549999999999968,\n            0.197732190698215,\n            0.015918317627455214,\n            0.13823676316551498,\n            0.058683623128146116,\n            0.00581818547215741,\n            0.028927235998738796,\n            0.0019327288393546644,\n        ],\n        [\n            8.566666666666633,\n            1.0900891532152457,\n            0.15268182236055508,\n            1.0230770898987258,\n            1.0169916441709592,\n            0.05608049958005394,\n            0.2772205788359086,\n            0.02507029850930853,\n        ],\n    ]\n\n    [solver.linear_correlation]\n    index = [\n        \"energy\",\n        \"intensity\",\n        \"residual\",\n        \"fit\",\n        \"pseudovoigt_1\",\n        \"pseudovoigt_2\",\n        \"pseudovoigt_3\",\n        \"pseudovoigt_4\",\n    ]\n    columns = [\n        \"energy\",\n        \"intensity\",\n        \"residual\",\n        \"fit\",\n        \"pseudovoigt_1\",\n        \"pseudovoigt_2\",\n        \"pseudovoigt_3\",\n        \"pseudovoigt_4\",\n    ]\n    data = [\n        [\n            1.0,\n            -0.32244413211484907,\n            -0.20677118395191862,\n            -0.3990529641406147,\n            -0.3283812581539729,\n            -0.2687520510764311,\n            -0.19071561341132515,\n            -0.30621708366538997,\n        ],\n        [\n            -0.32244413211484907,\n            1.0,\n            -0.11311684633334855,\n            0.8870249416840682,\n            0.8876757799545638,\n            -0.05709181656165402,\n            0.10512303449030673,\n            0.06829796311246134,\n        ],\n        [\n            -0.20677118395191862,\n            -0.11311684633334855,\n            1.0,\n            0.3584205752450066,\n            0.25021824277986177,\n            0.3028581623822061,\n            0.30459537044142776,\n            0.27169963140154535,\n        ],\n        [\n            -0.3990529641406147,\n            0.8870249416840682,\n            0.3584205752450066,\n            1.0,\n            0.9503294515173665,\n            0.08709649111050574,\n            0.24031936161631579,\n            0.19043207749567295,\n        ],\n        [\n            -0.3283812581539729,\n            0.8876757799545638,\n            0.25021824277986177,\n            0.9503294515173665,\n            1.0,\n            -0.015915302090034483,\n            -0.06550302353306325,\n            0.17037256164805303,\n        ],\n        [\n            -0.2687520510764311,\n            -0.05709181656165402,\n            0.3028581623822061,\n            0.08709649111050574,\n            -0.015915302090034483,\n            1.0,\n            0.12891390163599475,\n            0.13740665162759358,\n        ],\n        [\n            -0.19071561341132515,\n            0.10512303449030673,\n            0.30459537044142776,\n            0.24031936161631579,\n            -0.06550302353306325,\n            0.12891390163599475,\n            1.0,\n            -0.04120594963112317,\n        ],\n        [\n            -0.30621708366538997,\n            0.06829796311246134,\n            0.27169963140154535,\n            0.19043207749567295,\n            0.17037256164805303,\n            0.13740665162759358,\n            -0.04120594963112317,\n            1.0,\n        ],\n    ]\n\n    [solver.component_correlation.pseudovoigt_amplitude_1]\n\n    [solver.component_correlation.pseudovoigt_center_1]\n\n    [solver.component_correlation.pseudovoigt_fwhmg_1]\n\n    [solver.component_correlation.pseudovoigt_fwhml_1]\n\n    [solver.component_correlation.pseudovoigt_amplitude_2]\n\n    [solver.component_correlation.pseudovoigt_center_2]\n\n    [solver.component_correlation.pseudovoigt_fwhmg_2]\n\n    [solver.component_correlation.pseudovoigt_fwhml_2]\n\n    [solver.component_correlation.pseudovoigt_amplitude_3]\n\n    [solver.component_correlation.pseudovoigt_center_3]\n\n    [solver.component_correlation.pseudovoigt_fwhmg_3]\n\n    [solver.component_correlation.pseudovoigt_fwhml_3]\n\n    [solver.component_correlation.pseudovoigt_amplitude_4]\n\n    [solver.component_correlation.pseudovoigt_center_4]\n\n    [solver.component_correlation.pseudovoigt_fwhmg_4]\n\n    [solver.component_correlation.pseudovoigt_fwhml_4]\n\n    [solver.confidence_interval]\n\n    [solver.covariance_matrix.pseudovoigt_amplitude_1]\n\n    [solver.covariance_matrix.pseudovoigt_center_1]\n\n    [solver.covariance_matrix.pseudovoigt_fwhmg_1]\n\n    [solver.covariance_matrix.pseudovoigt_fwhml_1]\n\n    [solver.covariance_matrix.pseudovoigt_amplitude_2]\n\n    [solver.covariance_matrix.pseudovoigt_center_2]\n\n    [solver.covariance_matrix.pseudovoigt_fwhmg_2]\n\n    [solver.covariance_matrix.pseudovoigt_fwhml_2]\n\n    [solver.covariance_matrix.pseudovoigt_amplitude_3]\n\n    [solver.covariance_matrix.pseudovoigt_center_3]\n\n    [solver.covariance_matrix.pseudovoigt_fwhmg_3]\n\n    [solver.covariance_matrix.pseudovoigt_fwhml_3]\n\n    [solver.covariance_matrix.pseudovoigt_amplitude_4]\n\n    [solver.covariance_matrix.pseudovoigt_center_4]\n\n    [solver.covariance_matrix.pseudovoigt_fwhmg_4]\n\n    [solver.covariance_matrix.pseudovoigt_fwhml_4]\n\n    [solver.variables.pseudovoigt_amplitude_1]\n    init_value = 1\n    model_value = 0.3858612604513847\n    best_value = 0.3858612604513847\n\n    [solver.variables.pseudovoigt_center_1]\n    init_value = 0\n    model_value = 0.016363267663787262\n    best_value = 0.016363267663787262\n\n    [solver.variables.pseudovoigt_fwhmg_1]\n    init_value = 0.21\n    model_value = 0.11545295484282288\n    best_value = 0.11545295484282288\n\n    [solver.variables.pseudovoigt_fwhml_1]\n    init_value = 0.21\n    model_value = 0.3042369545159014\n    best_value = 0.3042369545159014\n\n    [solver.variables.pseudovoigt_amplitude_2]\n    init_value = 1\n    model_value = 0.029027081908320707\n    best_value = 0.029027081908320707\n\n    [solver.variables.pseudovoigt_center_2]\n    init_value = 1\n    model_value = 1.1301324587722235\n    best_value = 1.1301324587722235\n\n    [solver.variables.pseudovoigt_fwhmg_2]\n    init_value = 0.21\n    model_value = 0.10000041080399755\n    best_value = 0.10000041080399755\n\n    [solver.variables.pseudovoigt_fwhml_2]\n    init_value = 0.21\n    model_value = 0.3998947332831776\n    best_value = 0.3998947332831776\n\n    [solver.variables.pseudovoigt_amplitude_3]\n    init_value = 1\n    model_value = 0.14355833709570587\n    best_value = 0.14355833709570587\n\n    [solver.variables.pseudovoigt_center_3]\n    init_value = 1\n    model_value = 1.821566080099477\n    best_value = 1.821566080099477\n\n    [solver.variables.pseudovoigt_fwhmg_3]\n    init_value = 0.21\n    model_value = 0.10082806344366198\n    best_value = 0.10082806344366198\n\n    [solver.variables.pseudovoigt_fwhml_3]\n    init_value = 0.21\n    model_value = 0.3999999999998446\n    best_value = 0.3999999999998446\n\n    [solver.variables.pseudovoigt_amplitude_4]\n    init_value = 1\n    model_value = 0.012903537428544665\n    best_value = 0.012903537428544665\n\n    [solver.variables.pseudovoigt_center_4]\n    init_value = 1\n    model_value = 0.5118623032428173\n    best_value = 0.5118623032428173\n\n    [solver.variables.pseudovoigt_fwhmg_4]\n    init_value = 0.21\n    model_value = 0.3453966888588779\n    best_value = 0.3453966888588779\n\n    [solver.variables.pseudovoigt_fwhml_4]\n    init_value = 0.21\n    model_value = 0.38844113857262086\n    best_value = 0.38844113857262086\n\n    [solver.errorbars]\n    at_boundary = \"pseudovoigt_fwhml_3\"\n\n    [output.df_org]\n    Energy = [\n        -1.6,\n        -1.5833333333333337,\n        -1.5666666666666669,\n        -1.5500000000000005,\n        -1.5333333333333337,\n        -1.516666666666667,\n        -1.5000000000000004,\n        -1.4833333333333338,\n        -1.4666666666666672,\n        -1.4500000000000006,\n        -1.433333333333334,\n        -1.4166666666666674,\n        -1.4000000000000008,\n        -1.383333333333334,\n        -1.3666666666666676,\n        -1.3500000000000008,\n        -1.3333333333333344,\n        -1.3166666666666675,\n        -1.3000000000000012,\n        -1.2833333333333343,\n        -1.266666666666668,\n        -1.250000000000001,\n        -1.2333333333333347,\n        -1.216666666666668,\n        -1.2000000000000015,\n        -1.183333333333335,\n        -1.1666666666666683,\n        -1.1500000000000017,\n        -1.133333333333335,\n        -1.1166666666666685,\n        -1.100000000000002,\n        -1.0833333333333353,\n        -1.0666666666666689,\n        -1.050000000000002,\n        -1.0333333333333354,\n        -1.0166666666666688,\n        -1.0000000000000022,\n        -0.9833333333333356,\n        -0.966666666666669,\n        -0.9500000000000024,\n        -0.9333333333333358,\n        -0.9166666666666692,\n        -0.9000000000000026,\n        -0.8833333333333359,\n        -0.8666666666666692,\n        -0.8500000000000028,\n        -0.8333333333333361,\n        -0.8166666666666694,\n        -0.8000000000000029,\n        -0.7833333333333363,\n        -0.7666666666666697,\n        -0.750000000000003,\n        -0.7333333333333365,\n        -0.7166666666666699,\n        -0.7000000000000033,\n        -0.6833333333333367,\n        -0.6666666666666701,\n        -0.6500000000000035,\n        -0.6333333333333369,\n        -0.6166666666666702,\n        -0.6000000000000036,\n        -0.5833333333333369,\n        -0.5666666666666704,\n        -0.5500000000000038,\n        -0.5333333333333372,\n        -0.5166666666666706,\n        -0.500000000000004,\n        -0.4833333333333373,\n        -0.4666666666666708,\n        -0.4500000000000042,\n        -0.4333333333333376,\n        -0.4166666666666709,\n        -0.4000000000000044,\n        -0.3833333333333377,\n        -0.3666666666666711,\n        -0.3500000000000045,\n        -0.3333333333333379,\n        -0.3166666666666712,\n        -0.3000000000000047,\n        -0.2833333333333381,\n        -0.2666666666666715,\n        -0.2500000000000049,\n        -0.2333333333333382,\n        -0.2166666666666716,\n        -0.200000000000005,\n        -0.1833333333333384,\n        -0.1666666666666718,\n        -0.1500000000000052,\n        -0.1333333333333386,\n        -0.116666666666672,\n        -0.1000000000000054,\n        -0.0833333333333388,\n        -0.0666666666666722,\n        -0.0500000000000056,\n        -0.0333333333333389,\n        -0.0166666666666723,\n        -5.773159728050815e-15,\n        0.0166666666666608,\n        0.0333333333333274,\n        0.049999999999994,\n        0.0666666666666606,\n        0.0833333333333272,\n        0.0999999999999938,\n        0.1166666666666604,\n        0.1333333333333271,\n        0.1499999999999936,\n        0.1666666666666603,\n        0.1833333333333268,\n        0.1999999999999935,\n        0.21666666666666,\n        0.2333333333333267,\n        0.2499999999999933,\n        0.2666666666666599,\n        0.2833333333333265,\n        0.2999999999999932,\n        0.3166666666666597,\n        0.3333333333333264,\n        0.349999999999993,\n        0.3666666666666596,\n        0.3833333333333261,\n        0.3999999999999928,\n        0.4166666666666593,\n        0.433333333333326,\n        0.4499999999999926,\n        0.4666666666666592,\n        0.4833333333333258,\n        0.4999999999999925,\n        0.5166666666666592,\n        0.5333333333333257,\n        0.5499999999999923,\n        0.5666666666666589,\n        0.5833333333333255,\n        0.5999999999999921,\n        0.6166666666666587,\n        0.6333333333333253,\n        0.6499999999999919,\n        0.6666666666666585,\n        0.6833333333333251,\n        0.6999999999999916,\n        0.7166666666666583,\n        0.733333333333325,\n        0.7499999999999916,\n        0.7666666666666581,\n        0.7833333333333247,\n        0.7999999999999914,\n        0.8166666666666581,\n        0.8333333333333246,\n        0.8499999999999912,\n        0.8666666666666578,\n        0.8833333333333245,\n        0.899999999999991,\n        0.9166666666666576,\n        0.933333333333324,\n        0.9499999999999909,\n        0.9666666666666576,\n        0.983333333333324,\n        0.9999999999999906,\n        1.0166666666666573,\n        1.033333333333324,\n        1.0499999999999905,\n        1.066666666666657,\n        1.0833333333333235,\n        1.0999999999999903,\n        1.1166666666666567,\n        1.1333333333333235,\n        1.14999999999999,\n        1.1666666666666567,\n        1.1833333333333231,\n        1.19999999999999,\n        1.2166666666666563,\n        1.2333333333333232,\n        1.2499999999999896,\n        1.2666666666666564,\n        1.283333333333323,\n        1.2999999999999896,\n        1.3166666666666562,\n        1.3333333333333228,\n        1.3499999999999894,\n        1.366666666666656,\n        1.3833333333333226,\n        1.3999999999999893,\n        1.416666666666656,\n        1.4333333333333225,\n        1.449999999999989,\n        1.4666666666666557,\n        1.4833333333333223,\n        1.499999999999989,\n        1.5166666666666555,\n        1.533333333333322,\n        1.5499999999999887,\n        1.566666666666655,\n        1.583333333333322,\n        1.5999999999999883,\n        1.6166666666666551,\n        1.6333333333333215,\n        1.6499999999999884,\n        1.6666666666666548,\n        1.6833333333333216,\n        1.699999999999988,\n        1.7166666666666548,\n        1.7333333333333214,\n        1.749999999999988,\n        1.7666666666666546,\n        1.7833333333333212,\n        1.7999999999999878,\n        1.8166666666666544,\n        1.8333333333333208,\n        1.849999999999988,\n        1.8666666666666545,\n        1.8833333333333209,\n        1.899999999999988,\n        1.916666666666654,\n        1.9333333333333207,\n        1.9499999999999875,\n        1.9666666666666537,\n        1.9833333333333203,\n        1.9999999999999871,\n        2.0166666666666537,\n        2.0333333333333203,\n        2.049999999999987,\n        2.066666666666653,\n        2.08333333333332,\n        2.0999999999999868,\n        2.1166666666666534,\n        2.13333333333332,\n        2.1499999999999866,\n        2.1666666666666528,\n        2.18333333333332,\n        2.1999999999999864,\n        2.216666666666653,\n        2.23333333333332,\n        2.2499999999999862,\n        2.266666666666653,\n        2.2833333333333194,\n        2.299999999999986,\n        2.3166666666666527,\n        2.3333333333333197,\n        2.349999999999985,\n        2.3666666666666525,\n        2.383333333333319,\n        2.3999999999999857,\n        2.4166666666666523,\n        2.433333333333319,\n        2.449999999999985,\n        2.466666666666652,\n        2.4833333333333187,\n        2.4999999999999853,\n        2.516666666666652,\n        2.5333333333333186,\n        2.5499999999999847,\n        2.566666666666652,\n        2.5833333333333184,\n        2.599999999999985,\n        2.616666666666652,\n        2.633333333333318,\n        2.649999999999985,\n        2.6666666666666514,\n        2.683333333333318,\n        2.6999999999999846,\n        2.7166666666666512,\n        2.7333333333333174,\n        2.7499999999999845,\n        2.766666666666651,\n        2.7833333333333177,\n        2.799999999999984,\n        2.816666666666651,\n        2.833333333333317,\n        2.849999999999984,\n        2.8666666666666507,\n        2.8833333333333173,\n        2.899999999999984,\n        2.9166666666666505,\n        2.9333333333333167,\n        2.949999999999984,\n        2.9666666666666504,\n        2.983333333333317,\n        2.999999999999984,\n        3.01666666666665,\n        3.033333333333317,\n        3.0499999999999834,\n        3.0666666666666496,\n        3.0833333333333166,\n        3.099999999999983,\n        3.11666666666665,\n        3.1333333333333164,\n        3.149999999999983,\n        3.1666666666666496,\n        3.183333333333316,\n        3.199999999999983,\n        3.216666666666649,\n        3.233333333333316,\n        3.2499999999999822,\n        3.266666666666649,\n        3.283333333333316,\n        3.2999999999999825,\n        3.3166666666666487,\n        3.333333333333316,\n        3.3499999999999823,\n        3.366666666666649,\n        3.3833333333333155,\n        3.399999999999982,\n        3.4166666666666488,\n        3.433333333333316,\n        3.449999999999981,\n        3.466666666666649,\n        3.483333333333315,\n        3.499999999999982,\n        3.5166666666666484,\n        3.533333333333315,\n        3.5499999999999816,\n        3.566666666666648,\n        3.583333333333315,\n        3.599999999999981,\n        3.616666666666648,\n        3.633333333333314,\n        3.649999999999981,\n        3.666666666666648,\n        3.6833333333333136,\n        3.6999999999999806,\n        3.716666666666648,\n        3.7333333333333134,\n        3.749999999999981,\n        3.766666666666648,\n        3.7833333333333137,\n        3.7999999999999807,\n        3.8166666666666473,\n        3.8333333333333135,\n        3.849999999999981,\n        3.866666666666647,\n        3.8833333333333138,\n        3.89999999999998,\n        3.916666666666647,\n        3.9333333333333136,\n        3.94999999999998,\n        3.9666666666666472,\n        3.9833333333333134,\n        3.99999999999998,\n        4.016666666666646,\n        4.033333333333314,\n        4.049999999999979,\n        4.066666666666647,\n        4.083333333333313,\n        4.09999999999998,\n        4.116666666666646,\n        4.133333333333312,\n        4.149999999999979,\n        4.166666666666647,\n        4.183333333333312,\n        4.19999999999998,\n        4.216666666666645,\n        4.233333333333313,\n        4.249999999999979,\n        4.266666666666646,\n        4.283333333333312,\n        4.299999999999979,\n        4.316666666666645,\n        4.333333333333313,\n        4.349999999999977,\n        4.366666666666646,\n        4.383333333333312,\n        4.399999999999979,\n        4.416666666666645,\n        4.433333333333312,\n        4.449999999999978,\n        4.466666666666645,\n        4.483333333333311,\n        4.499999999999979,\n        4.516666666666644,\n        4.533333333333312,\n        4.549999999999978,\n        4.566666666666645,\n        4.583333333333311,\n        4.599999999999977,\n        4.616666666666644,\n        4.633333333333312,\n        4.649999999999976,\n        4.666666666666645,\n        4.683333333333311,\n        4.699999999999978,\n        4.716666666666644,\n        4.733333333333311,\n        4.749999999999977,\n        4.766666666666644,\n        4.78333333333331,\n        4.799999999999978,\n        4.816666666666643,\n        4.833333333333311,\n        4.8499999999999766,\n        4.866666666666644,\n        4.88333333333331,\n        4.899999999999976,\n        4.916666666666642,\n        4.933333333333311,\n        4.949999999999976,\n        4.966666666666644,\n        4.9833333333333085,\n        4.999999999999977,\n        5.016666666666643,\n        5.03333333333331,\n        5.049999999999976,\n        5.066666666666643,\n        5.083333333333309,\n        5.0999999999999766,\n        5.116666666666641,\n        5.13333333333331,\n        5.149999999999976,\n        5.166666666666642,\n        5.183333333333309,\n        5.199999999999976,\n        5.216666666666642,\n        5.2333333333333085,\n        5.249999999999975,\n        5.266666666666643,\n        5.283333333333308,\n        5.299999999999976,\n        5.316666666666642,\n        5.333333333333309,\n        5.349999999999975,\n        5.366666666666641,\n        5.383333333333308,\n        5.399999999999976,\n        5.416666666666641,\n        5.433333333333309,\n        5.449999999999974,\n        5.466666666666642,\n        5.483333333333308,\n        5.499999999999975,\n        5.516666666666641,\n        5.533333333333308,\n        5.549999999999974,\n        5.566666666666642,\n        5.583333333333307,\n        5.599999999999975,\n        5.61666666666664,\n        5.633333333333308,\n        5.649999999999974,\n        5.666666666666641,\n        5.683333333333306,\n        5.699999999999974,\n        5.71666666666664,\n        5.733333333333308,\n        5.7499999999999725,\n        5.766666666666641,\n        5.783333333333307,\n        5.799999999999974,\n        5.81666666666664,\n        5.833333333333307,\n        5.849999999999973,\n        5.86666666666664,\n        5.883333333333305,\n        5.899999999999974,\n        5.91666666666664,\n        5.933333333333306,\n        5.949999999999973,\n        5.96666666666664,\n        5.983333333333306,\n        5.9999999999999725,\n        6.016666666666639,\n        6.033333333333307,\n        6.049999999999972,\n        6.06666666666664,\n        6.0833333333333055,\n        6.099999999999973,\n        6.11666666666664,\n        6.133333333333305,\n        6.149999999999972,\n        6.16666666666664,\n        6.183333333333305,\n        6.199999999999973,\n        6.216666666666638,\n        6.233333333333306,\n        6.249999999999972,\n        6.266666666666639,\n        6.283333333333305,\n        6.299999999999972,\n        6.316666666666638,\n        6.3333333333333055,\n        6.349999999999971,\n        6.36666666666664,\n        6.383333333333304,\n        6.399999999999972,\n        6.416666666666638,\n        6.433333333333305,\n        6.449999999999973,\n        6.466666666666638,\n        6.483333333333304,\n        6.499999999999972,\n        6.516666666666639,\n        6.533333333333305,\n        6.5499999999999705,\n        6.566666666666638,\n        6.5833333333333055,\n        6.599999999999971,\n        6.616666666666637,\n        6.633333333333304,\n        6.649999999999972,\n        6.666666666666638,\n        6.683333333333303,\n        6.69999999999997,\n        6.716666666666638,\n        6.733333333333304,\n        6.74999999999997,\n        6.766666666666636,\n        6.783333333333305,\n        6.7999999999999705,\n        6.816666666666636,\n        6.833333333333304,\n        6.849999999999971,\n        6.866666666666637,\n        6.883333333333304,\n        6.899999999999969,\n        6.916666666666638,\n        6.933333333333303,\n        6.949999999999969,\n        6.966666666666637,\n        6.983333333333304,\n        6.99999999999997,\n        7.016666666666636,\n        7.033333333333303,\n        7.0499999999999705,\n        7.066666666666636,\n        7.083333333333302,\n        7.0999999999999694,\n        7.116666666666637,\n        7.133333333333304,\n        7.149999999999968,\n        7.166666666666636,\n        7.183333333333303,\n        7.199999999999969,\n        7.216666666666634,\n        7.233333333333302,\n        7.249999999999972,\n        7.2666666666666355,\n        7.283333333333301,\n        7.299999999999968,\n        7.316666666666637,\n        7.333333333333303,\n        7.349999999999967,\n        7.366666666666635,\n        7.383333333333303,\n        7.399999999999968,\n        7.416666666666633,\n        7.433333333333301,\n        7.44999999999997,\n        7.466666666666634,\n        7.4833333333333,\n        7.499999999999968,\n        7.5166666666666355,\n        7.533333333333301,\n        7.549999999999968,\n        7.566666666666634,\n        7.583333333333303,\n        7.599999999999967,\n        7.616666666666633,\n        7.633333333333299,\n        7.649999999999968,\n        7.666666666666633,\n        7.683333333333299,\n        7.699999999999966,\n        7.716666666666634,\n        7.7333333333333,\n        7.749999999999966,\n        7.766666666666634,\n        7.783333333333301,\n        7.799999999999968,\n        7.816666666666632,\n        7.833333333333299,\n        7.849999999999967,\n        7.866666666666633,\n        7.883333333333299,\n        7.899999999999967,\n        7.916666666666633,\n        7.933333333333299,\n        7.949999999999965,\n        7.966666666666634,\n        7.9833333333333,\n        7.999999999999966,\n        8.016666666666632,\n        8.0333333333333,\n        8.049999999999969,\n        8.066666666666633,\n        8.083333333333298,\n        8.099999999999964,\n        8.116666666666633,\n        8.133333333333299,\n        8.149999999999965,\n        8.166666666666632,\n        8.1833333333333,\n        8.199999999999966,\n        8.216666666666631,\n        8.233333333333297,\n        8.249999999999966,\n        8.266666666666632,\n        8.283333333333298,\n        8.299999999999965,\n        8.316666666666633,\n        8.333333333333298,\n        8.349999999999964,\n        8.36666666666663,\n        8.383333333333299,\n        8.399999999999965,\n        8.41666666666663,\n        8.433333333333298,\n        8.449999999999966,\n        8.466666666666631,\n        8.483333333333297,\n        8.499999999999964,\n        8.516666666666632,\n        8.533333333333298,\n        8.549999999999963,\n        8.566666666666633,\n    ]\n    Noisy = [\n        0.0400858489876045,\n        0.0475041440952422,\n        0.0351039991525463,\n        0.0563217208307631,\n        0.0123286079864157,\n        0.053024724969143,\n        0.075258573471119,\n        0.0262832763496441,\n        0.0115852148960622,\n        0.0915722853744314,\n        0.0446540782140155,\n        0.0682723930643514,\n        0.0558643989978353,\n        0.0519569913045801,\n        0.0452947674515218,\n        0.0461405494528854,\n        0.0235251449314025,\n        0.0958572375229931,\n        0.0712792242421315,\n        0.1050855918507688,\n        0.0842006092803171,\n        0.0170856863345499,\n        0.0334467210279434,\n        0.0083076107264714,\n        0.0691372440712335,\n        0.0870026399435306,\n        0.0856501918872604,\n        0.0184664105258557,\n        0.1012696893139263,\n        0.0900266923271905,\n        0.0649266938753068,\n        0.0122839490137762,\n        0.0511603760966481,\n        0.1007672062998335,\n        0.0645506382958404,\n        0.085381815664481,\n        0.1016522378151484,\n        0.0255700571034611,\n        0.0222829579317704,\n        0.0177393773146719,\n        0.0442297831686121,\n        0.0197612635256894,\n        0.0462988518357429,\n        0.0530644007155577,\n        0.089474904507891,\n        0.0648331924597528,\n        0.0440909080060478,\n        0.098570421154747,\n        0.0226088117964225,\n        0.100762417028144,\n        0.0287293767335133,\n        0.0870234230693911,\n        0.0676497631364179,\n        0.0285448773313878,\n        0.1017561009070582,\n        0.0272996614703738,\n        0.1131043218039902,\n        0.0511879730170864,\n        0.034413610336566,\n        0.0528502127012304,\n        0.1066084309163803,\n        0.1173750907386769,\n        0.121347991954812,\n        0.0404159738107429,\n        0.1229318938881705,\n        0.0555696318939941,\n        0.0882898705374889,\n        0.1329954144767543,\n        0.1368883871498967,\n        0.1255701838721387,\n        0.1085897237046845,\n        0.1403809962644879,\n        0.1469699555212256,\n        0.1182748109964727,\n        0.1231001363483661,\n        0.1238992171385282,\n        0.1254181731096307,\n        0.0891305380394382,\n        0.158725588571065,\n        0.1227118489982552,\n        0.1198807815874692,\n        0.1908936057417852,\n        0.193999550302129,\n        0.1867051482381324,\n        0.2080989925373333,\n        0.231716527987583,\n        0.2484093442785573,\n        0.3310743928003237,\n        0.3668499446535448,\n        0.3891363703418967,\n        0.4694195689321354,\n        0.5580343781043237,\n        0.5954783032481118,\n        0.741052184253777,\n        0.838197602601856,\n        0.9513897921608993,\n        0.9991456688422116,\n        1.0900891532152457,\n        0.9973225325465216,\n        0.906261276926932,\n        0.8241812742665023,\n        0.7832498289548987,\n        0.6185705157749193,\n        0.5147752382697125,\n        0.4950946246505369,\n        0.4263263114321823,\n        0.3960140991859387,\n        0.2911808314695198,\n        0.2944689348278017,\n        0.2741346452275327,\n        0.2355511806528844,\n        0.1961136506830882,\n        0.2283740469882358,\n        0.1364080115728444,\n        0.1670333281564165,\n        0.1117890395141371,\n        0.1112347183283852,\n        0.1315763611710337,\n        0.0933445558105123,\n        0.108274699127454,\n        0.1610756944022264,\n        0.1474982352074414,\n        0.1432659882191752,\n        0.1314913654681022,\n        0.1244863052388569,\n        0.1184074961156304,\n        0.0605124172015765,\n        0.0508969138774366,\n        0.085917365515991,\n        0.0652751555730133,\n        0.1026352311603495,\n        0.0503265022669435,\n        0.12757165389086,\n        0.0987516266396387,\n        0.0459542483770115,\n        0.0686872585644631,\n        0.0336240065145901,\n        0.10388950642747,\n        0.030981017827682,\n        0.0726662468847266,\n        0.1118161842578151,\n        0.0554116157019506,\n        0.0895053910756957,\n        0.0233780002157516,\n        0.1157596833099037,\n        0.0628891458592407,\n        0.0259587147421738,\n        0.0618366130749174,\n        0.086694542401719,\n        0.1076528243174032,\n        0.0332821361652725,\n        0.0866334450523186,\n        0.0393308623409473,\n        0.0687314681428824,\n        0.0260675256521662,\n        0.1014934976353168,\n        0.0454461185394953,\n        0.0939886519565868,\n        0.0329429415051325,\n        0.0169099376785277,\n        0.0383341597891401,\n        0.0703894379388605,\n        0.0711522669118668,\n        0.1130682713307732,\n        0.0466269650779189,\n        0.0262315608729181,\n        0.0349189691386569,\n        0.1143602814641988,\n        0.0389226993403093,\n        0.0291532022343609,\n        0.0463676778007255,\n        0.087072889305342,\n        0.0852459458774799,\n        0.1096100944170928,\n        0.0365951371906682,\n        0.0244128373871494,\n        0.0554170523536385,\n        0.0493211150289454,\n        0.0807675286541233,\n        0.0672359465270824,\n        0.0667371198804244,\n        0.124788723266352,\n        0.0609656027906548,\n        0.0377032555333442,\n        0.0698887458754342,\n        0.1235228550626417,\n        0.0891652911931678,\n        0.0448489235796176,\n        0.079972885136239,\n        0.1451416603419322,\n        0.1586074931234184,\n        0.147568888435356,\n        0.1463266258037754,\n        0.1628523411311102,\n        0.1471353829513583,\n        0.2062214848438395,\n        0.1630654132822926,\n        0.1758928777746194,\n        0.1752126950227775,\n        0.1502835263644197,\n        0.1843213781833252,\n        0.0984101438250748,\n        0.0961025364387875,\n        0.1178829013681883,\n        0.1247296157877966,\n        0.1800709534730462,\n        0.1968062748513115,\n        0.1603595881459069,\n        0.172274567609071,\n        0.1404480627782839,\n        0.1562904952289987,\n        0.1808556877222679,\n        0.1505590037511287,\n        0.1424914725196525,\n        0.1941605795924947,\n        0.1432976185849329,\n        0.1383120697448777,\n        0.1361127752907559,\n        0.2040094960679134,\n        0.1423149422317461,\n        0.2017506245985816,\n        0.1881887731426838,\n        0.1510163447133285,\n        0.1536869671021535,\n        0.205934869549883,\n        0.2178817592243142,\n        0.190739493718946,\n        0.2131654318041914,\n        0.2002379289667135,\n        0.1743730193372585,\n        0.184642918811308,\n        0.184363304689532,\n        0.1665840539177777,\n        0.1750426369830076,\n        0.1930883659365414,\n        0.1783790656337414,\n        0.2014214446265459,\n        0.2050893496941885,\n        0.2083428626981609,\n        0.1883776620366749,\n        0.2418357275235461,\n        0.2522185226050003,\n        0.1720573407452707,\n        0.2072122625518448,\n        0.2127945515829799,\n        0.2473684628534042,\n        0.2085219650227469,\n        0.1806391973424074,\n        0.2043497248840776,\n        0.1075183763618777,\n        0.1401827543414672,\n        0.1138616642471996,\n        0.1172444608402864,\n        0.0711740278864589,\n        0.0974309131763187,\n        0.1420026532394653,\n        0.0949256244750162,\n        0.1421389824321976,\n        0.0760557336703996,\n        0.1038272957211466,\n        0.0748179805071357,\n        0.1264037121723935,\n        0.1058130793376005,\n        0.1106167472108448,\n        0.1565915842927009,\n        0.1067469713689568,\n        0.0844531022015294,\n        0.074804675948101,\n        0.0964484724829219,\n        0.1643175269165928,\n        0.1836149511548064,\n        0.1169011514457721,\n        0.1711131370404347,\n        0.2034876274571284,\n        0.2216768281799086,\n        0.1600037909378812,\n        0.1439264524444178,\n        0.1883469785660102,\n        0.1642068181738013,\n        0.1885751452102916,\n        0.1728086806940242,\n        0.134628467314825,\n        0.1338628521056997,\n        0.0839648783556106,\n        0.1587726705032269,\n        0.0920283209332163,\n        0.107788209211439,\n        0.1346652749149473,\n        0.0799952463476187,\n        0.1687326356264274,\n        0.0975465068945242,\n        0.1166101384016403,\n        0.1508449734554915,\n        0.1445968738494941,\n        0.2040895718378188,\n        0.1675800688472061,\n        0.1170831814215035,\n        0.1879847815021847,\n        0.160148183476634,\n        0.1347198074613951,\n        0.220792583946414,\n        0.2303159665558857,\n        0.1490857763035889,\n        0.1568281745439493,\n        0.2123752443590348,\n        0.25100925805522,\n        0.2314615303990065,\n        0.1880546441677943,\n        0.2478455366384039,\n        0.1990237175168507,\n        0.1825510191735316,\n        0.1999701568195698,\n        0.1635708727109739,\n        0.1791463340532458,\n        0.1552663142413247,\n        0.2241686401229685,\n        0.2239345521025436,\n        0.2301760879740556,\n        0.1880917824184932,\n        0.2211567927209456,\n        0.2029135065590391,\n        0.197732190698215,\n        0.1630007694643638,\n        0.1512627166218486,\n        0.1396106260877371,\n        0.1223508926003677,\n        0.1055402064617497,\n        0.0963077896381478,\n        0.1485502409734946,\n        0.1214184017475851,\n        0.0660291210862589,\n        0.0837698279335908,\n        0.0684303132955492,\n        0.0970556181439054,\n        0.1431220720428972,\n        0.0577469638283151,\n        0.1253116163230095,\n        0.0371905993888273,\n        0.0616589630076424,\n        0.1250045070933262,\n        0.0727315712992234,\n        0.0771259300130166,\n        0.0885065265837407,\n        0.0490365120494909,\n        0.0666107115964698,\n        0.0920329089825884,\n        0.0538161806579193,\n        0.0641216964242801,\n        0.0393513777865212,\n        0.0921474377697789,\n        0.0590283065036887,\n        0.1109702629657403,\n        0.0735233481805185,\n        0.0784676157054693,\n        0.0602350107261773,\n        0.0879375420329127,\n        0.0776977151198184,\n        0.0733482193458991,\n        0.114039312818465,\n        0.0261860321876083,\n        0.0286964705107653,\n        0.11560451392475,\n        0.0858130879119259,\n        0.084196098613148,\n        0.0440181232542197,\n        0.0938640230895344,\n        0.0584399405493091,\n        0.0532375279377581,\n        0.0763364420207003,\n        0.0152392136337895,\n        0.0474753566919628,\n        0.071056819473367,\n        0.0338818747472514,\n        0.0959109671223937,\n        0.0384762306871883,\n        0.0242302258299056,\n        0.1040051095099686,\n        0.0702473729480955,\n        0.0916319353994431,\n        0.0127844581661402,\n        0.0502986784873421,\n        0.0199327446103013,\n        0.0776333595329825,\n        0.1007212709496305,\n        0.0586915218872376,\n        0.0221695070100402,\n        0.0385195289077894,\n        0.0670377890904088,\n        0.050549845290954,\n        0.032369733272056,\n        0.0370991809453224,\n        0.039061227198213,\n        0.0838591285178109,\n        0.1159216290228076,\n        0.1137577591154694,\n        0.0291805094071906,\n        0.1032523989896635,\n        0.0261272758180962,\n        0.1135030153808551,\n        0.0906419645653427,\n        0.1028378951453756,\n        0.0423862975518695,\n        0.1059358819751138,\n        0.0423777257014955,\n        0.0710885079322954,\n        0.1096364232793673,\n        0.0525239008865075,\n        0.0457407079637011,\n        0.0922052961508325,\n        0.0816785225494727,\n        0.0718822948512181,\n        0.0240950215409985,\n        0.0833789048925924,\n        0.0208014427560942,\n        0.0842973918416843,\n        0.1077664743222709,\n        0.0512643217265497,\n        0.0815417937297969,\n        0.0894327339677526,\n        0.0392659547658063,\n        0.0475894702597924,\n        0.0261101490948078,\n        0.0312419681929855,\n        0.0670295505137679,\n        0.041048209670656,\n        0.05129964276444,\n        0.020382663198439,\n        0.0967889575767442,\n        0.0597597253452205,\n        0.0246505371789898,\n        0.0497239740660441,\n        0.0409996265061464,\n        0.1036448679629334,\n        0.0708784963991961,\n        0.0893911657990327,\n        0.0237527952805536,\n        0.072711335548871,\n        0.0573787731284762,\n        0.0091085527836668,\n        0.0703085497101525,\n        0.0274292554490851,\n        0.0865736229631511,\n        0.0942914002527257,\n        0.058034551520537,\n        0.0362323260556584,\n        0.0264212537284405,\n        0.0834799981463918,\n        0.0640120894689639,\n        0.0638634796791788,\n        0.0287404435540919,\n        0.0285565481703482,\n        0.0368212595215135,\n        0.0114326135702339,\n        0.0225261014228786,\n        0.0638451116721148,\n        0.0699097058166323,\n        0.045084181785087,\n        0.0137701390619269,\n        0.0795465320831432,\n        0.0202148073959287,\n        0.0339860788913434,\n        0.0715247245707952,\n        0.0878874410810193,\n        0.0049786511419806,\n        0.0724814782405271,\n        0.0259839699584688,\n        0.0845294369184483,\n        0.0493381005544953,\n        0.0415729135400581,\n        0.0633166587283098,\n        0.0696329908436901,\n        0.0888990859143375,\n        0.0323290777517196,\n        0.0595397446913068,\n        0.0599329990315382,\n        0.0218285985279114,\n        0.0748450273972514,\n        0.066864741872191,\n        0.0362633418042058,\n        0.046086488520168,\n        0.0692000091345586,\n        0.0176726844347359,\n        0.0111335621150674,\n        0.0942811559979988,\n        0.0304719669525026,\n        0.0584109496607493,\n        0.0931138337073029,\n        0.0425288229752701,\n        0.0373407161386901,\n        0.0830062860309736,\n        0.0080044425753585,\n        0.072481635052131,\n        0.0712575511537418,\n        0.0880849632020957,\n        0.0096154941339536,\n        0.0618600627923321,\n        0.0191035653631283,\n        0.0294277671312085,\n        0.0222381233330112,\n        0.0448367891864188,\n        0.0242026502406272,\n        0.051368596301534,\n        0.0412715637409945,\n        0.0217409752256279,\n        0.0138035892628145,\n        0.0468306017488839,\n        0.078675494974312,\n        0.0991579632247846,\n        0.0773416168548849,\n        0.0060393756815165,\n        0.0460974614579422,\n        0.0780676938944176,\n        0.0276709877685096,\n        0.0748236358022431,\n        0.0812389911125458,\n        0.0876395980227305,\n        0.0214223828073205,\n        0.0877381744052947,\n        0.0528330469194856,\n        0.0464327252824427,\n        0.02108752075617,\n        0.005518639162491,\n        0.0351106538559915,\n        0.0626355820324706,\n        0.024837384168368,\n        0.0991159087899267,\n        0.0190123422927233,\n        0.0278245387133419,\n        0.041870985321227,\n        0.0672879929434647,\n        0.0761632863907179,\n        0.092242367829754,\n        0.0459857094371513,\n        0.0388054517326814,\n        0.039522778444956,\n        0.0365574183491475,\n        0.0088017259184562,\n        0.0868446508932771,\n        0.0308779677196103,\n        0.0045625446774343,\n        0.0878239553112703,\n        0.0079108793864257,\n        0.0794011479735613,\n        0.0107787287709444,\n        0.0963439453319083,\n        0.0059823785687126,\n        0.0056958633095433,\n        0.0310615790599351,\n        0.0829227048708064,\n        0.0605774439841117,\n        0.0572668915953104,\n        0.0962633256264437,\n        0.0811151534641831,\n        0.0456929075095655,\n        0.0910675564697078,\n        0.0198030213332983,\n        0.0657971970391138,\n        0.0803818663017112,\n        0.0909050662422189,\n        0.0489708972375121,\n        0.0229353199632143,\n        0.0463622414478915,\n        0.0072804437318259,\n        0.0084955992586382,\n        0.0564456843241388,\n        0.0412069784911334,\n        0.0305121763517826,\n        0.0778464398803931,\n        0.0015680766565689,\n        0.053326335819032,\n        0.0848227345317165,\n        0.0032446273762019,\n        0.0621162929432742,\n        0.0844204050682049,\n        0.0751668934949969,\n        0.0273387565376805,\n        0.0164269737816258,\n        0.0556378006292679,\n        0.0134868974356985,\n        0.0069111592467258,\n        0.0454983877934973,\n        0.0125344993149182,\n        0.0648178318179111,\n        0.0399931479833639,\n        0.0656125040396407,\n        0.0927848957248886,\n        0.0714903009185399,\n        0.0999902449823203,\n        0.0782749366303878,\n        0.020378032608375,\n        0.0118126649012811,\n        0.0704630998258169,\n        0.091578824793149,\n        0.0419341665875738,\n        0.0097908904115245,\n        0.0003137504328578,\n        0.0707667987392993,\n        0.0456701092227214,\n        0.0104547283394192,\n        0.0011284051960105,\n        0.0866336965739858,\n        0.076464600305762,\n        0.047443588939101,\n        0.0831461690088301,\n        0.0708634713443048,\n        0.078013071625356,\n        0.0965857708746237,\n        0.0825714202399825,\n        0.087463728450265,\n        0.0908911860965065,\n        0.0231876313888853,\n    ]\n\n    [output.df_fit]\n    energy = [\n        -1.6,\n        -1.5833333333333337,\n        -1.5666666666666669,\n        -1.5500000000000005,\n        -1.5333333333333337,\n        -1.516666666666667,\n        -1.5000000000000004,\n        -1.4833333333333338,\n        -1.4666666666666672,\n        -1.4500000000000006,\n        -1.433333333333334,\n        -1.4166666666666674,\n        -1.4000000000000008,\n        -1.383333333333334,\n        -1.3666666666666676,\n        -1.3500000000000008,\n        -1.3333333333333344,\n        -1.3166666666666675,\n        -1.3000000000000012,\n        -1.2833333333333343,\n        -1.266666666666668,\n        -1.250000000000001,\n        -1.2333333333333347,\n        -1.216666666666668,\n        -1.2000000000000015,\n        -1.183333333333335,\n        -1.1666666666666683,\n        -1.1500000000000017,\n        -1.133333333333335,\n        -1.1166666666666685,\n        -1.100000000000002,\n        -1.0833333333333353,\n        -1.0666666666666689,\n        -1.050000000000002,\n        -1.0333333333333354,\n        -1.0166666666666688,\n        -1.0000000000000022,\n        -0.9833333333333356,\n        -0.966666666666669,\n        -0.9500000000000024,\n        -0.9333333333333358,\n        -0.9166666666666692,\n        -0.9000000000000026,\n        -0.8833333333333359,\n        -0.8666666666666692,\n        -0.8500000000000028,\n        -0.8333333333333361,\n        -0.8166666666666694,\n        -0.8000000000000029,\n        -0.7833333333333363,\n        -0.7666666666666697,\n        -0.750000000000003,\n        -0.7333333333333365,\n        -0.7166666666666699,\n        -0.7000000000000033,\n        -0.6833333333333367,\n        -0.6666666666666701,\n        -0.6500000000000035,\n        -0.6333333333333369,\n        -0.6166666666666702,\n        -0.6000000000000036,\n        -0.5833333333333369,\n        -0.5666666666666704,\n        -0.5500000000000038,\n        -0.5333333333333372,\n        -0.5166666666666706,\n        -0.500000000000004,\n        -0.4833333333333373,\n        -0.4666666666666708,\n        -0.4500000000000042,\n        -0.4333333333333376,\n        -0.4166666666666709,\n        -0.4000000000000044,\n        -0.3833333333333377,\n        -0.3666666666666711,\n        -0.3500000000000045,\n        -0.3333333333333379,\n        -0.3166666666666712,\n        -0.3000000000000047,\n        -0.2833333333333381,\n        -0.2666666666666715,\n        -0.2500000000000049,\n        -0.2333333333333382,\n        -0.2166666666666716,\n        -0.200000000000005,\n        -0.1833333333333384,\n        -0.1666666666666718,\n        -0.1500000000000052,\n        -0.1333333333333386,\n        -0.116666666666672,\n        -0.1000000000000054,\n        -0.0833333333333388,\n        -0.0666666666666722,\n        -0.0500000000000056,\n        -0.0333333333333389,\n        -0.0166666666666723,\n        -5.773159728050815e-15,\n        0.0166666666666608,\n        0.0333333333333274,\n        0.049999999999994,\n        0.0666666666666606,\n        0.0833333333333272,\n        0.0999999999999938,\n        0.1166666666666604,\n        0.1333333333333271,\n        0.1499999999999936,\n        0.1666666666666603,\n        0.1833333333333268,\n        0.1999999999999935,\n        0.21666666666666,\n        0.2333333333333267,\n        0.2499999999999933,\n        0.2666666666666599,\n        0.2833333333333265,\n        0.2999999999999932,\n        0.3166666666666597,\n        0.3333333333333264,\n        0.349999999999993,\n        0.3666666666666596,\n        0.3833333333333261,\n        0.3999999999999928,\n        0.4166666666666593,\n        0.433333333333326,\n        0.4499999999999926,\n        0.4666666666666592,\n        0.4833333333333258,\n        0.4999999999999925,\n        0.5166666666666592,\n        0.5333333333333257,\n        0.5499999999999923,\n        0.5666666666666589,\n        0.5833333333333255,\n        0.5999999999999921,\n        0.6166666666666587,\n        0.6333333333333253,\n        0.6499999999999919,\n        0.6666666666666585,\n        0.6833333333333251,\n        0.6999999999999916,\n        0.7166666666666583,\n        0.733333333333325,\n        0.7499999999999916,\n        0.7666666666666581,\n        0.7833333333333247,\n        0.7999999999999914,\n        0.8166666666666581,\n        0.8333333333333246,\n        0.8499999999999912,\n        0.8666666666666578,\n        0.8833333333333245,\n        0.899999999999991,\n        0.9166666666666576,\n        0.933333333333324,\n        0.9499999999999909,\n        0.9666666666666576,\n        0.983333333333324,\n        0.9999999999999906,\n        1.0166666666666573,\n        1.033333333333324,\n        1.0499999999999905,\n        1.066666666666657,\n        1.0833333333333235,\n        1.0999999999999903,\n        1.1166666666666567,\n        1.1333333333333235,\n        1.14999999999999,\n        1.1666666666666567,\n        1.1833333333333231,\n        1.19999999999999,\n        1.2166666666666563,\n        1.2333333333333232,\n        1.2499999999999896,\n        1.2666666666666564,\n        1.283333333333323,\n        1.2999999999999896,\n        1.3166666666666562,\n        1.3333333333333228,\n        1.3499999999999894,\n        1.366666666666656,\n        1.3833333333333226,\n        1.3999999999999893,\n        1.416666666666656,\n        1.4333333333333225,\n        1.449999999999989,\n        1.4666666666666557,\n        1.4833333333333223,\n        1.499999999999989,\n        1.5166666666666555,\n        1.533333333333322,\n        1.5499999999999887,\n        1.566666666666655,\n        1.583333333333322,\n        1.5999999999999883,\n        1.6166666666666551,\n        1.6333333333333215,\n        1.6499999999999884,\n        1.6666666666666548,\n        1.6833333333333216,\n        1.699999999999988,\n        1.7166666666666548,\n        1.7333333333333214,\n        1.749999999999988,\n        1.7666666666666546,\n        1.7833333333333212,\n        1.7999999999999878,\n        1.8166666666666544,\n        1.8333333333333208,\n        1.849999999999988,\n        1.8666666666666545,\n        1.8833333333333209,\n        1.899999999999988,\n        1.916666666666654,\n        1.9333333333333207,\n        1.9499999999999875,\n        1.9666666666666537,\n        1.9833333333333203,\n        1.9999999999999871,\n        2.0166666666666537,\n        2.0333333333333203,\n        2.049999999999987,\n        2.066666666666653,\n        2.08333333333332,\n        2.0999999999999868,\n        2.1166666666666534,\n        2.13333333333332,\n        2.1499999999999866,\n        2.1666666666666528,\n        2.18333333333332,\n        2.1999999999999864,\n        2.216666666666653,\n        2.23333333333332,\n        2.2499999999999862,\n        2.266666666666653,\n        2.2833333333333194,\n        2.299999999999986,\n        2.3166666666666527,\n        2.3333333333333197,\n        2.349999999999985,\n        2.3666666666666525,\n        2.383333333333319,\n        2.3999999999999857,\n        2.4166666666666523,\n        2.433333333333319,\n        2.449999999999985,\n        2.466666666666652,\n        2.4833333333333187,\n        2.4999999999999853,\n        2.516666666666652,\n        2.5333333333333186,\n        2.5499999999999847,\n        2.566666666666652,\n        2.5833333333333184,\n        2.599999999999985,\n        2.616666666666652,\n        2.633333333333318,\n        2.649999999999985,\n        2.6666666666666514,\n        2.683333333333318,\n        2.6999999999999846,\n        2.7166666666666512,\n        2.7333333333333174,\n        2.7499999999999845,\n        2.766666666666651,\n        2.7833333333333177,\n        2.799999999999984,\n        2.816666666666651,\n        2.833333333333317,\n        2.849999999999984,\n        2.8666666666666507,\n        2.8833333333333173,\n        2.899999999999984,\n        2.9166666666666505,\n        2.9333333333333167,\n        2.949999999999984,\n        2.9666666666666504,\n        2.983333333333317,\n        2.999999999999984,\n        3.01666666666665,\n        3.033333333333317,\n        3.0499999999999834,\n        3.0666666666666496,\n        3.0833333333333166,\n        3.099999999999983,\n        3.11666666666665,\n        3.1333333333333164,\n        3.149999999999983,\n        3.1666666666666496,\n        3.183333333333316,\n        3.199999999999983,\n        3.216666666666649,\n        3.233333333333316,\n        3.2499999999999822,\n        3.266666666666649,\n        3.283333333333316,\n        3.2999999999999825,\n        3.3166666666666487,\n        3.333333333333316,\n        3.3499999999999823,\n        3.366666666666649,\n        3.3833333333333155,\n        3.399999999999982,\n        3.4166666666666488,\n        3.433333333333316,\n        3.449999999999981,\n        3.466666666666649,\n        3.483333333333315,\n        3.499999999999982,\n        3.5166666666666484,\n        3.533333333333315,\n        3.5499999999999816,\n        3.566666666666648,\n        3.583333333333315,\n        3.599999999999981,\n        3.616666666666648,\n        3.633333333333314,\n        3.649999999999981,\n        3.666666666666648,\n        3.6833333333333136,\n        3.6999999999999806,\n        3.716666666666648,\n        3.7333333333333134,\n        3.749999999999981,\n        3.766666666666648,\n        3.7833333333333137,\n        3.7999999999999807,\n        3.8166666666666473,\n        3.8333333333333135,\n        3.849999999999981,\n        3.866666666666647,\n        3.8833333333333138,\n        3.89999999999998,\n        3.916666666666647,\n        3.9333333333333136,\n        3.94999999999998,\n        3.9666666666666472,\n        3.9833333333333134,\n        3.99999999999998,\n        4.016666666666646,\n        4.033333333333314,\n        4.049999999999979,\n        4.066666666666647,\n        4.083333333333313,\n        4.09999999999998,\n        4.116666666666646,\n        4.133333333333312,\n        4.149999999999979,\n        4.166666666666647,\n        4.183333333333312,\n        4.19999999999998,\n        4.216666666666645,\n        4.233333333333313,\n        4.249999999999979,\n        4.266666666666646,\n        4.283333333333312,\n        4.299999999999979,\n        4.316666666666645,\n        4.333333333333313,\n        4.349999999999977,\n        4.366666666666646,\n        4.383333333333312,\n        4.399999999999979,\n        4.416666666666645,\n        4.433333333333312,\n        4.449999999999978,\n        4.466666666666645,\n        4.483333333333311,\n        4.499999999999979,\n        4.516666666666644,\n        4.533333333333312,\n        4.549999999999978,\n        4.566666666666645,\n        4.583333333333311,\n        4.599999999999977,\n        4.616666666666644,\n        4.633333333333312,\n        4.649999999999976,\n        4.666666666666645,\n        4.683333333333311,\n        4.699999999999978,\n        4.716666666666644,\n        4.733333333333311,\n        4.749999999999977,\n        4.766666666666644,\n        4.78333333333331,\n        4.799999999999978,\n        4.816666666666643,\n        4.833333333333311,\n        4.8499999999999766,\n        4.866666666666644,\n        4.88333333333331,\n        4.899999999999976,\n        4.916666666666642,\n        4.933333333333311,\n        4.949999999999976,\n        4.966666666666644,\n        4.9833333333333085,\n        4.999999999999977,\n        5.016666666666643,\n        5.03333333333331,\n        5.049999999999976,\n        5.066666666666643,\n        5.083333333333309,\n        5.0999999999999766,\n        5.116666666666641,\n        5.13333333333331,\n        5.149999999999976,\n        5.166666666666642,\n        5.183333333333309,\n        5.199999999999976,\n        5.216666666666642,\n        5.2333333333333085,\n        5.249999999999975,\n        5.266666666666643,\n        5.283333333333308,\n        5.299999999999976,\n        5.316666666666642,\n        5.333333333333309,\n        5.349999999999975,\n        5.366666666666641,\n        5.383333333333308,\n        5.399999999999976,\n        5.416666666666641,\n        5.433333333333309,\n        5.449999999999974,\n        5.466666666666642,\n        5.483333333333308,\n        5.499999999999975,\n        5.516666666666641,\n        5.533333333333308,\n        5.549999999999974,\n        5.566666666666642,\n        5.583333333333307,\n        5.599999999999975,\n        5.61666666666664,\n        5.633333333333308,\n        5.649999999999974,\n        5.666666666666641,\n        5.683333333333306,\n        5.699999999999974,\n        5.71666666666664,\n        5.733333333333308,\n        5.7499999999999725,\n        5.766666666666641,\n        5.783333333333307,\n        5.799999999999974,\n        5.81666666666664,\n        5.833333333333307,\n        5.849999999999973,\n        5.86666666666664,\n        5.883333333333305,\n        5.899999999999974,\n        5.91666666666664,\n        5.933333333333306,\n        5.949999999999973,\n        5.96666666666664,\n        5.983333333333306,\n        5.9999999999999725,\n        6.016666666666639,\n        6.033333333333307,\n        6.049999999999972,\n        6.06666666666664,\n        6.0833333333333055,\n        6.099999999999973,\n        6.11666666666664,\n        6.133333333333305,\n        6.149999999999972,\n        6.16666666666664,\n        6.183333333333305,\n        6.199999999999973,\n        6.216666666666638,\n        6.233333333333306,\n        6.249999999999972,\n        6.266666666666639,\n        6.283333333333305,\n        6.299999999999972,\n        6.316666666666638,\n        6.3333333333333055,\n        6.349999999999971,\n        6.36666666666664,\n        6.383333333333304,\n        6.399999999999972,\n        6.416666666666638,\n        6.433333333333305,\n        6.449999999999973,\n        6.466666666666638,\n        6.483333333333304,\n        6.499999999999972,\n        6.516666666666639,\n        6.533333333333305,\n        6.5499999999999705,\n        6.566666666666638,\n        6.5833333333333055,\n        6.599999999999971,\n        6.616666666666637,\n        6.633333333333304,\n        6.649999999999972,\n        6.666666666666638,\n        6.683333333333303,\n        6.69999999999997,\n        6.716666666666638,\n        6.733333333333304,\n        6.74999999999997,\n        6.766666666666636,\n        6.783333333333305,\n        6.7999999999999705,\n        6.816666666666636,\n        6.833333333333304,\n        6.849999999999971,\n        6.866666666666637,\n        6.883333333333304,\n        6.899999999999969,\n        6.916666666666638,\n        6.933333333333303,\n        6.949999999999969,\n        6.966666666666637,\n        6.983333333333304,\n        6.99999999999997,\n        7.016666666666636,\n        7.033333333333303,\n        7.0499999999999705,\n        7.066666666666636,\n        7.083333333333302,\n        7.0999999999999694,\n        7.116666666666637,\n        7.133333333333304,\n        7.149999999999968,\n        7.166666666666636,\n        7.183333333333303,\n        7.199999999999969,\n        7.216666666666634,\n        7.233333333333302,\n        7.249999999999972,\n        7.2666666666666355,\n        7.283333333333301,\n        7.299999999999968,\n        7.316666666666637,\n        7.333333333333303,\n        7.349999999999967,\n        7.366666666666635,\n        7.383333333333303,\n        7.399999999999968,\n        7.416666666666633,\n        7.433333333333301,\n        7.44999999999997,\n        7.466666666666634,\n        7.4833333333333,\n        7.499999999999968,\n        7.5166666666666355,\n        7.533333333333301,\n        7.549999999999968,\n        7.566666666666634,\n        7.583333333333303,\n        7.599999999999967,\n        7.616666666666633,\n        7.633333333333299,\n        7.649999999999968,\n        7.666666666666633,\n        7.683333333333299,\n        7.699999999999966,\n        7.716666666666634,\n        7.7333333333333,\n        7.749999999999966,\n        7.766666666666634,\n        7.783333333333301,\n        7.799999999999968,\n        7.816666666666632,\n        7.833333333333299,\n        7.849999999999967,\n        7.866666666666633,\n        7.883333333333299,\n        7.899999999999967,\n        7.916666666666633,\n        7.933333333333299,\n        7.949999999999965,\n        7.966666666666634,\n        7.9833333333333,\n        7.999999999999966,\n        8.016666666666632,\n        8.0333333333333,\n        8.049999999999969,\n        8.066666666666633,\n        8.083333333333298,\n        8.099999999999964,\n        8.116666666666633,\n        8.133333333333299,\n        8.149999999999965,\n        8.166666666666632,\n        8.1833333333333,\n        8.199999999999966,\n        8.216666666666631,\n        8.233333333333297,\n        8.249999999999966,\n        8.266666666666632,\n        8.283333333333298,\n        8.299999999999965,\n        8.316666666666633,\n        8.333333333333298,\n        8.349999999999964,\n        8.36666666666663,\n        8.383333333333299,\n        8.399999999999965,\n        8.41666666666663,\n        8.433333333333298,\n        8.449999999999966,\n        8.466666666666631,\n        8.483333333333297,\n        8.499999999999964,\n        8.516666666666632,\n        8.533333333333298,\n        8.549999999999963,\n        8.566666666666633,\n    ]\n    intensity = [\n        0.0400858489876045,\n        0.0475041440952422,\n        0.0351039991525463,\n        0.0563217208307631,\n        0.0123286079864157,\n        0.053024724969143,\n        0.075258573471119,\n        0.0262832763496441,\n        0.0115852148960622,\n        0.0915722853744314,\n        0.0446540782140155,\n        0.0682723930643514,\n        0.0558643989978353,\n        0.0519569913045801,\n        0.0452947674515218,\n        0.0461405494528854,\n        0.0235251449314025,\n        0.0958572375229931,\n        0.0712792242421315,\n        0.1050855918507688,\n        0.0842006092803171,\n        0.0170856863345499,\n        0.0334467210279434,\n        0.0083076107264714,\n        0.0691372440712335,\n        0.0870026399435306,\n        0.0856501918872604,\n        0.0184664105258557,\n        0.1012696893139263,\n        0.0900266923271905,\n        0.0649266938753068,\n        0.0122839490137762,\n        0.0511603760966481,\n        0.1007672062998335,\n        0.0645506382958404,\n        0.085381815664481,\n        0.1016522378151484,\n        0.0255700571034611,\n        0.0222829579317704,\n        0.0177393773146719,\n        0.0442297831686121,\n        0.0197612635256894,\n        0.0462988518357429,\n        0.0530644007155577,\n        0.089474904507891,\n        0.0648331924597528,\n        0.0440909080060478,\n        0.098570421154747,\n        0.0226088117964225,\n        0.100762417028144,\n        0.0287293767335133,\n        0.0870234230693911,\n        0.0676497631364179,\n        0.0285448773313878,\n        0.1017561009070582,\n        0.0272996614703738,\n        0.1131043218039902,\n        0.0511879730170864,\n        0.034413610336566,\n        0.0528502127012304,\n        0.1066084309163803,\n        0.1173750907386769,\n        0.121347991954812,\n        0.0404159738107429,\n        0.1229318938881705,\n        0.0555696318939941,\n        0.0882898705374889,\n        0.1329954144767543,\n        0.1368883871498967,\n        0.1255701838721387,\n        0.1085897237046845,\n        0.1403809962644879,\n        0.1469699555212256,\n        0.1182748109964727,\n        0.1231001363483661,\n        0.1238992171385282,\n        0.1254181731096307,\n        0.0891305380394382,\n        0.158725588571065,\n        0.1227118489982552,\n        0.1198807815874692,\n        0.1908936057417852,\n        0.193999550302129,\n        0.1867051482381324,\n        0.2080989925373333,\n        0.231716527987583,\n        0.2484093442785573,\n        0.3310743928003237,\n        0.3668499446535448,\n        0.3891363703418967,\n        0.4694195689321354,\n        0.5580343781043237,\n        0.5954783032481118,\n        0.741052184253777,\n        0.838197602601856,\n        0.9513897921608993,\n        0.9991456688422116,\n        1.0900891532152457,\n        0.9973225325465216,\n        0.906261276926932,\n        0.8241812742665023,\n        0.7832498289548987,\n        0.6185705157749193,\n        0.5147752382697125,\n        0.4950946246505369,\n        0.4263263114321823,\n        0.3960140991859387,\n        0.2911808314695198,\n        0.2944689348278017,\n        0.2741346452275327,\n        0.2355511806528844,\n        0.1961136506830882,\n        0.2283740469882358,\n        0.1364080115728444,\n        0.1670333281564165,\n        0.1117890395141371,\n        0.1112347183283852,\n        0.1315763611710337,\n        0.0933445558105123,\n        0.108274699127454,\n        0.1610756944022264,\n        0.1474982352074414,\n        0.1432659882191752,\n        0.1314913654681022,\n        0.1244863052388569,\n        0.1184074961156304,\n        0.0605124172015765,\n        0.0508969138774366,\n        0.085917365515991,\n        0.0652751555730133,\n        0.1026352311603495,\n        0.0503265022669435,\n        0.12757165389086,\n        0.0987516266396387,\n        0.0459542483770115,\n        0.0686872585644631,\n        0.0336240065145901,\n        0.10388950642747,\n        0.030981017827682,\n        0.0726662468847266,\n        0.1118161842578151,\n        0.0554116157019506,\n        0.0895053910756957,\n        0.0233780002157516,\n        0.1157596833099037,\n        0.0628891458592407,\n        0.0259587147421738,\n        0.0618366130749174,\n        0.086694542401719,\n        0.1076528243174032,\n        0.0332821361652725,\n        0.0866334450523186,\n        0.0393308623409473,\n        0.0687314681428824,\n        0.0260675256521662,\n        0.1014934976353168,\n        0.0454461185394953,\n        0.0939886519565868,\n        0.0329429415051325,\n        0.0169099376785277,\n        0.0383341597891401,\n        0.0703894379388605,\n        0.0711522669118668,\n        0.1130682713307732,\n        0.0466269650779189,\n        0.0262315608729181,\n        0.0349189691386569,\n        0.1143602814641988,\n        0.0389226993403093,\n        0.0291532022343609,\n        0.0463676778007255,\n        0.087072889305342,\n        0.0852459458774799,\n        0.1096100944170928,\n        0.0365951371906682,\n        0.0244128373871494,\n        0.0554170523536385,\n        0.0493211150289454,\n        0.0807675286541233,\n        0.0672359465270824,\n        0.0667371198804244,\n        0.124788723266352,\n        0.0609656027906548,\n        0.0377032555333442,\n        0.0698887458754342,\n        0.1235228550626417,\n        0.0891652911931678,\n        0.0448489235796176,\n        0.079972885136239,\n        0.1451416603419322,\n        0.1586074931234184,\n        0.147568888435356,\n        0.1463266258037754,\n        0.1628523411311102,\n        0.1471353829513583,\n        0.2062214848438395,\n        0.1630654132822926,\n        0.1758928777746194,\n        0.1752126950227775,\n        0.1502835263644197,\n        0.1843213781833252,\n        0.0984101438250748,\n        0.0961025364387875,\n        0.1178829013681883,\n        0.1247296157877966,\n        0.1800709534730462,\n        0.1968062748513115,\n        0.1603595881459069,\n        0.172274567609071,\n        0.1404480627782839,\n        0.1562904952289987,\n        0.1808556877222679,\n        0.1505590037511287,\n        0.1424914725196525,\n        0.1941605795924947,\n        0.1432976185849329,\n        0.1383120697448777,\n        0.1361127752907559,\n        0.2040094960679134,\n        0.1423149422317461,\n        0.2017506245985816,\n        0.1881887731426838,\n        0.1510163447133285,\n        0.1536869671021535,\n        0.205934869549883,\n        0.2178817592243142,\n        0.190739493718946,\n        0.2131654318041914,\n        0.2002379289667135,\n        0.1743730193372585,\n        0.184642918811308,\n        0.184363304689532,\n        0.1665840539177777,\n        0.1750426369830076,\n        0.1930883659365414,\n        0.1783790656337414,\n        0.2014214446265459,\n        0.2050893496941885,\n        0.2083428626981609,\n        0.1883776620366749,\n        0.2418357275235461,\n        0.2522185226050003,\n        0.1720573407452707,\n        0.2072122625518448,\n        0.2127945515829799,\n        0.2473684628534042,\n        0.2085219650227469,\n        0.1806391973424074,\n        0.2043497248840776,\n        0.1075183763618777,\n        0.1401827543414672,\n        0.1138616642471996,\n        0.1172444608402864,\n        0.0711740278864589,\n        0.0974309131763187,\n        0.1420026532394653,\n        0.0949256244750162,\n        0.1421389824321976,\n        0.0760557336703996,\n        0.1038272957211466,\n        0.0748179805071357,\n        0.1264037121723935,\n        0.1058130793376005,\n        0.1106167472108448,\n        0.1565915842927009,\n        0.1067469713689568,\n        0.0844531022015294,\n        0.074804675948101,\n        0.0964484724829219,\n        0.1643175269165928,\n        0.1836149511548064,\n        0.1169011514457721,\n        0.1711131370404347,\n        0.2034876274571284,\n        0.2216768281799086,\n        0.1600037909378812,\n        0.1439264524444178,\n        0.1883469785660102,\n        0.1642068181738013,\n        0.1885751452102916,\n        0.1728086806940242,\n        0.134628467314825,\n        0.1338628521056997,\n        0.0839648783556106,\n        0.1587726705032269,\n        0.0920283209332163,\n        0.107788209211439,\n        0.1346652749149473,\n        0.0799952463476187,\n        0.1687326356264274,\n        0.0975465068945242,\n        0.1166101384016403,\n        0.1508449734554915,\n        0.1445968738494941,\n        0.2040895718378188,\n        0.1675800688472061,\n        0.1170831814215035,\n        0.1879847815021847,\n        0.160148183476634,\n        0.1347198074613951,\n        0.220792583946414,\n        0.2303159665558857,\n        0.1490857763035889,\n        0.1568281745439493,\n        0.2123752443590348,\n        0.25100925805522,\n        0.2314615303990065,\n        0.1880546441677943,\n        0.2478455366384039,\n        0.1990237175168507,\n        0.1825510191735316,\n        0.1999701568195698,\n        0.1635708727109739,\n        0.1791463340532458,\n        0.1552663142413247,\n        0.2241686401229685,\n        0.2239345521025436,\n        0.2301760879740556,\n        0.1880917824184932,\n        0.2211567927209456,\n        0.2029135065590391,\n        0.197732190698215,\n        0.1630007694643638,\n        0.1512627166218486,\n        0.1396106260877371,\n        0.1223508926003677,\n        0.1055402064617497,\n        0.0963077896381478,\n        0.1485502409734946,\n        0.1214184017475851,\n        0.0660291210862589,\n        0.0837698279335908,\n        0.0684303132955492,\n        0.0970556181439054,\n        0.1431220720428972,\n        0.0577469638283151,\n        0.1253116163230095,\n        0.0371905993888273,\n        0.0616589630076424,\n        0.1250045070933262,\n        0.0727315712992234,\n        0.0771259300130166,\n        0.0885065265837407,\n        0.0490365120494909,\n        0.0666107115964698,\n        0.0920329089825884,\n        0.0538161806579193,\n        0.0641216964242801,\n        0.0393513777865212,\n        0.0921474377697789,\n        0.0590283065036887,\n        0.1109702629657403,\n        0.0735233481805185,\n        0.0784676157054693,\n        0.0602350107261773,\n        0.0879375420329127,\n        0.0776977151198184,\n        0.0733482193458991,\n        0.114039312818465,\n        0.0261860321876083,\n        0.0286964705107653,\n        0.11560451392475,\n        0.0858130879119259,\n        0.084196098613148,\n        0.0440181232542197,\n        0.0938640230895344,\n        0.0584399405493091,\n        0.0532375279377581,\n        0.0763364420207003,\n        0.0152392136337895,\n        0.0474753566919628,\n        0.071056819473367,\n        0.0338818747472514,\n        0.0959109671223937,\n        0.0384762306871883,\n        0.0242302258299056,\n        0.1040051095099686,\n        0.0702473729480955,\n        0.0916319353994431,\n        0.0127844581661402,\n        0.0502986784873421,\n        0.0199327446103013,\n        0.0776333595329825,\n        0.1007212709496305,\n        0.0586915218872376,\n        0.0221695070100402,\n        0.0385195289077894,\n        0.0670377890904088,\n        0.050549845290954,\n        0.032369733272056,\n        0.0370991809453224,\n        0.039061227198213,\n        0.0838591285178109,\n        0.1159216290228076,\n        0.1137577591154694,\n        0.0291805094071906,\n        0.1032523989896635,\n        0.0261272758180962,\n        0.1135030153808551,\n        0.0906419645653427,\n        0.1028378951453756,\n        0.0423862975518695,\n        0.1059358819751138,\n        0.0423777257014955,\n        0.0710885079322954,\n        0.1096364232793673,\n        0.0525239008865075,\n        0.0457407079637011,\n        0.0922052961508325,\n        0.0816785225494727,\n        0.0718822948512181,\n        0.0240950215409985,\n        0.0833789048925924,\n        0.0208014427560942,\n        0.0842973918416843,\n        0.1077664743222709,\n        0.0512643217265497,\n        0.0815417937297969,\n        0.0894327339677526,\n        0.0392659547658063,\n        0.0475894702597924,\n        0.0261101490948078,\n        0.0312419681929855,\n        0.0670295505137679,\n        0.041048209670656,\n        0.05129964276444,\n        0.020382663198439,\n        0.0967889575767442,\n        0.0597597253452205,\n        0.0246505371789898,\n        0.0497239740660441,\n        0.0409996265061464,\n        0.1036448679629334,\n        0.0708784963991961,\n        0.0893911657990327,\n        0.0237527952805536,\n        0.072711335548871,\n        0.0573787731284762,\n        0.0091085527836668,\n        0.0703085497101525,\n        0.0274292554490851,\n        0.0865736229631511,\n        0.0942914002527257,\n        0.058034551520537,\n        0.0362323260556584,\n        0.0264212537284405,\n        0.0834799981463918,\n        0.0640120894689639,\n        0.0638634796791788,\n        0.0287404435540919,\n        0.0285565481703482,\n        0.0368212595215135,\n        0.0114326135702339,\n        0.0225261014228786,\n        0.0638451116721148,\n        0.0699097058166323,\n        0.045084181785087,\n        0.0137701390619269,\n        0.0795465320831432,\n        0.0202148073959287,\n        0.0339860788913434,\n        0.0715247245707952,\n        0.0878874410810193,\n        0.0049786511419806,\n        0.0724814782405271,\n        0.0259839699584688,\n        0.0845294369184483,\n        0.0493381005544953,\n        0.0415729135400581,\n        0.0633166587283098,\n        0.0696329908436901,\n        0.0888990859143375,\n        0.0323290777517196,\n        0.0595397446913068,\n        0.0599329990315382,\n        0.0218285985279114,\n        0.0748450273972514,\n        0.066864741872191,\n        0.0362633418042058,\n        0.046086488520168,\n        0.0692000091345586,\n        0.0176726844347359,\n        0.0111335621150674,\n        0.0942811559979988,\n        0.0304719669525026,\n        0.0584109496607493,\n        0.0931138337073029,\n        0.0425288229752701,\n        0.0373407161386901,\n        0.0830062860309736,\n        0.0080044425753585,\n        0.072481635052131,\n        0.0712575511537418,\n        0.0880849632020957,\n        0.0096154941339536,\n        0.0618600627923321,\n        0.0191035653631283,\n        0.0294277671312085,\n        0.0222381233330112,\n        0.0448367891864188,\n        0.0242026502406272,\n        0.051368596301534,\n        0.0412715637409945,\n        0.0217409752256279,\n        0.0138035892628145,\n        0.0468306017488839,\n        0.078675494974312,\n        0.0991579632247846,\n        0.0773416168548849,\n        0.0060393756815165,\n        0.0460974614579422,\n        0.0780676938944176,\n        0.0276709877685096,\n        0.0748236358022431,\n        0.0812389911125458,\n        0.0876395980227305,\n        0.0214223828073205,\n        0.0877381744052947,\n        0.0528330469194856,\n        0.0464327252824427,\n        0.02108752075617,\n        0.005518639162491,\n        0.0351106538559915,\n        0.0626355820324706,\n        0.024837384168368,\n        0.0991159087899267,\n        0.0190123422927233,\n        0.0278245387133419,\n        0.041870985321227,\n        0.0672879929434647,\n        0.0761632863907179,\n        0.092242367829754,\n        0.0459857094371513,\n        0.0388054517326814,\n        0.039522778444956,\n        0.0365574183491475,\n        0.0088017259184562,\n        0.0868446508932771,\n        0.0308779677196103,\n        0.0045625446774343,\n        0.0878239553112703,\n        0.0079108793864257,\n        0.0794011479735613,\n        0.0107787287709444,\n        0.0963439453319083,\n        0.0059823785687126,\n        0.0056958633095433,\n        0.0310615790599351,\n        0.0829227048708064,\n        0.0605774439841117,\n        0.0572668915953104,\n        0.0962633256264437,\n        0.0811151534641831,\n        0.0456929075095655,\n        0.0910675564697078,\n        0.0198030213332983,\n        0.0657971970391138,\n        0.0803818663017112,\n        0.0909050662422189,\n        0.0489708972375121,\n        0.0229353199632143,\n        0.0463622414478915,\n        0.0072804437318259,\n        0.0084955992586382,\n        0.0564456843241388,\n        0.0412069784911334,\n        0.0305121763517826,\n        0.0778464398803931,\n        0.0015680766565689,\n        0.053326335819032,\n        0.0848227345317165,\n        0.0032446273762019,\n        0.0621162929432742,\n        0.0844204050682049,\n        0.0751668934949969,\n        0.0273387565376805,\n        0.0164269737816258,\n        0.0556378006292679,\n        0.0134868974356985,\n        0.0069111592467258,\n        0.0454983877934973,\n        0.0125344993149182,\n        0.0648178318179111,\n        0.0399931479833639,\n        0.0656125040396407,\n        0.0927848957248886,\n        0.0714903009185399,\n        0.0999902449823203,\n        0.0782749366303878,\n        0.020378032608375,\n        0.0118126649012811,\n        0.0704630998258169,\n        0.091578824793149,\n        0.0419341665875738,\n        0.0097908904115245,\n        0.0003137504328578,\n        0.0707667987392993,\n        0.0456701092227214,\n        0.0104547283394192,\n        0.0011284051960105,\n        0.0866336965739858,\n        0.076464600305762,\n        0.047443588939101,\n        0.0831461690088301,\n        0.0708634713443048,\n        0.078013071625356,\n        0.0965857708746237,\n        0.0825714202399825,\n        0.087463728450265,\n        0.0908911860965065,\n        0.0231876313888853,\n    ]\n    residual = [\n        -0.032527811258598764,\n        -0.03980000814293025,\n        -0.027249355886273474,\n        -0.0483119792350383,\n        -0.004158985579779806,\n        -0.044690237655200506,\n        -0.06675402473611038,\n        -0.01760324575698994,\n        -0.002724045823976007,\n        -0.08252407193793464,\n        -0.03541265130744753,\n        -0.058831305454695726,\n        -0.04621690939282087,\n        -0.04209604731249566,\n        -0.03521298734192526,\n        -0.03583020261881324,\n        -0.01297813094418932,\n        -0.08506506366028775,\n        -0.06023298135802041,\n        -0.0937759284439464,\n        -0.07261770360181863,\n        -0.005219216360499393,\n        -0.021285832104862984,\n        0.004159119323291636,\n        -0.05635264552371979,\n        -0.07388749963008431,\n        -0.0721911466166168,\n        -0.004649359516167403,\n        -0.08707974252913303,\n        -0.07544811442288604,\n        -0.04994284331490649,\n        0.0031227881348071373,\n        -0.03531209396248819,\n        -0.08445759776936589,\n        -0.047758713233551374,\n        -0.06808528156660963,\n        -0.0838273973706837,\n        -0.007191695987907011,\n        -0.0033242217384797795,\n        0.0018283636127086195,\n        -0.024022483936320654,\n        0.0011182352428949806,\n        -0.024712244013666056,\n        -0.03073330648845155,\n        -0.06635925788964464,\n        -0.040889994120282804,\n        -0.019273953613876446,\n        -0.07282999928957336,\n        0.004108632566202992,\n        -0.07301017599641597,\n        0.0001200741606441312,\n        -0.057009239763334024,\n        -0.03639768762096394,\n        0.004024481126251821,\n        -0.06778316877284757,\n        0.008170790696753825,\n        -0.07603389239007856,\n        -0.012405628132640185,\n        0.006203172290030472,\n        -0.010264628938621928,\n        -0.06190640543636432,\n        -0.07039406120607761,\n        -0.07190858623819793,\n        0.011680163077574308,\n        -0.06795918046802493,\n        0.0025238947065854625,\n        -0.026803538118804093,\n        -0.06781261498172425,\n        -0.0676692294667614,\n        -0.05193321675293956,\n        -0.03010569243579117,\n        -0.05656551448071161,\n        -0.05727488790963825,\n        -0.022078125501263826,\n        -0.019693943240457007,\n        -0.012475668734442932,\n        -0.0050528559622850105,\n        0.04123704319373621,\n        -0.017136331609185845,\n        0.03150393555673871,\n        0.048582281944728994,\n        -0.006312233255071603,\n        0.008859312677638509,\n        0.03691914658895429,\n        0.03915082951847154,\n        0.04244236205271942,\n        0.05644540152322283,\n        0.008927352592496107,\n        0.013749833737535244,\n        0.03911154249878945,\n        0.015918317627455214,\n        -0.0032706036494186685,\n        0.04311954198450396,\n        -0.005482851831669189,\n        8.601374043393228e-05,\n        -0.019077453710291348,\n        3.9019544640361836e-05,\n        -0.06701206331651988,\n        0.0005537306791078,\n        0.02388066370088826,\n        0.011753765480421507,\n        -0.049563604211037116,\n        0.019028851949226655,\n        0.040042774772575784,\n        -0.008648648475011234,\n        0.0040245654152995525,\n        -0.01236424047396234,\n        0.052807693318171256,\n        0.01533466667044281,\n        0.005986310483244495,\n        0.01874217817664145,\n        0.03571579154036442,\n        -0.016059561163005526,\n        0.05897445294793682,\n        0.013674466576345412,\n        0.0562127560561993,\n        0.04577432977931804,\n        0.015926562474166128,\n        0.04593608867768227,\n        0.023883647072937192,\n        -0.03510914455317829,\n        -0.02695177630308948,\n        -0.027518411303873405,\n        -0.020064157447599,\n        -0.01703400729863115,\n        -0.014703854627780982,\n        0.03956928432838459,\n        0.04561550005189818,\n        0.007033547524139122,\n        0.024106400427360314,\n        -0.016821333363812724,\n        0.031949218525127714,\n        -0.048766591560971045,\n        -0.02330854411070908,\n        0.02627460710421719,\n        0.0005090407454845791,\n        0.032748870353502,\n        -0.04011001787170618,\n        0.030450012122096616,\n        -0.013329001923787345,\n        -0.05431252147271416,\n        0.0005209030414521018,\n        -0.034881769960136914,\n        0.03019715116586496,\n        -0.06297529400357003,\n        -0.010640797318919357,\n        0.02600558469506802,\n        -0.009906466843613335,\n        -0.034549926611447866,\n        -0.05504562017226133,\n        0.020035679333325833,\n        -0.032357419813600484,\n        0.016149083797190253,\n        -0.011806542732748275,\n        0.03253560010805641,\n        -0.04098655909166443,\n        0.017195426242788484,\n        -0.02893843683466768,\n        0.034897850552678376,\n        0.0542610159364452,\n        0.036799357817024946,\n        0.009152743246559639,\n        0.012609099192471718,\n        -0.02625746193213141,\n        0.041188859906586814,\n        0.06029675082738793,\n        0.048569971482472815,\n        -0.03467471005437574,\n        0.03708521875301081,\n        0.04376381794262063,\n        0.024102230125137437,\n        -0.018539759528706373,\n        -0.018278954622200486,\n        -0.04391369471972299,\n        0.02810763818664712,\n        0.03958212416687458,\n        0.008171722857597652,\n        0.014177671536353617,\n        -0.017030465586946764,\n        -0.0029215709442955012,\n        -0.001495321521655199,\n        -0.05825664361402924,\n        0.007235094585622021,\n        0.0325633922078584,\n        0.002864275990137305,\n        -0.04783545434309039,\n        -0.010063225122532438,\n        0.038185063815474776,\n        0.007551614881075738,\n        -0.052523125502385054,\n        -0.06024430085055596,\n        -0.042763514073199865,\n        -0.03433850201305208,\n        -0.04290695543319366,\n        -0.01843982120292728,\n        -0.06798472167832453,\n        -0.01451198485491198,\n        -0.01623751460662498,\n        -0.0035384609219457075,\n        0.03471928347027231,\n        0.016021230572283024,\n        0.11997950519243962,\n        0.14287715574608065,\n        0.1421654987110793,\n        0.15268182236055508,\n        0.10614303949270842,\n        0.08671925790910659,\n        0.10979977920193851,\n        0.07787744044169631,\n        0.08791416278307951,\n        0.05188093332278937,\n        0.009902739382372544,\n        0.025239370459766847,\n        0.02002641882907344,\n        -0.043830852160402334,\n        -0.004335569854568427,\n        -0.009965734632322726,\n        -0.01762464239688566,\n        -0.09461324200842748,\n        -0.041254614486856245,\n        -0.10829996686280262,\n        -0.10166449704515965,\n        -0.07078537038424668,\n        -0.07916915249219622,\n        -0.13660271915459066,\n        -0.1532582552934451,\n        -0.13039485824757022,\n        -0.1567133668752398,\n        -0.14733169317277825,\n        -0.1247015644625836,\n        -0.13792721940055758,\n        -0.14035295185196303,\n        -0.12505414474439,\n        -0.13579096568446455,\n        -0.15593290750391356,\n        -0.1431557341519326,\n        -0.16798210402724406,\n        -0.17330005314886507,\n        -0.17808229696305508,\n        -0.15953577416742365,\n        -0.21431251301730564,\n        -0.22592295590778344,\n        -0.14690643099792539,\n        -0.1831302193293296,\n        -0.18971204714633177,\n        -0.22522197905111835,\n        -0.18725321443691578,\n        -0.16019460957557408,\n        -0.18467999003300706,\n        -0.08857803873568698,\n        -0.1219298503667645,\n        -0.09625739927539305,\n        -0.10025292024494313,\n        -0.0547619184235829,\n        -0.08156733108868722,\n        -0.12665887602759687,\n        -0.08007492364071421,\n        -0.12775645483363748,\n        -0.06211814941715432,\n        -0.09031296078924565,\n        -0.06170661247332231,\n        -0.11367632765758903,\n        -0.09345189191601133,\n        -0.09860507468643885,\n        -0.14491376437176942,\n        -0.09538828486860221,\n        -0.07339970303128392,\n        -0.06404352718729808,\n        -0.08596728795147254,\n        -0.1541047177028148,\n        -0.17365957662207732,\n        -0.10719287429103475,\n        -0.16164218202284686,\n        -0.19424474345517043,\n        -0.21265325327069592,\n        -0.1511912202238415,\n        -0.13531700838037544,\n        -0.17993318356450363,\n        -0.15598156928851237,\n        -0.18053169071711722,\n        -0.1649405984068515,\n        -0.1269296444887297,\n        -0.12632746679429152,\n        -0.07658738210178724,\n        -0.15154777225383725,\n        -0.08495097207822003,\n        -0.10085358965721154,\n        -0.12786878010953043,\n        -0.07333247518305598,\n        -0.1621993791499403,\n        -0.09113873776625422,\n        -0.110324001042076,\n        -0.14467677483057556,\n        -0.1385430748458205,\n        -0.19814677918432932,\n        -0.1617450275434234,\n        -0.11135276763563177,\n        -0.1823559959054012,\n        -0.15461814498261717,\n        -0.12928574734261356,\n        -0.2154518403009587,\n        -0.2250659791006876,\n        -0.14392408147174404,\n        -0.1517524008655919,\n        -0.2073831081067692,\n        -0.2460985591365594,\n        -0.2266301484795844,\n        -0.18330053501032004,\n        -0.24316672864344174,\n        -0.19441830845251828,\n        -0.17801717308214748,\n        -0.19550610109013872,\n        -0.1591748953071886,\n        -0.1748167808874122,\n        -0.15100158668528751,\n        -0.21996719264773296,\n        -0.2197948900388599,\n        -0.22609676538675955,\n        -0.18407140008788317,\n        -0.21719399622492708,\n        -0.19900698445018414,\n        -0.1938806727702701,\n        -0.15920302510309683,\n        -0.14751755323545748,\n        -0.13591688761234957,\n        -0.11870745807644742,\n        -0.10194598867748898,\n        -0.09276173383617314,\n        -0.1450513236174406,\n        -0.11796562934530554,\n        -0.06262152906664144,\n        -0.08040647957412761,\n        -0.06511029869798697,\n        -0.0937780532554595,\n        -0.13988609772066413,\n        -0.054551744944657365,\n        -0.12215634090981778,\n        -0.03407447781868643,\n        -0.05858122721004219,\n        -0.12196440980416452,\n        -0.06972838534194903,\n        -0.0741589476098525,\n        -0.08557505869551661,\n        -0.04613988774269523,\n        -0.06374827743620876,\n        -0.08920402845021183,\n        -0.05102023359214058,\n        -0.06135807848468111,\n        -0.03661949993839323,\n        -0.08944672578930608,\n        -0.05635820050253379,\n        -0.10833021693414191,\n        -0.0709128295480558,\n        -0.07588610491869391,\n        -0.057682000842353844,\n        -0.08541253832914805,\n        -0.07520023471689677,\n        -0.07087779084617434,\n        -0.11159547595719474,\n        -0.02376833749714472,\n        -0.026304478997046823,\n        -0.11323779675556565,\n        -0.08347122611644983,\n        -0.08187868279226627,\n        -0.04172475330119482,\n        -0.09159430792057449,\n        -0.056193497843629925,\n        -0.0510139838867453,\n        -0.07413543108579809,\n        -0.01306037831275931,\n        -0.04531834729317248,\n        -0.06892129389778638,\n        -0.031767498277845536,\n        -0.09381741222061891,\n        -0.03640317679630965,\n        -0.022177359184867473,\n        -0.10197212295356163,\n        -0.06823396575317521,\n        -0.08963781309696593,\n        -0.010809332378793486,\n        -0.04834226676855407,\n        -0.01799477028842665,\n        -0.07571355156046804,\n        -0.09881936375697371,\n        -0.0568072552415592,\n        -0.020302625878099247,\n        -0.0366697833232769,\n        -0.06520493402536276,\n        -0.04873364053114527,\n        -0.030569943296200927,\n        -0.035315574807983904,\n        -0.037293578416257675,\n        -0.08210721496029516,\n        -0.11418523280417096,\n        -0.11203666649191818,\n        -0.027474510676159785,\n        -0.10156128839224933,\n        -0.024450851444356072,\n        -0.1118410790778757,\n        -0.08899432184798116,\n        -0.10120435510958213,\n        -0.04076667279050374,\n        -0.1043299884961704,\n        -0.0407853828486577,\n        -0.06950953830773879,\n        -0.1080706526687385,\n        -0.050971158186005824,\n        -0.04420082510919373,\n        -0.09067810804893635,\n        -0.08016386701053879,\n        -0.07038001252415661,\n        -0.02260495584988498,\n        -0.0819009019749977,\n        -0.019335351403083074,\n        -0.08284306343942949,\n        -0.10632376279523134,\n        -0.04983308348216371,\n        -0.0801218876046426,\n        -0.08802402117512978,\n        -0.037868298844695586,\n        -0.046202737025149,\n        -0.024734206589148783,\n        -0.029876686639230945,\n        -0.06567480226929763,\n        -0.03970386918254506,\n        -0.04996558652583713,\n        -0.019058769706053868,\n        -0.09547510728941004,\n        -0.05845580064350026,\n        -0.023356422325794685,\n        -0.04843955516823473,\n        -0.03972479147708764,\n        -0.10237950648597496,\n        -0.06962249989205195,\n        -0.08814442737903318,\n        -0.022515209730745164,\n        -0.07148279928493904,\n        -0.056159184166467535,\n        -0.007897810708489033,\n        -0.06910655564482816,\n        -0.026235912024739256,\n        -0.08538883428971192,\n        -0.09311507189031785,\n        -0.056866590451548724,\n        -0.03507264065746342,\n        -0.02526975374675683,\n        -0.08233659466925977,\n        -0.06287669490132658,\n        -0.06273600771804824,\n        -0.027620809164285446,\n        -0.02744466756077926,\n        -0.03571705012202201,\n        -0.010335994008941904,\n        -0.021436991504056955,\n        -0.0627634323545474,\n        -0.0688353791924646,\n        -0.044017131059146175,\n        -0.012710288531501097,\n        -0.07849380711820797,\n        -0.019169134419808925,\n        -0.03294738536179939,\n        -0.07049293896152206,\n        -0.08686249286354879,\n        -0.003960470767975352,\n        -0.071469997124457,\n        -0.024979120460659882,\n        -0.08353115232849477,\n        -0.04834631507502535,\n        -0.04058756227084484,\n        -0.06233767765071848,\n        -0.0686603168054533,\n        -0.08793265661465018,\n        -0.03136883172664597,\n        -0.05858562129949149,\n        -0.05898493844021409,\n        -0.02088654169919691,\n        -0.07390891607473027,\n        -0.06593451856776751,\n        -0.03533894978522896,\n        -0.04516787179681808,\n        -0.06828711244748978,\n        -0.01676545324296891,\n        -0.010231942584126085,\n        -0.093385094988285,\n        -0.029581412007903537,\n        -0.057525848997472075,\n        -0.09223413620293075,\n        -0.041654478158035205,\n        -0.03647167417695793,\n        -0.08214249772293383,\n        -0.007145859338917777,\n        -0.07162820891500282,\n        -0.07040923474372907,\n        -0.08724170973756146,\n        -0.008777257414475713,\n        -0.06102679718953764,\n        -0.018275225811703627,\n        -0.02860430912008101,\n        -0.021419502896698927,\n        -0.04402296289654406,\n        -0.023393575197590673,\n        -0.05056423012634558,\n        -0.040471864567257564,\n        -0.020945901691673475,\n        -0.013013100503982106,\n        -0.046044657389945814,\n        -0.07789405512203781,\n        -0.098380988460643,\n        -0.0765690682278797,\n        -0.005271214701153982,\n        -0.04533365008732698,\n        -0.07730819454347422,\n        -0.026915763287327147,\n        -0.07407264947454023,\n        -0.08049220664925358,\n        -0.08689697955569062,\n        -0.020683894883096365,\n        -0.08700378197909302,\n        -0.05210271534918613,\n        -0.045706420322734004,\n        -0.020365208552788797,\n        -0.004800286246563117,\n        -0.034396227138472256,\n        -0.061925048798682554,\n        -0.024130712072634047,\n        -0.09841306585029663,\n        -0.018313296885791808,\n        -0.027129259569156208,\n        -0.041179441518282296,\n        -0.0666001539037856,\n        -0.07547912187502415,\n        -0.09156184793270876,\n        -0.04530880458269041,\n        -0.03813213266942179,\n        -0.03885301624168193,\n        -0.03589118439037291,\n        -0.00813899190006169,\n        -0.08618538881822009,\n        -0.030222149893706897,\n        -0.003910143705211492,\n        -0.08717494409188706,\n        -0.007265231109661655,\n        -0.07875883611587171,\n        -0.010139727091580031,\n        -0.0957082278690991,\n        -0.005349919635913758,\n        -0.005066637491742674,\n        -0.03043556121002067,\n        -0.0822998701059927,\n        -0.05995776768242407,\n        -0.05665034939212596,\n        -0.09564989341108793,\n        -0.08050480737658106,\n        -0.045085623936946574,\n        -0.090463312043363,\n        -0.019201792925389125,\n        -0.0651989617595317,\n        -0.0797866014949867,\n        -0.09031274948447945,\n        -0.048381506333487694,\n        -0.022348832943290133,\n        -0.04577863656520664,\n        -0.006699699459417196,\n        -0.007917694286628576,\n        -0.05587059755696915,\n        -0.04063468904483728,\n        -0.029942663551302897,\n        -0.07727968325693997,\n        -0.001004055945018234,\n        -0.052765030955363605,\n        -0.08426412565049139,\n        -0.0026886948080778973,\n        -0.06156301721255925,\n        -0.08386976689044737,\n        -0.07461887377461215,\n        -0.0267933363656133,\n        -0.015884134433047644,\n        -0.05509752356130886,\n        -0.012949164285212904,\n        -0.006375951828091136,\n        -0.044965688096445786,\n        -0.012004289502400466,\n        -0.06429009422399139,\n        -0.039467865111146194,\n        -0.06508965855922547,\n        -0.09226447047135926,\n        -0.07097227888997881,\n        -0.09947460933785364,\n        -0.07776167068825883,\n        -0.019867119844045267,\n        -0.011304088945559074,\n        -0.0699568444630136,\n        -0.09107487395926012,\n        -0.041432504368487943,\n        -0.009291501041257026,\n        0.00018338170819013814,\n        -0.07027190835254168,\n        -0.045177445258302716,\n        -0.009964275606698037,\n        -0.0006401486440111336,\n        -0.08614762128977707,\n        -0.07598069151285897,\n        -0.04696183199588901,\n        -0.08266654940701092,\n        -0.07038597470736435,\n        -0.0775376837070535,\n        -0.09611247755750169,\n        -0.08210020753389759,\n        -0.08699458249093882,\n        -0.0904240931440967,\n        -0.02272257782657612,\n    ]\n    fit = [\n        0.007558037729005734,\n        0.007704135952311952,\n        0.007854643266272825,\n        0.008009741595724804,\n        0.008169622406635893,\n        0.008334487313942492,\n        0.008504548735008624,\n        0.00868003059265416,\n        0.008861169072086193,\n        0.009048213436496769,\n        0.00924142690656797,\n        0.009441087609655674,\n        0.009647489605014437,\n        0.00986094399208444,\n        0.010081780109596539,\n        0.010310346834072157,\n        0.010547013987213182,\n        0.010792173862705354,\n        0.011046242884111088,\n        0.011309663406822393,\n        0.01158290567849847,\n        0.011866469974050508,\n        0.01216088892308042,\n        0.012466730049763036,\n        0.012784598547513716,\n        0.01311514031344628,\n        0.013459045270643608,\n        0.013817051009688296,\n        0.014189946784793267,\n        0.01457857790430446,\n        0.014983850560400316,\n        0.015406737148583337,\n        0.01584828213415991,\n        0.016309608530467617,\n        0.016791925062289027,\n        0.017296534097871366,\n        0.017824840444464696,\n        0.01837836111555409,\n        0.01895873619329062,\n        0.01956774092738052,\n        0.020207299232291445,\n        0.02087949876858438,\n        0.021586607822076845,\n        0.022331094227106153,\n        0.02311564661824636,\n        0.02394319833947,\n        0.024816954392171353,\n        0.02574042186517364,\n        0.026717444362625492,\n        0.02775224103172802,\n        0.02884945089415743,\n        0.030014183306057082,\n        0.03125207551545397,\n        0.03256935845763962,\n        0.033972932134210626,\n        0.035470452167127624,\n        0.03707042941391164,\n        0.038782344884446214,\n        0.04061678262659647,\n        0.04258558376260847,\n        0.04470202548001598,\n        0.04698102953259929,\n        0.049439405716614065,\n        0.052096136888317206,\n        0.054972713420145564,\n        0.058093526600579565,\n        0.0614863324186848,\n        0.06518279949503006,\n        0.0692191576831353,\n        0.07363696711919913,\n        0.07848403126889333,\n        0.0838154817837763,\n        0.08969506761158735,\n        0.09619668549520888,\n        0.10340619310790909,\n        0.11142354840408526,\n        0.12036531714734568,\n        0.1303675812331744,\n        0.14158925696187916,\n        0.1542157845549939,\n        0.1684630635321982,\n        0.1845813724867136,\n        0.20285886297976752,\n        0.22362429482708668,\n        0.24724982205580484,\n        0.2741588900403024,\n        0.3048547458017801,\n        0.3400017453928198,\n        0.38059977839108006,\n        0.42824791284068614,\n        0.4853378865595906,\n        0.554763774454905,\n        0.6385978452326158,\n        0.7355693324221078,\n        0.83828361634229,\n        0.9323123384506079,\n        0.9991846883868519,\n        1.0230770898987258,\n        0.9978762632256294,\n        0.9301419406278203,\n        0.8359350397469238,\n        0.7336862247438616,\n        0.6375993677241459,\n        0.5548180130422883,\n        0.48644597617552565,\n        0.43035087684748186,\n        0.3836498587119764,\n        0.34398852478769104,\n        0.3098036014982445,\n        0.2801209557107772,\n        0.25429335882952586,\n        0.23182944222345261,\n        0.21231448582523027,\n        0.19538246452078123,\n        0.1807077947327619,\n        0.1680017955703364,\n        0.15700904810770325,\n        0.14750292364519982,\n        0.13928064448819458,\n        0.13215834620039119,\n        0.12596654984904812,\n        0.12054645890435192,\n        0.11574757691530178,\n        0.1114272080205032,\n        0.10745229794022575,\n        0.10370364148784941,\n        0.10008170152996108,\n        0.09651241392933478,\n        0.09295091304013012,\n        0.08938155600037362,\n        0.08581389779653678,\n        0.08227572079207121,\n        0.07880506232988896,\n        0.07544308252892962,\n        0.07222885548122869,\n        0.06919629930994768,\n        0.0663728768680921,\n        0.06377948855576382,\n        0.061431029949778615,\n        0.059337244960939256,\n        0.05750366278510094,\n        0.0559325187434027,\n        0.05462362111555879,\n        0.05357515138161656,\n        0.05278438930633367,\n        0.05224834854032134,\n        0.05196429943724182,\n        0.05193014623130406,\n        0.05214461579027114,\n        0.05260720414514187,\n        0.053317815498598334,\n        0.05427602523871811,\n        0.05547994613813755,\n        0.05692492541013413,\n        0.05860312576022261,\n        0.06050693854365237,\n        0.06264154478228379,\n        0.06505021512191912,\n        0.06784079205781088,\n        0.0711709536149729,\n        0.07513351760616505,\n        0.07954218118542014,\n        0.08376136610433851,\n        0.08681080939864179,\n        0.08781582498450571,\n        0.08652831170030603,\n        0.08348894062112971,\n        0.07968557140982306,\n        0.07600791809332011,\n        0.07291702017698153,\n        0.07046990792586294,\n        0.06853312977663563,\n        0.06696699125527941,\n        0.0656963996973698,\n        0.06470277537731532,\n        0.06399496155402398,\n        0.06358877521123615,\n        0.06349878656529902,\n        0.06373706306717654,\n        0.0643143755827869,\n        0.0652417983587692,\n        0.06653207965232276,\n        0.06820069737627682,\n        0.0702666477412026,\n        0.0727530218655715,\n        0.07568740071955131,\n        0.07910206607063536,\n        0.08303398739509238,\n        0.08752450001731474,\n        0.09261853483954716,\n        0.09836319227286244,\n        0.10480537436215615,\n        0.11198812379072332,\n        0.11994538569791653,\n        0.12869556174843103,\n        0.13823676316551498,\n        0.14855342842738062,\n        0.15965536316799442,\n        0.1716742341008318,\n        0.185002809834692,\n        0.20034260875560822,\n        0.21838964901751443,\n        0.23897969218486814,\n        0.2600484000792676,\n        0.2774114381483517,\n        0.2862139929657546,\n        0.2835255327604181,\n        0.2701593673478454,\n        0.2501520080507673,\n        0.2283622255613634,\n        0.20817142855178808,\n        0.19075842710464044,\n        0.17579837421089556,\n        0.16251789134872593,\n        0.15032972743209236,\n        0.13896204873036447,\n        0.12834633511255497,\n        0.11848813289387025,\n        0.10939625405948593,\n        0.10106032774488985,\n        0.09345065773577897,\n        0.08652427609752417,\n        0.08023097432908183,\n        0.07451781460995727,\n        0.06933215039529234,\n        0.06462350393086908,\n        0.06034463547137578,\n        0.056452064928951606,\n        0.05290623579393525,\n        0.04967145487467489,\n        0.04671569941075043,\n        0.04401035283756896,\n        0.0415299091733877,\n        0.03925167129854304,\n        0.03715545843262785,\n        0.035223331481808784,\n        0.03343934059930184,\n        0.03178929654532342,\n        0.030260565735105827,\n        0.028841887869251237,\n        0.027523214506240457,\n        0.026295566697216832,\n        0.025150909747345324,\n        0.024082043222515198,\n        0.023082504436648138,\n        0.022146483802285843,\n        0.02126875058583111,\n        0.020444587766833333,\n        0.01966973485107054,\n        0.018940337626190712,\n        0.01825290397470271,\n        0.017604264971806546,\n        0.016991540595343274,\n        0.016412109462875996,\n        0.015863582087631486,\n        0.015343777211868415,\n        0.014850700834301983,\n        0.014382527598560124,\n        0.013937584253245275,\n        0.013514334931900948,\n        0.013111368033813388,\n        0.012727384514804457,\n        0.012361187421589162,\n        0.01201167252440595,\n        0.011677819920931476,\n        0.011358686500354598,\n        0.01105339917024549,\n        0.010761148760802919,\n        0.010481184531449361,\n        0.010212809213777985,\n        0.009955374532729072,\n        0.00970827715473735,\n        0.009470955017587851,\n        0.009242884001957968,\n        0.009023574909212684,\n        0.008812570714039708,\n        0.008609444064042349,\n        0.008413795001506574,\n        0.008225248885288944,\n        0.008043454493174368,\n        0.0078680822871727,\n        0.007698822826095297,\n        0.007535385311408183,\n        0.007377496253823362,\n        0.007224898249389655,\n        0.007077348854996279,\n        0.006934619554227459,\n        0.006796494805416886,\n        0.0066627711645627224,\n        0.006533256476487115,\n        0.006407769128269972,\n        0.006286137359564306,\n        0.006168198624915938,\n        0.006053799003673588,\n        0.005942792653489487,\n        0.0058350413037827065,\n        0.005730413785871719,\n        0.005628785596783509,\n        0.005530038494016842,\n        0.0054340601187815585,\n        0.0053407436454552815,\n        0.005249987455198113,\n        0.005161694831844865,\n        0.005075773678357376,\n        0.004992136252265605,\n        0.004910698918660611,\n        0.00483138191942209,\n        0.004754109157474262,\n        0.0046788079949621475,\n        0.004605409064332405,\n        0.004533846091384103,\n        0.004464055729431093,\n        0.004395977403785306,\n        0.004329553165833583,\n        0.0042647275560371845,\n        0.004201447475235542,\n        0.004139662063683686,\n        0.0040793225872960415,\n        0.004020382330610028,\n        0.0039627964960185225,\n        0.0039065221088549484,\n        0.0038515179279448863,\n        0.0037977443612669526,\n        0.0037451633863911094,\n        0.003693738475387537,\n        0.003643434523920283,\n        0.0035942177842607226,\n        0.0035460558019746596,\n        0.003498917356053982,\n        0.0034527724022795636,\n        0.0034075920196174614,\n        0.0033633483594631974,\n        0.003320014597562232,\n        0.003277564888445897,\n        0.003235974322233076,\n        0.003195218883657737,\n        0.003155275413191716,\n        0.0031161215701408715,\n        0.003077735797600206,\n        0.0030400972891616723,\n        0.0030031859572743763,\n        0.0029669824031640923,\n        0.0029314678882240847,\n        0.0028966243067956726,\n        0.0028624341602610376,\n        0.0028288805323765653,\n        0.0027959470657787228,\n        0.002763617939598992,\n        0.0027318778481279712,\n        0.0027007119804728225,\n        0.002670106001154908,\n        0.0026400460315983837,\n        0.0026105186324626994,\n        0.00258151078677539,\n        0.002553009883823454,\n        0.0025250037037646417,\n        0.002497480402921637,\n        0.0024704284997247583,\n        0.0024438368612702543,\n        0.0024176946904635767,\n        0.002391991513718477,\n        0.0023667171691843514,\n        0.0023418617954760745,\n        0.002317415820881727,\n        0.0022933699530248777,\n        0.002269715168959907,\n        0.002246442705679176,\n        0.002223544051012799,\n        0.0022010109349022144,\n        0.002178835321030189,\n        0.0021570093987903216,\n        0.002135525575580624,\n        0.0021143764694058625,\n        0.002093554901774791,\n        0.002073053890878647,\n        0.0020528666450381275,\n        0.0020329865564069627,\n        0.002013407194920283,\n        0.0019941223024771693,\n        0.001975125787346715,\n        0.0019564117187880273,\n        0.0019379743218746505,\n        0.0019198079725144673,\n        0.0019019071926567876,\n        0.0018842666456784021,\n        0.001866881131940952,\n        0.0018497455845124938,\n        0.0018328550650460462,\n        0.0018162047598087316,\n        0.0017997899758550734,\n        0.0017836061373384948,\n        0.0017676487819553235,\n        0.0017519135575157357,\n        0.0017363962186366377,\n        0.001721092623551218,\n        0.001705998731030816,\n        0.0016911105974141694,\n        0.0016764243737401284,\n        0.0016619363029793943,\n        0.001647642717361536,\n        0.0016335400357934682,\n        0.0016196247613657552,\n        0.0016058934789434098,\n        0.001592342852837797,\n        0.0015789696245566143,\n        0.0015657706106288055,\n        0.0015527427005016733,\n        0.001539882854507367,\n        0.001527188101896157,\n        0.001514655538933915,\n        0.0015022823270614827,\n        0.0014900656911135193,\n        0.0014780029175947007,\n        0.0014660913530111265,\n        0.0014543284022548175,\n        0.001442711527039564,\n        0.001431238244385985,\n        0.0014199061251543021,\n        0.001408712792622821,\n        0.0013976559211107131,\n        0.001386733234643396,\n        0.0013759425056590162,\n        0.0013652815537545555,\n        0.0013547482444702663,\n        0.00134434048811094,\n        0.0013340562386028668,\n        0.0013238934923851323,\n        0.0013138502873341618,\n        0.0013039247017202354,\n        0.0012941148531951142,\n        0.001284418897809371,\n        0.0012748350290587573,\n        0.0012653614769584376,\n        0.0012559965071441553,\n        0.0012467384199995185,\n        0.0012375855498084377,\n        0.001228536263931962,\n        0.0012195889620086678,\n        0.0012107420751777676,\n        0.001201994065324341,\n        0.0011933434243458427,\n        0.0011847886734391855,\n        0.001176328362407844,\n        0.0011679610689882755,\n        0.0011596853981949776,\n        0.0011514999816836721,\n        0.0011434034771320295,\n        0.001135394567637324,\n        0.001127471961130555,\n        0.0011196343898064523,\n        0.0011118806095689396,\n        0.0011042093994914903,\n        0.0010966195612919956,\n        0.001089109918821645,\n        0.001081679317567405,\n        0.001074326624167704,\n        0.0010670507259408282,\n        0.0010598505304258033,\n        0.0010527249649352338,\n        0.0010456729761197762,\n        0.0010386935295440061,\n        0.0010317856092731392,\n        0.0010249482174705116,\n        0.0010181803740052474,\n        0.0010114811160701065,\n        0.0010048494978089177,\n        0.0009982845899535325,\n        0.0009917854794699518,\n        0.0009853512692132582,\n        0.000978981077591319,\n        0.0009726740382367954,\n        0.0009664292996873214,\n        0.0009602460250736286,\n        0.0009541233918153105,\n        0.0009480605913241152,\n        0.0009420568287144895,\n        0.0009361113225211382,\n        0.0009302233044234942,\n        0.000924392018976837,\n        0.0009186167233499187,\n        0.0009128966870688149,\n        0.0009072311917669926,\n        0.0009016195309413146,\n        0.0008960610097138028,\n        0.0008905549445990639,\n        0.0008851006632772246,\n        0.0008796975043721539,\n        0.0008743448172348969,\n        0.0008690419617321671,\n        0.0008637883080397646,\n        0.0008585832364407225,\n        0.0008534261371281743,\n        0.0008483164100127338,\n        0.0008432534645342465,\n        0.0008382367194778879,\n        0.0008332656027944599,\n        0.0008283395514246741,\n        0.0008234580111274904,\n        0.0008186204363122736,\n        0.0008138262898747389,\n        0.0008090750430365286,\n        0.0008043661751884201,\n        0.0007996991737369355,\n        0.0007950735339544261,\n        0.0007904887588323951,\n        0.0007859443589380843,\n        0.0007814398522741905,\n        0.0007769747641415969,\n        0.0007725486270051957,\n        0.0007681609803625181,\n        0.0007638113706152153,\n        0.0007594993509433823,\n        0.0007552244811824538,\n        0.0007509863277028739,\n        0.0007467844632922244,\n        0.0007426184670398794,\n        0.0007384879242241342,\n        0.0007343924262016854,\n        0.0007303315702994681,\n        0.0007263049597086985,\n        0.0007223122033812035,\n        0.0007183529159278832,\n        0.0007144267175192426,\n        0.0007105332337880507,\n        0.000706672095733954,\n        0.0007028429396300634,\n        0.0006990454069314908,\n        0.0006952791441856912,\n        0.0006915438029447066,\n        0.0006878390396791029,\n        0.0006841645156937526,\n        0.0006805198970452342,\n        0.0006769048544608899,\n        0.0006733190632596114,\n        0.0006697622032740685,\n        0.0006662339587745897,\n        0.0006627340183945098,\n        0.00065926207505701,\n        0.0006558178259034042,\n        0.0006524009722228075,\n        0.0006490112193832387,\n        0.0006456482767640444,\n        0.0006423118576895925,\n        0.0006390016793643687,\n        0.0006357174628092016,\n        0.0006324589327988414,\n        0.0006292258178006256,\n        0.00062601784991443,\n        0.0006228347648137011,\n        0.0006196763016876258,\n        0.0006165422031844392,\n        0.000613432215355772,\n        0.0006103460876020483,\n        0.0006072835726189246,\n        0.0006042444263447966,\n        0.000601228407909174,\n        0.0005982352795820961,\n        0.0005952648067244909,\n        0.00059231675773945,\n        0.0005893909040244061,\n        0.0005864870199241666,\n        0.0005836048826848572,\n        0.0005807442724087043,\n        0.0005779049720096244,\n        0.0005750867671696497,\n        0.0005722894462961217,\n        0.0005695128004797045,\n        0.000566756623453124,\n        0.000564020711550666,\n        0.0005613048636683923,\n        0.0005586088812251089,\n        0.0005559325681240026,\n        0.0005532757307149458,\n        0.000550638177757537,\n        0.0005480197203847487,\n        0.0005454201720671986,\n        0.0005428393485781557,\n        0.0005402770679590399,\n        0.0005377331504855948,\n        0.0005352074186346645,\n        0.0005326996970515113,\n        0.0005302098125177339,\n        0.0005277375939197193,\n        0.0005252828722177028,\n        0.0005228454804152294,\n        0.0005204252535293413,\n        0.0005180220285610909,\n        0.000515635644466661,\n        0.0005132659421289709,\n        0.0005109127643297337,\n        0.0005085759557220265,\n        0.0005062553628032984,\n        0.0005039508338888776,\n        0.0005016622190858536,\n        0.0004993893702674741,\n        0.0004971321410479382,\n        0.0004948903867576099,\n        0.0004926639644186812,\n        0.0004904527327211621,\n        0.0004882565519993664,\n        0.0004860752842087285,\n        0.00048390879290304,\n        0.00048175694321198753,\n        0.0004796196018191784,\n        0.00047749663694045263,\n        0.00047538791830251115,\n        0.00047329331712200884,\n        0.0004712127060849114,\n        0.0004691459593261782,\n        0.0004670929524097922,\n        0.0004650535623091784,\n    ]\n    pseudovoigt_1 = [\n        0.006451554509034198,\n        0.006585476698527853,\n        0.006723599444187362,\n        0.006866099702525926,\n        0.007013163816216949,\n        0.0071649881158480375,\n        0.007321779567005761,\n        0.007483756466621231,\n        0.00765114919289272,\n        0.007824201013529807,\n        0.0080031689575396,\n        0.008188324756304799,\n        0.00837995586029303,\n        0.00857836653839354,\n        0.008783879067610845,\n        0.00899683502166381,\n        0.009217596667954879,\n        0.009446548483400347,\n        0.00968409880076276,\n        0.009930681598418475,\n        0.010186758447944685,\n        0.010452820635545076,\n        0.010729391475174148,\n        0.011017028833299556,\n        0.011316327887590212,\n        0.011627924144476788,\n        0.011952496743543858,\n        0.012290772080133076,\n        0.012643527781423882,\n        0.013011597075684151,\n        0.01339587359942948,\n        0.013797316692993212,\n        0.014216957241602159,\n        0.014655904126607477,\n        0.015115351360190628,\n        0.015596585986834072,\n        0.016100996846328455,\n        0.01663008430633814,\n        0.017185471087862603,\n        0.017768914324670374,\n        0.018382319018365047,\n        0.019027753074673776,\n        0.019707464134425492,\n        0.02042389844522613,\n        0.021179722057897966,\n        0.021977844676359676,\n        0.02282144654201824,\n        0.02371400879541487,\n        0.024659347830611748,\n        0.02566165424379928,\n        0.02672553707947959,\n        0.027856074198537122,\n        0.029058869736428856,\n        0.03034011979134436,\n        0.031706687687266186,\n        0.03316619040244032,\n        0.034727098048431555,\n        0.036398848639181476,\n        0.03819198081610905,\n        0.04011828770991005,\n        0.04219099574132177,\n        0.04442497291476291,\n        0.04683697206823475,\n        0.049445915643454574,\n        0.052273229871266175,\n        0.055343237874757804,\n        0.058683623128146116,\n        0.06232597702980798,\n        0.06630644710985636,\n        0.07066650564573977,\n        0.0754538622297807,\n        0.08072354809561633,\n        0.0865392046413466,\n        0.0929746132766423,\n        0.10011550783252181,\n        0.10806171310231452,\n        0.11692965146252672,\n        0.1268552501743809,\n        0.1379972585005336,\n        0.15054093590219972,\n        0.16470198589610846,\n        0.1807304740577059,\n        0.19891431981982804,\n        0.2195820292405393,\n        0.2431054778806263,\n        0.2699078041089904,\n        0.3004919145611932,\n        0.3355217853239132,\n        0.37599687841073004,\n        0.4235157762782212,\n        0.4804696595641729,\n        0.5497519568007259,\n        0.633434178459169,\n        0.7302446591163978,\n        0.8327877032169321,\n        0.9266336548237922,\n        0.9933101309121424,\n        1.0169916441709592,\n        0.9915625935063777,\n        0.923579900732058,\n        0.8291011014616887,\n        0.7265528253201399,\n        0.6301341852038639,\n        0.5469831874900762,\n        0.4781973060759377,\n        0.42163703250551204,\n        0.37441166765097234,\n        0.3341583967956935,\n        0.29930517189314515,\n        0.2688690333717684,\n        0.24219426967402488,\n        0.21878185880359247,\n        0.1982108301771455,\n        0.18011096594246295,\n        0.16415527919953526,\n        0.1500572813396592,\n        0.13756822305479785,\n        0.126473579122887,\n        0.11658912336248697,\n        0.10775700009766069,\n        0.09984204793951613,\n        0.09272849729680356,\n        0.08631707802212014,\n        0.08052252685282763,\n        0.07527146150664026,\n        0.07050057931784638,\n        0.06615513687814854,\n        0.06218766957140914,\n        0.05855691404082395,\n        0.05522690132297337,\n        0.05216619300462455,\n        0.049347237004653904,\n        0.04674582333507303,\n        0.044340623429679704,\n        0.04211279937384167,\n        0.04004567167422453,\n        0.03812443612998154,\n        0.03633592196337197,\n        0.0346683846896924,\n        0.033111328299380155,\n        0.03165535222832937,\n        0.03029201933891263,\n        0.029013741751538886,\n        0.027813681877679103,\n        0.02668566642902416,\n        0.02562411152930284,\n        0.0246239573479953,\n        0.023680610919141587,\n        0.02278989601219161,\n        0.021948009092358427,\n        0.02115148055094467,\n        0.020397140506308774,\n        0.01968208857738346,\n        0.019003667117125776,\n        0.01835943746558472,\n        0.01774715884357494,\n        0.01716476956003318,\n        0.016610370250483664,\n        0.01608220890188118,\n        0.015578667451456545,\n        0.015098249774910696,\n        0.014639570903102538,\n        0.014201347326846924,\n        0.013782388267082977,\n        0.013381587802907538,\n        0.012997917763149507,\n        0.01263042129858331,\n        0.012278207061799077,\n        0.01194044393037342,\n        0.01161635621650215,\n        0.011305219312816264,\n        0.011006355729838315,\n        0.010719131485558146,\n        0.010442952812012097,\n        0.010177263147618553,\n        0.009921540387427014,\n        0.00967529436643698,\n        0.009438064553789252,\n        0.009209417937970971,\n        0.00898894708524485,\n        0.008776268355346884,\n        0.008571020260123768,\n        0.008372861952226982,\n        0.008181471832266508,\n        0.007996546263972852,\n        0.007817798387937855,\n        0.007644957025417106,\n        0.007477765664492792,\n        0.007315981521625775,\n        0.007159374672280312,\n        0.007007727244891813,\n        0.006860832672975331,\n        0.006718495000646718,\n        0.006580528237254991,\n        0.006446755757209141,\n        0.006317009741429294,\n        0.006191130657165497,\n        0.00606896677321016,\n        0.005950373707786558,\n        0.0058352140066272856,\n        0.0057233567489670895,\n        0.00561467717936478,\n        0.005509056363442378,\n        0.005406380865786744,\n        0.005306542448402178,\n        0.00520943778823279,\n        0.005114968212392079,\n        0.005023039449845543,\n        0.00493356139839091,\n        0.004846447905870799,\n        0.004761616564635282,\n        0.0046789885183471745,\n        0.004598488280292001,\n        0.004520043562418069,\n        0.004443585114389939,\n        0.0043690465719919795,\n        0.004296364314267665,\n        0.00422547732882508,\n        0.004156327084780567,\n        0.004088857412850447,\n        0.004023014392135744,\n        0.003958746243177141,\n        0.0038960032268871582,\n        0.0038347375489939444,\n        0.003774903269656456,\n        0.0037164562179342114,\n        0.0036593539108163682,\n        0.003603555476534982,\n        0.0035490215819057435,\n        0.0034957143634566454,\n        0.0034435973621209587,\n        0.0033926354612855637,\n        0.003342794827999363,\n        0.003294042857159187,\n        0.003246348118502354,\n        0.003199680306245956,\n        0.0031540101912231775,\n        0.003109309575376309,\n        0.0030655512484749543,\n        0.0030227089469361972,\n        0.0029807573146308957,\n        0.0029396718655676623,\n        0.0028994289483524676,\n        0.0028600057123281428,\n        0.002821380075303725,\n        0.00278353069278905,\n        0.0027464369286549417,\n        0.0027100788271441382,\n        0.002674437086162409,\n        0.002639493031783471,\n        0.0026052285939051397,\n        0.0025716262829977824,\n        0.0025386691678894275,\n        0.0025063408545351715,\n        0.002474625465721366,\n        0.002443507621657903,\n        0.0024129724214145306,\n        0.002383005425159532,\n        0.0023535926371614246,\n        0.0023247204895165043,\n        0.002296375826567041,\n        0.002268545889976869,\n        0.0022412183044329165,\n        0.00221438106394285,\n        0.002188022518700651,\n        0.002162131362493396,\n        0.0021366966206239407,\n        0.002111707638325495,\n        0.0020871540696453823,\n        0.0020630258667763738,\n        0.0020393132698151746,\n        0.002016006796928622,\n        0.0019930972349091807,\n        0.00197057563010223,\n        0.0019484332796885372,\n        0.0019266617233061032,\n        0.001905252734996408,\n        0.001884198315460775,\n        0.0018634906846132905,\n        0.0018431222744173924,\n        0.0018230857219938522,\n        0.0018033738629884618,\n        0.0017839797251883332,\n        0.0017648965223761943,\n        0.001746117648412635,\n        0.001727636671536676,\n        0.0017094473288755206,\n        0.0016915435211547656,\n        0.0016739193076007561,\n        0.0016565689010271608,\n        0.00163948666309819,\n        0.0016226670997612578,\n        0.0016061048568421898,\n        0.0015897947157964107,\n        0.00157373158960983,\n        0.0015579105188434368,\n        0.0015423266678158717,\n        0.001526975320918523,\n        0.0015118518790578905,\n        0.0014969518562202547,\n        0.001482270876153846,\n        0.0014678046691639585,\n        0.0014535490690166402,\n        0.0014395000099467752,\n        0.0014256535237665462,\n        0.0014120057370704852,\n        0.0013985528685333893,\n        0.001385291226297652,\n        0.0013722172054466027,\n        0.001359327285560662,\n        0.001346618028353213,\n        0.0013340860753832376,\n        0.001321728145841887,\n        0.0013095410344102598,\n        0.0012975216091857982,\n        0.0012856668096747834,\n        0.0012739736448485542,\n        0.00126243919126114,\n        0.0012510605912260935,\n        0.0012398350510504266,\n        0.001228759839323596,\n        0.0012178322852595923,\n        0.0012070497770902734,\n        0.0011964097605081162,\n        0.0011859097371566723,\n        0.0011755472631670737,\n        0.001165319947738969,\n        0.0011552254517643709,\n        0.0011452614864929456,\n        0.0011354258122373,\n        0.0011257162371169321,\n        0.0011161306158395088,\n        0.0011066668485182271,\n        0.001097322879524026,\n        0.0010880966963714958,\n        0.0010789863286373525,\n        0.001069989846910393,\n        0.0010611053617718942,\n        0.001052331022805446,\n        0.0010436650176352605,\n        0.0010351055709920082,\n        0.00102665094380531,\n        0.001018299432321993,\n        0.0010100493672493035,\n        0.0010018991129222491,\n        0.0009938470664943163,\n        0.0009858916571508069,\n        0.000978031345344078,\n        0.0009702646220499828,\n        0.0009625900080448621,\n        0.000955006053202416,\n        0.0009475113358098609,\n        0.0009401044619027391,\n        0.0009327840646178341,\n        0.0009255488035636,\n        0.0009183973642075971,\n        0.0009113284572803772,\n        0.0009043408181953498,\n        0.000897433206484109,\n        0.0008906044052467844,\n        0.0008838532206169301,\n        0.0008771784812405398,\n        0.0008705790377687444,\n        0.0008640537623638019,\n        0.0008576015482179594,\n        0.0008512213090848309,\n        0.0008449119788229013,\n        0.0008386725109508099,\n        0.0008325018782140594,\n        0.0008263990721628279,\n        0.0008203631027405453,\n        0.0008143929978829367,\n        0.0008084878031272145,\n        0.0008026465812311434,\n        0.0007968684118016764,\n        0.0007911523909329079,\n        0.0007854976308530531,\n        0.0007799032595802287,\n        0.0007743684205867524,\n        0.0007688922724717471,\n        0.0007634739886417989,\n        0.0007581127569994575,\n        0.0007528077796393428,\n        0.0007475582725516663,\n        0.0007423634653329402,\n        0.0007372226009036958,\n        0.0007321349352330006,\n        0.0007270997370696034,\n        0.0007221162876795085,\n        0.0007171838805898232,\n        0.0007123018213386901,\n        0.0007074694272311522,\n        0.0007026860271007832,\n        0.0006979509610769371,\n        0.0006932635803574455,\n        0.0006886232469866502,\n        0.0006840293336385934,\n        0.0006794812234052596,\n        0.0006749783095897089,\n        0.0006705199955039966,\n        0.000666105694271731,\n        0.0006617348286351698,\n        0.0006574068307667149,\n        0.000653121142084712,\n        0.0006488772130734227,\n        0.0006446745031070824,\n        0.0006405124802779196,\n        0.0006363906212280456,\n        0.0006323084109851145,\n        0.0006282653428016559,\n        0.0006242609179979815,\n        0.0006202946458085881,\n        0.0006163660432319529,\n        0.0006124746348836497,\n        0.0006086199528526898,\n        0.0006048015365610193,\n        0.0006010189326260815,\n        0.0005972716947263814,\n        0.0005935593834699622,\n        0.0005898815662657386,\n        0.0005862378171976018,\n        0.0005826277169012395,\n        0.0005790508524435922,\n        0.0005755068172048977,\n        0.000571995210763241,\n        0.0005685156387815695,\n        0.0005650677128970929,\n        0.00056165105061303,\n        0.0005582652751926294,\n        0.0005549100155554229,\n        0.0005515849061756448,\n        0.000548289586982781,\n        0.0005450237032641805,\n        0.0005417869055696945,\n        0.0005385788496182866,\n        0.0005353991962065727,\n        0.0005322476111192386,\n        0.0005291237650413012,\n        0.0005260273334721584,\n        0.0005229579966413997,\n        0.0005199154394263203,\n        0.0005168993512711156,\n        0.0005139094261077049,\n        0.000510945362278155,\n        0.0005080068624586595,\n        0.0005050936335850466,\n        0.0005022053867797719,\n        0.0004993418372803695,\n        0.0004965027043693247,\n        0.0004936877113053347,\n        0.0004908965852559298,\n        0.00048812905723142534,\n        0.00048538486202016434,\n        0.0004826637381250359,\n        0.00047996542770123245,\n        0.00047728967649521975,\n        0.0004746362337848924,\n        0.00047200485232089164,\n        0.00046939528826905424,\n        0.0004668073011539751,\n        0.00046424065380364836,\n        0.0004616951122951779,\n        0.0004591704459015178,\n        0.0004566664270392347,\n        0.00045418283121725895,\n        0.0004517194369866102,\n        0.0004492760258910727,\n        0.0004468523824188027,\n        0.00044444829395484133,\n        0.0004420635507345254,\n        0.0004396979457977635,\n        0.00043735127494417045,\n        0.0004350233366890317,\n        0.00043271393222009077,\n        0.00043042286535513083,\n        0.0004281499425003447,\n        0.0004258949726094675,\n        0.0004236577671436626,\n        0.0004214381400321405,\n        0.0004192359076335004,\n        0.00041705088869777,\n        0.0004148829043291442,\n        0.00041273177794939035,\n        0.00041059733526192257,\n        0.00040847940421651893,\n        0.00040637781497467594,\n        0.00040429239987558414,\n        0.0004022229934027129,\n        0.0004001694321509918,\n        0.00039813155479457484,\n        0.00039610920205518,\n        0.0003941022166709876,\n        0.0003921104433660897,\n        0.0003901337288204763,\n        0.000388171921640551,\n        0.00038622487233016395,\n        0.0003842924332621498,\n        0.00038237445865036383,\n        0.00038047080452220444,\n        0.00037858132869161333,\n        0.00037670589073254335,\n        0.0003748443519528833,\n        0.00037299657536883434,\n        0.00037116242567972614,\n        0.0003693417692432653,\n        0.00036753447405120577,\n        0.0003657404097054375,\n        0.0003639594473944794,\n        0.0003621914598703739,\n        0.0003604363214259707,\n        0.00035869390787259746,\n        0.00035696409651810387,\n        0.0003552467661452785,\n        0.00035354179699062467,\n        0.0003518490707234936,\n        0.0003501684704255664,\n        0.0003484998805706766,\n        0.00034684318700496875,\n        0.0003451982769273865,\n        0.0003435650388704834,\n        0.0003419433626815495,\n        0.0003403331395040504,\n        0.00033873426175936965,\n        0.0003371466231288519,\n        0.0003355701185361388,\n        0.00033400464412979285,\n        0.00033245009726620434,\n        0.00033090637649277706,\n        0.00032937338153138514,\n        0.00032785101326209676,\n        0.00032633917370716143,\n        0.0003248377660152561,\n        0.0003233466944459813,\n        0.0003218658643546072,\n        0.0003203951821770636,\n        0.0003189345554151691,\n        0.00031748389262209546,\n        0.0003160431033880613,\n        0.0003146120983262533,\n        0.00031319078905897205,\n        0.0003117790882039914,\n        0.00031037690936113713,\n        0.0003089841670990728,\n        0.00030760077694229516,\n        0.0003062266553583319,\n        0.00030486171974513656,\n        0.0003035058884186836,\n        0.00030215908060075397,\n        0.00030082121640690883,\n        0.0002994922168346505,\n        0.00029817200375176624,\n        0.00029686049988484947,\n        0.0002955576288080006,\n        0.00029426331493169586,\n        0.0002929774834918315,\n        0.0002917000605389316,\n        0.00029043097292752196,\n        0.00028917014830566375,\n        0.00028791751510464703,\n        0.0002866730025288399,\n        0.0002854365405456905,\n        0.00028420805987587876,\n        0.000282987491983618,\n        0.00028177476906710047,\n        0.0002805698240490854,\n        0.0002793725905676295,\n        0.0002781830029669526,\n        0.0002770009962884426,\n        0.0002758265062617907,\n        0.0002746594692962596,\n        0.00027349982247207923,\n        0.00027234750353197164,\n        0.0002712024508727979,\n        0.00027006460353732893,\n        0.0002689339012061366,\n        0.0002678102841896045,\n        0.00026669369342005226,\n        0.0002655840704439776,\n        0.0002644813574144093,\n        0.00026338549708337163,\n        0.00026229643279445796,\n        0.0002612141084755104,\n        0.00026013846863140645,\n        0.000259069458336948,\n        0.00025800702322985384,\n        0.00025695110950385054,\n        0.00025590166390186345,\n        0.00025485863370930433,\n        0.0002538219667474557,\n        0.0002527916113669457,\n        0.00025176751644131963,\n        0.0002507496313606994,\n        0.0002497379060255346,\n        0.00024873229084043934,\n        0.0002477327367081176,\n        0.00024673919502337256,\n        0.00024575161766720184,\n        0.0002447699570009717,\n        0.00024379416586067586,\n        0.00024282419755127242,\n        0.00024186000584110065,\n        0.00024090154495637356,\n        0.00023994876957574764,\n        0.00023900163482496814,\n        0.00023806009627158723,\n        0.00023712410991975487,\n        0.0002361936322050814,\n        0.00023526861998957054,\n        0.00023434903055662238,\n        0.00023343482160610238,\n        0.00023252595124947988,\n    ]\n    pseudovoigt_2 = [\n        0.00023574146837707923,\n        0.00023863062011164192,\n        0.00024157311304093506,\n        0.000244570265900601,\n        0.0002476234383543824,\n        0.0002507340325249198,\n        0.00025390349459163185,\n        0.0002571333164590508,\n        0.00026042503749917786,\n        0.00026378024637162885,\n        0.0002672005829255556,\n        0.00027068774018755966,\n        0.00027424346644006184,\n        0.00027786956739485005,\n        0.00028156790846680887,\n        0.0002853404171531334,\n        0.0002891890855236375,\n        0.0002931159728281191,\n        0.00029712320822709057,\n        0.00030121299365258006,\n        0.00030538760680610917,\n        0.0003096494043014035,\n        0.0003140008249598505,\n        0.00031844439326723093,\n        0.0003229827230007798,\n        0.0003276185210362147,\n        0.0003323545913449775,\n        0.00033719383919260224,\n        0.0003421392755498235,\n        0.0003471940217288021,\n        0.00035236131425765287,\n        0.00035764451000733964,\n        0.00036304709158592994,\n        0.0003685726730162217,\n        0.0003742250057138227,\n        0.00038000798478394197,\n        0.0003859256556563917,\n        0.0003919822210796591,\n        0.0003981820484963511,\n        0.0004045296778238863,\n        0.00041102982966599436,\n        0.0004176874139824056,\n        0.0004245075392460799,\n        0.0004314955221194477,\n        0.0004386568976834324,\n        0.00044599743025550506,\n        0.0004535231248357079,\n        0.0004612402392224933,\n        0.0004691552968433728,\n        0.0004772751003487861,\n        0.0004856067460213076,\n        0.0004941576390563215,\n        0.0005029355097746705,\n        0.0005119484308325229,\n        0.0005212048354988638,\n        0.0005307135370766374,\n        0.0005404837495496717,\n        0.0005505251095441939,\n        0.0005608476997009984,\n        0.0005714620735622735,\n        0.0005823792820857369,\n        0.000593610901908212,\n        0.0006051690654911129,\n        0.0006170664932916445,\n        0.0006293165281159318,\n        0.0006419331718238947,\n        0.0006549311245706083,\n        0.0006683258267852832,\n        0.000682133504106995,\n        0.0006963712155161048,\n        0.0007110569049221142,\n        0.0007262094564926988,\n        0.0007418487540351618,\n        0.0007579957447707597,\n        0.0007746725078746358,\n        0.0007919023281897911,\n        0.000809709775563009,\n        0.0008281207902944024,\n        0.0008471627752407632,\n        0.0008668646951667153,\n        0.000887257183997487,\n        0.0009083726606936204,\n        0.0009302454545419634,\n        0.0009529119407397908,\n        0.0009764106872409233,\n        0.0010007826139354673,\n        0.0010260711653496885,\n        0.0010523224981810722,\n        0.0010795856851276808,\n        0.001107912936632447,\n        0.0011373598423444695,\n        0.0011679856343033122,\n        0.0011998534740818463,\n        0.0012330307663818462,\n        0.001267589501868372,\n        0.0013036066323586185,\n        0.0013411644818537287,\n        0.0013803511973242287,\n        0.0014212612436383827,\n        0.001463995947566118,\n        0.0015086640964087367,\n        0.0015553825975074824,\n        0.0016042772056849039,\n        0.0016554833265867023,\n        0.0017091469049355834,\n        0.0017654254079025537,\n        0.0018244889151683627,\n        0.001886521328815472,\n        0.0019517217179905375,\n        0.0020203058153455272,\n        0.0020925076846451227,\n        0.0021685815816684098,\n        0.0022488040336921533,\n        0.0023334761664881186,\n        0.0024229263119760524,\n        0.002517512934537286,\n        0.002617627919615763,\n        0.0027237002747334594,\n        0.002836200300562836,\n        0.0029556442983859183,\n        0.0030825998903030805,\n        0.0032176920401290944,\n        0.0033616098762415695,\n        0.0035151144329520264,\n        0.0036790474444812495,\n        0.0038543413455542404,\n        0.004042030655164218,\n        0.004243264945287115,\n        0.004459323624209587,\n        0.004691632794369774,\n        0.004941784476506238,\n        0.005211558524143267,\n        0.005502947582713684,\n        0.00581818547215741,\n        0.006159779384628139,\n        0.006530546280656114,\n        0.00693365382348537,\n        0.0073726660908141695,\n        0.007851594113729373,\n        0.008374950966859926,\n        0.008947810602418832,\n        0.009575868783698465,\n        0.010265503187728032,\n        0.011023827811293678,\n        0.011858733953131516,\n        0.012778905889438509,\n        0.01379379344071586,\n        0.014913515392781206,\n        0.01614865663761244,\n        0.01750990773833871,\n        0.019007479970220082,\n        0.020650221523835454,\n        0.02244440471967224,\n        0.024392400210683826,\n        0.02649227851564113,\n        0.028741274269610165,\n        0.031148417229287073,\n        0.03375991103996412,\n        0.03668569498458858,\n        0.04008478181922448,\n        0.04405062661466261,\n        0.04839691872011682,\n        0.0524874659117125,\n        0.055340810010566045,\n        0.05608049958005394,\n        0.05445609566105517,\n        0.051005343868011685,\n        0.04671256301544255,\n        0.042463270870198896,\n        0.03871360288247993,\n        0.03551491236438253,\n        0.03272721940905286,\n        0.03020335695237356,\n        0.02785970702167658,\n        0.025667986286526664,\n        0.023626011751872223,\n        0.021737086626755175,\n        0.020001592770871993,\n        0.018415524086390266,\n        0.01697145785528843,\n        0.015659896177163766,\n        0.014470357004841642,\n        0.013392135070500922,\n        0.012414791794778912,\n        0.011528448118233555,\n        0.010723941307179076,\n        0.009992891255076417,\n        0.009327708784840396,\n        0.008721568515206047,\n        0.008168361577093478,\n        0.007662638285834398,\n        0.0071995472665842735,\n        0.006774775062708194,\n        0.006384488599118105,\n        0.006025281779289133,\n        0.005694126789294035,\n        0.005388330239738491,\n        0.00510549400990564,\n        0.004843480507792862,\n        0.004600381984205061,\n        0.004374493511103924,\n        0.00416428923560027,\n        0.003968401539174882,\n        0.0037856027590222334,\n        0.0036147891597895785,\n        0.003454966876296675,\n        0.0033052395791961183,\n        0.0031647976449221816,\n        0.003032908638158779,\n        0.0029089089392485986,\n        0.002792196370484003,\n        0.002682223694199416,\n        0.002578492872222219,\n        0.002480549990757825,\n        0.002387980767412494,\n        0.002300406568016013,\n        0.002217480870400674,\n        0.002138886120510261,\n        0.0020643309333210984,\n        0.0019935475972047245,\n        0.0019262898456789538,\n        0.0018623308650946235,\n        0.0018014615107879296,\n        0.0017434887076780842,\n        0.0016882340142811232,\n        0.0016355323317059902,\n        0.0015852307414535114,\n        0.0015371874577991419,\n        0.0014912708822469088,\n        0.0014473587490290863,\n        0.0014053373519239793,\n        0.0013651008437977972,\n        0.0013265506012682888,\n        0.0012895946477563362,\n        0.0012541471289532445,\n        0.0012201278354001673,\n        0.001187461767463968,\n        0.0011560787385112355,\n        0.001125913012538199,\n        0.0010969029729167863,\n        0.0010689908192724764,\n        0.0010421222898242865,\n        0.0010162464067956835,\n        0.0009913152427523054,\n        0.0009672837059416667,\n        0.0009441093429050002,\n        0.000921752156804821,\n        0.0009001744400664203,\n        0.0008793406200693229,\n        0.0008592171167478531,\n        0.00083977221107001,\n        0.0008209759234623391,\n        0.0008027999013366846,\n        0.0007852173149538927,\n        0.0007682027609305042,\n        0.0007517321727583622,\n        0.0007357827377644756,\n        0.0007203328199901828,\n        0.0007053618885152932,\n        0.0006908504507949299,\n        0.0006767799906147836,\n        0.0006631329103048249,\n        0.0006498924768825889,\n        0.0006370427718252728,\n        0.0006245686441954012,\n        0.0006124556668679375,\n        0.0006006900956277408,\n        0.0005892588309253395,\n        0.0005781493820963846,\n        0.0005673498338659239,\n        0.0005568488149730655,\n        0.0005466354687647121,\n        0.000536699425619038,\n        0.0005270307770703196,\n        0.0005176200515167354,\n        0.000508458191401887,\n        0.0004995365317691791,\n        0.0004908467800958519,\n        0.00048238099732048875,\n        0.00047413157998428237,\n        0.00046609124341224,\n        0.00045825300586595994,\n        0.0004506101736046031,\n        0.00044315632679527356,\n        0.0004358853062182626,\n        0.00042879120071649495,\n        0.00042186833534211437,\n        0.00041511126015645163,\n        0.00040851473964267384,\n        0.00040207374269323853,\n        0.000395783433136869,\n        0.0003896391607721995,\n        0.00038363645287743534,\n        0.00037777100616746806,\n        0.0003720386791717685,\n        0.00036643548500816484,\n        0.0003609575845292479,\n        0.0003556012798196702,\n        0.0003503630080240069,\n        0.00034523933548617856,\n        0.00034022695218262767,\n        0.0003353226664325947,\n        0.00033052339986988085,\n        0.0003258261826614673,\n        0.0003212281489592707,\n        0.00031672653257217476,\n        0.00031231866284624535,\n        0.0003080019607418077,\n        0.00030377393509672067,\n        0.0002996321790658478,\n        0.00029557436672731426,\n        0.00029159824984669765,\n        0.0002877016547908354,\n        0.00028388247958340283,\n        0.0002801386910948926,\n        0.00027646832236003985,\n        0.00027286947001614587,\n        0.0002693402918561271,\n        0.0002658790044904651,\n        0.0002624838811125672,\n        0.00025915324936235485,\n        0.00025588548928317926,\n        0.00025267903136745584,\n        0.00024953235468663684,\n        0.0002464439851014047,\n        0.00024341249354818356,\n        0.00024043649439827627,\n        0.00023751464388613994,\n        0.0002346456386034962,\n        0.00023182821405614627,\n        0.00022906114328053505,\n        0.00022634323551725324,\n        0.000223673334938825,\n        0.00022105031942925625,\n        0.00021847309941295926,\n        0.00021594061673078523,\n        0.00021345184356101474,\n        0.00021100578138326856,\n        0.00020860145998339845,\n        0.0002062379364975225,\n        0.00020391429449345363,\n        0.0002016296430878675,\n        0.00019938311609762375,\n        0.00019717387122375135,\n        0.00019500108926666032,\n        0.00019286397337123345,\n        0.00019076174830050033,\n        0.00018869365973666908,\n        0.00018665897360834165,\n        0.00018465697544280712,\n        0.000182686969742342,\n        0.00018074827938351743,\n        0.00017884024503853977,\n        0.00017696222461771686,\n        0.00017511359273216542,\n        0.00017329374017593314,\n        0.00017150207342673154,\n        0.00016973801416452693,\n        0.00016800099880725787,\n        0.00016629047806299344,\n        0.0001646059164978651,\n        0.00016294679211914607,\n        0.0001613125959728719,\n        0.0001597028317554287,\n        0.0001581170154385554,\n        0.00015655467490723702,\n        0.0001550153496099832,\n        0.00015349859022101243,\n        0.000152003958313879,\n        0.00015053102604610695,\n        0.0001490793758544034,\n        0.0001476486001600542,\n        0.0001462383010841091,\n        0.0001448480901719934,\n        0.00014347758812718558,\n        0.00014212642455362667,\n        0.00014079423770653118,\n        0.00013948067425129495,\n        0.00013818538903019267,\n        0.00013690804483658617,\n        0.00013564831219636448,\n        0.00013440586915635497,\n        0.0001331804010794499,\n        0.00013197160044621016,\n        0.0001307791666627091,\n        0.00012960280587439733,\n        0.00012844223078577064,\n        0.0001272971604856386,\n        0.00012616732027779273,\n        0.00012505244151688854,\n        0.00012395226144935385,\n        0.0001228665230591544,\n        0.00012179497491824263,\n        0.0001207373710415324,\n        0.00011969347074623937,\n        0.0001186630385154432,\n        0.00011764584386572159,\n        0.00011664166121872385,\n        0.00011565026977654455,\n        0.00011467145340077541,\n        0.00011370500049510704,\n        0.0001127507038913658,\n        0.00011180836073886838,\n        0.00011087777239698718,\n        0.0001099587443308177,\n        0.00010905108600984892,\n        0.00010815461080953565,\n        0.00010726913591568027,\n        0.00010639448223153209,\n        0.0001055304742875163,\n        0.00010467694015350755,\n        0.00010383371135356781,\n        0.00010300062278306813,\n        0.00010217751262812019,\n        0.00010136422228724235,\n        0.00010056059629519258,\n        9.976648224889646e-05,\n        9.898173073540858e-05,\n        9.820619526184028e-05,\n        9.743973218719553e-05,\n        9.668220065605389e-05,\n        9.593346253404488e-05,\n        9.51933823450573e-05,\n        9.446182721013268e-05,\n        9.373866678798853e-05,\n        9.302377321712502e-05,\n        9.231702105946415e-05,\n        9.161828724547807e-05,\n        9.09274510207593e-05,\n        9.024439389399171e-05,\n        8.956899958627895e-05,\n        8.890115398179145e-05,\n        8.82407450796914e-05,\n        8.758766294729966e-05,\n        8.694179967446648e-05,\n        8.63030493291127e-05,\n        8.567130791390481e-05,\n        8.504647332403402e-05,\n        8.442844530606376e-05,\n        8.381712541781891e-05,\n        8.321241698928238e-05,\n        8.261422508447429e-05,\n        8.202245646428234e-05,\n        8.14370195502194e-05,\n        8.085782438907864e-05,\n        8.028478261846433e-05,\n        7.971780743317078e-05,\n        7.915681355238769e-05,\n        7.860171718770728e-05,\n        7.805243601191232e-05,\n        7.750888912852178e-05,\n        7.697099704207495e-05,\n        7.643868162913179e-05,\n        7.591186610997133e-05,\n        7.539047502096833e-05,\n        7.487443418762996e-05,\n        7.43636706982738e-05,\n        7.385811287833114e-05,\n        7.335769026525753e-05,\n        7.286233358403479e-05,\n        7.237197472324807e-05,\n        7.188654671172359e-05,\n        7.140598369571097e-05,\n        7.09302209165966e-05,\n        7.045919468913323e-05,\n        6.99928423801728e-05,\n        6.953110238788893e-05,\n        6.907391412147634e-05,\n        6.862121798131443e-05,\n        6.817295533958374e-05,\n        6.772906852132231e-05,\n        6.728950078591206e-05,\n        6.685419630898225e-05,\n        6.642310016472144e-05,\n        6.599615830858538e-05,\n        6.55733175603924e-05,\n        6.515452558779524e-05,\n        6.47397308901207e-05,\n        6.432888278256669e-05,\n        6.39219313807493e-05,\n        6.351882758558887e-05,\n        6.311952306852911e-05,\n        6.272397025707846e-05,\n        6.233212232066773e-05,\n        6.194393315681468e-05,\n        6.155935737758885e-05,\n        6.117835029636868e-05,\n        6.080086791488429e-05,\n        6.042686691053815e-05,\n        6.0056304623997545e-05,\n        5.968913904705182e-05,\n        5.9325328810728176e-05,\n        5.896483317365956e-05,\n        5.860761201069854e-05,\n        5.8253625801771534e-05,\n        5.790283562096746e-05,\n        5.755520312585497e-05,\n        5.721069054702295e-05,\n        5.686926067783933e-05,\n        5.6530876864422444e-05,\n        5.619550299582043e-05,\n        5.586310349439305e-05,\n        5.553364330639206e-05,\n        5.520708789273497e-05,\n        5.48834032199676e-05,\n        5.456255575141108e-05,\n        5.424451243848939e-05,\n        5.392924071223277e-05,\n        5.361670847495307e-05,\n        5.3306884092087144e-05,\n        5.2999736384204616e-05,\n        5.269523461917555e-05,\n        5.239334850449556e-05,\n        5.209404817976326e-05,\n        5.179730420930806e-05,\n        5.150308757496384e-05,\n        5.121136966898589e-05,\n        5.092212228710715e-05,\n        5.0635317621731636e-05,\n        5.035092825526098e-05,\n        5.006892715355175e-05,\n        4.9789287659500285e-05,\n        4.9511983486752345e-05,\n        4.9236988713535144e-05,\n        4.896427777660818e-05,\n        4.869382546533125e-05,\n        4.842560691584621e-05,\n        4.8159597605370935e-05,\n        4.7895773346601954e-05,\n        4.7634110282224133e-05,\n        4.737458487952488e-05,\n        4.7117173925110624e-05,\n        4.686185451972335e-05,\n        4.6608604073154506e-05,\n        4.6357400299255545e-05,\n        4.610822121104148e-05,\n        4.586104511588657e-05,\n        4.561585061080932e-05,\n        4.537261657784558e-05,\n        4.5131322179507904e-05,\n        4.48919468543285e-05,\n        4.465447031248482e-05,\n        4.4418872531505815e-05,\n        4.418513375205715e-05,\n        4.39532344738038e-05,\n        4.3723155451347766e-05,\n        4.349487769024074e-05,\n        4.3268382443068764e-05,\n        4.304365120560808e-05,\n        4.28206657130505e-05,\n        4.259940793629716e-05,\n        4.237986007831869e-05,\n        4.216200457058118e-05,\n        4.1945824069535604e-05,\n        4.173130145317062e-05,\n        4.151841981762629e-05,\n        4.1307162473868536e-05,\n        4.1097512944421906e-05,\n        4.088945496016074e-05,\n        4.0682972457156746e-05,\n        4.047804957358205e-05,\n        4.0274670646666443e-05,\n        4.007282020970835e-05,\n        3.9872482989137726e-05,\n        3.9673643901630045e-05,\n        3.947628805127077e-05,\n        3.9280400726768734e-05,\n        3.9085967398717864e-05,\n        3.8892973716906184e-05,\n        3.870140550767089e-05,\n        3.8511248771299185e-05,\n        3.8322489679473446e-05,\n        3.813511457276005e-05,\n        3.794910995814099e-05,\n        3.7764462506587614e-05,\n        3.7581159050675453e-05,\n        3.739918658223915e-05,\n        3.7218532250067494e-05,\n        3.703918335763677e-05,\n        3.6861127360882574e-05,\n        3.668435186600881e-05,\n        3.6508844627333125e-05,\n        3.633459354516873e-05,\n        3.6161586663741094e-05,\n        3.5989812169139515e-05,\n        3.581925838730224e-05,\n        3.564991378203531e-05,\n        3.548176695306378e-05,\n        3.531480663411513e-05,\n        3.514902169103396e-05,\n        3.4984401119927796e-05,\n        3.4820934045342924e-05,\n        3.465860971847026e-05,\n        3.449741751537987e-05,\n        3.4337346935284795e-05,\n        3.4178387598832374e-05,\n        3.402052924642354e-05,\n        3.386376173655898e-05,\n        3.3708075044211943e-05,\n        3.355345925922714e-05,\n        3.339990458474534e-05,\n        3.32474013356529e-05,\n        3.3095939937056106e-05,\n        3.29455109227799e-05,\n        3.27961049338901e-05,\n        3.264771271723927e-05,\n        3.2500325124035296e-05,\n        3.235393310843282e-05,\n        3.220852772614642e-05,\n        3.2064100133085834e-05,\n        3.192064158401232e-05,\n    ]\n    pseudovoigt_3 = [\n        0.0007434419830450699,\n        0.0007507128686160477,\n        0.0007580908172593036,\n        0.0007655779388313236,\n        0.0007731763953559211,\n        0.0007808884025778644,\n        0.0007887162315706901,\n        0.0007966622104008668,\n        0.000804728725850574,\n        0.0008129182252014634,\n        0.0008212332180818895,\n        0.0008296762783801815,\n        0.0008382500462266816,\n        0.0008469572300473795,\n        0.0008558006086921047,\n        0.0008647830336403935,\n        0.0008739074312882685,\n        0.0008831768053193538,\n        0.0008925942391638712,\n        0.0009021628985492797,\n        0.000911886034146453,\n        0.0009217669843155228,\n        0.0009318091779556716,\n        0.0009420161374634133,\n        0.0009523914818040808,\n        0.0009629389297015049,\n        0.0009736623029510927,\n        0.000984565529861792,\n        0.0009956526488326869,\n        0.0010069278120702723,\n        0.0010183952894527544,\n        0.0010300594725480496,\n        0.0010419248787924965,\n        0.0010539961558376596,\n        0.0010662780860729788,\n        0.0010787755913324313,\n        0.0010914937377937985,\n        0.0011044377410795766,\n        0.0011176129715690616,\n        0.0011310249599316344,\n        0.0011446794028918226,\n        0.0011585821692372757,\n        0.0011727393060814025,\n        0.0011871570453930555,\n        0.001201841810806333,\n        0.0012168002247242924,\n        0.0012320391157311223,\n        0.0012475655263281592,\n        0.0012633867210099779,\n        0.0012795101946977143,\n        0.001295943681547758,\n        0.0013126951641549902,\n        0.0013297728831708476,\n        0.0013471853473576755,\n        0.0013649413441020795,\n        0.0013830499504113303,\n        0.0014015205444182994,\n        0.0014203628174219044,\n        0.0014395867864916922,\n        0.001459202807666882,\n        0.001479221589782062,\n        0.0014996542089536764,\n        0.001520512123763564,\n        0.0015418071911780453,\n        0.001563551683243453,\n        0.0015857583046015836,\n        0.0016084402108712868,\n        0.001631611027945363,\n        0.0016552848722550706,\n        0.001679476372057964,\n        0.001704200689808354,\n        0.0017294735456736207,\n        0.001755311242263723,\n        0.0017817306906457832,\n        0.0018087494377203757,\n        0.001836385695041362,\n        0.0018646583691666393,\n        0.0018935870936331604,\n        0.0019231922626560126,\n        0.001953495066658261,\n        0.001984517529745741,\n        0.002016282549249013,\n        0.002048813937463388,\n        0.002082136465727273,\n        0.002116275910989229,\n        0.0021512591050250373,\n        0.002187113986477892,\n        0.0022238696559076154,\n        0.0022615564340486114,\n        0.002300205923491276,\n        0.002339851074017772,\n        0.002380526251840721,\n        0.002422267313012436,\n        0.0024651116812930483,\n        0.0025090984307884158,\n        0.002554268373693195,\n        0.0026006641535010807,\n        0.0026483303440732195,\n        0.0026973135549874174,\n        0.002747662543625152,\n        0.00279942833449103,\n        0.0028526643463002628,\n        0.002907426527414626,\n        0.0029637735002562655,\n        0.0030217667153823683,\n        0.003081470615962355,\n        0.00314295281346358,\n        0.0032062842754220318,\n        0.0032715395262519,\n        0.0033387968621329343,\n        0.003408138581107934,\n        0.003479651229625566,\n        0.0035534258668769147,\n        0.0036295583483990147,\n        0.0037081496305562452,\n        0.0037893060976624884,\n        0.00387313991367497,\n        0.003959769400576459,\n        0.004049319445768284,\n        0.004141921941024593,\n        0.004237716255811198,\n        0.004336849748053183,\n        0.004439478315747608,\n        0.004545766993164895,\n        0.004655890595769323,\n        0.004770034418420312,\n        0.004888394991897439,\n        0.0050111809033299955,\n        0.005138613686713319,\n        0.0052709287903677324,\n        0.0054083766289509585,\n        0.005551223728482213,\n        0.0056997539737883105,\n        0.005854269968853043,\n        0.006015094521757253,\n        0.006182572267256959,\n        0.006357071441582256,\n        0.006538985825774876,\n        0.006728736875846264,\n        0.006926776060262987,\n        0.007133587427790827,\n        0.00734969043159628,\n        0.007575643038765545,\n        0.007812045158115074,\n        0.008059542423402248,\n        0.008318830373879533,\n        0.00859065907966142,\n        0.008875838265698491,\n        0.00917524299540015,\n        0.009489819983262539,\n        0.009820594615408152,\n        0.0101686787679256,\n        0.010535279525538701,\n        0.010921708917700288,\n        0.011329394806004957,\n        0.011759893076205832,\n        0.012214901310517843,\n        0.01269627414177455,\n        0.013206040520930624,\n        0.013746423164002233,\n        0.014319860484536331,\n        0.014929031363915771,\n        0.015576883165153443,\n        0.016266663457311793,\n        0.01700195598838597,\n        0.017786721525531714,\n        0.0186253442740139,\n        0.01952268469117981,\n        0.02048413962982959,\n        0.02151571087671275,\n        0.022624083295728976,\n        0.023816713939377687,\n        0.025101933651213833,\n        0.026489062837742758,\n        0.027988543225576326,\n        0.029612087514961895,\n        0.031372848856621706,\n        0.03328561195767127,\n        0.03536700727695433,\n        0.0376357490696348,\n        0.04011289679128417,\n        0.04282213728799896,\n        0.045790081866969076,\n        0.049046567166107245,\n        0.05262494087866848,\n        0.05656230166699042,\n        0.060899645430024095,\n        0.06568184539862586,\n        0.0709573587710084,\n        0.07677750497678451,\n        0.0831950980851647,\n        0.09026214086216666,\n        0.09802622514102374,\n        0.1065253520748513,\n        0.1157815404381573,\n        0.12579612912224228,\n        0.13655643939836418,\n        0.14807485463048348,\n        0.16048534954695753,\n        0.1741827623061555,\n        0.18987046992348694,\n        0.20824616249443517,\n        0.22914710813021938,\n        0.2505103285039637,\n        0.26815271863987905,\n        0.2772205788359086,\n        0.2747843878682466,\n        0.26165837407085246,\n        0.2418798850709205,\n        0.22030845430160315,\n        0.20032618724623708,\n        0.18311253161411228,\n        0.16834322480695693,\n        0.15524542478660136,\n        0.14323237371701944,\n        0.13203269205528412,\n        0.12157827850872892,\n        0.11187506619144072,\n        0.1029322248032438,\n        0.09473971475256536,\n        0.08726814702284713,\n        0.080474838924547,\n        0.07430984715561413,\n        0.0687204807635566,\n        0.0636543232856607,\n        0.05906111165801199,\n        0.054893806693236215,\n        0.05110911586856149,\n        0.04766765827897713,\n        0.04453390531368777,\n        0.04167598862023342,\n        0.03906543664310303,\n        0.03667687971575139,\n        0.03448774898276798,\n        0.03247798446413233,\n        0.0306297609392563,\n        0.028927235998738796,\n        0.027356321854527015,\n        0.025904480800983013,\n        0.024560543224624653,\n        0.02331454652548826,\n        0.02215759307303934,\n        0.021081725263450417,\n        0.02007981579927823,\n        0.019145471428839683,\n        0.01827294852979479,\n        0.017457079079966565,\n        0.016693205716282758,\n        0.01597712473294245,\n        0.015305036008793134,\n        0.01467349897981584,\n        0.014079393885212645,\n        0.013519887615288878,\n        0.012992403576970268,\n        0.012494595069438683,\n        0.01202432172913906,\n        0.011579628661413465,\n        0.011158727926308662,\n        0.010759982089652906,\n        0.010381889588178088,\n        0.01002307169005445,\n        0.009682260860393248,\n        0.00935829036565775,\n        0.009050084972026803,\n        0.0087566526110316,\n        0.00847707690162431,\n        0.008210510431575462,\n        0.007956168713023983,\n        0.007713324737370576,\n        0.007481304063723325,\n        0.00725948038296124,\n        0.007047271506331821,\n        0.006844135733480774,\n        0.006649568560040994,\n        0.006463099689485145,\n        0.006284290317956935,\n        0.006112730664316496,\n        0.005948037720727086,\n        0.005789853201831089,\n        0.005637841672959311,\n        0.005491688839930624,\n        0.005351099984865076,\n        0.00521579853408321,\n        0.005085524745624454,\n        0.004960034505211819,\n        0.004839098220638263,\n        0.004722499805570293,\n        0.004610035744671725,\n        0.004501514232758352,\n        0.004396754381414647,\n        0.004295585487146182,\n        0.004197846355716059,\n        0.004103384677826986,\n        0.004012056451770934,\n        0.003923725449080308,\n        0.0038382627195847237,\n        0.0037555461326097025,\n        0.0036754599513524624,\n        0.0035978944377387605,\n        0.0035227454853073363,\n        0.0034499142778867007,\n        0.0033793069720265065,\n        0.0033108344013238335,\n        0.0032444118009460113,\n        0.0031799585507973557,\n        0.003117397935909687,\n        0.003056656922755956,\n        0.002997665950295605,\n        0.002940358734658732,\n        0.0028846720864662344,\n        0.0028305457398648134,\n        0.002777922192430173,\n        0.002726746555159694,\n        0.0026769664118376866,\n        0.002628531687112959,\n        0.0025813945226799582,\n        0.0025355091610020667,\n        0.0024908318360587333,\n        0.0024473206706377123,\n        0.0024049355797299806,\n        0.0023636381796180053,\n        0.002323391702278618,\n        0.0022841609147498127,\n        0.0022459120431363023,\n        0.0022086127009525525,\n        0.0021722318215236774,\n        0.0021367395941845773,\n        0.0021021074040362487,\n        0.002068307775035201,\n        0.0020353143162075297,\n        0.002003101670793831,\n        0.0019716454681443936,\n        0.0019409222781965716,\n        0.0019109095683776034,\n        0.0018815856627867893,\n        0.001852929703520705,\n        0.0018249216140141915,\n        0.0017975420642783113,\n        0.0017707724379242187,\n        0.001744594800869174,\n        0.0017189918716275824,\n        0.0016939469930962766,\n        0.0016694441057489354,\n        0.0016454677221600673,\n        0.0016220029027838388,\n        0.0015990352329178718,\n        0.001576550800786314,\n        0.001554536176680675,\n        0.0015329783931005618,\n        0.0015118649258401417,\n        0.0014911836759692104,\n        0.001470922952661079,\n        0.001451071456822074,\n        0.0014316182654803883,\n        0.0014125528168942908,\n        0.0013938648963422145,\n        0.0013755446225592915,\n        0.001357582434787077,\n        0.0013399690804049827,\n        0.0013226956031138959,\n        0.0013057533316439553,\n        0.0012891338689602079,\n        0.0012728290819412295,\n        0.0012568310915072396,\n        0.001241132263175495,\n        0.0012257251980220324,\n        0.0012106027240299114,\n        0.001195757887805243,\n        0.0011811839466432479,\n        0.0011668743609276155,\n        0.0011528227868472405,\n        0.0011390230694153518,\n        0.0011254692357767575,\n        0.0011121554887897525,\n        0.001099076200869878,\n        0.0010862259080834412,\n        0.0010735993044792582,\n        0.0010611912366477927,\n        0.001048996698497257,\n        0.0010370108262369253,\n        0.001025228893558302,\n        0.0010136463070053042,\n        0.001002258601525032,\n        0.0009910614361911558,\n        0.0009800505900922935,\n        0.0009692219583781853,\n        0.0009585715484567577,\n        0.0009480954763355794,\n        0.0009377899631014489,\n        0.0009276513315322315,\n        0.0009176760028352677,\n        0.0009078604935070241,\n        0.0008982014123088359,\n        0.0008886954573539036,\n        0.0008793394133008523,\n        0.0008701301486494853,\n        0.0008610646131344465,\n        0.0008521398352128224,\n        0.0008433529196417893,\n        0.0008347010451426828,\n        0.0008261814621479548,\n        0.0008177914906277098,\n        0.0008095285179925924,\n        0.0008013899970700175,\n        0.0007933734441507951,\n        0.0007854764371034033,\n        0.0007776966135532102,\n        0.0007700316691241404,\n        0.0007624793557403271,\n        0.0007550374799854414,\n        0.000747703901517461,\n        0.0007404765315367611,\n        0.0007333533313054837,\n        0.0007263323107162376,\n        0.0007194115269082555,\n        0.0007125890829292362,\n        0.000705863126441134,\n        0.0006992318484682825,\n        0.0006926934821862553,\n        0.000686246301749974,\n        0.0006798886211596083,\n        0.0006736187931628921,\n        0.0006674352081925109,\n        0.0006613362933373129,\n        0.0006553205113460886,\n        0.0006493863596627778,\n        0.0006435323694919509,\n        0.0006377571048935074,\n        0.0006320591619055314,\n        0.0006264371676943311,\n        0.000620889779730682,\n        0.0006154156849913782,\n        0.0006100135991851855,\n        0.0006046822660023696,\n        0.0005994204563869631,\n        0.0005942269678310099,\n        0.0005891006236900068,\n        0.0005840402725188452,\n        0.0005790447874275306,\n        0.0005741130654560318,\n        0.0005692440269675948,\n        0.0005644366150599166,\n        0.0005596897949935686,\n        0.0005550025536371098,\n        0.0005503738989283143,\n        0.0005458028593510075,\n        0.00054128848342697,\n        0.0005368298392224377,\n        0.0005324260138687065,\n        0.0005280761130963918,\n        0.000523779260782894,\n        0.0005195345985126525,\n        0.0005153412851497659,\n        0.0005111984964225918,\n        0.0005071054245199446,\n        0.000503061277698515,\n        0.0004990652799011625,\n        0.0004951166703857406,\n        0.0004912147033641153,\n        0.0004873586476510696,\n        0.0004835477863227749,\n        0.00047978141638454244,\n        0.00047605884844756146,\n        0.0004723794064143502,\n        0.0004687424271726525,\n        0.00046514726029752053,\n        0.0004615932677613369,\n        0.0004580798236515356,\n        0.0004546063138957821,\n        0.0004511721359944023,\n        0.0004477766987598271,\n        0.0004444194220628567,\n        0.00044109973658553044,\n        0.00043781708358041696,\n        0.00043457091463612347,\n        0.0004313606914488546,\n        0.0004281858855998287,\n        0.00042504597833839454,\n        0.0004219404603706704,\n        0.00041886883165355665,\n        0.0004158306011939531,\n        0.0004128252868530476,\n        0.0004098524151555143,\n        0.00040691152110349275,\n        0.00040400214799520684,\n        0.00040112384724809013,\n        0.0003982761782262949,\n        0.00039545870807245896,\n        0.0003926710115436084,\n        0.00038991267085108314,\n        0.00038718327550437407,\n        0.00038448242215876005,\n        0.00038180971446664165,\n        0.00037916476293246675,\n        0.0003765471847711539,\n        0.00037395660376991427,\n        0.00037139265015337803,\n        0.0003688549604519387,\n        0.0003663431773732255,\n        0.00036385694967662095,\n        0.000361395932050741,\n        0.00035895978499379404,\n        0.0003565481746967505,\n        0.00035416077292923945,\n        0.0003517972569281053,\n        0.00034945730928854867,\n        0.0003471406178577896,\n        0.00034484687563118155,\n        0.00034257578065071493,\n        0.00034032703590584337,\n        0.0003381003492365797,\n        0.00033589543323879256,\n        0.00033371200517165814,\n        0.00033154978686719905,\n        0.00032940850464186703,\n        0.000327287889210112,\n        0.00032518767559988626,\n        0.0003231076030700353,\n        0.0003210474150295302,\n        0.0003190068589584896,\n        0.00031698568633095,\n        0.00031498365253933844,\n        0.00031300051682060586,\n        0.00031103604218397967,\n        0.00030908999534029377,\n        0.0003071621466328574,\n        0.00030525226996982525,\n        0.00030336014275803247,\n        0.0003014855458382558,\n        0.0002996282634218673,\n        0.00029778808302884725,\n        0.0002959647954271232,\n        0.0002941581945732007,\n        0.00029236807755405453,\n        0.0002905942445302544,\n        0.0002888364986802892,\n        0.00028709464614606634,\n        0.0002853684959795515,\n        0.00028365786009052906,\n        0.0002819625531954525,\n        0.0002802823927673573,\n        0.00027861719898681427,\n        0.00027696679469389735,\n        0.00027533100534114324,\n        0.00027370965894747744,\n        0.0002721025860530835,\n        0.00027050961967519846,\n        0.00026893059526480816,\n        0.0002673653506642213,\n        0.00026581372606550475,\n        0.00026427556396976045,\n        0.0002627507091472193,\n        0.0002612390085981419,\n        0.00025974031151449704,\n        0.00025825446924241123,\n        0.0002567813352453629,\n        0.00025532076506811077,\n        0.00025387261630133276,\n        0.00025243674854696777,\n        0.00025101302338423836,\n        0.00024960130433634054,\n        0.00024820145683778703,\n        0.0002468133482023878,\n        0.00024543684759185583,\n        0.00024407182598502064,\n        0.0002427181561476404,\n        0.00024137571260279546,\n        0.00024004437160185453,\n        0.00023872401109599687,\n        0.00023741451070828098,\n        0.00023611575170624674,\n        0.00023482761697504091,\n        0.00023354999099105177,\n        0.00023228275979604463,\n        0.0002310258109717859,\n        0.00022977903361514677,\n        0.00022854231831367217,\n        0.0002273155571216118,\n        0.000226098643536396,\n        0.0002248914724755526,\n        0.00022369394025405313,\n        0.00022250594456207708,\n        0.00022132738444319123,\n        0.00022015816027292864,\n        0.00021899817373776458,\n        0.00021784732781447589,\n        0.00021670552674988024,\n        0.00021557267604094493,\n        0.00021444868241525834,\n        0.000213333453811855,\n        0.00021222689936239013,\n        0.0002111289293726526,\n        0.00021003945530441377,\n        0.00020895838975759875,\n        0.00020788564645278198,\n        0.00020682114021399302,\n        0.00020576478695183022,\n        0.0002047165036468753,\n        0.00020367620833340158,\n        0.00020264382008337143,\n        0.00020161925899071713,\n        0.00020060244615589673,\n        0.00019959330367072322,\n        0.00019859175460345925,\n        0.00019759772298417262,\n        0.00019661113379034647,\n        0.00019563191293274122,\n        0.00019465998724150127,\n        0.00019369528445250262,\n        0.0001927377331939353,\n        0.00019178726297311872,\n    ]\n    pseudovoigt_4 = [\n        0.00012729976854938745,\n        0.00012931576505640667,\n        0.00013137989178522508,\n        0.00013349368846695574,\n        0.0001356587567086406,\n        0.00013787676299167046,\n        0.00014014944184053533,\n        0.00014247859917301226,\n        0.00014486611584372172,\n        0.00014731395139386638,\n        0.000149824148020928,\n        0.00015239883478313768,\n        0.00015504023205466163,\n        0.00015775065624866938,\n        0.0001605325248267789,\n        0.0001633883616148163,\n        0.00016632080244639616,\n        0.00016933260115753492,\n        0.00017242663595736765,\n        0.00017560591620206152,\n        0.00017887358960122314,\n        0.00018223294988850637,\n        0.00018568744499074857,\n        0.00018924068573283745,\n        0.00019289645511864022,\n        0.00019665871823176586,\n        0.00020053163280368182,\n        0.00020451956050082572,\n        0.00020862707898686769,\n        0.000212858994821232,\n        0.00021722035726042953,\n        0.00022171647303473598,\n        0.00022635292217933022,\n        0.0002311355750062621,\n        0.000236070610311598,\n        0.0002411645349209166,\n        0.000246424204686049,\n        0.0002518568470567157,\n        0.0002574700853626064,\n        0.00026327196495462037,\n        0.00026927098136857956,\n        0.0002754761106909231,\n        0.00028189684232386903,\n        0.00028854321436752025,\n        0.00029542585185863174,\n        0.0003025560081305273,\n        0.00030994560958628087,\n        0.0003176073042081114,\n        0.00032555451416039344,\n        0.0003338014928822399,\n        0.00034236338710877823,\n        0.0003512563043086483,\n        0.0003604973860795911,\n        0.00037010488810505895,\n        0.00038009826734349423,\n        0.0003904982771993349,\n        0.0004013270715121148,\n        0.0004126083182986405,\n        0.0004243673242947312,\n        0.00043663117146926396,\n        0.0004494288668264128,\n        0.0004627915069744958,\n        0.00047675245912463907,\n        0.0004913475603929459,\n        0.0005066153375200096,\n        0.0005225972493962789,\n        0.0005393379550967846,\n        0.0005568856104914369,\n        0.0005752921969168734,\n        0.0005946138858852839,\n        0.0006149114443821658,\n        0.0006362506859936496,\n        0.0006587029739418835,\n        0.0006823457831500379,\n        0.0007072633297922765,\n        0.0007335472785395787,\n        0.0007612975400893147,\n        0.0007906231748659461,\n        0.0008216434234487486,\n        0.0008544888909691928,\n        0.0008893029223465235,\n        0.0009262432190650682,\n        0.0009654837679341218,\n        0.0010072171800803178,\n        0.001051657576948379,\n        0.0010990442123514485,\n        0.0011496460887593489,\n        0.0012037679148179474,\n        0.001261757861173716,\n        0.0013240177023412533,\n        0.0013910160790554054,\n        0.0014633057680351362,\n        0.001541545986352449,\n        0.0016265308580351464,\n        0.0017192251927012315,\n        0.0018208086207638537,\n        0.0019327288393546644,\n        0.002056764186369066,\n        0.0021950949206259993,\n        0.0023503814045711473,\n        0.0025258458543354883,\n        0.0027253524799138572,\n        0.0029534787871825733,\n        0.0032155687253691526,\n        0.0035177564792700754,\n        0.003866948318104888,\n        0.00427074933237209,\n        0.004737322387760068,\n        0.0052751683608568845,\n        0.005892819661530359,\n        0.006598442889747929,\n        0.007399350608566169,\n        0.00830142574751571,\n        0.00930846406343115,\n        0.010421439590694366,\n        0.011637695198477419,\n        0.012950057219614673,\n        0.014345874847002883,\n        0.01580600137937649,\n        0.01730377986331999,\n        0.018804185763417712,\n        0.0202634198193661,\n        0.021629410701192467,\n        0.022843799741558663,\n        0.023845898393334924,\n        0.024578686406028484,\n        0.02499613900475088,\n        0.02507029850930853,\n        0.024796061688383265,\n        0.02419209309266273,\n        0.023297543686455043,\n        0.022165701534791818,\n        0.02085653743831393,\n        0.019430003658239457,\n        0.01794118220100163,\n        0.016437509087810085,\n        0.014957715473042935,\n        0.013531914675802807,\n        0.012182314270510579,\n        0.010924189634436192,\n        0.009766912526561916,\n        0.008714940189195327,\n        0.007768733137526322,\n        0.006925596534528702,\n        0.006180446500775749,\n        0.005526500747700468,\n        0.004955889568869237,\n        0.004460181653682776,\n        0.004030820145066939,\n        0.003659467331182194,\n        0.003338260362025435,\n        0.0030599844406482904,\n        0.002818173315543145,\n        0.0026071491646242426,\n        0.0024220149729918,\n        0.0022586123542614233,\n        0.0021134566824456843,\n        0.001983659689696802,\n        0.0018668476504104922,\n        0.0017610811802896385,\n        0.001664780732055414,\n        0.0015766601982850179,\n        0.0014956697006256409,\n        0.0014209476636809612,\n        0.001351781613158265,\n        0.0012875767505696415,\n        0.0012278311805208153,\n        0.001172116641401623,\n        0.0011200636629181938,\n        0.0010713502012866909,\n        0.001025692952935166,\n        0.0009828406983667687,\n        0.0009425691661338718,\n        0.00090467702593837,\n        0.0008689827175937751,\n        0.0008353218997628434,\n        0.0008035453614222954,\n        0.000773517282966496,\n        0.0007451137658609602,\n        0.0007182215726188173,\n        0.0006927370349743835,\n        0.0006685650993583732,\n        0.0006456184865798513,\n        0.0006238169480499241,\n        0.0006030866046966111,\n        0.0005833593574439508,\n        0.0005645723601177382,\n        0.000546667547133333,\n        0.0005295912094745145,\n        0.000513293613388858,\n        0.0004977286569715415,\n        0.00048285356042987297,\n        0.0004686285863446726,\n        0.00045501678669214517,\n        0.0004419837737754504,\n        0.0004294975125493722,\n        0.00041752813211246324,\n        0.0004060477543951512,\n        0.0003950303382948257,\n        0.000384451537704129,\n        0.00037428857205026894,\n        0.00036452010811418114,\n        0.0003551261520315122,\n        0.00034608795049489354,\n        0.0003373879002808454,\n        0.0003290094653165647,\n        0.000320937100583294,\n        0.00031315618222523353,\n        0.0003056529432971414,\n        0.00029841441464084536,\n        0.0002914283704317289,\n        0.0002846832779815504,\n        0.00027816825142439294,\n        0.00027187300894867975,\n        0.0002657878332704911,\n        0.00025990353507236594,\n        0.0002542114191577082,\n        0.0002487032530941918,\n        0.00024337123814047103,\n        0.0002382079822693065,\n        0.00023320647511714,\n        0.00022836006470540403,\n        0.00022366243579260604,\n        0.0002191075897286448,\n        0.00021468982569404022,\n        0.00021040372321690594,\n        0.00020624412586968437,\n        0.00020220612605599073,\n        0.00019828505080546688,\n        0.00019447644850139747,\n        0.00019077607647207529,\n        0.00018717988938256292,\n        0.00018368402836865363,\n        0.0001802848108595327,\n        0.00017697872103991522,\n        0.0001737624009063461,\n        0.00017063264187591105,\n        0.0001675863769088652,\n        0.00016462067310966334,\n        0.00016173272477360893,\n        0.0001589198468488219,\n        0.00015617946878552892,\n        0.00015350912874676582,\n        0.00015090646815651493,\n        0.00014836922656306418,\n        0.00014589523679700426,\n        0.00014348242040477022,\n        0.00014112878334001421,\n        0.00013883241189635933,\n        0.00013659146886625366,\n        0.00013440418991171854,\n        0.00013226888013378028,\n        0.00013018391082828654,\n        0.00012814771641666238,\n        0.0001261587915409373,\n        0.0001242156883131008,\n        0.00012231701370951604,\n        0.00012046142710173725,\n        0.00011864763791565452,\n        0.00011687440341142062,\n        0.00011514052657710915,\n        0.00011344485412951104,\n        0.00011178627461590368,\n        0.00011016371661101987,\n        0.00010857614700381351,\n        0.00010702256936896008,\n        0.00010550202241834735,\n        0.00010401357852810804,\n        0.00010255634233702277,\n        0.00010112944941237652,\n        9.973206497959362e-05,\n        9.836338271219754e-05,\n        9.702262357885176e-05,\n        9.570903474443117e-05,\n        9.442188852225685e-05,\n        9.316048137479408e-05,\n        9.192413296027607e-05,\n        9.071218522286067e-05,\n        8.952400152406778e-05,\n        8.835896581337597e-05,\n        8.721648183597651e-05,\n        8.609597237579899e-05,\n        8.49968785320285e-05,\n        8.391865902743449e-05,\n        8.286078954692636e-05,\n        8.182276210483767e-05,\n        8.080408443952511e-05,\n        7.980427943394449e-05,\n        7.882288456094063e-05,\n        7.785945135205586e-05,\n        7.691354488872546e-05,\n        7.598474331479188e-05,\n        7.507263736932259e-05,\n        7.417682993877431e-05,\n        7.329693562759391e-05,\n        7.24325803463953e-05,\n        7.158340091689617e-05,\n        7.07490446928413e-05,\n        6.99291691961777e-05,\n        6.912344176778625e-05,\n        6.833153923210848e-05,\n        6.755314757504148e-05,\n        6.678796163450542e-05,\n        6.603568480311763e-05,\n        6.529602874243578e-05,\n        6.456871310826007e-05,\n        6.385346528650694e-05,\n        6.315002013919458e-05,\n        6.245811976009941e-05,\n        6.177751323966622e-05,\n        6.110795643877414e-05,\n        6.0449211770979364e-05,\n        5.980104799287484e-05,\n        5.916324000222233e-05,\n        5.8535568643530905e-05,\n        5.791782052076889e-05,\n        5.730978781691305e-05,\n        5.6711268120050873e-05,\n        5.612206425576599e-05,\n        5.554198412554926e-05,\n        5.4970840550989e-05,\n        5.440845112350566e-05,\n        5.385463805940774e-05,\n        5.3309228060053536e-05,\n        5.277205217691552e-05,\n        5.224294568135206e-05,\n        5.1721747938899056e-05,\n        5.120830228790433e-05,\n        5.0702455922334056e-05,\n        5.020405977858767e-05,\n        4.9712968426166585e-05,\n        4.9229039962046705e-05,\n        4.8752135908612804e-05,\n        4.828212111501784e-05,\n        4.781886366183713e-05,\n        4.7362234768891845e-05,\n        4.69121087061224e-05,\n        4.646836270739712e-05,\n        4.6030876887145996e-05,\n        4.5599534159714936e-05,\n        4.517422016133865e-05,\n        4.475482317463679e-05,\n        4.434123405553926e-05,\n        4.3933346162553253e-05,\n        4.353105528828533e-05,\n        4.31342595931381e-05,\n        4.2742859541102e-05,\n        4.235675783756797e-05,\n        4.1975859369087085e-05,\n        4.1600071145010166e-05,\n        4.122930224093826e-05,\n        4.086346374392225e-05,\n        4.0502468699348124e-05,\n        4.0146232059450836e-05,\n        3.9794670633398334e-05,\n        3.944770303889274e-05,\n        3.910524965523492e-05,\n        3.8767232577803496e-05,\n        3.8433575573898346e-05,\n        3.810420403990382e-05,\n        3.777904495972496e-05,\n        3.745802686445532e-05,\n        3.714107979323375e-05,\n        3.6828135255251186e-05,\n        3.651912619286808e-05,\n        3.621398694580651e-05,\n        3.591265321638052e-05,\n        3.561506203573126e-05,\n        3.5321151731032906e-05,\n        3.5030861893638865e-05,\n        3.4744133348136317e-05,\n        3.4460908122280735e-05,\n        3.418112941778101e-05,\n        3.39047415819086e-05,\n        3.363169007990365e-05,\n        3.336192146815315e-05,\n        3.309538336811576e-05,\n        3.283202444097102e-05,\n        3.2571794362968474e-05,\n        3.2314643801455854e-05,\n        3.206052439156465e-05,\n        3.180938871353253e-05,\n        3.156119027064279e-05,\n        3.13158834677621e-05,\n        3.1073423590457326e-05,\n        3.0833766784674724e-05,\n        3.0596870036963064e-05,\n        3.036269115522535e-05,\n        3.0131188749981824e-05,\n        2.9902322216130045e-05,\n        2.9676051715185857e-05,\n        2.945233815799186e-05,\n        2.9231143187878474e-05,\n        2.9012429164265075e-05,\n        2.879615914668688e-05,\n        2.8582296879236474e-05,\n        2.8370806775406292e-05,\n        2.8161653903321597e-05,\n        2.7954803971351296e-05,\n        2.7750223314086668e-05,\n        2.7547878878676415e-05,\n        2.73477382115085e-05,\n        2.7149769445228033e-05,\n        2.695394128608219e-05,\n        2.6760223001582255e-05,\n        2.656858440847431e-05,\n        2.637899586100906e-05,\n        2.6191428239503077e-05,\n        2.6005852939182695e-05,\n        2.5822241859302918e-05,\n        2.5640567392533282e-05,\n        2.5460802414603712e-05,\n        2.5282920274202637e-05,\n        2.5106894783120624e-05,\n        2.4932700206632728e-05,\n        2.476031125411295e-05,\n        2.4589703069874283e-05,\n        2.4420851224228542e-05,\n        2.4253731704759448e-05,\n        2.408832090780375e-05,\n        2.392459563013422e-05,\n        2.3762533060839543e-05,\n        2.360211077339524e-05,\n        2.3443306717921232e-05,\n        2.3286099213620304e-05,\n        2.31304669413932e-05,\n        2.2976388936625275e-05,\n        2.2823844582140598e-05,\n        2.267281360131847e-05,\n        2.2523276051368855e-05,\n        2.2375212316761684e-05,\n        2.222860310280693e-05,\n        2.2083429429380678e-05,\n        2.193967262479411e-05,\n        2.1797314319801064e-05,\n        2.1656336441741282e-05,\n        2.151672120881513e-05,\n        2.1378451124487055e-05,\n        2.1241508972014002e-05,\n        2.110587780909609e-05,\n        2.0971540962645826e-05,\n        2.0838482023673546e-05,\n        2.0706684842285537e-05,\n        2.0576133522792528e-05,\n        2.04468124189253e-05,\n        2.031870612915516e-05,\n        2.0191799492116336e-05,\n        2.006607758212806e-05,\n        1.9941525704813538e-05,\n        1.981812939281373e-05,\n        1.969587440159341e-05,\n        1.957474670533735e-05,\n        1.945473249293429e-05,\n        1.9335818164046678e-05,\n        1.9217990325264122e-05,\n        1.910123578633838e-05,\n        1.8985541556497985e-05,\n        1.8870894840840648e-05,\n        1.8757283036801506e-05,\n        1.8644693730695437e-05,\n        1.8533114694331517e-05,\n        1.8422533881698254e-05,\n        1.8312939425717484e-05,\n        1.8204319635065686e-05,\n        1.8096662991060836e-05,\n        1.7989958144613404e-05,\n        1.788419391324005e-05,\n        1.7779359278138402e-05,\n        1.7675443381321447e-05,\n        1.7572435522810525e-05,\n        1.7470325157885e-05,\n        1.736910189438786e-05,\n        1.7268755490085464e-05,\n        1.716927585008063e-05,\n        1.7070653024277432e-05,\n        1.697287720489693e-05,\n        1.687593872404226e-05,\n        1.6779828051312343e-05,\n        1.6684535791462817e-05,\n        1.6590052682113346e-05,\n        1.6496369591499992e-05,\n        1.6403477516272053e-05,\n        1.631136757933186e-05,\n        1.6220031027717048e-05,\n        1.612945923052401e-05,\n        1.6039643676871766e-05,\n        1.595057597390539e-05,\n        1.5862247844838035e-05,\n        1.5774651127030743e-05,\n        1.5687777770109125e-05,\n        1.5601619834116323e-05,\n        1.5516169487701216e-05,\n        1.543141900634123e-05,\n        1.5347360770598943e-05,\n        1.5263987264411844e-05,\n        1.5181291073414421e-05,\n        1.5099264883291956e-05,\n        1.5017901478165242e-05,\n        1.4937193739005742e-05,\n        1.4857134642080348e-05,\n        1.4777717257425238e-05,\n        1.469893474734811e-05,\n        1.4620780364958258e-05,\n        1.4543247452723966e-05,\n        1.4466329441056444e-05,\n        1.4390019846919929e-05,\n        1.4314312272467325e-05,\n        1.4239200403700893e-05,\n        1.4164678009157388e-05,\n        1.4090738938617163e-05,\n        1.4017377121836881e-05,\n        1.3944586567305038e-05,\n        1.3872361361020227e-05,\n        1.3800695665291228e-05,\n        1.372958371755889e-05,\n        1.3659019829239095e-05,\n        1.358899838458646e-05,\n        1.3519513839578316e-05,\n        1.3450560720818636e-05,\n        1.3382133624461414e-05,\n        1.3314227215153146e-05,\n        1.3246836224994013e-05,\n        1.3179955452517365e-05,\n        1.3113579761687273e-05,\n        1.3047704080913532e-05,\n        1.2982323402084039e-05,\n        1.2917432779613972e-05,\n        1.285302732951163e-05,\n        1.2789102228460474e-05,\n        1.2725652712917053e-05,\n        1.2662674078224557e-05,\n        1.2600161677741709e-05,\n        1.2538110921986612e-05,\n        1.2476517277795207e-05,\n        1.2415376267494352e-05,\n        1.2354683468088815e-05,\n        1.2294434510462308e-05,\n        1.223462507859195e-05,\n        1.2175250908776116e-05,\n        1.2116307788875438e-05,\n        1.2057791557566472e-05,\n        1.199969810360801e-05,\n        1.1942023365119718e-05,\n        1.1884763328872858e-05,\n        1.182791402959289e-05,\n        1.17714715492736e-05,\n        1.1715432016502813e-05,\n        1.165979160579917e-05,\n        1.1604546536959936e-05,\n        1.1549693074419566e-05,\n        1.1495227526618874e-05,\n        1.1441146245384534e-05,\n        1.1387445625318838e-05,\n        1.1334122103199315e-05,\n        1.1281172157388283e-05,\n        1.1228592307251951e-05,\n        1.1176379112589003e-05,\n        1.1124529173068383e-05,\n        1.1073039127676236e-05,\n        1.10219056541718e-05,\n        1.0971125468551968e-05,\n        1.0920695324524533e-05,\n        1.0870612012989836e-05,\n        1.0820872361530753e-05,\n        1.0771473233910767e-05,\n        1.0722411529580051e-05,\n        1.0673684183189398e-05,\n        1.0625288164111887e-05,\n        1.0577220475972071e-05,\n        1.0529478156182599e-05,\n        1.048205827548814e-05,\n        1.043495793751651e-05,\n        1.038817427833676e-05,\n        1.0341704466024225e-05,\n        1.029554570023236e-05,\n        1.024969521177124e-05,\n        1.0204150262192567e-05,\n        1.0158908143381157e-05,\n        1.0113966177152738e-05,\n        1.0069321714857943e-05,\n        1.0024972136992415e-05,\n        9.980914852812852e-06,\n        9.937147299959026e-06,\n        9.893666944081498e-06,\n        9.85047127847511e-06,\n        9.807557823717935e-06,\n        9.764924127315824e-06,\n        9.722567763352301e-06,\n        9.680486332143746e-06,\n        9.638677459899803e-06,\n        9.597138798388894e-06,\n        9.555868024608754e-06,\n        9.514862840461968e-06,\n        9.474120972436259e-06,\n        9.433640171289635e-06,\n        9.393418211740234e-06,\n        9.353452892160713e-06,\n        9.313742034277226e-06,\n        9.274283482872875e-06,\n        9.235075105495481e-06,\n        9.196114792169761e-06,\n        9.157400455113611e-06,\n        9.118930028458686e-06,\n        9.080701467975007e-06,\n        9.042712750799608e-06,\n        9.004961875169138e-06,\n        8.967446860156361e-06,\n        8.930165745410519e-06,\n        8.893116590901422e-06,\n        8.856297476667217e-06,\n        8.819706502565889e-06,\n    ]\n\n    [output.df_pre]\n</code></pre>"},{"location":"plugins/pkl_converter_visualization/","title":"PKL-Converter and Visualizer","text":"<p>About the Pkl Converter and Visualizer</p> <p>With the <code>spectrafit-pkl-converter</code> command line tool you can convert the pkl files with nested dictionaries and list or <code>numpy arrays</code> to list-of-dictionaries with <code>numpy arrays</code>. This is useful for further processing with other tools.</p> <p>In general, the pickle files can be very complex and contain nested dictionaries and lists, as shown in the following example:</p> <pre><code>stateDiagram\n    [*] --&gt; pkl\n    pkl --&gt; list\n    pkl --&gt; np.array\n    pkl --&gt; dict\n    pkl --&gt; else\n    dict --&gt; dict\n    dict --&gt; list\n    dict --&gt; np.array\n    list --&gt; list\n    list --&gt; np.array\n    np.array --&gt; np.array\n    np.array --&gt; list\n    np.array --&gt; dict\n    dict --&gt;  list_of_dicts\n    list_of_dicts --&gt; [*]</code></pre> <p>For the visualization of the pkl files, the <code>spectrafit-pkl-visualizer</code> command line tool can be used. It creates a graph of the pkl file and</p>"},{"location":"plugins/pkl_converter_visualization/#pkl-converter","title":"PKL Converter","text":"<p>The <code>spectrafit-pkl-converter</code> command line tool can be used like this:</p> Bash<pre><code>    \u279c spectrafit-pkl-converter -h\n    usage: spectrafit-pkl-converter [-h] [-f {utf-16,utf-8,latin1,utf-32}] [-e {pkl.gz,pkl,npy,npz}] infile\n\n    Converter for 'SpectraFit' from pkl files to CSV files.\n\n    positional arguments:\n    infile                Filename of the pkl file to convert.\n\n    options:\n    -h, --help            show this help message and exit\n    -f {latin1,utf-16,utf-8,utf-32}, --file-format {latin1,utf-16,utf-8,utf-32}\n                            File format for the optional encoding of the pickle file. Default is 'latin1'.\n    -e {pkl.gz,pkl,npy,npz}, --export-format {pkl.gz,pkl,npy,npz}\n                            File format for export of the output file. Default is 'pkl'.\n</code></pre> <p>The following export files are possible:</p> <ul> <li> <code>pkl</code>: Pickle file as <code>pkl</code> file and compressed <code>pkl.gz</code> file.</li> <li> <code>npy</code>: Numpy array as <code>npy</code> file and compressed <code>npz</code> file.</li> </ul> <p>In case of using other file formats, the <code>spectrafit-pkl-converter</code> supports the following file formats:</p> <ul> <li> <code>utf-8</code>: UTF-8 encoded file.</li> <li> <code>utf-16</code>: UTF-16 encoded file.</li> <li> <code>utf-32</code>: UTF-32 encoded file.</li> <li> <code>latin1</code>: Latin-1 encoded file.</li> </ul> <p>All keys up to the first key-value pair of a <code>numpy.ndarray</code> or <code>list</code> are merged into a single string, which is used as a new filename. A list will be converted to a <code>numpy.ndarray</code> with the shape <code>(len(list),)</code>.</p> <pre><code>\ngraph LR\n\n.pkl --&gt; dict_1\n.pkl --&gt; dict_2\n.pkl --&gt; dict_3\n.pkl --&gt; dict_4\ndict_1 --&gt; dict_1.pkl\ndict_2 --&gt; dict_2.pkl\ndict_3 --&gt; dict_3.pkl\ndict_4 --&gt; dict_4.pkl</code></pre> <p>Using the <code>spectrafit-pkl-converter</code> as a Python module</p> <p>In the case of using <code>spectrafit-pkl-converter</code> as a Python module, the following:</p> Python<pre><code>from spectrafit.plugins.pkl_converter import PklConverter\n\npkl_converter = PklConverter()\nlist_dict = pkl_converter.convert_pkl_to_csv(\n    infile=\"test.pkl\",\n)\n</code></pre> <p>The <code>list_dict</code> variable contains the converted data as a list of dictionaries.</p> <p>See also:</p> <p>               Bases: <code>Converter</code></p> <p>Convert pkl data to a CSV files.</p> <p>General information</p> <p>The pkl data is converted to a CSV file. The CSV file is saved in the same directory as the input file. The name of the CSV file is the same as the input file with the suffix <code>.csv</code> and prefixed with the name of the 'major' keys in the pkl file. Furthermore, a graph of the data is optionally saved as a PDF file to have a visual representation of the data structure.</p> <p>Supported file formats</p> <p>Currently supported file formats:</p> <p>-[x] pkl -[x] pkl.gz -[x] ...</p> <p>Attributes:</p> Name Type Description <code>choices_fformat</code> <code>Set[str]</code> <p>The choices for the file format.</p> <code>choices_export</code> <code>Set[str]</code> <p>The choices for the export format.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>class PklConverter(Converter):\n    \"\"\"Convert pkl data to a CSV files.\n\n    !!! info \"General information\"\n\n        The pkl data is converted to a CSV file. The CSV file is saved in the same\n        directory as the input file. The name of the CSV file is the same as the\n        input file with the suffix `.csv` and prefixed with the name of the\n        'major' keys in the pkl file. Furthermore, a graph of the data is optionally\n        saved as a PDF file to have a visual representation of the data structure.\n\n    !!! info \"Supported file formats\"\n\n        Currently supported file formats:\n\n        -[x] pkl\n        -[x] pkl.gz\n        -[x] ...\n\n\n    Attributes:\n        choices_fformat (Set[str]): The choices for the file format.\n        choices_export (Set[str]): The choices for the export format.\n    \"\"\"\n\n    choices_fformat = {\"latin1\", \"utf-8\", \"utf-16\", \"utf-32\"}\n    choices_export = {\"npy\", \"npz\", \"pkl\", pkl_gz}\n\n    def get_args(self) -&gt; Dict[str, Any]:\n        \"\"\"Get the arguments from the command line.\n\n        Returns:\n            Dict[str, Any]: Return the input file arguments as a dictionary without\n                additional information beyond the command line arguments.\n        \"\"\"\n        parser = argparse.ArgumentParser(\n            description=\"Converter for 'SpectraFit' from pkl files to CSV files.\",\n            usage=\"%(prog)s [options] infile\",\n        )\n        parser.add_argument(\n            \"infile\",\n            type=Path,\n            help=\"Filename of the pkl file to convert.\",\n        )\n        parser.add_argument(\n            \"-f\",\n            \"--file-format\",\n            help=\"File format for the optional encoding of the pickle file.\"\n            \" Default is 'latin1'.\",\n            type=str,\n            default=\"latin1\",\n            choices=self.choices_fformat,\n        )\n        parser.add_argument(\n            \"-e\",\n            \"--export-format\",\n            help=\"File format for export of the output file. Default is 'pkl'.\",\n            type=str,\n            default=\"pkl\",\n            choices=self.choices_export,\n        )\n        return vars(parser.parse_args())\n\n    @staticmethod\n    def convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n        \"\"\"Convert the input file to the output file.\n\n        Args:\n            infile (Path): The input file of the as a path object.\n            file_format (str): The output file format.\n\n        Returns:\n            Dict[str, Any]: The data as a dictionary, which can be a nested dictionary\n        \"\"\"\n\n        def _convert(\n            data_values: Dict[str, Any], _key: Optional[List[str]] = None\n        ) -&gt; List[Dict[str, Any]]:\n            \"\"\"Convert the data to a list of dictionaries.\n\n            The new key is the old key plus all the subkeys. The new value is the\n            value of the subkey if the value is an instance of an array.\n\n            For avoiding `pylint` errors, the `_key` argument is set to `None` by\n            default and is set to an empty list if it is `None`. This is done to\n            avoid the `pylint` error `dangerous-default-value`. The `_key` argument\n            is used to keep track of the keys of the nested dictionary. Furthermore,\n            the `_key` argument is used to create the new key for the new dictionary.\n\n            Finally, the new dictionary is appended to the list of dictionaries.\n\n            Args:\n                data_values (Dict[str, Any]): The data as a dictionary.\n\n            Returns:\n                List[Dict[str, Any]]: The data as a list of dictionaries.\n            \"\"\"\n            data_list = []\n            if _key is None:\n                _key = []\n            for key, value in data_values.items():\n                if isinstance(value, dict):\n                    _key.append(str(key))\n                    data_list.extend(_convert(value, _key))\n                    _key.pop()\n                elif isinstance(value, np.ndarray):\n                    data_list.append({\"_\".join(_key + [key]): value})\n            return data_list\n\n        data_dict = {}\n        for key, value in pkl2any(infile, file_format).items():\n            if isinstance(value, dict):\n                data_dict[key] = _convert(value)\n        return data_dict\n\n    def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n        \"\"\"Save the converted pickle data to a file.\n\n        Args:\n            data (Any): The converted nested dictionary of the pkl data.\n            fname (Path): The filename of the output file.\n            export_format (str): The file format of the output file.\n\n        Raises:\n            ValueError: If the export format is not supported.\n        \"\"\"\n        if export_format.lower() not in self.choices_export:\n            raise ValueError(f\"Unsupported file format '{export_format}'.\")\n\n        fname = pure_fname(fname)\n\n        for key, value in data.items():\n            _fname = Path(f\"{fname}_{key}\").with_suffix(f\".{export_format}\")\n            ExportData(data=value, fname=_fname, export_format=export_format)()\n\n    def __call__(self) -&gt; None:\n        \"\"\"Run the converter.\"\"\"\n        args = self.get_args()\n        data = self.convert(args[\"infile\"], args[\"file_format\"])\n        self.save(data, args[\"infile\"], args[\"export_format\"])\n</code></pre> <p>:members: :undoc-members:</p>"},{"location":"plugins/pkl_converter_visualization/#spectrafit.plugins.pkl_converter.PklConverter.__call__","title":"<code>__call__()</code>","text":"<p>Run the converter.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def __call__(self) -&gt; None:\n    \"\"\"Run the converter.\"\"\"\n    args = self.get_args()\n    data = self.convert(args[\"infile\"], args[\"file_format\"])\n    self.save(data, args[\"infile\"], args[\"export_format\"])\n</code></pre>"},{"location":"plugins/pkl_converter_visualization/#spectrafit.plugins.pkl_converter.PklConverter.convert","title":"<code>convert(infile, file_format)</code>  <code>staticmethod</code>","text":"<p>Convert the input file to the output file.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>Path</code> <p>The input file of the as a path object.</p> required <code>file_format</code> <code>str</code> <p>The output file format.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The data as a dictionary, which can be a nested dictionary</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>@staticmethod\ndef convert(infile: Path, file_format: str) -&gt; Dict[str, Any]:\n    \"\"\"Convert the input file to the output file.\n\n    Args:\n        infile (Path): The input file of the as a path object.\n        file_format (str): The output file format.\n\n    Returns:\n        Dict[str, Any]: The data as a dictionary, which can be a nested dictionary\n    \"\"\"\n\n    def _convert(\n        data_values: Dict[str, Any], _key: Optional[List[str]] = None\n    ) -&gt; List[Dict[str, Any]]:\n        \"\"\"Convert the data to a list of dictionaries.\n\n        The new key is the old key plus all the subkeys. The new value is the\n        value of the subkey if the value is an instance of an array.\n\n        For avoiding `pylint` errors, the `_key` argument is set to `None` by\n        default and is set to an empty list if it is `None`. This is done to\n        avoid the `pylint` error `dangerous-default-value`. The `_key` argument\n        is used to keep track of the keys of the nested dictionary. Furthermore,\n        the `_key` argument is used to create the new key for the new dictionary.\n\n        Finally, the new dictionary is appended to the list of dictionaries.\n\n        Args:\n            data_values (Dict[str, Any]): The data as a dictionary.\n\n        Returns:\n            List[Dict[str, Any]]: The data as a list of dictionaries.\n        \"\"\"\n        data_list = []\n        if _key is None:\n            _key = []\n        for key, value in data_values.items():\n            if isinstance(value, dict):\n                _key.append(str(key))\n                data_list.extend(_convert(value, _key))\n                _key.pop()\n            elif isinstance(value, np.ndarray):\n                data_list.append({\"_\".join(_key + [key]): value})\n        return data_list\n\n    data_dict = {}\n    for key, value in pkl2any(infile, file_format).items():\n        if isinstance(value, dict):\n            data_dict[key] = _convert(value)\n    return data_dict\n</code></pre>"},{"location":"plugins/pkl_converter_visualization/#spectrafit.plugins.pkl_converter.PklConverter.get_args","title":"<code>get_args()</code>","text":"<p>Get the arguments from the command line.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Return the input file arguments as a dictionary without additional information beyond the command line arguments.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def get_args(self) -&gt; Dict[str, Any]:\n    \"\"\"Get the arguments from the command line.\n\n    Returns:\n        Dict[str, Any]: Return the input file arguments as a dictionary without\n            additional information beyond the command line arguments.\n    \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Converter for 'SpectraFit' from pkl files to CSV files.\",\n        usage=\"%(prog)s [options] infile\",\n    )\n    parser.add_argument(\n        \"infile\",\n        type=Path,\n        help=\"Filename of the pkl file to convert.\",\n    )\n    parser.add_argument(\n        \"-f\",\n        \"--file-format\",\n        help=\"File format for the optional encoding of the pickle file.\"\n        \" Default is 'latin1'.\",\n        type=str,\n        default=\"latin1\",\n        choices=self.choices_fformat,\n    )\n    parser.add_argument(\n        \"-e\",\n        \"--export-format\",\n        help=\"File format for export of the output file. Default is 'pkl'.\",\n        type=str,\n        default=\"pkl\",\n        choices=self.choices_export,\n    )\n    return vars(parser.parse_args())\n</code></pre>"},{"location":"plugins/pkl_converter_visualization/#spectrafit.plugins.pkl_converter.PklConverter.save","title":"<code>save(data, fname, export_format)</code>","text":"<p>Save the converted pickle data to a file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Any</code> <p>The converted nested dictionary of the pkl data.</p> required <code>fname</code> <code>Path</code> <p>The filename of the output file.</p> required <code>export_format</code> <code>str</code> <p>The file format of the output file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the export format is not supported.</p> Source code in <code>spectrafit/plugins/pkl_converter.py</code> Python<pre><code>def save(self, data: Any, fname: Path, export_format: str) -&gt; None:\n    \"\"\"Save the converted pickle data to a file.\n\n    Args:\n        data (Any): The converted nested dictionary of the pkl data.\n        fname (Path): The filename of the output file.\n        export_format (str): The file format of the output file.\n\n    Raises:\n        ValueError: If the export format is not supported.\n    \"\"\"\n    if export_format.lower() not in self.choices_export:\n        raise ValueError(f\"Unsupported file format '{export_format}'.\")\n\n    fname = pure_fname(fname)\n\n    for key, value in data.items():\n        _fname = Path(f\"{fname}_{key}\").with_suffix(f\".{export_format}\")\n        ExportData(data=value, fname=_fname, export_format=export_format)()\n</code></pre>"},{"location":"plugins/pkl_converter_visualization/#pkl-visualizer","title":"PKL Visualizer","text":"<p>The <code>spectrafit-pkl-visualizer</code> should be used for the visualization of the pkl files. It creates a graph of the pkl file and exports it as a graph file.</p> <p>The <code>spectrafit-pkl-visualizer</code> command line tool can be used like this:</p> Bash<pre><code>    \u279c spectrafit-pkl-visualizer -h\n    usage: spectrafit-pkl-visualizer [-h] [-f {utf-32,utf-16,latin1,utf-8}] [-e {jpg,pdf,jpeg,png}] infile\n\n    Converter for 'SpectraFit' from pkl files to a graph.\n\n    positional arguments:\n    infile                Filename of the pkl file to convert to graph.\n\n    options:\n    -h, --help            show this help message and exit\n    -f {latin1,utf-16,utf-8,utf-32}, --file-format {latin1,utf-16,utf-8,utf-32}\n                            File format for the optional encoding of the pickle file. Default is 'latin1'.\n    -e {jpg,pdf,jpeg,png}, --export-format {jpg,pdf,jpeg,png}\n                            File extension for the graph export.\n</code></pre> <p>Furthermore the <code>spectrafit-pkl-visualizer</code> allows export the structure of the pkl file as a JSON file. The information about the attributes and their structure is stored in the JSON file. The following example shows the structure of the JSON file:</p> Example of the JSON file JSON<pre><code>{\n  \"file_1\": {\n    \"attribute_1\": \"&lt;class 'list'&gt;\",\n    \"attribute_2\": \"&lt;class 'str'&gt;\",\n    \"attribute_3\": \"&lt;class 'numpy.ndarray'&gt; of shape (201,)\",\n    \"attribute_4\": \"&lt;class 'numpy.ndarray'&gt; of shape (199,)\",\n    \"attribute_5\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_6\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_7\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_8\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_9\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_10\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_11\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_12\": \"&lt;class 'numpy.ndarray'&gt; of shape (10000,)\",\n    \"attribute_13\": \"&lt;class 'list'&gt;\",\n    \"attribute_14\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201)\",\n    \"attribute_16\": \"&lt;class 'int'&gt;\",\n    \"attribute_17\": \"&lt;class 'str'&gt;\",\n    \"attribute_19\": \"&lt;class 'str'&gt;\"\n  },\n  \"file_2\": {\n    \"attribute_1\": \"&lt;class 'list'&gt;\",\n    \"attribute_2\": \"&lt;class 'str'&gt;\",\n    \"attribute_3\": \"&lt;class 'numpy.ndarray'&gt; of shape (201,)\",\n    \"attribute_4\": \"&lt;class 'numpy.ndarray'&gt; of shape (199,)\",\n    \"attribute_5\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_6\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_7\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201, 10000)\",\n    \"attribute_8\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_9\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_10\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_11\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 199, 10000)\",\n    \"attribute_12\": \"&lt;class 'numpy.ndarray'&gt; of shape (10000,)\",\n    \"attribute_13\": \"&lt;class 'list'&gt;\",\n    \"attribute_14\": \"&lt;class 'numpy.ndarray'&gt; of shape (10, 201)\",\n    \"attribute_16\": \"&lt;class 'int'&gt;\",\n    \"attribute_17\": \"&lt;class 'str'&gt;\",\n    \"attribute_19\": \"&lt;class 'str'&gt;\"\n  }\n}\n</code></pre> <p>Example of the graph</p> <p>The resulting graph looks like this:</p> <p></p>"},{"location":"plugins/pptx_converter/","title":"PPTX-Converter","text":"<p>About the PPTX Converter</p> <p>The <code>spectrafit-pptx-converter</code> command line tool allows to convert parts of the Spectrafit's <code>*.lock</code>-files into a PowerPoint presentation. The <code>*.lock</code>-files are created by the Spectrafit-Notebook-Plugin and contain the following information:</p> <ul> <li> A fitting plot of the data with the fit results and the residuals.</li> <li> Three tables for:<ul> <li> The Goodness of Fit (GoF) parameters.</li> <li> The regression metrics.</li> <li> The fit parameters.</li> </ul> </li> </ul> <p>The <code>spectrafit-pptx-converter</code> is still in development</p> <p>The <code>spectrafit-pptx-converter</code> is still in development and the <code>spectrafit-pptx-converter</code> command line tool is not yet available.</p>"},{"location":"plugins/pptx_converter/#pptx-converter","title":"PPTX Converter","text":"<p>The <code>spectrafit-pptx-converter</code> command line tool can be used like this:</p> Bash<pre><code>    \u279c spectrafit-pptx-converter -h\n    usage: spectrafit-pptx-converter [options] infile\n\n    Converter for 'SpectraFit' from *.lock output to a PowerPoint presentation.\n\n    positional arguments:\n    infile                Filename of the *.lock file to convert to a powerpoint presentation.\n\n    options:\n    -h, --help            show this help message and exit\n    -f {16:9,16:9HDR,4:3}, --file-format {16:9,16:9HDR,4:3}\n                            File format of the PowerPoint presentation. Default is '16:9'.\n</code></pre> <p>The following export formats are supported:</p> <ul> <li> <code>16:9</code>: PowerPoint presentation with the format <code>16:9</code> (width: 1280px,       height: 720px).</li> <li> <code>16:9HDR</code>: PowerPoint presentation with the format <code>16:9HDR</code> (width:       1920px, height: 1080px).</li> <li> <code>4:3</code>: PowerPoint presentation with the format <code>4:3</code> (width: 960px,       height: 720px).</li> </ul> <p>Example of the PPTX Converter</p> <p>The resulting graph looks like this:</p> <p></p>"},{"location":"plugins/rixs_converter/","title":"RIXS-Converter","text":"<p>About RIXS Converter</p> <p>The <code>spectrafit-rixs-converter</code> allows to convert <code>SpectraFit</code> pkl files to a <code>json</code>, <code>toml</code>, <code>npy</code>, or <code>npz</code> file. The <code>npy</code> or <code>npz</code> files are the prefered format, since they are the most compact and fast to load. The <code>json</code> and <code>toml</code> files are also supported, but they are not as compact as the <code>npy</code> or <code>npz</code> files. The <code>json</code> and <code>toml</code> files are also slower to load, since they are not binary files.</p> <p>The <code>spectrafit-rixs-converter</code> command line tool can be used like this:</p> Bash<pre><code>\u279c spectrafit-rixs-converter -h\nusage: spectrafit-rixs-converter [-h] [-f {latin1,utf-8,utf-32,utf-16}] [-e {toml,npy,lock,json,npz}] [-ie INCIDENT_ENERGY] [-ee EMISSION_ENERGY] [-rm RIXS_MAP] [-m {sum,mean}]\n                                 infile\n\nConverter for 'SpectraFit' from pkl files to a JSON, TOML, or numpy file for RIXS-Visualizer.\n\npositional arguments:\n  infile                Filename of the pkl file to convert to JSON, TOML, or numpy.\n\noptions:\n  -h, --help            show this help message and exit\n  -f {latin1,utf-8,utf-32,utf-16}, --file-format {latin1,utf-8,utf-32,utf-16}\n                        File format for the optional encoding of the pickle file. Default is 'latin1'.\n  -e {toml,npy,lock,json,npz}, --export-format {toml,npy,lock,json,npz}\n                        File extension for the export.\n  -ie INCIDENT_ENERGY, --incident_energy INCIDENT_ENERGY\n                        Name of the incident energy\n  -ee EMISSION_ENERGY, --emission_energy EMISSION_ENERGY\n                        Name of the emitted energy\n  -rm RIXS_MAP, --rixs_map RIXS_MAP\n                        Name of the RIXS map\n  -m {sum,mean}, --mode {sum,mean}\n                        Mode of the RIXS map post-processing, e.g. 'sum' or 'max'.Default is 'sum'.\n</code></pre> <p>Furthermore, the <code>spectrafit-rixs-converter</code> allows to sum or average the <code>RIXS-Map</code>. For the conversion, the <code>spectrafit-rixs-converter</code> requires the three keys for the <code>RIXS-Map</code>:</p> <ul> <li><code>incident_energy</code> \u2192 the dictionary-key, which should to load the   <code>incident_energy</code> from the pkl file.</li> <li><code>emission_energy</code>\u2192 the dictionary-key, which should to load the   <code>emission_energy</code> from the pkl file.</li> <li><code>rixs_map</code>\u2192 the dictionary-key, which should to load the <code>rixs_map</code> from   the pkl file.</li> </ul> <p>The name of three options are also used as keys in the output file and cannot be changed because it allows to load the data in the <code>RIXS-Visualizer</code> without specifying the keys.</p> Python<pre><code>from spectrafit.plugins.pkl_converter import PklConverter\nfrom spectrafit.plugins.rixs_converter import RIXSConverter\nfrom spectrafit.plugins.rixs_visualizer import RIXSApp\n\npkl_data = PklConverter.convert(\n    infile=\"test.pkl\",\n)\nrixs_data = RIXSConverter.convert(\n    infile=\"test.pkl\",\n)\nRIXSApp(**rixs_data).app_run()\n</code></pre>"},{"location":"plugins/rixs_visualization/","title":"RIXS-Visualization","text":"<p>The <code>spectrafit-rixs-visualizer</code> allows to visualize RIXS data in a 2D plane. The initial data can be a <code>json</code>, <code>toml</code>, <code>npy</code>, or <code>npz</code> file. The <code>npy</code> or <code>npz</code> files are the prefered format, since they are the most compact and fast to load. The <code>json</code> and <code>toml</code> files are also supported, but they are not as compact as the <code>npy</code> or <code>npz</code> files. The <code>json</code> and <code>toml</code> files are also slower to load, since they are not binary files.</p> Bash<pre><code>    \u279c spectrafit-rixs-visualizer -h\n    usage: spectrafit-rixs-visualizer [-h] infile\n\n    `RIXS-Visualizer` is a simple RIXS plane viewer, which allows to visualize RIXS data in a 2D plane.\n\n    positional arguments:\n    infile      The input file. This can be a json, toml, npy, or npz file.\n\n    options:\n    -h, --help  show this help message and exit\n</code></pre> <p>The <code>spectrafit-rixs-visualizer</code> based in</p>"}]}